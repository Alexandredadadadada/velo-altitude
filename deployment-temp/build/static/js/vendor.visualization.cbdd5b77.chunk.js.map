{"version":3,"file":"static/js/vendor.visualization.cbdd5b77.chunk.js","mappings":"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","sources":["webpack://dashboard-velo/./node_modules/chart.js/dist/chunks/helpers.segment.js","webpack://dashboard-velo/./node_modules/chart.js/dist/chart.js"],"sourcesContent":["/*!\n * Chart.js v4.4.8\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { Color } from '@kurkle/color';\n\n/**\n * @namespace Chart.helpers\n */ /**\n * An empty function that can be used, for example, for optional callback.\n */ function noop() {\n/* noop */ }\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */ const uid = (()=>{\n    let id = 0;\n    return ()=>id++;\n})();\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isNullOrUndef(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */ function isArray(value) {\n    if (Array.isArray && Array.isArray(value)) {\n        return true;\n    }\n    const type = Object.prototype.toString.call(value);\n    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n        return true;\n    }\n    return false;\n}\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isObject(value) {\n    return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */ function isNumberFinite(value) {\n    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n}\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */ function finiteOrDefault(value, defaultValue) {\n    return isNumberFinite(value) ? value : defaultValue;\n}\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */ function valueOrDefault(value, defaultValue) {\n    return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;\nconst toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */ function callback(fn, args, thisArg) {\n    if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n    }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n    let i, len, keys;\n    if (isArray(loopable)) {\n        len = loopable.length;\n        if (reverse) {\n            for(i = len - 1; i >= 0; i--){\n                fn.call(thisArg, loopable[i], i);\n            }\n        } else {\n            for(i = 0; i < len; i++){\n                fn.call(thisArg, loopable[i], i);\n            }\n        }\n    } else if (isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n        for(i = 0; i < len; i++){\n            fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n    }\n}\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */ function _elementsEqual(a0, a1) {\n    let i, ilen, v0, v1;\n    if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n    }\n    for(i = 0, ilen = a0.length; i < ilen; ++i){\n        v0 = a0[i];\n        v1 = a1[i];\n        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */ function clone(source) {\n    if (isArray(source)) {\n        return source.map(clone);\n    }\n    if (isObject(source)) {\n        const target = Object.create(null);\n        const keys = Object.keys(source);\n        const klen = keys.length;\n        let k = 0;\n        for(; k < klen; ++k){\n            target[keys[k]] = clone(source[keys[k]]);\n        }\n        return target;\n    }\n    return source;\n}\nfunction isValidKey(key) {\n    return [\n        '__proto__',\n        'prototype',\n        'constructor'\n    ].indexOf(key) === -1;\n}\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */ function _merger(key, target, source, options) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        merge(tval, sval, options);\n    } else {\n        target[key] = clone(sval);\n    }\n}\nfunction merge(target, source, options) {\n    const sources = isArray(source) ? source : [\n        source\n    ];\n    const ilen = sources.length;\n    if (!isObject(target)) {\n        return target;\n    }\n    options = options || {};\n    const merger = options.merger || _merger;\n    let current;\n    for(let i = 0; i < ilen; ++i){\n        current = sources[i];\n        if (!isObject(current)) {\n            continue;\n        }\n        const keys = Object.keys(current);\n        for(let k = 0, klen = keys.length; k < klen; ++k){\n            merger(keys[k], target, current, options);\n        }\n    }\n    return target;\n}\nfunction mergeIf(target, source) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return merge(target, source, {\n        merger: _mergerIf\n    });\n}\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */ function _mergerIf(key, target, source) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        mergeIf(tval, sval);\n    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n        target[key] = clone(sval);\n    }\n}\n/**\n * @private\n */ function _deprecated(scope, value, previous, current) {\n    if (value !== undefined) {\n        console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n    }\n}\n// resolveObjectKey resolver cache\nconst keyResolvers = {\n    // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n    '': (v)=>v,\n    // default resolvers\n    x: (o)=>o.x,\n    y: (o)=>o.y\n};\n/**\n * @private\n */ function _splitKey(key) {\n    const parts = key.split('.');\n    const keys = [];\n    let tmp = '';\n    for (const part of parts){\n        tmp += part;\n        if (tmp.endsWith('\\\\')) {\n            tmp = tmp.slice(0, -1) + '.';\n        } else {\n            keys.push(tmp);\n            tmp = '';\n        }\n    }\n    return keys;\n}\nfunction _getKeyResolver(key) {\n    const keys = _splitKey(key);\n    return (obj)=>{\n        for (const k of keys){\n            if (k === '') {\n                break;\n            }\n            obj = obj && obj[k];\n        }\n        return obj;\n    };\n}\nfunction resolveObjectKey(obj, key) {\n    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n    return resolver(obj);\n}\n/**\n * @private\n */ function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value)=>typeof value !== 'undefined';\nconst isFunction = (value)=>typeof value === 'function';\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nconst setsEqual = (a, b)=>{\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const item of a){\n        if (!b.has(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * @param e - The event\n * @private\n */ function _isClickEvent(e) {\n    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */ const PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction almostEquals(x, y, epsilon) {\n    return Math.abs(x - y) < epsilon;\n}\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */ function niceNum(range) {\n    const roundedRange = Math.round(range);\n    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n    const niceRange = Math.pow(10, Math.floor(log10(range)));\n    const fraction = range / niceRange;\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n    return niceFraction * niceRange;\n}\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */ function _factorize(value) {\n    const result = [];\n    const sqrt = Math.sqrt(value);\n    let i;\n    for(i = 1; i < sqrt; i++){\n        if (value % i === 0) {\n            result.push(i);\n            result.push(value / i);\n        }\n    }\n    if (sqrt === (sqrt | 0)) {\n        result.push(sqrt);\n    }\n    result.sort((a, b)=>a - b).pop();\n    return result;\n}\n/**\n * Verifies that attempting to coerce n to string or number won't throw a TypeError.\n */ function isNonPrimitive(n) {\n    return typeof n === 'symbol' || typeof n === 'object' && n !== null && !(Symbol.toPrimitive in n || 'toString' in n || 'valueOf' in n);\n}\nfunction isNumber(n) {\n    return !isNonPrimitive(n) && !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostWhole(x, epsilon) {\n    const rounded = Math.round(x);\n    return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n/**\n * @private\n */ function _setMinAndMaxByKey(array, target, property) {\n    let i, ilen, value;\n    for(i = 0, ilen = array.length; i < ilen; i++){\n        value = array[i][property];\n        if (!isNaN(value)) {\n            target.min = Math.min(target.min, value);\n            target.max = Math.max(target.max, value);\n        }\n    }\n}\nfunction toRadians(degrees) {\n    return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n    return radians * (180 / PI);\n}\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */ function _decimalPlaces(x) {\n    if (!isNumberFinite(x)) {\n        return;\n    }\n    let e = 1;\n    let p = 0;\n    while(Math.round(x * e) / e !== x){\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n// Gets the angle from vertical upright to the point about a centre.\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n    if (angle < -0.5 * PI) {\n        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n    }\n    return {\n        angle,\n        distance: radialDistanceFromCenter\n    };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */ function _angleDiff(a, b) {\n    return (a - b + PITAU) % TAU - PI;\n}\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */ function _normalizeAngle(a) {\n    return (a % TAU + TAU) % TAU;\n}\n/**\n * @private\n */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n    const a = _normalizeAngle(angle);\n    const s = _normalizeAngle(start);\n    const e = _normalizeAngle(end);\n    const angleToStart = _normalizeAngle(s - a);\n    const angleToEnd = _normalizeAngle(e - a);\n    const startToAngle = _normalizeAngle(a - s);\n    const endToAngle = _normalizeAngle(a - e);\n    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */ function _limitValue(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * @param {number} value\n * @private\n */ function _int16Range(value) {\n    return _limitValue(value, -32768, 32767);\n}\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */ function _isBetween(value, start, end, epsilon = 1e-6) {\n    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n    cmp = cmp || ((index)=>table[index] < value);\n    let hi = table.length - 1;\n    let lo = 0;\n    let mid;\n    while(hi - lo > 1){\n        mid = lo + hi >> 1;\n        if (cmp(mid)) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n    return {\n        lo,\n        hi\n    };\n}\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{\n        const ti = table[index][key];\n        return ti < value || ti === value && table[index + 1][key] === value;\n    } : (index)=>table[index][key] < value);\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */ function _filterBetween(values, min, max) {\n    let start = 0;\n    let end = values.length;\n    while(start < end && values[start] < min){\n        start++;\n    }\n    while(end > start && values[end - 1] > max){\n        end--;\n    }\n    return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\nconst arrayEvents = [\n    'push',\n    'pop',\n    'shift',\n    'splice',\n    'unshift'\n];\nfunction listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n        array._chartjs.listeners.push(listener);\n        return;\n    }\n    Object.defineProperty(array, '_chartjs', {\n        configurable: true,\n        enumerable: false,\n        value: {\n            listeners: [\n                listener\n            ]\n        }\n    });\n    arrayEvents.forEach((key)=>{\n        const method = '_onData' + _capitalize(key);\n        const base = array[key];\n        Object.defineProperty(array, key, {\n            configurable: true,\n            enumerable: false,\n            value (...args) {\n                const res = base.apply(this, args);\n                array._chartjs.listeners.forEach((object)=>{\n                    if (typeof object[method] === 'function') {\n                        object[method](...args);\n                    }\n                });\n                return res;\n            }\n        });\n    });\n}\nfunction unlistenArrayEvents(array, listener) {\n    const stub = array._chartjs;\n    if (!stub) {\n        return;\n    }\n    const listeners = stub.listeners;\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n        listeners.splice(index, 1);\n    }\n    if (listeners.length > 0) {\n        return;\n    }\n    arrayEvents.forEach((key)=>{\n        delete array[key];\n    });\n    delete array._chartjs;\n}\n/**\n * @param items\n */ function _arrayUnique(items) {\n    const set = new Set(items);\n    if (set.size === items.length) {\n        return items;\n    }\n    return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n/**\n* Request animation polyfill\n*/ const requestAnimFrame = function() {\n    if (typeof window === 'undefined') {\n        return function(callback) {\n            return callback();\n        };\n    }\n    return window.requestAnimationFrame;\n}();\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */ function throttled(fn, thisArg) {\n    let argsToUse = [];\n    let ticking = false;\n    return function(...args) {\n        // Save the args for use later\n        argsToUse = args;\n        if (!ticking) {\n            ticking = true;\n            requestAnimFrame.call(window, ()=>{\n                ticking = false;\n                fn.apply(thisArg, argsToUse);\n            });\n        }\n    };\n}\n/**\n * Debounces calling `fn` for `delay` ms\n */ function debounce(fn, delay) {\n    let timeout;\n    return function(...args) {\n        if (delay) {\n            clearTimeout(timeout);\n            timeout = setTimeout(fn, delay, args);\n        } else {\n            fn.apply(this, args);\n        }\n        return delay;\n    };\n}\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */ const _textX = (align, left, right, rtl)=>{\n    const check = rtl ? 'left' : 'right';\n    return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n/**\n * Return start and count of visible points.\n * @private\n */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n    const pointCount = points.length;\n    let start = 0;\n    let count = pointCount;\n    if (meta._sorted) {\n        const { iScale , vScale , _parsed  } = meta;\n        const spanGaps = meta.dataset ? meta.dataset.options ? meta.dataset.options.spanGaps : null : null;\n        const axis = iScale.axis;\n        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n        if (minDefined) {\n            start = Math.min(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo);\n            if (spanGaps) {\n                const distanceToDefinedLo = _parsed.slice(0, start + 1).reverse().findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                start -= Math.max(0, distanceToDefinedLo);\n            }\n            start = _limitValue(start, 0, pointCount - 1);\n        }\n        if (maxDefined) {\n            let end = Math.max(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1);\n            if (spanGaps) {\n                const distanceToDefinedHi = _parsed.slice(end - 1).findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                end += Math.max(0, distanceToDefinedHi);\n            }\n            count = _limitValue(end, start, pointCount) - start;\n        } else {\n            count = pointCount - start;\n        }\n    }\n    return {\n        start,\n        count\n    };\n}\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */ function _scaleRangesChanged(meta) {\n    const { xScale , yScale , _scaleRanges  } = meta;\n    const newRanges = {\n        xmin: xScale.min,\n        xmax: xScale.max,\n        ymin: yScale.min,\n        ymax: yScale.max\n    };\n    if (!_scaleRanges) {\n        meta._scaleRanges = newRanges;\n        return true;\n    }\n    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n    Object.assign(_scaleRanges, newRanges);\n    return changed;\n}\n\nconst atEdge = (t)=>t === 0 || t === 1;\nconst elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */ const effects = {\n    linear: (t)=>t,\n    easeInQuad: (t)=>t * t,\n    easeOutQuad: (t)=>-t * (t - 2),\n    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n    easeInCubic: (t)=>t * t * t,\n    easeOutCubic: (t)=>(t -= 1) * t * t + 1,\n    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n    easeInQuart: (t)=>t * t * t * t,\n    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),\n    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n    easeInQuint: (t)=>t * t * t * t * t,\n    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,\n    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,\n    easeOutSine: (t)=>Math.sin(t * HALF_PI),\n    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),\n    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n    easeInOutElastic (t) {\n        const s = 0.1125;\n        const p = 0.45;\n        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n    },\n    easeInBack (t) {\n        const s = 1.70158;\n        return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack (t) {\n        const s = 1.70158;\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack (t) {\n        let s = 1.70158;\n        if ((t /= 0.5) < 1) {\n            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n        }\n        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),\n    easeOutBounce (t) {\n        const m = 7.5625;\n        const d = 2.75;\n        if (t < 1 / d) {\n            return m * t * t;\n        }\n        if (t < 2 / d) {\n            return m * (t -= 1.5 / d) * t + 0.75;\n        }\n        if (t < 2.5 / d) {\n            return m * (t -= 2.25 / d) * t + 0.9375;\n        }\n        return m * (t -= 2.625 / d) * t + 0.984375;\n    },\n    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n};\n\nfunction isPatternOrGradient(value) {\n    if (value && typeof value === 'object') {\n        const type = value.toString();\n        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n    }\n    return false;\n}\nfunction color(value) {\n    return isPatternOrGradient(value) ? value : new Color(value);\n}\nfunction getHoverColor(value) {\n    return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst numbers = [\n    'x',\n    'y',\n    'borderWidth',\n    'radius',\n    'tension'\n];\nconst colors = [\n    'color',\n    'borderColor',\n    'backgroundColor'\n];\nfunction applyAnimationsDefaults(defaults) {\n    defaults.set('animation', {\n        delay: undefined,\n        duration: 1000,\n        easing: 'easeOutQuart',\n        fn: undefined,\n        from: undefined,\n        loop: undefined,\n        to: undefined,\n        type: undefined\n    });\n    defaults.describe('animation', {\n        _fallback: false,\n        _indexable: false,\n        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'\n    });\n    defaults.set('animations', {\n        colors: {\n            type: 'color',\n            properties: colors\n        },\n        numbers: {\n            type: 'number',\n            properties: numbers\n        }\n    });\n    defaults.describe('animations', {\n        _fallback: 'animation'\n    });\n    defaults.set('transitions', {\n        active: {\n            animation: {\n                duration: 400\n            }\n        },\n        resize: {\n            animation: {\n                duration: 0\n            }\n        },\n        show: {\n            animations: {\n                colors: {\n                    from: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    duration: 0\n                }\n            }\n        },\n        hide: {\n            animations: {\n                colors: {\n                    to: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    easing: 'linear',\n                    fn: (v)=>v | 0\n                }\n            }\n        }\n    });\n}\n\nfunction applyLayoutsDefaults(defaults) {\n    defaults.set('layout', {\n        autoPadding: true,\n        padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    });\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n    options = options || {};\n    const cacheKey = locale + JSON.stringify(options);\n    let formatter = intlCache.get(cacheKey);\n    if (!formatter) {\n        formatter = new Intl.NumberFormat(locale, options);\n        intlCache.set(cacheKey, formatter);\n    }\n    return formatter;\n}\nfunction formatNumber(num, locale, options) {\n    return getNumberFormat(locale, options).format(num);\n}\n\nconst formatters = {\n values (value) {\n        return isArray(value) ?  value : '' + value;\n    },\n numeric (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const locale = this.chart.options.locale;\n        let notation;\n        let delta = tickValue;\n        if (ticks.length > 1) {\n            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n            if (maxTick < 1e-4 || maxTick > 1e+15) {\n                notation = 'scientific';\n            }\n            delta = calculateDelta(tickValue, ticks);\n        }\n        const logDelta = log10(Math.abs(delta));\n        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n        const options = {\n            notation,\n            minimumFractionDigits: numDecimal,\n            maximumFractionDigits: numDecimal\n        };\n        Object.assign(options, this.options.ticks.format);\n        return formatNumber(tickValue, locale, options);\n    },\n logarithmic (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));\n        if ([\n            1,\n            2,\n            3,\n            5,\n            10,\n            15\n        ].includes(remain) || index > 0.8 * ticks.length) {\n            return formatters.numeric.call(this, tickValue, index, ticks);\n        }\n        return '';\n    }\n};\nfunction calculateDelta(tickValue, ticks) {\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n        delta = tickValue - Math.floor(tickValue);\n    }\n    return delta;\n}\n var Ticks = {\n    formatters\n};\n\nfunction applyScaleDefaults(defaults) {\n    defaults.set('scale', {\n        display: true,\n        offset: false,\n        reverse: false,\n        beginAtZero: false,\n bounds: 'ticks',\n        clip: true,\n grace: 0,\n        grid: {\n            display: true,\n            lineWidth: 1,\n            drawOnChartArea: true,\n            drawTicks: true,\n            tickLength: 8,\n            tickWidth: (_ctx, options)=>options.lineWidth,\n            tickColor: (_ctx, options)=>options.color,\n            offset: false\n        },\n        border: {\n            display: true,\n            dash: [],\n            dashOffset: 0.0,\n            width: 1\n        },\n        title: {\n            display: false,\n            text: '',\n            padding: {\n                top: 4,\n                bottom: 4\n            }\n        },\n        ticks: {\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: false,\n            textStrokeWidth: 0,\n            textStrokeColor: '',\n            padding: 3,\n            display: true,\n            autoSkip: true,\n            autoSkipPadding: 3,\n            labelOffset: 0,\n            callback: Ticks.formatters.values,\n            minor: {},\n            major: {},\n            align: 'center',\n            crossAlign: 'near',\n            showLabelBackdrop: false,\n            backdropColor: 'rgba(255, 255, 255, 0.75)',\n            backdropPadding: 2\n        }\n    });\n    defaults.route('scale.ticks', 'color', '', 'color');\n    defaults.route('scale.grid', 'color', '', 'borderColor');\n    defaults.route('scale.border', 'color', '', 'borderColor');\n    defaults.route('scale.title', 'color', '', 'color');\n    defaults.describe('scale', {\n        _fallback: false,\n        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'\n    });\n    defaults.describe('scales', {\n        _fallback: 'scale'\n    });\n    defaults.describe('scale.ticks', {\n        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',\n        _indexable: (name)=>name !== 'backdropPadding'\n    });\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\n function getScope$1(node, key) {\n    if (!key) {\n        return node;\n    }\n    const keys = key.split('.');\n    for(let i = 0, n = keys.length; i < n; ++i){\n        const k = keys[i];\n        node = node[k] || (node[k] = Object.create(null));\n    }\n    return node;\n}\nfunction set(root, scope, values) {\n    if (typeof scope === 'string') {\n        return merge(getScope$1(root, scope), values);\n    }\n    return merge(getScope$1(root, ''), scope);\n}\n class Defaults {\n    constructor(_descriptors, _appliers){\n        this.animation = undefined;\n        this.backgroundColor = 'rgba(0,0,0,0.1)';\n        this.borderColor = 'rgba(0,0,0,0.1)';\n        this.color = '#666';\n        this.datasets = {};\n        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();\n        this.elements = {};\n        this.events = [\n            'mousemove',\n            'mouseout',\n            'click',\n            'touchstart',\n            'touchmove'\n        ];\n        this.font = {\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            size: 12,\n            style: 'normal',\n            lineHeight: 1.2,\n            weight: null\n        };\n        this.hover = {};\n        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);\n        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);\n        this.hoverColor = (ctx, options)=>getHoverColor(options.color);\n        this.indexAxis = 'x';\n        this.interaction = {\n            mode: 'nearest',\n            intersect: true,\n            includeInvisible: false\n        };\n        this.maintainAspectRatio = true;\n        this.onHover = null;\n        this.onClick = null;\n        this.parsing = true;\n        this.plugins = {};\n        this.responsive = true;\n        this.scale = undefined;\n        this.scales = {};\n        this.showLine = true;\n        this.drawActiveElementsOnTop = true;\n        this.describe(_descriptors);\n        this.apply(_appliers);\n    }\n set(scope, values) {\n        return set(this, scope, values);\n    }\n get(scope) {\n        return getScope$1(this, scope);\n    }\n describe(scope, values) {\n        return set(descriptors, scope, values);\n    }\n    override(scope, values) {\n        return set(overrides, scope, values);\n    }\n route(scope, name, targetScope, targetName) {\n        const scopeObject = getScope$1(this, scope);\n        const targetScopeObject = getScope$1(this, targetScope);\n        const privateName = '_' + name;\n        Object.defineProperties(scopeObject, {\n            [privateName]: {\n                value: scopeObject[name],\n                writable: true\n            },\n            [name]: {\n                enumerable: true,\n                get () {\n                    const local = this[privateName];\n                    const target = targetScopeObject[targetName];\n                    if (isObject(local)) {\n                        return Object.assign({}, target, local);\n                    }\n                    return valueOrDefault(local, target);\n                },\n                set (value) {\n                    this[privateName] = value;\n                }\n            }\n        });\n    }\n    apply(appliers) {\n        appliers.forEach((apply)=>apply(this));\n    }\n}\nvar defaults = /* #__PURE__ */ new Defaults({\n    _scriptable: (name)=>!name.startsWith('on'),\n    _indexable: (name)=>name !== 'events',\n    hover: {\n        _fallback: 'interaction'\n    },\n    interaction: {\n        _scriptable: false,\n        _indexable: false\n    }\n}, [\n    applyAnimationsDefaults,\n    applyLayoutsDefaults,\n    applyScaleDefaults\n]);\n\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */ function toFontString(font) {\n    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n        return null;\n    }\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n}\n/**\n * @private\n */ function _measureText(ctx, data, gc, longest, string) {\n    let textWidth = data[string];\n    if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n    }\n    if (textWidth > longest) {\n        longest = textWidth;\n    }\n    return longest;\n}\n/**\n * @private\n */ // eslint-disable-next-line complexity\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n    cache = cache || {};\n    let data = cache.data = cache.data || {};\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\n    if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n    }\n    ctx.save();\n    ctx.font = font;\n    let longest = 0;\n    const ilen = arrayOfThings.length;\n    let i, j, jlen, thing, nestedThing;\n    for(i = 0; i < ilen; i++){\n        thing = arrayOfThings[i];\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && !isArray(thing)) {\n            longest = _measureText(ctx, data, gc, longest, thing);\n        } else if (isArray(thing)) {\n            // if it is an array lets measure each element\n            // to do maybe simplify this function a bit so we can do this more recursively?\n            for(j = 0, jlen = thing.length; j < jlen; j++){\n                nestedThing = thing[j];\n                // Undefined strings and arrays should not be measured\n                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n                    longest = _measureText(ctx, data, gc, longest, nestedThing);\n                }\n            }\n        }\n    }\n    ctx.restore();\n    const gcLen = gc.length / 2;\n    if (gcLen > arrayOfThings.length) {\n        for(i = 0; i < gcLen; i++){\n            delete data[gc[i]];\n        }\n        gc.splice(0, gcLen);\n    }\n    return longest;\n}\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */ function _alignPixel(chart, pixel, width) {\n    const devicePixelRatio = chart.currentDevicePixelRatio;\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n/**\n * Clears the entire canvas.\n */ function clearCanvas(canvas, ctx) {\n    if (!ctx && !canvas) {\n        return;\n    }\n    ctx = ctx || canvas.getContext('2d');\n    ctx.save();\n    // canvas.width and canvas.height do not consider the canvas transform,\n    // while clearRect does\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    drawPointLegend(ctx, options, x, y, null);\n}\n// eslint-disable-next-line complexity\nfunction drawPointLegend(ctx, options, x, y, w) {\n    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    const radius = options.radius;\n    let rad = (rotation || 0) * RAD_PER_DEG;\n    if (style && typeof style === 'object') {\n        type = style.toString();\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(rad);\n            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n            ctx.restore();\n            return;\n        }\n    }\n    if (isNaN(radius) || radius <= 0) {\n        return;\n    }\n    ctx.beginPath();\n    switch(style){\n        // Default includes circle\n        default:\n            if (w) {\n                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n            } else {\n                ctx.arc(x, y, radius, 0, TAU);\n            }\n            ctx.closePath();\n            break;\n        case 'triangle':\n            width = w ? w / 2 : radius;\n            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            ctx.closePath();\n            break;\n        case 'rectRounded':\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\n            // `quadraticCurveTo` since it generates better results when rect is\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\n            // closer proportion to the previous impl and it is inscribed in the\n            // circle with `radius`. For more details, see the following PRs:\n            // https://github.com/chartjs/Chart.js/issues/5597\n            // https://github.com/chartjs/Chart.js/issues/5858\n            cornerRadius = radius * 0.516;\n            size = radius - cornerRadius;\n            xOffset = Math.cos(rad + QUARTER_PI) * size;\n            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            yOffset = Math.sin(rad + QUARTER_PI) * size;\n            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n            ctx.closePath();\n            break;\n        case 'rect':\n            if (!rotation) {\n                size = Math.SQRT1_2 * radius;\n                width = w ? w / 2 : size;\n                ctx.rect(x - width, y - size, 2 * width, 2 * size);\n                break;\n            }\n            rad += QUARTER_PI;\n        /* falls through */ case 'rectRot':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            ctx.closePath();\n            break;\n        case 'crossRot':\n            rad += QUARTER_PI;\n        /* falls through */ case 'cross':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'star':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            rad += QUARTER_PI;\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'line':\n            xOffset = w ? w / 2 : Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            break;\n        case 'dash':\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n            break;\n        case false:\n            ctx.closePath();\n            break;\n    }\n    ctx.fill();\n    if (options.borderWidth > 0) {\n        ctx.stroke();\n    }\n}\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */ function _isPointInArea(point, area, margin) {\n    margin = margin || 0.5; // margin - default is to match rounded decimals\n    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\nfunction clipArea(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n}\nfunction unclipArea(ctx) {\n    ctx.restore();\n}\n/**\n * @private\n */ function _steppedLineTo(ctx, previous, target, flip, mode) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    if (mode === 'middle') {\n        const midpoint = (previous.x + target.x) / 2.0;\n        ctx.lineTo(midpoint, previous.y);\n        ctx.lineTo(midpoint, target.y);\n    } else if (mode === 'after' !== !!flip) {\n        ctx.lineTo(previous.x, target.y);\n    } else {\n        ctx.lineTo(target.x, previous.y);\n    }\n    ctx.lineTo(target.x, target.y);\n}\n/**\n * @private\n */ function _bezierCurveTo(ctx, previous, target, flip) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\nfunction setRenderOpts(ctx, opts) {\n    if (opts.translation) {\n        ctx.translate(opts.translation[0], opts.translation[1]);\n    }\n    if (!isNullOrUndef(opts.rotation)) {\n        ctx.rotate(opts.rotation);\n    }\n    if (opts.color) {\n        ctx.fillStyle = opts.color;\n    }\n    if (opts.textAlign) {\n        ctx.textAlign = opts.textAlign;\n    }\n    if (opts.textBaseline) {\n        ctx.textBaseline = opts.textBaseline;\n    }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n    if (opts.strikethrough || opts.underline) {\n        /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */ const metrics = ctx.measureText(line);\n        const left = x - metrics.actualBoundingBoxLeft;\n        const right = x + metrics.actualBoundingBoxRight;\n        const top = y - metrics.actualBoundingBoxAscent;\n        const bottom = y + metrics.actualBoundingBoxDescent;\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.lineWidth = opts.decorationWidth || 2;\n        ctx.moveTo(left, yDecoration);\n        ctx.lineTo(right, yDecoration);\n        ctx.stroke();\n    }\n}\nfunction drawBackdrop(ctx, opts) {\n    const oldColor = ctx.fillStyle;\n    ctx.fillStyle = opts.color;\n    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n    ctx.fillStyle = oldColor;\n}\n/**\n * Render text onto the canvas\n */ function renderText(ctx, text, x, y, font, opts = {}) {\n    const lines = isArray(text) ? text : [\n        text\n    ];\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n    let i, line;\n    ctx.save();\n    ctx.font = font.string;\n    setRenderOpts(ctx, opts);\n    for(i = 0; i < lines.length; ++i){\n        line = lines[i];\n        if (opts.backdrop) {\n            drawBackdrop(ctx, opts.backdrop);\n        }\n        if (stroke) {\n            if (opts.strokeColor) {\n                ctx.strokeStyle = opts.strokeColor;\n            }\n            if (!isNullOrUndef(opts.strokeWidth)) {\n                ctx.lineWidth = opts.strokeWidth;\n            }\n            ctx.strokeText(line, x, y, opts.maxWidth);\n        }\n        ctx.fillText(line, x, y, opts.maxWidth);\n        decorateText(ctx, x, y, line, opts);\n        y += Number(font.lineHeight);\n    }\n    ctx.restore();\n}\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */ function addRoundedRectPath(ctx, rect) {\n    const { x , y , w , h , radius  } = rect;\n    // top left arc\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\n    // line from top left to bottom left\n    ctx.lineTo(x, y + h - radius.bottomLeft);\n    // bottom left arc\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n    // line from bottom left to bottom right\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\n    // bottom right arc\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n    // line from bottom right to top right\n    ctx.lineTo(x + w, y + radius.topRight);\n    // top right arc\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n    // line from top right to top left\n    ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n/**\n * @alias Chart.helpers.options\n * @namespace\n */ /**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */ function toLineHeight(value, size) {\n    const matches = ('' + value).match(LINE_HEIGHT);\n    if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n    }\n    value = +matches[2];\n    switch(matches[3]){\n        case 'px':\n            return value;\n        case '%':\n            value /= 100;\n            break;\n    }\n    return size * value;\n}\nconst numberOrZero = (v)=>+v || 0;\nfunction _readValueToProps(value, props) {\n    const ret = {};\n    const objProps = isObject(props);\n    const keys = objProps ? Object.keys(props) : props;\n    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;\n    for (const prop of keys){\n        ret[prop] = numberOrZero(read(prop));\n    }\n    return ret;\n}\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */ function toTRBL(value) {\n    return _readValueToProps(value, {\n        top: 'y',\n        right: 'x',\n        bottom: 'y',\n        left: 'x'\n    });\n}\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */ function toTRBLCorners(value) {\n    return _readValueToProps(value, [\n        'topLeft',\n        'topRight',\n        'bottomLeft',\n        'bottomRight'\n    ]);\n}\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */ function toPadding(value) {\n    const obj = toTRBL(value);\n    obj.width = obj.left + obj.right;\n    obj.height = obj.top + obj.bottom;\n    return obj;\n}\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */ function toFont(options, fallback) {\n    options = options || {};\n    fallback = fallback || defaults.font;\n    let size = valueOrDefault(options.size, fallback.size);\n    if (typeof size === 'string') {\n        size = parseInt(size, 10);\n    }\n    let style = valueOrDefault(options.style, fallback.style);\n    if (style && !('' + style).match(FONT_STYLE)) {\n        console.warn('Invalid font style specified: \"' + style + '\"');\n        style = undefined;\n    }\n    const font = {\n        family: valueOrDefault(options.family, fallback.family),\n        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n        size,\n        style,\n        weight: valueOrDefault(options.weight, fallback.weight),\n        string: ''\n    };\n    font.string = toFontString(font);\n    return font;\n}\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */ function resolve(inputs, context, index, info) {\n    let cacheable = true;\n    let i, ilen, value;\n    for(i = 0, ilen = inputs.length; i < ilen; ++i){\n        value = inputs[i];\n        if (value === undefined) {\n            continue;\n        }\n        if (context !== undefined && typeof value === 'function') {\n            value = value(context);\n            cacheable = false;\n        }\n        if (index !== undefined && isArray(value)) {\n            value = value[index % value.length];\n            cacheable = false;\n        }\n        if (value !== undefined) {\n            if (info && !cacheable) {\n                info.cacheable = false;\n            }\n            return value;\n        }\n    }\n}\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */ function _addGrace(minmax, grace, beginAtZero) {\n    const { min , max  } = minmax;\n    const change = toDimension(grace, (max - min) / 2);\n    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;\n    return {\n        min: keepZero(min, -Math.abs(change)),\n        max: keepZero(max, change)\n    };\n}\nfunction createContext(parentContext, context) {\n    return Object.assign(Object.create(parentContext), context);\n}\n\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */ function _createResolver(scopes, prefixes = [\n    ''\n], rootScopes, fallback, getTarget = ()=>scopes[0]) {\n    const finalRootScopes = rootScopes || scopes;\n    if (typeof fallback === 'undefined') {\n        fallback = _resolve('_fallback', scopes);\n    }\n    const cache = {\n        [Symbol.toStringTag]: 'Object',\n        _cacheable: true,\n        _scopes: scopes,\n        _rootScopes: finalRootScopes,\n        _fallback: fallback,\n        _getTarget: getTarget,\n        override: (scope)=>_createResolver([\n                scope,\n                ...scopes\n            ], prefixes, finalRootScopes, fallback)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete target._keys; // remove cached keys\n            delete scopes[0][prop]; // remove from top level scope\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop) {\n            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(scopes[0]);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return getKeysFromAllScopes(target).includes(prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys (target) {\n            return getKeysFromAllScopes(target);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            const storage = target._storage || (target._storage = getTarget());\n            target[prop] = storage[prop] = value; // set to top level scope + cache\n            delete target._keys; // remove cached keys\n            return true;\n        }\n    });\n}\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {\n    const cache = {\n        _cacheable: false,\n        _proxy: proxy,\n        _context: context,\n        _subProxy: subProxy,\n        _stack: new Set(),\n        _descriptors: _descriptors(proxy, descriptorDefaults),\n        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),\n        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete proxy[prop]; // remove from proxy\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop, receiver) {\n            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n                enumerable: true,\n                configurable: true\n            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(proxy);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return Reflect.has(proxy, prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys () {\n            return Reflect.ownKeys(proxy);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            proxy[prop] = value; // set to proxy\n            delete target[prop]; // remove from cache\n            return true;\n        }\n    });\n}\n/**\n * @private\n */ function _descriptors(proxy, defaults = {\n    scriptable: true,\n    indexable: true\n}) {\n    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;\n    return {\n        allKeys: _allKeys,\n        scriptable: _scriptable,\n        indexable: _indexable,\n        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,\n        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable\n    };\n}\nconst readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n    if (Object.prototype.hasOwnProperty.call(target, prop) || prop === 'constructor') {\n        return target[prop];\n    }\n    const value = resolve();\n    // cache the resolved value\n    target[prop] = value;\n    return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    let value = _proxy[prop]; // resolve from proxy\n    // resolve with context\n    if (isFunction(value) && descriptors.isScriptable(prop)) {\n        value = _resolveScriptable(prop, value, target, receiver);\n    }\n    if (isArray(value) && value.length) {\n        value = _resolveArray(prop, value, target, descriptors.isIndexable);\n    }\n    if (needsSubResolver(prop, value)) {\n        // if the resolved value is an object, create a sub resolver for it\n        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n    }\n    return value;\n}\nfunction _resolveScriptable(prop, getValue, target, receiver) {\n    const { _proxy , _context , _subProxy , _stack  } = target;\n    if (_stack.has(prop)) {\n        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n    }\n    _stack.add(prop);\n    let value = getValue(_context, _subProxy || receiver);\n    _stack.delete(prop);\n    if (needsSubResolver(prop, value)) {\n        // When scriptable option returns an object, create a resolver on that.\n        value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n    }\n    return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\n        return value[_context.index % value.length];\n    } else if (isObject(value[0])) {\n        // Array of objects, return array or resolvers\n        const arr = value;\n        const scopes = _proxy._scopes.filter((s)=>s !== arr);\n        value = [];\n        for (const item of arr){\n            const resolver = createSubResolver(scopes, _proxy, prop, item);\n            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n        }\n    }\n    return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n    return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n    for (const parent of parentScopes){\n        const scope = getScope(key, parent);\n        if (scope) {\n            set.add(scope);\n            const fallback = resolveFallback(scope._fallback, key, value);\n            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\n                // When we reach the descriptor that defines a new _fallback, return that.\n                // The fallback will resume to that new scope.\n                return fallback;\n            }\n        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\n            // Fallback to `false` results to `false`, when falling back to different key.\n            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n            return null;\n        }\n    }\n    return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n    const rootScopes = resolver._rootScopes;\n    const fallback = resolveFallback(resolver._fallback, prop, value);\n    const allScopes = [\n        ...parentScopes,\n        ...rootScopes\n    ];\n    const set = new Set();\n    set.add(value);\n    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n    if (key === null) {\n        return false;\n    }\n    if (typeof fallback !== 'undefined' && fallback !== prop) {\n        key = addScopesFromKey(set, allScopes, fallback, key, value);\n        if (key === null) {\n            return false;\n        }\n    }\n    return _createResolver(Array.from(set), [\n        ''\n    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n    while(key){\n        key = addScopes(set, allScopes, key, fallback, item);\n    }\n    return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n    const parent = resolver._getTarget();\n    if (!(prop in parent)) {\n        parent[prop] = {};\n    }\n    const target = parent[prop];\n    if (isArray(target) && isObject(value)) {\n        // For array of objects, the object is used to store updated values\n        return value;\n    }\n    return target || {};\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n    let value;\n    for (const prefix of prefixes){\n        value = _resolve(readKey(prefix, prop), scopes);\n        if (typeof value !== 'undefined') {\n            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n        }\n    }\n}\nfunction _resolve(key, scopes) {\n    for (const scope of scopes){\n        if (!scope) {\n            continue;\n        }\n        const value = scope[key];\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n    }\n}\nfunction getKeysFromAllScopes(target) {\n    let keys = target._keys;\n    if (!keys) {\n        keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n    }\n    return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n    const set = new Set();\n    for (const scope of scopes){\n        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){\n            set.add(key);\n        }\n    }\n    return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n    const { iScale  } = meta;\n    const { key ='r'  } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for(i = 0, ilen = count; i < ilen; ++i){\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n            r: iScale.parse(resolveObjectKey(item, key), index)\n        };\n    }\n    return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n    // Props to Rob Spencer at scaled innovation for his post on splining between points\n    // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n    // This function must also respect \"skipped\" points\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\n    const current = middlePoint;\n    const next = afterPoint.skip ? middlePoint : afterPoint;\n    const d01 = distanceBetweenPoints(current, previous);\n    const d12 = distanceBetweenPoints(next, current);\n    let s01 = d01 / (d01 + d12);\n    let s12 = d12 / (d01 + d12);\n    // If all points are the same, s01 & s02 will be inf\n    s01 = isNaN(s01) ? 0 : s01;\n    s12 = isNaN(s12) ? 0 : s12;\n    const fa = t * s01; // scaling factor for triangle Ta\n    const fb = t * s12;\n    return {\n        previous: {\n            x: current.x - fa * (next.x - previous.x),\n            y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n            x: current.x + fb * (next.x - previous.x),\n            y: current.y + fb * (next.y - previous.y)\n        }\n    };\n}\n/**\n * Adjust tangents to ensure monotonic properties\n */ function monotoneAdjust(points, deltaK, mK) {\n    const pointsLen = points.length;\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen - 1; ++i){\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent || !pointAfter) {\n            continue;\n        }\n        if (almostEquals(deltaK[i], 0, EPSILON)) {\n            mK[i] = mK[i + 1] = 0;\n            continue;\n        }\n        alphaK = mK[i] / deltaK[i];\n        betaK = mK[i + 1] / deltaK[i];\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n        if (squaredMagnitude <= 9) {\n            continue;\n        }\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        mK[i] = alphaK * tauK * deltaK[i];\n        mK[i + 1] = betaK * tauK * deltaK[i];\n    }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    let delta, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        const iPixel = pointCurrent[indexAxis];\n        const vPixel = pointCurrent[valueAxis];\n        if (pointBefore) {\n            delta = (iPixel - pointBefore[indexAxis]) / 3;\n            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n        }\n        if (pointAfter) {\n            delta = (pointAfter[indexAxis] - iPixel) / 3;\n            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n        }\n    }\n}\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */ function splineCurveMonotone(points, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    const deltaK = Array(pointsLen).fill(0);\n    const mK = Array(pointsLen);\n    // Calculate slopes (deltaK) and initialize tangents (mK)\n    let i, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        if (pointAfter) {\n            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n        }\n        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n    }\n    monotoneAdjust(points, deltaK, mK);\n    monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n    return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n    let i, ilen, point, inArea, inAreaPrev;\n    let inAreaNext = _isPointInArea(points[0], area);\n    for(i = 0, ilen = points.length; i < ilen; ++i){\n        inAreaPrev = inArea;\n        inArea = inAreaNext;\n        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n        if (!inArea) {\n            continue;\n        }\n        point = points[i];\n        if (inAreaPrev) {\n            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n        }\n        if (inAreaNext) {\n            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n        }\n    }\n}\n/**\n * @private\n */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n    let i, ilen, point, controlPoints;\n    // Only consider points that are drawn in case the spanGaps option is used\n    if (options.spanGaps) {\n        points = points.filter((pt)=>!pt.skip);\n    }\n    if (options.cubicInterpolationMode === 'monotone') {\n        splineCurveMonotone(points, indexAxis);\n    } else {\n        let prev = loop ? points[points.length - 1] : points[0];\n        for(i = 0, ilen = points.length; i < ilen; ++i){\n            point = points[i];\n            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n            point.cp1x = controlPoints.previous.x;\n            point.cp1y = controlPoints.previous.y;\n            point.cp2x = controlPoints.next.x;\n            point.cp2y = controlPoints.next.y;\n            prev = point;\n        }\n    }\n    if (options.capBezierPoints) {\n        capBezierPoints(points, area);\n    }\n}\n\n/**\n * @private\n */ function _isDomSupported() {\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n/**\n * @private\n */ function _getParentNode(domNode) {\n    let parent = domNode.parentNode;\n    if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n    }\n    return parent;\n}\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */ function parseMaxStyle(styleValue, node, parentProperty) {\n    let valueInPixels;\n    if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n        if (styleValue.indexOf('%') !== -1) {\n            // percentage * size in dimension\n            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n    } else {\n        valueInPixels = styleValue;\n    }\n    return valueInPixels;\n}\nconst getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n    return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = [\n    'top',\n    'right',\n    'bottom',\n    'left'\n];\nfunction getPositionedStyle(styles, style, suffix) {\n    const result = {};\n    suffix = suffix ? '-' + suffix : '';\n    for(let i = 0; i < 4; i++){\n        const pos = positions[i];\n        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n    }\n    result.width = result.left + result.right;\n    result.height = result.top + result.bottom;\n    return result;\n}\nconst useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */ function getCanvasPosition(e, canvas) {\n    const touches = e.touches;\n    const source = touches && touches.length ? touches[0] : e;\n    const { offsetX , offsetY  } = source;\n    let box = false;\n    let x, y;\n    if (useOffsetPos(offsetX, offsetY, e.target)) {\n        x = offsetX;\n        y = offsetY;\n    } else {\n        const rect = canvas.getBoundingClientRect();\n        x = source.clientX - rect.left;\n        y = source.clientY - rect.top;\n        box = true;\n    }\n    return {\n        x,\n        y,\n        box\n    };\n}\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */ function getRelativePosition(event, chart) {\n    if ('native' in event) {\n        return event;\n    }\n    const { canvas , currentDevicePixelRatio  } = chart;\n    const style = getComputedStyle(canvas);\n    const borderBox = style.boxSizing === 'border-box';\n    const paddings = getPositionedStyle(style, 'padding');\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const { x , y , box  } = getCanvasPosition(event, canvas);\n    const xOffset = paddings.left + (box && borders.left);\n    const yOffset = paddings.top + (box && borders.top);\n    let { width , height  } = chart;\n    if (borderBox) {\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    return {\n        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n    };\n}\nfunction getContainerSize(canvas, width, height) {\n    let maxWidth, maxHeight;\n    if (width === undefined || height === undefined) {\n        const container = canvas && _getParentNode(canvas);\n        if (!container) {\n            width = canvas.clientWidth;\n            height = canvas.clientHeight;\n        } else {\n            const rect = container.getBoundingClientRect(); // this is the border box of the container\n            const containerStyle = getComputedStyle(container);\n            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n            const containerPadding = getPositionedStyle(containerStyle, 'padding');\n            width = rect.width - containerPadding.width - containerBorder.width;\n            height = rect.height - containerPadding.height - containerBorder.height;\n            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n        }\n    }\n    return {\n        width,\n        height,\n        maxWidth: maxWidth || INFINITY,\n        maxHeight: maxHeight || INFINITY\n    };\n}\nconst round1 = (v)=>Math.round(v * 10) / 10;\n// eslint-disable-next-line complexity\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n    const style = getComputedStyle(canvas);\n    const margins = getPositionedStyle(style, 'margin');\n    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n    let { width , height  } = containerSize;\n    if (style.boxSizing === 'content-box') {\n        const borders = getPositionedStyle(style, 'border', 'width');\n        const paddings = getPositionedStyle(style, 'padding');\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    width = Math.max(0, width - margins.width);\n    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n    if (width && !height) {\n        // https://github.com/chartjs/Chart.js/issues/4659\n        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n        height = round1(width / 2);\n    }\n    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n        height = containerSize.height;\n        width = round1(Math.floor(height * aspectRatio));\n    }\n    return {\n        width,\n        height\n    };\n}\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */ function retinaScale(chart, forceRatio, forceStyle) {\n    const pixelRatio = forceRatio || 1;\n    const deviceHeight = Math.floor(chart.height * pixelRatio);\n    const deviceWidth = Math.floor(chart.width * pixelRatio);\n    chart.height = Math.floor(chart.height);\n    chart.width = Math.floor(chart.width);\n    const canvas = chart.canvas;\n    // If no style has been set on the canvas, the render size is used as display size,\n    // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n    // See https://github.com/chartjs/Chart.js/issues/3575\n    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n        canvas.style.height = `${chart.height}px`;\n        canvas.style.width = `${chart.width}px`;\n    }\n    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n        chart.currentDevicePixelRatio = pixelRatio;\n        canvas.height = deviceHeight;\n        canvas.width = deviceWidth;\n        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        return true;\n    }\n    return false;\n}\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */ const supportsEventListenerOptions = function() {\n    let passiveSupported = false;\n    try {\n        const options = {\n            get passive () {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        if (_isDomSupported()) {\n            window.addEventListener('test', null, options);\n            window.removeEventListener('test', null, options);\n        }\n    } catch (e) {\n    // continue regardless of error\n    }\n    return passiveSupported;\n}();\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */ function readUsedSize(element, property) {\n    const value = getStyle(element, property);\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? +matches[1] : undefined;\n}\n\n/**\n * @private\n */ function _pointInLine(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    };\n}\n/**\n * @private\n */ function _steppedInterpolation(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n    };\n}\n/**\n * @private\n */ function _bezierInterpolation(p1, p2, t, mode) {\n    const cp1 = {\n        x: p1.cp2x,\n        y: p1.cp2y\n    };\n    const cp2 = {\n        x: p2.cp1x,\n        y: p2.cp1y\n    };\n    const a = _pointInLine(p1, cp1, t);\n    const b = _pointInLine(cp1, cp2, t);\n    const c = _pointInLine(cp2, p2, t);\n    const d = _pointInLine(a, b, t);\n    const e = _pointInLine(b, c, t);\n    return _pointInLine(d, e, t);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n    return {\n        x (x) {\n            return rectX + rectX + width - x;\n        },\n        setWidth (w) {\n            width = w;\n        },\n        textAlign (align) {\n            if (align === 'center') {\n                return align;\n            }\n            return align === 'right' ? 'left' : 'right';\n        },\n        xPlus (x, value) {\n            return x - value;\n        },\n        leftForLtr (x, itemWidth) {\n            return x - itemWidth;\n        }\n    };\n};\nconst getLeftToRightAdapter = function() {\n    return {\n        x (x) {\n            return x;\n        },\n        setWidth (w) {},\n        textAlign (align) {\n            return align;\n        },\n        xPlus (x, value) {\n            return x + value;\n        },\n        leftForLtr (x, _itemWidth) {\n            return x;\n        }\n    };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n    let style, original;\n    if (direction === 'ltr' || direction === 'rtl') {\n        style = ctx.canvas.style;\n        original = [\n            style.getPropertyValue('direction'),\n            style.getPropertyPriority('direction')\n        ];\n        style.setProperty('direction', direction, 'important');\n        ctx.prevTextDirection = original;\n    }\n}\nfunction restoreTextDirection(ctx, original) {\n    if (original !== undefined) {\n        delete ctx.prevTextDirection;\n        ctx.canvas.style.setProperty('direction', original[0], original[1]);\n    }\n}\n\nfunction propertyFn(property) {\n    if (property === 'angle') {\n        return {\n            between: _angleBetween,\n            compare: _angleDiff,\n            normalize: _normalizeAngle\n        };\n    }\n    return {\n        between: _isBetween,\n        compare: (a, b)=>a - b,\n        normalize: (x)=>x\n    };\n}\nfunction normalizeSegment({ start , end , count , loop , style  }) {\n    return {\n        start: start % count,\n        end: end % count,\n        loop: loop && (end - start + 1) % count === 0,\n        style\n    };\n}\nfunction getSegment(segment, points, bounds) {\n    const { property , start: startBound , end: endBound  } = bounds;\n    const { between , normalize  } = propertyFn(property);\n    const count = points.length;\n    let { start , end , loop  } = segment;\n    let i, ilen;\n    if (loop) {\n        start += count;\n        end += count;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n                break;\n            }\n            start--;\n            end--;\n        }\n        start %= count;\n        end %= count;\n    }\n    if (end < start) {\n        end += count;\n    }\n    return {\n        start,\n        end,\n        loop,\n        style: segment.style\n    };\n}\n function _boundSegment(segment, points, bounds) {\n    if (!bounds) {\n        return [\n            segment\n        ];\n    }\n    const { property , start: startBound , end: endBound  } = bounds;\n    const count = points.length;\n    const { compare , between , normalize  } = propertyFn(property);\n    const { start , end , loop , style  } = getSegment(segment, points, bounds);\n    const result = [];\n    let inside = false;\n    let subStart = null;\n    let value, point, prevValue;\n    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);\n    const shouldStart = ()=>inside || startIsBefore();\n    const shouldStop = ()=>!inside || endIsBefore();\n    for(let i = start, prev = start; i <= end; ++i){\n        point = points[i % count];\n        if (point.skip) {\n            continue;\n        }\n        value = normalize(point[property]);\n        if (value === prevValue) {\n            continue;\n        }\n        inside = between(value, startBound, endBound);\n        if (subStart === null && shouldStart()) {\n            subStart = compare(value, startBound) === 0 ? i : prev;\n        }\n        if (subStart !== null && shouldStop()) {\n            result.push(normalizeSegment({\n                start: subStart,\n                end: i,\n                loop,\n                count,\n                style\n            }));\n            subStart = null;\n        }\n        prev = i;\n        prevValue = value;\n    }\n    if (subStart !== null) {\n        result.push(normalizeSegment({\n            start: subStart,\n            end,\n            loop,\n            count,\n            style\n        }));\n    }\n    return result;\n}\n function _boundSegments(line, bounds) {\n    const result = [];\n    const segments = line.segments;\n    for(let i = 0; i < segments.length; i++){\n        const sub = _boundSegment(segments[i], line.points, bounds);\n        if (sub.length) {\n            result.push(...sub);\n        }\n    }\n    return result;\n}\n function findStartAndEnd(points, count, loop, spanGaps) {\n    let start = 0;\n    let end = count - 1;\n    if (loop && !spanGaps) {\n        while(start < count && !points[start].skip){\n            start++;\n        }\n    }\n    while(start < count && points[start].skip){\n        start++;\n    }\n    start %= count;\n    if (loop) {\n        end += start;\n    }\n    while(end > start && points[end % count].skip){\n        end--;\n    }\n    end %= count;\n    return {\n        start,\n        end\n    };\n}\n function solidSegments(points, start, max, loop) {\n    const count = points.length;\n    const result = [];\n    let last = start;\n    let prev = points[start];\n    let end;\n    for(end = start + 1; end <= max; ++end){\n        const cur = points[end % count];\n        if (cur.skip || cur.stop) {\n            if (!prev.skip) {\n                loop = false;\n                result.push({\n                    start: start % count,\n                    end: (end - 1) % count,\n                    loop\n                });\n                start = last = cur.stop ? end : null;\n            }\n        } else {\n            last = end;\n            if (prev.skip) {\n                start = end;\n            }\n        }\n        prev = cur;\n    }\n    if (last !== null) {\n        result.push({\n            start: start % count,\n            end: last % count,\n            loop\n        });\n    }\n    return result;\n}\n function _computeSegments(line, segmentOptions) {\n    const points = line.points;\n    const spanGaps = line.options.spanGaps;\n    const count = points.length;\n    if (!count) {\n        return [];\n    }\n    const loop = !!line._loop;\n    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);\n    if (spanGaps === true) {\n        return splitByStyles(line, [\n            {\n                start,\n                end,\n                loop\n            }\n        ], points, segmentOptions);\n    }\n    const max = end < start ? end + count : end;\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n function splitByStyles(line, segments, points, segmentOptions) {\n    if (!segmentOptions || !segmentOptions.setContext || !points) {\n        return segments;\n    }\n    return doSplitByStyles(line, segments, points, segmentOptions);\n}\n function doSplitByStyles(line, segments, points, segmentOptions) {\n    const chartContext = line._chart.getContext();\n    const baseStyle = readStyle(line.options);\n    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;\n    const count = points.length;\n    const result = [];\n    let prevStyle = baseStyle;\n    let start = segments[0].start;\n    let i = start;\n    function addStyle(s, e, l, st) {\n        const dir = spanGaps ? -1 : 1;\n        if (s === e) {\n            return;\n        }\n        s += count;\n        while(points[s % count].skip){\n            s -= dir;\n        }\n        while(points[e % count].skip){\n            e += dir;\n        }\n        if (s % count !== e % count) {\n            result.push({\n                start: s % count,\n                end: e % count,\n                loop: l,\n                style: st\n            });\n            prevStyle = st;\n            start = e % count;\n        }\n    }\n    for (const segment of segments){\n        start = spanGaps ? start : segment.start;\n        let prev = points[start % count];\n        let style;\n        for(i = start + 1; i <= segment.end; i++){\n            const pt = points[i % count];\n            style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n                type: 'segment',\n                p0: prev,\n                p1: pt,\n                p0DataIndex: (i - 1) % count,\n                p1DataIndex: i % count,\n                datasetIndex\n            })));\n            if (styleChanged(style, prevStyle)) {\n                addStyle(start, i - 1, segment.loop, prevStyle);\n            }\n            prev = pt;\n            prevStyle = style;\n        }\n        if (start < i - 1) {\n            addStyle(start, i - 1, segment.loop, prevStyle);\n        }\n    }\n    return result;\n}\nfunction readStyle(options) {\n    return {\n        backgroundColor: options.backgroundColor,\n        borderCapStyle: options.borderCapStyle,\n        borderDash: options.borderDash,\n        borderDashOffset: options.borderDashOffset,\n        borderJoinStyle: options.borderJoinStyle,\n        borderWidth: options.borderWidth,\n        borderColor: options.borderColor\n    };\n}\nfunction styleChanged(style, prevStyle) {\n    if (!prevStyle) {\n        return false;\n    }\n    const cache = [];\n    const replacer = function(key, value) {\n        if (!isPatternOrGradient(value)) {\n            return value;\n        }\n        if (!cache.includes(value)) {\n            cache.push(value);\n        }\n        return cache.indexOf(value);\n    };\n    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n\nexport { unclipArea as $, _rlookupByKey as A, _lookupByKey as B, _isPointInArea as C, getAngleFromPoint as D, toPadding as E, each as F, getMaximumSize as G, HALF_PI as H, _getParentNode as I, readUsedSize as J, supportsEventListenerOptions as K, throttled as L, _isDomSupported as M, _factorize as N, finiteOrDefault as O, PI as P, callback as Q, _addGrace as R, _limitValue as S, TAU as T, toDegrees as U, _measureText as V, _int16Range as W, _alignPixel as X, clipArea as Y, renderText as Z, _arrayUnique as _, resolve as a, fontString as a$, toFont as a0, _toLeftRightCenter as a1, _alignStartEnd as a2, overrides as a3, merge as a4, _capitalize as a5, descriptors as a6, isFunction as a7, _attachContext as a8, _createResolver as a9, overrideTextDirection as aA, _textX as aB, restoreTextDirection as aC, drawPointLegend as aD, distanceBetweenPoints as aE, noop as aF, _setMinAndMaxByKey as aG, niceNum as aH, almostWhole as aI, almostEquals as aJ, _decimalPlaces as aK, Ticks as aL, log10 as aM, _longestText as aN, _filterBetween as aO, _lookup as aP, isPatternOrGradient as aQ, getHoverColor as aR, clone as aS, _merger as aT, _mergerIf as aU, _deprecated as aV, _splitKey as aW, toFontString as aX, splineCurve as aY, splineCurveMonotone as aZ, getStyle as a_, _descriptors as aa, mergeIf as ab, uid as ac, debounce as ad, retinaScale as ae, clearCanvas as af, setsEqual as ag, _elementsEqual as ah, _isClickEvent as ai, _isBetween as aj, _readValueToProps as ak, _updateBezierControlPoints as al, _computeSegments as am, _boundSegments as an, _steppedInterpolation as ao, _bezierInterpolation as ap, _pointInLine as aq, _steppedLineTo as ar, _bezierCurveTo as as, drawPoint as at, addRoundedRectPath as au, toTRBL as av, toTRBLCorners as aw, _boundSegment as ax, _normalizeAngle as ay, getRtlAdapter as az, isArray as b, toLineHeight as b0, PITAU as b1, INFINITY as b2, RAD_PER_DEG as b3, QUARTER_PI as b4, TWO_THIRDS_PI as b5, _angleDiff as b6, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, defined as h, isObject as i, createContext as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, _getStartAndCountOfVisiblePoints as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _scaleRangesChanged as w, isNumber as x, _parseObjectDataRadialScale as y, getRelativePosition as z };\n//# sourceMappingURL=helpers.segment.js.map\n","/*!\n * Chart.js v4.4.8\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    let found = false;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            found = true;\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    if (!found && !options.all) {\n        return 0;\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n    const { iScale , vScale  } = meta;\n    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            [iAxisKey]: key,\n            [vAxisKey]: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            const meta = this._cachedMeta;\n            this._data = convertObjectDataToArray(data, meta);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n            meta._stacked = isStacked(meta.vScale, meta);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n        const iScaleValue = currentParsed && currentParsed[iScale.axis];\n        const skipNull = (meta)=>{\n            const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            const result = lookupMethod(data, axis, value);\n            if (spanGaps) {\n                const { vScale  } = controller._cachedMeta;\n                const { _parsed  } = metaset;\n                const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                result.lo -= Math.max(0, distanceToDefinedLo);\n                const distanceToDefinedHi = _parsed.slice(result.hi).findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                result.hi += Math.max(0, distanceToDefinedHi);\n            }\n            return result;\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    if (node) {\n        node.addEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction removeListener(chart, type, listener) {\n    if (chart && chart.canvas) {\n        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = canvas && _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.4.8\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resizeBeforeDraw = null;\n            this._resize(width, height);\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta, this.chartArea);\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n        const betweenAngles = _circumference >= TAU || nonZeroBetween;\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n    return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n        if (!options.forceOverride && containsColorDefenition) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let xSet = new Set();\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                xSet.add(pos.x);\n                y += pos.y;\n                ++count;\n            }\n        }\n        if (count === 0 || xSet.size === 0) {\n            return false;\n        }\n        const xAverage = [\n            ...xSet\n        ].reduce((a, b)=>a + b) / xSet.size;\n        return {\n            x: xAverage,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash || []);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0 || index === 0 && this.min < 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && this.min >= 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n"],"names":["noop","uid","id","isNullOrUndef","value","undefined","isArray","Array","type","Object","prototype","toString","call","slice","isObject","isNumberFinite","Number","isFinite","finiteOrDefault","defaultValue","valueOrDefault","toDimension","dimension","endsWith","parseFloat","callback","fn","args","thisArg","apply","each","loopable","reverse","i","len","keys","length","_elementsEqual","a0","a1","ilen","v0","v1","datasetIndex","index","clone","source","map","target","create","klen","k","isValidKey","key","indexOf","_merger","options","tval","sval","merge","sources","merger","current","mergeIf","_mergerIf","hasOwnProperty","keyResolvers","v","x","o","y","resolveObjectKey","obj","resolver","parts","split","tmp","part","push","_splitKey","_getKeyResolver","_capitalize","str","charAt","toUpperCase","defined","isFunction","setsEqual","a","b","size","item","has","PI","Math","TAU","INFINITY","POSITIVE_INFINITY","RAD_PER_DEG","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","log10","sign","almostEquals","epsilon","abs","niceNum","range","roundedRange","round","niceRange","pow","floor","fraction","isNumber","n","Symbol","toPrimitive","isNonPrimitive","isNaN","_setMinAndMaxByKey","array","property","min","max","toRadians","degrees","toDegrees","radians","_decimalPlaces","e","p","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","sqrt","angle","atan2","distance","distanceBetweenPoints","pt1","pt2","_normalizeAngle","_angleBetween","start","end","sameAngleIsFullCircle","s","angleToStart","angleToEnd","startToAngle","endToAngle","_limitValue","_isBetween","_lookup","table","cmp","mid","hi","lo","_lookupByKey","last","ti","_rlookupByKey","arrayEvents","unlistenArrayEvents","listener","stub","_chartjs","listeners","splice","forEach","requestAnimFrame","window","requestAnimationFrame","throttled","argsToUse","ticking","_toLeftRightCenter","align","_alignStartEnd","atEdge","t","elasticIn","sin","elasticOut","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","m","d","easeInOutBounce","isPatternOrGradient","color","getHoverColor","saturate","darken","hexString","numbers","colors","intlCache","Map","formatNumber","num","locale","cacheKey","JSON","stringify","formatter","get","Intl","NumberFormat","set","getNumberFormat","format","formatters","values","numeric","tickValue","ticks","this","chart","notation","delta","maxTick","calculateDelta","logDelta","numDecimal","minimumFractionDigits","maximumFractionDigits","assign","logarithmic","remain","significand","includes","Ticks","overrides","descriptors","getScope$1","node","root","scope","Defaults","constructor","_descriptors","_appliers","animation","backgroundColor","borderColor","datasets","devicePixelRatio","context","platform","getDevicePixelRatio","elements","events","font","family","style","lineHeight","weight","hover","hoverBackgroundColor","ctx","hoverBorderColor","hoverColor","indexAxis","interaction","mode","intersect","includeInvisible","maintainAspectRatio","onHover","onClick","parsing","plugins","responsive","scale","scales","showLine","drawActiveElementsOnTop","describe","override","route","name","targetScope","targetName","scopeObject","targetScopeObject","privateName","defineProperties","writable","enumerable","local","appliers","defaults","_scriptable","startsWith","_indexable","_fallback","delay","duration","easing","from","loop","to","properties","active","resize","show","animations","visible","hide","autoPadding","padding","top","right","bottom","left","display","offset","beginAtZero","bounds","clip","grace","grid","lineWidth","drawOnChartArea","drawTicks","tickLength","tickWidth","_ctx","tickColor","border","dash","dashOffset","width","title","text","minRotation","maxRotation","mirror","textStrokeWidth","textStrokeColor","autoSkip","autoSkipPadding","labelOffset","minor","major","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","_measureText","data","gc","longest","string","textWidth","measureText","_alignPixel","pixel","currentDevicePixelRatio","halfWidth","clearCanvas","canvas","getContext","save","resetTransform","clearRect","height","restore","drawPoint","drawPointLegend","w","xOffset","yOffset","cornerRadius","xOffsetW","yOffsetW","pointStyle","rotation","radius","rad","translate","rotate","drawImage","beginPath","ellipse","arc","closePath","moveTo","lineTo","SQRT1_2","rect","fill","borderWidth","stroke","_isPointInArea","point","area","margin","clipArea","unclipArea","decorateText","line","opts","strikethrough","underline","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","yDecoration","strokeStyle","fillStyle","decorationWidth","drawBackdrop","oldColor","fillRect","renderText","lines","strokeWidth","strokeColor","translation","textAlign","textBaseline","setRenderOpts","backdrop","strokeText","maxWidth","fillText","addRoundedRectPath","h","topLeft","bottomLeft","bottomRight","topRight","LINE_HEIGHT","FONT_STYLE","toLineHeight","matches","match","_readValueToProps","props","ret","objProps","read","prop","toTRBL","toTRBLCorners","toPadding","toFont","fallback","parseInt","toFontString","resolve","inputs","info","cacheable","createContext","parentContext","_createResolver","scopes","prefixes","rootScopes","getTarget","finalRootScopes","_resolve","cache","toStringTag","_cacheable","_scopes","_rootScopes","_getTarget","Proxy","deleteProperty","_keys","_cached","proxy","prefix","readKey","needsSubResolver","createSubResolver","_resolveWithPrefixes","getOwnPropertyDescriptor","Reflect","getPrototypeOf","getKeysFromAllScopes","ownKeys","storage","_storage","_attachContext","subProxy","descriptorDefaults","_proxy","_context","_subProxy","_stack","Set","setContext","receiver","isScriptable","getValue","Error","join","add","delete","_resolveScriptable","isIndexable","arr","filter","_resolveArray","_resolveWithContext","allKeys","configurable","scriptable","indexable","_allKeys","resolveFallback","getScope","parent","addScopes","parentScopes","parentFallback","allScopes","addScopesFromKey","subGetTarget","resolveKeysFromAllScopes","EPSILON","_isDomSupported","document","_getParentNode","domNode","parentNode","host","parseMaxStyle","styleValue","parentProperty","valueInPixels","getComputedStyle","element","ownerDocument","defaultView","positions","getPositionedStyle","styles","suffix","result","pos","getRelativePosition","event","borderBox","boxSizing","paddings","borders","box","touches","offsetX","offsetY","shadowRoot","useOffsetPos","getBoundingClientRect","clientX","clientY","getCanvasPosition","round1","getMaximumSize","bbWidth","bbHeight","aspectRatio","margins","maxHeight","containerSize","container","containerStyle","containerBorder","containerPadding","clientWidth","clientHeight","getContainerSize","retinaScale","forceRatio","forceStyle","pixelRatio","deviceHeight","deviceWidth","setTransform","supportsEventListenerOptions","passiveSupported","passive","addEventListener","removeEventListener","readUsedSize","el","getPropertyValue","getStyle","getRtlAdapter","rtl","rectX","setWidth","xPlus","leftForLtr","itemWidth","getRightToLeftAdapter","_itemWidth","overrideTextDirection","direction","original","getPropertyPriority","setProperty","prevTextDirection","restoreTextDirection","Animator","_request","_charts","_running","_lastDate","_notify","anims","date","callbacks","numSteps","initial","currentStep","_refresh","_update","Date","now","remaining","running","items","draw","_active","_total","tick","pop","_getAnims","charts","complete","progress","listen","cb","reduce","acc","cur","_duration","stop","cancel","remove","animator","transparent","interpolators","boolean","factor","c0","c1","valid","mix","number","Animation","cfg","currentValue","_fn","_easing","_start","_loop","_target","_prop","_from","_to","_promises","update","elapsed","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","animationOptions","animatedProps","getOwnPropertyNames","option","_animateOptions","newOptions","$shared","$animations","resolveTargetOptions","_createAnimations","anim","all","awaitAll","then","scaleClip","allowedOverflow","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","applyStack","stack","dsIndex","singleMode","otherValue","found","isStacked","meta","stacked","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","indexScale","valueScale","getStackKey","_top","_bottom","_visualValues","getFirstScaleId","shift","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","DatasetController","static","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","_stacked","addElements","isPluginEnabled","updateIndex","dataset","getDataset","chooseId","r","xid","xAxisID","yid","yAxisID","rid","rAxisID","iid","iAxisID","vid","vAxisID","xScale","getScaleForId","yScale","rScale","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","iAxisKey","vAxisKey","adata","convertObjectDataToArray","isExtensible","defineProperty","base","object","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","getOptionScopes","createResolver","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","parsedValue","NaN","getMinMax","canStack","otherScale","hidden","createStack","NEGATIVE_INFINITY","otherMin","otherMax","minDefined","maxDefined","getUserBounds","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","l","disabled","toClip","defaultClip","chartArea","resolveDatasetElementOptions","resolveDataElementOptions","dataIndex","raw","createDataContext","createDatasetContext","_resolveElementOptions","elementType","sharing","datasetElementScopeKeys","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","updateElements","removed","_sync","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","DoughnutController","animateRotate","animateScale","cutout","circumference","spacing","legend","generateLabels","fontColor","getDataVisibility","legendItem","toggleDataVisibility","super","innerRadius","outerRadius","getter","_getRotation","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","chartWeight","_getRingWeight","ratioX","ratioY","startAngle","endAngle","startX","startY","endX","endY","calcMax","calcMin","maxX","maxY","minX","minY","getRatioAndOffset","maxRadius","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","metaData","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","binarySearch","metaset","spanGaps","lookupMethod","_reversePixels","distanceToDefinedLo","findIndex","distanceToDefinedHi","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","skip","getIntersectItems","useFinalPosition","isPointInArea","inRange","getNearestCartesianItems","distanceMetric","useX","useY","deltaX","deltaY","getDistanceMetricForAxis","minDistance","center","getCenterPoint","getNearestItems","getProps","getNearestRadialItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","filterDynamicPositionByAxis","sortByWeight","sort","setLayoutDims","layouts","params","wrap","stackWeight","placed","buildStacks","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","horizontal","availableWidth","availableHeight","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","same","other","getMargins","marginForPositions","fitBoxes","boxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","addBox","_layers","z","removeBox","layoutItem","minPadding","layoutBoxes","isHorizontal","wrapBoxes","centerHorizontal","centerVertical","leftAndTop","concat","rightAndBottom","vertical","buildLayoutBoxes","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","updatePos","change","handleMaxPadding","BasePlatform","acquireContext","releaseContext","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","eventListenerOptions","removeListener","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","entry","addedNodes","removedNodes","observe","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","createResizeObserver","ResizeObserver","contentRect","listenDevicePixelRatioChanges","releaseObserver","disconnect","unlistenDevicePixelRatioChanges","createProxyAndListen","native","fromNativeEvent","addListener","DomPlatform","renderHeight","getAttribute","renderWidth","displayWidth","displayHeight","initCanvas","removeAttribute","setAttribute","proxies","$proxies","attach","detach","isConnected","Element","tooltipPosition","hasValue","final","tickOpts","determinedMaxTicks","_tickSize","maxScale","_length","maxChart","_maxLength","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","enabled","getMajorIndices","numMajorIndices","first","newTicks","next","ceil","skipMajors","evenMajorSpacing","diff","getEvenSpacing","factors","_factorize","calculateSpacing","avgMajorSpacing","majorStart","majorEnd","offsetFromEdge","edge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","_startPixel","_endPixel","lineValue","getPixelForTick","getTickMarkLength","getTitleHeight","titleAlign","reverseAlign","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_cache","_dataLimitsCached","init","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","minmax","keepZero","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","startPixel","endPixel","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","asin","minSize","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","caches","widths","heights","jlen","tickFont","fontString","nestedLabel","widestLabelSize","highestLabelSize","_resolveTickFontOptions","gcLen","garbageCollect","valueAt","idx","getPixelForValue","getValueForPixel","getPixelForDecimal","decimal","getDecimalForPixel","getBasePixel","getBaseValue","createTickContext","optionTicks","rot","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","positionAxisID","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","borderDashOffset","tickBorderDash","tickBorderDashOffset","tickAndPadding","hTickAndPadding","lineCount","textOffset","_getXAxisLabelAlignment","_getYAxisLabelAlignment","halfCount","tickTextAlign","labelPadding","_computeLabelArea","drawBackground","getLineWidthForValue","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","titleX","titleY","titleArgs","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","isForType","isPrototypeOf","register","proto","parentScope","isIChartComponent","itemDefaults","defaultRoutes","routes","propertyParts","sourceName","sourceScope","routeDefaults","registerDefaults","unregister","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getElement","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","registry","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","localIds","allPlugins","getOpts","pluginOpts","createDescriptors","previousDescriptors","some","pluginScopeKeys","getIndexAxis","datasetDefaults","idMatchesAxis","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","boundDs","retrieveAxisFromDatasets","defaultId","getDefaultScaleIDFromAxis","defaultScaleOptions","defaultID","getAxisFromDefaultScaleID","initOptions","initData","keyCache","keysCached","cachedKeys","generate","addIfFound","Config","_config","initConfig","_scopeCache","_resolverCache","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","subPrefixes","getResolver","hasFunction","needContext","resolverCache","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","getSizeForArea","field","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","OffscreenCanvas","_detectPlatform","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","timeout","clearTimeout","setTimeout","debounce","resizeDelay","_initialize","bindEvents","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","_dataset","buildOrUpdateControllers","newControllers","order","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getDatasetArea","getElementsAtEventForMode","getVisibleDatasetCount","setDatasetVisibility","_updateVisibility","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","deactivated","activated","inChartArea","eventFilter","_handleEvent","_getActiveElements","isClick","_isClickEvent","lastEvent","determineLastEvent","parseBorderRadius$1","angleDelta","borderRadius","halfThickness","innerLimit","computeOuterLimit","val","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","circular","pixelMargin","innerR","spacingOffset","alpha","avNogSpacingRadius","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","fullCircles","borderJoinStyle","inner","lineJoin","angleMargin","clipArc","ArcElement","chartX","chartY","rAdjust","nonZeroBetween","betweenAngles","withinRadius","halfAngle","halfRadius","radiusOffset","drawArc","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","legendItemText","calculateItemWidth","fontLineHeight","calculateLegendItemHeight","calculateItemHeight","calculateItemSize","adjustHitBoxes","rtlHelper","hitbox","_draw","defaultColor","halfFontSize","cursor","textDirection","lineCap","lineDash","drawOptions","SQRT2","yBoxTop","xBoxLeft","drawLegendBox","_textX","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","onLeave","isListened","hoveredItem","previous","sameItem","plugin_legend","_element","_args","afterEvent","ci","useBorderRadius","borderCapStyle","WeakMap","positioners","average","xSet","eventPosition","nearestElement","tp","pushOrConcat","toPush","splitNewlines","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineXAlign","yAlign","chartWidth","xAlign","caret","caretSize","caretPadding","doesNotFitWithAlign","determineAlignment","determineYAlign","getBackgroundPoint","alignment","paddingAndSize","alignX","alignY","getAlignedX","getBeforeAfterBodyLines","overrideCallbacks","defaultCallbacks","beforeTitle","tooltipItems","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","bodyLineHeight","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","generateTicks$1","generationOptions","dataRange","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceMin","niceMax","numSpaces","rounded","almostWhole","decimalPlaces","relativeLabelSize","ratio","LinearScaleBase","_startValue","_endValue","_valueRange","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit"],"sourceRoot":""}