const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');

// Charger les variables d'environnement
dotenv.config();

/**
 * Script principal d'assurance qualit√© pour le Dashboard Cycliste Europ√©en
 * Ce script ex√©cute:
 * 1. L'audit des cl√©s API
 * 2. Les tests d'int√©gration
 * 3. Une v√©rification de la validit√© des donn√©es JSON
 */

console.log('üöÄ D√©marrage des v√©rifications d\'assurance qualit√©...\n');

// Fonction pour ex√©cuter une commande et afficher le r√©sultat
function runCommand(command, label) {
  console.log(`\nüìã Ex√©cution de: ${label}...`);
  try {
    const output = execSync(command, { stdio: 'inherit' });
    console.log(`‚úÖ ${label} termin√© avec succ√®s`);
    return true;
  } catch (error) {
    console.error(`‚ùå Erreur lors de l'ex√©cution de ${label}:`);
    console.error(error.message);
    return false;
  }
}

// Fonction pour v√©rifier la validit√© des fichiers JSON
function validateJsonFiles() {
  console.log('\nüìã V√©rification des fichiers JSON...');
  
  const dataDir = path.join(__dirname, '../data');
  const jsonFiles = fs.readdirSync(dataDir).filter(file => file.endsWith('.json'));
  
  let allValid = true;
  const results = {
    valid: [],
    invalid: []
  };
  
  for (const file of jsonFiles) {
    const filePath = path.join(dataDir, file);
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      JSON.parse(content); // Tente de parser le JSON
      console.log(`‚úÖ ${file} est valide`);
      results.valid.push(file);
    } catch (error) {
      console.error(`‚ùå ${file} est invalide: ${error.message}`);
      results.invalid.push({
        file,
        error: error.message
      });
      allValid = false;
    }
  }
  
  // G√©n√©rer un rapport
  const reportPath = path.join(__dirname, '../json-validation-report.md');
  let reportContent = `# Rapport de validation JSON - ${new Date().toLocaleString()}\n\n`;
  
  reportContent += `## Fichiers JSON valides (${results.valid.length})\n\n`;
  if (results.valid.length > 0) {
    reportContent += `- ${results.valid.join('\n- ')}\n`;
  } else {
    reportContent += `Aucun fichier JSON valide trouv√©.\n`;
  }
  
  reportContent += `\n## Fichiers JSON invalides (${results.invalid.length})\n\n`;
  if (results.invalid.length > 0) {
    reportContent += `| Fichier | Erreur |\n|--------|-------|\n`;
    results.invalid.forEach(item => {
      reportContent += `| ${item.file} | ${item.error} |\n`;
    });
  } else {
    reportContent += `Aucun fichier JSON invalide trouv√©.\n`;
  }
  
  fs.writeFileSync(reportPath, reportContent);
  console.log(`üìÑ Rapport de validation JSON g√©n√©r√©: ${reportPath}`);
  
  return allValid;
}

// Fonction principale
async function runQAChecks() {
  let success = true;
  
  // 1. Ex√©cuter l'audit des cl√©s API
  success = runCommand('node ./scripts/api-keys-audit.js', 'Audit des cl√©s API') && success;
  
  // 2. V√©rifier la validit√© des fichiers JSON
  success = validateJsonFiles() && success;
  
  // 3. Ex√©cuter les tests d'int√©gration
  success = runCommand('npm test -- --testPathPattern=tests/integration', 'Tests d\'int√©gration') && success;
  
  // Rapport final
  console.log('\n===== RAPPORT FINAL =====');
  if (success) {
    console.log('‚úÖ Toutes les v√©rifications ont √©t√© compl√©t√©es avec succ√®s!');
  } else {
    console.log('‚ö†Ô∏è Certaines v√©rifications ont √©chou√©. Consultez les rapports d√©taill√©s.');
  }
  
  return success;
}

// Ex√©cuter le script
runQAChecks().catch(error => {
  console.error('Erreur lors de l\'ex√©cution des v√©rifications d\'assurance qualit√©:', error);
  process.exit(1);
});
