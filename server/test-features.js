/**
 * Script de test pour v√©rifier les fonctionnalit√©s principales du serveur
 * 
 * Ce script permet de tester :
 * 1. L'endpoint /api/health
 * 2. L'authentification JWT
 * 3. Le syst√®me de gestion d'erreurs
 */

require('dotenv').config();
const jwt = require('jsonwebtoken');
const mongoose = require('mongoose');
const errorService = require('./services/error.service');
const tokenBlacklist = require('./services/token-blacklist.service');
const authService = require('./services/auth.service');
const { logger } = require('./utils/logger');

// Configuration des tests
const TEST_RESULTS = {
  healthEndpoint: false,
  jwtAuthentication: false,
  errorManagement: false
};

// Fonction principale de test
async function runTests() {
  console.log('\nüîç D√âBUT DES TESTS FONCTIONNELS üîç\n');
  
  try {
    // Test 1: Simuler l'endpoint /api/health
    console.log('\nüìä TEST 1: ENDPOINT /API/HEALTH');
    await testHealthEndpoint();
    
    // Test 2: Tester l'authentification JWT
    console.log('\nüîê TEST 2: AUTHENTIFICATION JWT');
    await testJwtAuthentication();
    
    // Test 3: Tester la gestion d'erreurs
    console.log('\n‚ö†Ô∏è TEST 3: GESTION D\'ERREURS');
    await testErrorManagement();
    
    // R√©sum√© des tests
    console.log('\nüìã R√âSUM√â DES TESTS:');
    console.log(`Endpoint /api/health: ${TEST_RESULTS.healthEndpoint ? '‚úÖ OK' : '‚ùå √âCHEC'}`);
    console.log(`Authentification JWT: ${TEST_RESULTS.jwtAuthentication ? '‚úÖ OK' : '‚ùå √âCHEC'}`);
    console.log(`Gestion d'erreurs: ${TEST_RESULTS.errorManagement ? '‚úÖ OK' : '‚ùå √âCHEC'}`);
    
  } catch (error) {
    console.error('\n‚ùå ERREUR LORS DES TESTS:', error);
  } finally {
    // Fermer la connexion MongoDB si elle √©tait ouverte
    if (mongoose.connection.readyState !== 0) {
      await mongoose.connection.close();
      console.log('\nConnexion MongoDB ferm√©e');
    }
    console.log('\nüèÅ FIN DES TESTS üèÅ');
  }
}

// Test 1: Simuler l'endpoint /api/health
async function testHealthEndpoint() {
  try {
    // V√©rifier si la connexion MongoDB est active
    const dbStatus = mongoose.connection.readyState === 1 ? 'connected' : 'disconnected';
    
    // Simuler la r√©ponse de l'endpoint /api/health
    const healthStatus = {
      status: dbStatus === 'connected' ? 'ok' : 'degraded',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      environment: process.env.NODE_ENV || 'development',
      database: dbStatus
    };
    
    console.log('√âtat du syst√®me:', healthStatus);
    
    // Tenter de se connecter √† MongoDB
    if (dbStatus !== 'connected') {
      try {
        console.log('Tentative de connexion √† MongoDB...');
        await mongoose.connect(process.env.MONGODB_URI, {
          useNewUrlParser: true,
          useUnifiedTopology: true,
          serverSelectionTimeoutMS: 5000
        });
        console.log('‚úÖ Connexion √† MongoDB r√©ussie');
        
        // Mettre √† jour le statut avec la nouvelle connexion
        healthStatus.database = 'connected';
        healthStatus.status = 'ok';
      } catch (dbError) {
        console.error('‚ùå √âchec de connexion √† MongoDB:', dbError.message);
        healthStatus.status = 'degraded';
        healthStatus.issues = ['database_connection'];
      }
    }
    
    console.log('√âtat final du syst√®me:', healthStatus);
    TEST_RESULTS.healthEndpoint = healthStatus.status === 'ok';
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de l\'endpoint /api/health:', error);
    TEST_RESULTS.healthEndpoint = false;
  }
}

// Test 2: Tester l'authentification JWT
async function testJwtAuthentication() {
  try {
    // 1. G√©n√©rer un token JWT
    console.log('G√©n√©ration d\'un token JWT...');
    const mockUser = {
      _id: '64a1b2c3d4e5f6a7b8c9d0e1',
      email: 'test@example.com',
      firstName: 'Test',
      lastName: 'User',
      role: 'user'
    };
    
    const tokens = authService.generateTokens(mockUser);
    console.log('‚úÖ Token g√©n√©r√© avec succ√®s');
    
    // 2. V√©rifier la validit√© du token
    console.log('V√©rification du token...');
    const decodedToken = await authService.verifyToken(tokens.accessToken);
    console.log('‚úÖ Token v√©rifi√© avec succ√®s');
    console.log('Donn√©es d√©cod√©es:', decodedToken);
    
    // 3. V√©rifier le temps restant du token
    const remainingTime = authService.getTokenRemainingTime(tokens.accessToken);
    console.log(`Temps restant du token: ${remainingTime} secondes`);
    
    // 4. Tester la r√©vocation du token
    console.log('Test de r√©vocation du token...');
    const revoked = await authService.logout(tokens.accessToken, mockUser._id);
    console.log(revoked ? '‚úÖ Token r√©voqu√© avec succ√®s' : '‚ùå √âchec de r√©vocation du token');
    
    // Tenter de v√©rifier le token r√©voqu√©
    try {
      await authService.verifyToken(tokens.accessToken);
      console.log('‚ùå Erreur: Le token r√©voqu√© a √©t√© valid√©');
      TEST_RESULTS.jwtAuthentication = false;
    } catch (error) {
      console.log('‚úÖ Le token r√©voqu√© a bien √©t√© rejet√©:', error.message);
      TEST_RESULTS.jwtAuthentication = true;
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test d\'authentification JWT:', error);
    TEST_RESULTS.jwtAuthentication = false;
  }
}

// Test 3: Tester la gestion d'erreurs
async function testErrorManagement() {
  try {
    console.log('Test des diff√©rents types d\'erreurs...');
    
    // Tableau des types d'erreurs √† tester
    const errorTypes = [
      'auth_error',
      'access_denied',
      'validation_error',
      'not_found',
      'server_error'
    ];
    
    // Tester chaque type d'erreur
    for (const type of errorTypes) {
      console.log(`\nTest d'une erreur de type: ${type}`);
      
      // Cr√©er une erreur avec errorService
      const error = errorService.createError({
        type,
        message: `Erreur test de type ${type}`,
        details: { test: true, timestamp: new Date().toISOString() },
        severity: errorService.SEVERITY_LEVELS.WARNING
      });
      
      // Afficher l'erreur cr√©√©e
      console.log('Erreur cr√©√©e:', {
        id: error.id,
        type: error.type,
        message: error.message,
        severity: error.severity,
        statusCode: errorService.HTTP_CODES[error.type]
      });
    }
    
    // Tester la capture d'une erreur non g√©r√©e
    console.log('\nTest de capture d\'une erreur non g√©r√©e...');
    try {
      // G√©n√©rer une erreur intentionnellement
      throw new Error('Erreur non g√©r√©e intentionnelle');
    } catch (error) {
      const handledError = errorService.createError({
        type: 'uncaught_exception',
        message: `Exception captur√©e: ${error.message}`,
        details: { stack: error.stack },
        severity: 'critical'
      });
      
      console.log('Erreur captur√©e et transform√©e:', {
        id: handledError.id,
        type: handledError.type,
        message: handledError.message,
        severity: handledError.severity
      });
    }
    
    // Obtenir les statistiques d'erreurs
    const stats = errorService.getErrorStats();
    console.log('\nStatistiques des erreurs:', stats);
    
    // Test r√©ussi
    TEST_RESULTS.errorManagement = true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de gestion d\'erreurs:', error);
    TEST_RESULTS.errorManagement = false;
  }
}

// Ex√©cuter les tests
runTests();
