{"version":3,"file":"static/js/126.ebd89dcf.chunk.js","mappings":"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","sources":["webpack://dashboard-velo/./src/components/nutrition/NutritionPlanner.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { \n  Box, \n  Typography, \n  TextField, \n  Select, \n  MenuItem, \n  FormControl, \n  InputLabel, \n  Button, \n  Grid, \n  Card, \n  CardContent, \n  Divider,\n  useMediaQuery,\n  useTheme,\n  Snackbar,\n  Alert\n} from '@mui/material';\nimport { Doughnut } from 'react-chartjs-2';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport './NutritionPlanner.css';\n\n// Enregistrer les composants Chart.js nécessaires\nChartJS.register(ArcElement, Tooltip, Legend);\n\n// Constantes pour les calculs nutritionnels\nconst ACTIVITY_FACTORS = {\n  light: 1.375,       // 1-3h/semaine\n  moderate: 1.55,     // 3-6h/semaine\n  active: 1.725,      // 6-10h/semaine\n  'very-active': 1.9, // 10-15h/semaine\n  extreme: 2.1        // 15h+/semaine\n};\n\nconst GOAL_FACTORS = {\n  maintain: { calories: 1, protein: 1.6, carbs: 5, fat: 1 },\n  lose: { calories: 0.85, protein: 2, carbs: 3, fat: 0.8 },\n  gain: { calories: 1.15, protein: 2, carbs: 6, fat: 1 },\n  performance: { calories: 1.1, protein: 1.8, carbs: 7, fat: 0.9 }\n};\n\n// Composant MacroChart pour afficher la répartition des macronutriments\nconst MacroChart = ({ macros }) => {\n  const data = {\n    labels: ['Protéines', 'Glucides', 'Lipides'],\n    datasets: [\n      {\n        data: [macros.protein, macros.carbs, macros.fat],\n        backgroundColor: [\n          'rgba(54, 162, 235, 0.8)',\n          'rgba(255, 206, 86, 0.8)',\n          'rgba(255, 99, 132, 0.8)'\n        ],\n        borderColor: [\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(255, 99, 132, 1)'\n        ],\n        borderWidth: 1\n      }\n    ]\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'bottom',\n        labels: {\n          font: {\n            size: 14\n          }\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function(context) {\n            const label = context.label || '';\n            const value = context.raw || 0;\n            const total = context.dataset.data.reduce((a, b) => a + b, 0);\n            const percentage = Math.round((value / total) * 100);\n            return `${label}: ${value}g (${percentage}%)`;\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <Box height={220}>\n      <Doughnut data={data} options={options} />\n    </Box>\n  );\n};\n\n// Composant HydrationPlanner pour planifier l'hydratation\nconst HydrationPlanner = ({ weight, activityLevel }) => {\n  // Calculer les besoins en hydratation en fonction du poids et du niveau d'activité\n  const baseHydration = weight * 0.033; // 33ml par kg de poids corporel\n  \n  let activityMultiplier;\n  switch (activityLevel) {\n    case 'light': activityMultiplier = 1.2; break;\n    case 'moderate': activityMultiplier = 1.4; break;\n    case 'active': activityMultiplier = 1.6; break;\n    case 'very-active': activityMultiplier = 1.8; break;\n    case 'extreme': activityMultiplier = 2.0; break;\n    default: activityMultiplier = 1.4;\n  }\n  \n  const totalHydration = baseHydration * activityMultiplier;\n  const duringExercise = weight * 0.5; // 500ml par heure d'exercice par kg\n  \n  return (\n    <Card variant=\"outlined\" sx={{ mt: 2, mb: 2 }}>\n      <CardContent>\n        <Typography variant=\"h6\" gutterBottom>Plan d'Hydratation</Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <Typography variant=\"body2\">Hydratation quotidienne</Typography>\n            <Typography variant=\"h5\">{totalHydration.toFixed(1)} L</Typography>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Typography variant=\"body2\">Pendant l'effort (par heure)</Typography>\n            <Typography variant=\"h5\">{duringExercise.toFixed(1)} L</Typography>\n          </Grid>\n        </Grid>\n        <Typography variant=\"body2\" sx={{ mt: 2 }}>\n          Conseils: Buvez régulièrement tout au long de la journée. Pour les sorties de plus de 90 minutes, \n          ajoutez des électrolytes à votre eau.\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Composant principal NutritionPlanner\nconst NutritionPlanner = () => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  \n  // États pour les entrées utilisateur\n  const [formData, setFormData] = useState({\n    weight: '',\n    height: '',\n    age: '',\n    gender: 'male',\n    activityLevel: 'moderate',\n    goal: 'maintain'\n  });\n  \n  // États pour les résultats calculés\n  const [nutritionNeeds, setNutritionNeeds] = useState(null);\n  const [showResults, setShowResults] = useState(false);\n  const [notification, setNotification] = useState({ open: false, message: '', severity: 'success' });\n  \n  // Gestionnaire de changement pour les champs du formulaire\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  // Fonction de calcul des besoins nutritionnels\n  const calculateNutritionNeeds = useCallback(() => {\n    const { weight, height, age, gender, activityLevel, goal } = formData;\n    \n    // Vérifier que toutes les données nécessaires sont présentes\n    if (!weight || !height || !age) {\n      setNotification({\n        open: true,\n        message: 'Veuillez remplir tous les champs obligatoires',\n        severity: 'error'\n      });\n      return;\n    }\n    \n    // Convertir les entrées en nombres\n    const weightNum = parseFloat(weight);\n    const heightNum = parseFloat(height);\n    const ageNum = parseInt(age);\n    \n    // Formule de Harris-Benedict pour le métabolisme de base (BMR)\n    let bmr;\n    if (gender === 'male') {\n      bmr = 88.362 + (13.397 * weightNum) + (4.799 * heightNum) - (5.677 * ageNum);\n    } else {\n      bmr = 447.593 + (9.247 * weightNum) + (3.098 * heightNum) - (4.330 * ageNum);\n    }\n    \n    // Calculer les besoins caloriques totaux\n    const activityFactor = ACTIVITY_FACTORS[activityLevel];\n    const goalFactors = GOAL_FACTORS[goal];\n    \n    const totalCalories = Math.round(bmr * activityFactor * goalFactors.calories);\n    \n    // Calculer les macronutriments en grammes\n    const protein = Math.round(weightNum * goalFactors.protein);\n    const fat = Math.round((totalCalories * 0.25) / 9); // 25% des calories proviennent des lipides, 9 cal/g\n    const carbs = Math.round((totalCalories - (protein * 4) - (fat * 9)) / 4); // 4 cal/g pour les glucides\n    \n    // Mettre à jour l'état avec les résultats calculés\n    setNutritionNeeds({\n      calories: totalCalories,\n      protein,\n      carbs,\n      fat\n    });\n    \n    setShowResults(true);\n    setNotification({\n      open: true,\n      message: 'Calcul effectué avec succès',\n      severity: 'success'\n    });\n  }, [formData]);\n  \n  // Fonction pour générer un plan alimentaire\n  const generateMealPlan = () => {\n    if (!nutritionNeeds) {\n      setNotification({\n        open: true,\n        message: 'Veuillez d\\'abord calculer vos besoins nutritionnels',\n        severity: 'warning'\n      });\n      return;\n    }\n    \n    setNotification({\n      open: true,\n      message: 'Plan alimentaire généré avec succès',\n      severity: 'success'\n    });\n    \n    // Ici, on pourrait implémenter la logique pour générer un plan alimentaire personnalisé\n    // basé sur les besoins nutritionnels calculés\n  };\n  \n  // Fonction pour sauvegarder le plan\n  const savePlan = () => {\n    if (!nutritionNeeds) {\n      setNotification({\n        open: true,\n        message: 'Aucun plan à sauvegarder',\n        severity: 'warning'\n      });\n      return;\n    }\n    \n    // Sauvegarder dans le localStorage\n    localStorage.setItem('nutritionPlan', JSON.stringify({\n      formData,\n      nutritionNeeds\n    }));\n    \n    setNotification({\n      open: true,\n      message: 'Plan sauvegardé avec succès',\n      severity: 'success'\n    });\n  };\n  \n  // Fonction pour charger un plan sauvegardé\n  const loadPlan = () => {\n    const savedPlan = localStorage.getItem('nutritionPlan');\n    \n    if (!savedPlan) {\n      setNotification({\n        open: true,\n        message: 'Aucun plan sauvegardé trouvé',\n        severity: 'warning'\n      });\n      return;\n    }\n    \n    const { formData: savedFormData, nutritionNeeds: savedNeeds } = JSON.parse(savedPlan);\n    \n    setFormData(savedFormData);\n    setNutritionNeeds(savedNeeds);\n    setShowResults(true);\n    \n    setNotification({\n      open: true,\n      message: 'Plan chargé avec succès',\n      severity: 'success'\n    });\n  };\n  \n  // Fermer la notification\n  const handleCloseNotification = () => {\n    setNotification(prev => ({ ...prev, open: false }));\n  };\n  \n  // Effet pour charger le plan sauvegardé au chargement du composant\n  useEffect(() => {\n    const savedPlan = localStorage.getItem('nutritionPlan');\n    if (savedPlan) {\n      try {\n        const { formData: savedFormData, nutritionNeeds: savedNeeds } = JSON.parse(savedPlan);\n        setFormData(savedFormData);\n        setNutritionNeeds(savedNeeds);\n        setShowResults(true);\n      } catch (error) {\n        console.error('Erreur lors du chargement du plan:', error);\n      }\n    }\n  }, []);\n  \n  return (\n    <Box className=\"nutrition-planner\" sx={{ p: 2 }}>\n      <Box className=\"nutrition-header\" sx={{ textAlign: 'center', mb: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Planificateur Nutritionnel\n        </Typography>\n        <Typography variant=\"subtitle1\">\n          Optimisez votre alimentation pour maximiser vos performances cyclistes\n        </Typography>\n      </Box>\n      \n      <Grid container spacing={3} className=\"nutrition-content\">\n        <Grid item xs={12} md={5} className=\"nutrition-calculator\">\n          <Card variant=\"outlined\">\n            <CardContent>\n              <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n                Calculateur de Besoins\n              </Typography>\n              <Box component=\"form\" className=\"nutrition-form\" sx={{ mt: 2 }}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Poids (kg)\"\n                      name=\"weight\"\n                      type=\"number\"\n                      value={formData.weight}\n                      onChange={handleChange}\n                      InputProps={{ inputProps: { min: 30, max: 200 } }}\n                      required\n                    />\n                  </Grid>\n                  \n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Taille (cm)\"\n                      name=\"height\"\n                      type=\"number\"\n                      value={formData.height}\n                      onChange={handleChange}\n                      InputProps={{ inputProps: { min: 100, max: 250 } }}\n                      required\n                    />\n                  </Grid>\n                  \n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Âge\"\n                      name=\"age\"\n                      type=\"number\"\n                      value={formData.age}\n                      onChange={handleChange}\n                      InputProps={{ inputProps: { min: 15, max: 100 } }}\n                      required\n                    />\n                  </Grid>\n                  \n                  <Grid item xs={12} sm={6}>\n                    <FormControl fullWidth>\n                      <InputLabel>Sexe</InputLabel>\n                      <Select\n                        name=\"gender\"\n                        value={formData.gender}\n                        onChange={handleChange}\n                        label=\"Sexe\"\n                      >\n                        <MenuItem value=\"male\">Homme</MenuItem>\n                        <MenuItem value=\"female\">Femme</MenuItem>\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  \n                  <Grid item xs={12}>\n                    <FormControl fullWidth>\n                      <InputLabel>Niveau d'activité</InputLabel>\n                      <Select\n                        name=\"activityLevel\"\n                        value={formData.activityLevel}\n                        onChange={handleChange}\n                        label=\"Niveau d'activité\"\n                      >\n                        <MenuItem value=\"light\">Léger (1-3h/semaine)</MenuItem>\n                        <MenuItem value=\"moderate\">Modéré (3-6h/semaine)</MenuItem>\n                        <MenuItem value=\"active\">Actif (6-10h/semaine)</MenuItem>\n                        <MenuItem value=\"very-active\">Très actif (10-15h/semaine)</MenuItem>\n                        <MenuItem value=\"extreme\">Extrême (15h+/semaine)</MenuItem>\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  \n                  <Grid item xs={12}>\n                    <FormControl fullWidth>\n                      <InputLabel>Objectif</InputLabel>\n                      <Select\n                        name=\"goal\"\n                        value={formData.goal}\n                        onChange={handleChange}\n                        label=\"Objectif\"\n                      >\n                        <MenuItem value=\"maintain\">Maintien du poids</MenuItem>\n                        <MenuItem value=\"lose\">Perte de poids</MenuItem>\n                        <MenuItem value=\"gain\">Prise de masse</MenuItem>\n                        <MenuItem value=\"performance\">Performance maximale</MenuItem>\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  \n                  <Grid item xs={12}>\n                    <Button \n                      variant=\"contained\" \n                      color=\"primary\" \n                      fullWidth \n                      onClick={calculateNutritionNeeds}\n                      className=\"calculate-button\"\n                    >\n                      Calculer\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} md={7} className=\"nutrition-results\">\n          <Card variant=\"outlined\">\n            <CardContent>\n              <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n                Vos Besoins Nutritionnels\n              </Typography>\n              \n              {showResults && nutritionNeeds ? (\n                <>\n                  <Box className=\"macros-chart\" sx={{ mt: 2, mb: 2 }}>\n                    <MacroChart macros={nutritionNeeds} />\n                  </Box>\n                  \n                  <Grid container spacing={2} className=\"nutrition-summary\">\n                    <Grid item xs={6} sm={3}>\n                      <Typography variant=\"body2\" className=\"summary-label\">Calories quotidiennes</Typography>\n                      <Typography variant=\"h6\" className=\"summary-value\">{nutritionNeeds.calories} kcal</Typography>\n                    </Grid>\n                    \n                    <Grid item xs={6} sm={3}>\n                      <Typography variant=\"body2\" className=\"summary-label\">Protéines</Typography>\n                      <Typography variant=\"h6\" className=\"summary-value\">{nutritionNeeds.protein} g</Typography>\n                    </Grid>\n                    \n                    <Grid item xs={6} sm={3}>\n                      <Typography variant=\"body2\" className=\"summary-label\">Glucides</Typography>\n                      <Typography variant=\"h6\" className=\"summary-value\">{nutritionNeeds.carbs} g</Typography>\n                    </Grid>\n                    \n                    <Grid item xs={6} sm={3}>\n                      <Typography variant=\"body2\" className=\"summary-label\">Lipides</Typography>\n                      <Typography variant=\"h6\" className=\"summary-value\">{nutritionNeeds.fat} g</Typography>\n                    </Grid>\n                  </Grid>\n                  \n                  {formData.weight && (\n                    <HydrationPlanner \n                      weight={parseFloat(formData.weight)} \n                      activityLevel={formData.activityLevel} \n                    />\n                  )}\n                </>\n              ) : (\n                <Box \n                  sx={{ \n                    display: 'flex', \n                    justifyContent: 'center', \n                    alignItems: 'center', \n                    height: 300,\n                    flexDirection: 'column'\n                  }}\n                >\n                  <Typography variant=\"body1\" color=\"text.secondary\" align=\"center\">\n                    Remplissez le formulaire et cliquez sur \"Calculer\" pour voir vos besoins nutritionnels\n                  </Typography>\n                </Box>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n      \n      <Box className=\"cycling-nutrition\" sx={{ mt: 4 }}>\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n          Nutrition Spécifique au Cyclisme\n        </Typography>\n        \n        <Grid container spacing={3} className=\"nutrition-phases\">\n          <Grid item xs={12} sm={4}>\n            <Card className=\"phase-card\" sx={{ height: '100%' }}>\n              <CardContent>\n                <Typography variant=\"h6\" component=\"h3\" gutterBottom>\n                  Avant l'effort\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                  Recommandations pour bien préparer votre organisme avant une sortie\n                </Typography>\n                <Divider sx={{ my: 1 }} />\n                <Box component=\"ul\" sx={{ pl: 2 }}>\n                  <Typography component=\"li\" variant=\"body2\">Repas riche en glucides 3-4h avant</Typography>\n                  <Typography component=\"li\" variant=\"body2\">Hydratation progressive</Typography>\n                  <Typography component=\"li\" variant=\"body2\">Collation légère 30-60min avant si nécessaire</Typography>\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          \n          <Grid item xs={12} sm={4}>\n            <Card className=\"phase-card\" sx={{ height: '100%' }}>\n              <CardContent>\n                <Typography variant=\"h6\" component=\"h3\" gutterBottom>\n                  Pendant l'effort\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                  Stratégies pour maintenir l'énergie durant vos sorties\n                </Typography>\n                <Divider sx={{ my: 1 }} />\n                <Box component=\"ul\" sx={{ pl: 2 }}>\n                  <Typography component=\"li\" variant=\"body2\">30-60g de glucides par heure</Typography>\n                  <Typography component=\"li\" variant=\"body2\">500-750ml d'eau par heure</Typography>\n                  <Typography component=\"li\" variant=\"body2\">Électrolytes pour les efforts prolongés</Typography>\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          \n          <Grid item xs={12} sm={4}>\n            <Card className=\"phase-card\" sx={{ height: '100%' }}>\n              <CardContent>\n                <Typography variant=\"h6\" component=\"h3\" gutterBottom>\n                  Après l'effort\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                  Optimisez votre récupération après chaque sortie\n                </Typography>\n                <Divider sx={{ my: 1 }} />\n                <Box component=\"ul\" sx={{ pl: 2 }}>\n                  <Typography component=\"li\" variant=\"body2\">Protéines et glucides dans les 30min</Typography>\n                  <Typography component=\"li\" variant=\"body2\">Réhydratation avec électrolytes</Typography>\n                  <Typography component=\"li\" variant=\"body2\">Repas complet dans les 2h</Typography>\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n      \n      <Box className=\"meal-planner\" sx={{ mt: 4 }}>\n        <Card variant=\"outlined\">\n          <CardContent>\n            <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n              Planificateur de Repas\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n              Créez votre plan alimentaire personnalisé\n            </Typography>\n            \n            <Grid container spacing={2} className=\"meal-planner-actions\">\n              <Grid item xs={12} sm={4}>\n                <Button \n                  variant=\"contained\" \n                  color=\"primary\" \n                  fullWidth \n                  onClick={generateMealPlan}\n                  className=\"action-button\"\n                >\n                  Générer un plan\n                </Button>\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <Button \n                  variant=\"outlined\" \n                  color=\"primary\" \n                  fullWidth \n                  onClick={savePlan}\n                  className=\"action-button\"\n                >\n                  Sauvegarder\n                </Button>\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <Button \n                  variant=\"outlined\" \n                  color=\"primary\" \n                  fullWidth \n                  onClick={loadPlan}\n                  className=\"action-button\"\n                >\n                  Charger\n                </Button>\n              </Grid>\n            </Grid>\n          </CardContent>\n        </Card>\n      </Box>\n      \n      <Snackbar \n        open={notification.open} \n        autoHideDuration={6000} \n        onClose={handleCloseNotification}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      >\n        <Alert onClose={handleCloseNotification} severity={notification.severity} sx={{ width: '100%' }}>\n          {notification.message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n};\n\nexport default NutritionPlanner;\n"],"names":["ChartJS","register","ArcElement","Tooltip","Legend","ACTIVITY_FACTORS","light","moderate","active","extreme","GOAL_FACTORS","maintain","calories","protein","carbs","fat","lose","gain","performance","MacroChart","_ref","macros","data","labels","datasets","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","plugins","legend","position","font","size","tooltip","callbacks","label","context","value","raw","total","dataset","reduce","a","b","percentage","Math","round","concat","React","Box","height","Doughnut","HydrationPlanner","_ref2","activityMultiplier","weight","baseHydration","activityLevel","totalHydration","duringExercise","Card","variant","sx","mt","mb","CardContent","Typography","gutterBottom","Grid","container","spacing","item","xs","sm","toFixed","theme","useTheme","_useState","useMediaQuery","breakpoints","down","useState","age","gender","goal","_useState2","_slicedToArray","formData","setFormData","_useState3","_useState4","nutritionNeeds","setNutritionNeeds","_useState5","_useState6","showResults","setShowResults","_useState7","open","message","severity","_useState8","notification","setNotification","handleChange","e","_e$target","target","name","prev","_objectSpread","_defineProperty","calculateNutritionNeeds","useCallback","bmr","weightNum","parseFloat","heightNum","ageNum","parseInt","activityFactor","goalFactors","totalCalories","handleCloseNotification","useEffect","savedPlan","localStorage","getItem","_JSON$parse2","JSON","parse","savedFormData","savedNeeds","error","className","p","textAlign","component","md","TextField","fullWidth","type","onChange","InputProps","inputProps","min","max","required","FormControl","InputLabel","Select","MenuItem","Button","color","onClick","display","justifyContent","alignItems","flexDirection","align","paragraph","Divider","my","pl","setItem","stringify","_JSON$parse","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","width"],"sourceRoot":""}