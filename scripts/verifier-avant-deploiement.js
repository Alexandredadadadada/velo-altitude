/**
 * Script de v√©rification compl√®te avant d√©ploiement
 * V√©rifie tous les composants critiques de l'application Velo-Altitude
 */

require('dotenv').config();
const { MongoClient } = require('mongodb');
const fs = require('fs').promises;
const path = require('path');

// Tests √† effectuer avant d√©ploiement
async function verifierAvantDeploiement() {
  console.log('=== V√âRIFICATION PR√â-D√âPLOIEMENT ===');
  console.log('üïí Date: ' + new Date().toISOString());
  
  let allTestsPassed = true;
  const results = {
    database: { success: false, details: [] },
    files: { success: false, details: [] },
    environment: { success: false, details: [] }
  };

  try {
    // 1. V√©rification de la base de donn√©es
    console.log('\nüìä V√âRIFICATION DE LA BASE DE DONN√âES');
    const dbResult = await verifierBaseDeDonnees();
    results.database = dbResult;
    if (!dbResult.success) allTestsPassed = false;

    // 2. V√©rification des fichiers essentiels
    console.log('\nüìÅ V√âRIFICATION DES FICHIERS ESSENTIELS');
    const filesResult = await verifierFichiersEssentiels();
    results.files = filesResult;
    if (!filesResult.success) allTestsPassed = false;

    // 3. V√©rification des variables d'environnement
    console.log('\nüîê V√âRIFICATION DES VARIABLES D\'ENVIRONNEMENT');
    const envResult = await verifierEnvironnement();
    results.environment = envResult;
    if (!envResult.success) allTestsPassed = false;

    // Rapport final
    console.log('\n===== RAPPORT FINAL =====');
    console.log(`Base de donn√©es: ${results.database.success ? '‚úÖ OK' : '‚ùå PROBL√àMES D√âTECT√âS'}`);
    console.log(`Fichiers: ${results.files.success ? '‚úÖ OK' : '‚ùå PROBL√àMES D√âTECT√âS'}`);
    console.log(`Environnement: ${results.environment.success ? '‚úÖ OK' : '‚ùå PROBL√àMES D√âTECT√âS'}`);
    
    console.log('\nüèÅ R√âSULTAT FINAL:');
    if (allTestsPassed) {
      console.log('‚úÖ TOUS LES TESTS SONT PASS√âS! Le site est pr√™t √† √™tre d√©ploy√©.');
    } else {
      console.log('‚ùå CERTAINS TESTS ONT √âCHOU√â. Veuillez corriger les probl√®mes avant le d√©ploiement.');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
    allTestsPassed = false;
  }

  return { success: allTestsPassed, results };
}

// Test de la base de donn√©es
async function verifierBaseDeDonnees() {
  const dbName = process.env.MONGODB_DB_NAME || 'velo-altitude';
  const uri = process.env.MONGODB_URI || "mongodb://localhost:27017";
  const result = { success: false, details: [] };

  let client;
  try {
    client = new MongoClient(uri);
    await client.connect();
    console.log(`‚úÖ Connexion r√©ussie √† MongoDB`);
    result.details.push('Connexion MongoDB: OK');

    // V√©rifier l'existence de la base de donn√©es
    const adminDb = client.db('admin');
    const dbs = await adminDb.admin().listDatabases();
    const dbExists = dbs.databases.some(db => db.name === dbName);
    
    if (dbExists) {
      console.log(`‚úÖ Base de donn√©es "${dbName}" trouv√©e`);
      result.details.push(`Base "${dbName}": OK`);
      
      // V√©rifier les collections essentielles
      const db = client.db(dbName);
      const collections = await db.listCollections().toArray();
      const colsExists = collections.some(c => c.name === 'cols');
      
      if (colsExists) {
        const colsCollection = db.collection('cols');
        const colsCount = await colsCollection.countDocuments();
        console.log(`‚úÖ Collection "cols" trouv√©e avec ${colsCount} documents`);
        result.details.push(`Collection "cols": ${colsCount} documents`);
        
        // V√©rifier la structure des donn√©es
        if (colsCount > 0) {
          const sample = await colsCollection.find().limit(1).toArray();
          const col = sample[0];
          
          // V√©rifier les champs essentiels
          const hasRequiredFields = col.name && col.elevation && col.coordinates;
          const has3DData = col.visualization3D !== undefined;
          
          if (hasRequiredFields) {
            console.log('‚úÖ Structure des cols: Les champs requis sont pr√©sents');
            result.details.push('Structure des cols: OK');
          } else {
            console.log('‚ùå Structure des cols: Certains champs requis sont manquants');
            result.details.push('Structure des cols: ERREUR - Champs manquants');
            return { success: false, details: result.details };
          }
          
          if (has3DData) {
            console.log('‚úÖ Donn√©es 3D: Pr√©sentes');
            result.details.push('Donn√©es 3D: OK');
          } else {
            console.log('‚ö†Ô∏è Donn√©es 3D: Absentes dans certains cols');
            result.details.push('Donn√©es 3D: Avertissement - Absentes dans certains cols');
            // On ne fait pas √©chouer le test pour √ßa, mais on pr√©vient
          }
        }
      } else {
        console.log('‚ùå Collection "cols" non trouv√©e');
        result.details.push('Collection "cols": ERREUR - Non trouv√©e');
        return { success: false, details: result.details };
      }
    } else {
      console.log(`‚ùå Base de donn√©es "${dbName}" non trouv√©e`);
      result.details.push(`Base "${dbName}": ERREUR - Non trouv√©e`);
      return { success: false, details: result.details };
    }
    
    result.success = true;
    return result;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification de la base de donn√©es:', error.message);
    result.details.push(`Erreur de connexion: ${error.message}`);
    return { success: false, details: result.details };
  } finally {
    if (client) await client.close();
  }
}

// V√©rification des fichiers essentiels
async function verifierFichiersEssentiels() {
  const result = { success: false, details: [] };
  const fichiersEssentiels = [
    { path: 'package.json', description: 'Fichier de configuration du projet' },
    { path: '.env', description: 'Variables d\'environnement' },
    { path: 'netlify.toml', description: 'Configuration Netlify' },
    { path: 'src/index.js', description: 'Point d\'entr√©e de l\'application' },
    { path: 'src/services/database/database-manager.js', description: 'Gestionnaire de base de donn√©es' },
    { path: 'public/index.html', description: 'Page HTML principale' }
  ];
  
  let allFilesExist = true;
  
  for (const file of fichiersEssentiels) {
    try {
      await fs.access(path.resolve(__dirname, '..', file.path));
      console.log(`‚úÖ ${file.description} (${file.path}): Pr√©sent`);
      result.details.push(`${file.path}: OK`);
    } catch (error) {
      console.log(`‚ùå ${file.description} (${file.path}): MANQUANT`);
      result.details.push(`${file.path}: ERREUR - Fichier manquant`);
      allFilesExist = false;
    }
  }
  
  result.success = allFilesExist;
  return result;
}

// V√©rification des variables d'environnement
async function verifierEnvironnement() {
  const result = { success: false, details: [] };
  const variablesRequises = [
    'MONGODB_URI',
    'MONGODB_DB_NAME',
    'NODE_ENV'
  ];
  
  const variablesOptionnelles = [
    'MAPBOX_TOKEN',
    'OPENWEATHER_API_KEY',
    'REACT_APP_API_URL'
  ];
  
  let allRequiredExist = true;
  
  console.log('Variables d\'environnement requises:');
  for (const variable of variablesRequises) {
    if (process.env[variable]) {
      const value = variable.includes('URI') || variable.includes('KEY') || variable.includes('SECRET') 
        ? '********' 
        : process.env[variable];
      console.log(`‚úÖ ${variable}: Pr√©sente (${value})`);
      result.details.push(`${variable}: OK`);
    } else {
      console.log(`‚ùå ${variable}: MANQUANTE`);
      result.details.push(`${variable}: ERREUR - Variable manquante`);
      allRequiredExist = false;
    }
  }
  
  console.log('\nVariables d\'environnement optionnelles:');
  for (const variable of variablesOptionnelles) {
    if (process.env[variable]) {
      console.log(`‚úÖ ${variable}: Pr√©sente`);
      result.details.push(`${variable}: OK`);
    } else {
      console.log(`‚ö†Ô∏è ${variable}: Non d√©finie (optionnelle)`);
      result.details.push(`${variable}: Avertissement - Non d√©finie`);
    }
  }
  
  result.success = allRequiredExist;
  return result;
}

// Ex√©cuter les v√©rifications
verifierAvantDeploiement().catch(console.error);
