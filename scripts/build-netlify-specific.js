/**
 * Script de build Netlify sp√©cialis√© pour Velo-Altitude
 * Con√ßu pour fonctionner avec la structure hybride du projet
 * et les services refactoris√©s (RealApiOrchestrator)
 */

const path = require('path');
const fs = require('fs');
const webpack = require('webpack');
const { execSync } = require('child_process');

console.log('üöÄ D√©marrage du build Netlify sp√©cialis√© pour Velo-Altitude...');

// V√©rification de l'environnement
console.log('üìã Variables d\'environnement configur√©es:');
['NODE_ENV', 'CI', 'REACT_APP_API_URL', 'REACT_APP_BASE_URL'].forEach(envVar => {
  console.log(`${envVar}: ${process.env[envVar] || '(non d√©fini)'}`);
});

// Cr√©er un fichier .env.production temporaire si n√©cessaire
const envFilePath = path.resolve(__dirname, '../.env.production');
if (!fs.existsSync(envFilePath)) {
  console.log('‚ÑπÔ∏è Cr√©ation d\'un fichier .env.production temporaire');
  
  const envContent = `
REACT_APP_API_URL=${process.env.REACT_APP_API_URL || 'https://velo-altitude.netlify.app/api'}
REACT_APP_BASE_URL=${process.env.REACT_APP_BASE_URL || 'https://velo-altitude.netlify.app'}
REACT_APP_BRAND_NAME=Velo-Altitude
REACT_APP_VERSION=1.0.0
REACT_APP_ENABLE_ANALYTICS=false
`;
  
  fs.writeFileSync(envFilePath, envContent.trim());
  console.log('‚úÖ Fichier .env.production cr√©√©');
}

// V√©rifier l'installation de webpack-cli
try {
  console.log('üîç V√©rification de webpack-cli...');
  require.resolve('webpack-cli');
  console.log('‚úÖ webpack-cli est install√©');
} catch (error) {
  console.log('‚ö†Ô∏è webpack-cli non trouv√©, installation...');
  execSync('npm install --save-dev webpack-cli', { stdio: 'inherit' });
  console.log('‚úÖ webpack-cli install√©');
}

// V√©rifier les loaders n√©cessaires
const requiredLoaders = [
  'css-loader', 
  'style-loader', 
  'file-loader', 
  'ts-loader',
  'raw-loader',
  'glslify-loader'
];

console.log('üîç V√©rification des loaders n√©cessaires...');

for (const loader of requiredLoaders) {
  try {
    require.resolve(loader);
    console.log(`‚úÖ ${loader} est install√©`);
  } catch (error) {
    console.log(`‚ö†Ô∏è ${loader} non trouv√©, installation...`);
    execSync(`npm install --save-dev ${loader} --legacy-peer-deps`, { stdio: 'inherit' });
    console.log(`‚úÖ ${loader} install√©`);
  }
}

// Lancer le build webpack
console.log('üöÄ Lancement du build webpack...');

// Utilisation de la commande npm run build standard
try {
  execSync('npx cross-env CI=false NODE_ENV=production npm run build', { 
    stdio: 'inherit',
    env: {
      ...process.env,
      CI: 'false',
      NODE_ENV: 'production'
    }
  });
  console.log('‚úÖ Build webpack termin√© avec succ√®s');
} catch (error) {
  console.error('‚ùå Erreur lors du build webpack:', error.message);
  process.exit(1);
}

// Cr√©er les fichiers pour Netlify
const buildDir = path.resolve(__dirname, '../build');

// Fichier _redirects
const redirectsContent = `
# Redirections Netlify pour Velo-Altitude
/api/*    /.netlify/functions/api/:splat    200
/*    /index.html   200
`;

fs.writeFileSync(path.join(buildDir, '_redirects'), redirectsContent.trim());
console.log('‚úÖ Fichier _redirects cr√©√©');

// Fichier robots.txt s'il n'existe pas d√©j√†
const robotsPath = path.join(buildDir, 'robots.txt');
if (!fs.existsSync(robotsPath)) {
  const robotsContent = `
User-agent: *
Allow: /
`;
  fs.writeFileSync(robotsPath, robotsContent.trim());
  console.log('‚úÖ Fichier robots.txt cr√©√©');
}

console.log('üéâ Build Netlify finalis√© et pr√™t pour d√©ploiement!');
