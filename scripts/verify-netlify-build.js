/**
 * verify-netlify-build.js
 * Script pour v√©rifier la compatibilit√© du build avec Netlify
 * 
 * Ex√©cute un build dans un environnement simulant Netlify et v√©rifie les erreurs courantes
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const chalk = require('chalk') || { green: (t) => t, red: (t) => t, yellow: (t) => t, blue: (t) => t };

// Chemins importants
const rootDir = path.resolve(__dirname, '..');
const buildDir = path.join(rootDir, 'build');
const netlifyTomlPath = path.join(rootDir, 'netlify.toml');

console.log(chalk.blue('üîç V√©rification de la compatibilit√© Netlify\n'));

// V√©rifier si netlify.toml existe
if (!fs.existsSync(netlifyTomlPath)) {
  console.error(chalk.red('‚ùå Fichier netlify.toml non trouv√©'));
  process.exit(1);
}

console.log(chalk.green('‚úÖ Fichier netlify.toml trouv√©'));

// Lire la configuration Netlify
const netlifyToml = fs.readFileSync(netlifyTomlPath, 'utf8');
console.log(chalk.blue('\nConfiguration Netlify:'));

// Extraire des informations cl√©s
const nodeVersionMatch = netlifyToml.match(/NODE_VERSION\s*=\s*["']([^"']+)["']/);
const nodeVersion = nodeVersionMatch ? nodeVersionMatch[1] : 'non sp√©cifi√©';

const npmVersionMatch = netlifyToml.match(/NPM_VERSION\s*=\s*["']([^"']+)["']/);
const npmVersion = npmVersionMatch ? npmVersionMatch[1] : 'non sp√©cifi√©';

const buildCommandMatch = netlifyToml.match(/command\s*=\s*["']([^"']+)["']/);
const buildCommand = buildCommandMatch ? buildCommandMatch[1] : 'non sp√©cifi√©';

const publishDirMatch = netlifyToml.match(/publish\s*=\s*["']([^"']+)["']/);
const publishDir = publishDirMatch ? publishDirMatch[1] : 'non sp√©cifi√©';

console.log(`- Version Node: ${nodeVersion}`);
console.log(`- Version NPM: ${npmVersion}`);
console.log(`- Commande de build: ${buildCommand}`);
console.log(`- R√©pertoire de publication: ${publishDir}`);

// V√©rifier le package.json
const packageJsonPath = path.join(rootDir, 'package.json');
if (!fs.existsSync(packageJsonPath)) {
  console.error(chalk.red('\n‚ùå Fichier package.json non trouv√©'));
  process.exit(1);
}

const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
console.log(chalk.blue('\nScripts disponibles:'));
for (const [key, value] of Object.entries(packageJson.scripts)) {
  if (key.includes('build') || key.includes('deploy') || key === 'validate') {
    console.log(`- ${key}: ${value}`);
  }
}

// V√©rifier les d√©pendances requises pour Netlify
console.log(chalk.blue('\nV√©rification des d√©pendances critiques:'));
const criticalDeps = [
  '@babel/core', 
  '@babel/preset-env', 
  '@babel/preset-react', 
  'babel-loader', 
  'webpack', 
  'webpack-cli',
  'html-webpack-plugin',
  'mini-css-extract-plugin'
];

const missingDeps = [];
for (const dep of criticalDeps) {
  const found = packageJson.dependencies[dep] || packageJson.devDependencies[dep];
  if (found) {
    console.log(chalk.green(`‚úÖ ${dep}: ${found}`));
  } else {
    console.log(chalk.red(`‚ùå ${dep}: manquant`));
    missingDeps.push(dep);
  }
}

// Simuler un build Netlify
console.log(chalk.blue('\nüöÄ Simulation du build Netlify:'));
try {
  // Nettoyer le r√©pertoire de build s'il existe
  if (fs.existsSync(buildDir)) {
    console.log('Nettoyage du r√©pertoire build...');
    try {
      execSync('npm run clean', { cwd: rootDir, stdio: 'inherit' });
    } catch (e) {
      // Si clean script fails, try manual removal
      console.log('Suppression manuelle du r√©pertoire build...');
      fs.rmSync(buildDir, { recursive: true, force: true });
    }
  }

  // D√©finir les variables d'environnement comme sur Netlify
  const env = {
    ...process.env,
    CI: 'false',
    NODE_ENV: 'production'
  };

  // Ex√©cuter le build (sans utiliser toute la commande Netlify pour √©viter les probl√®mes)
  console.log('\nEx√©cution du build de test...');
  
  // Utiliser un script de build simplifi√© pour le test
  execSync('npm run build', { 
    cwd: rootDir, 
    stdio: 'inherit',
    env
  });

  // V√©rifier que le r√©pertoire de build a √©t√© cr√©√©
  if (!fs.existsSync(buildDir)) {
    console.error(chalk.red('\n‚ùå Le build a √©chou√© - Le r√©pertoire build n\'a pas √©t√© cr√©√©'));
    process.exit(1);
  }

  // V√©rifier la taille du build
  let buildSize = 0;
  const calcDirSize = (dirPath) => {
    const files = fs.readdirSync(dirPath, { withFileTypes: true });
    for (const file of files) {
      const filePath = path.join(dirPath, file.name);
      if (file.isDirectory()) {
        calcDirSize(filePath);
      } else {
        buildSize += fs.statSync(filePath).size;
      }
    }
  };
  
  calcDirSize(buildDir);
  const buildSizeMB = (buildSize / (1024 * 1024)).toFixed(2);
  console.log(chalk.green(`\n‚úÖ Build r√©ussi! Taille: ${buildSizeMB} MB`));

  // V√©rifier la pr√©sence des fichiers essentiels
  console.log(chalk.blue('\nV√©rification des fichiers essentiels:'));
  const essentialFiles = [
    'index.html',
    path.join('static', 'js')
  ];

  for (const file of essentialFiles) {
    const filePath = path.join(buildDir, file);
    if (fs.existsSync(filePath)) {
      console.log(chalk.green(`‚úÖ ${file}`));
    } else {
      console.log(chalk.red(`‚ùå ${file}`));
    }
  }

  // Recommandations finales
  console.log(chalk.blue('\nüìã Recommandations pour Netlify:'));
  
  if (missingDeps.length > 0) {
    console.log(chalk.yellow(`‚ö†Ô∏è Installer les d√©pendances manquantes: ${missingDeps.join(', ')}`));
  }
  
  console.log(chalk.green(`
‚úÖ Votre projet semble pr√™t pour Netlify. Commandes recommand√©es:

1. Build local complet:       npm run pre-deploy
2. D√©ploiement sur Netlify:   git push origin main

Si vous rencontrez des probl√®mes sur Netlify, v√©rifiez les logs de build sur la plateforme.
  `));

} catch (error) {
  console.error(chalk.red(`\n‚ùå Erreur lors du build: ${error.message}`));
  process.exit(1);
}
