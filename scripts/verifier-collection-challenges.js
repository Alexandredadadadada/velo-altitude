/**
 * Script pour v√©rifier sp√©cifiquement la collection "challenges"
 * et comprendre le probl√®me d'inconsistance entre underscore et tiret
 */

require('dotenv').config();
const { MongoClient } = require('mongodb');

async function verifierChallenges() {
  // URI MongoDB Atlas
  const atlasUri = "mongodb+srv://veloaltitude:veloaltitude2025@cluster0grandest.mongodb.net/?retryWrites=true&w=majority";
  
  console.log('=== V√âRIFICATION DE LA COLLECTION CHALLENGES ===');
  
  let client;
  try {
    console.log('Connexion √† MongoDB Atlas...');
    client = new MongoClient(atlasUri);
    await client.connect();
    console.log('‚úÖ Connexion r√©ussie √† MongoDB Atlas');
    
    // V√©rifier l'existence des deux bases de donn√©es
    const admin = client.db('admin');
    const dbs = await admin.admin().listDatabases();
    
    console.log('\nüìä BASES DE DONN√âES DISPONIBLES:');
    dbs.databases.forEach(db => {
      console.log(`   - ${db.name}`);
    });
    
    // V√©rifier si les deux variantes existent
    const veloAltitudeTiret = dbs.databases.find(db => db.name === 'velo-altitude');
    const veloAltitudeUnderscore = dbs.databases.find(db => db.name === 'velo_altitude');
    
    console.log('\nüîç R√âSULTAT DE LA RECHERCHE:');
    console.log(`   Base 'velo-altitude' (tiret): ${veloAltitudeTiret ? '‚úÖ Existe' : '‚ùå N\'existe pas'}`);
    console.log(`   Base 'velo_altitude' (underscore): ${veloAltitudeUnderscore ? '‚úÖ Existe' : '‚ùå N\'existe pas'}`);
    
    // V√©rifier la collection "challenges" dans les deux bases si elles existent
    console.log('\nüîç V√âRIFICATION DE LA COLLECTION "challenges":');
    
    if (veloAltitudeTiret) {
      const dbTiret = client.db('velo-altitude');
      const collectionsTiret = await dbTiret.listCollections().toArray();
      const hasChallengesTiret = collectionsTiret.some(c => c.name === 'challenges');
      
      console.log(`   Dans 'velo-altitude': ${hasChallengesTiret ? '‚úÖ Collection "challenges" existe' : '‚ùå Collection "challenges" n\'existe pas'}`);
      
      if (hasChallengesTiret) {
        const count = await dbTiret.collection('challenges').countDocuments();
        console.log(`   ‚Üí Nombre de documents: ${count}`);
        
        // Afficher un exemple
        if (count > 0) {
          const sample = await dbTiret.collection('challenges').find().limit(1).toArray();
          console.log(`   ‚Üí Exemple: ${JSON.stringify(sample[0], null, 2).substring(0, 150)}...`);
        }
      }
    }
    
    if (veloAltitudeUnderscore) {
      const dbUnderscore = client.db('velo_altitude');
      const collectionsUnderscore = await dbUnderscore.listCollections().toArray();
      const hasChallengesUnderscore = collectionsUnderscore.some(c => c.name === 'challenges');
      
      console.log(`   Dans 'velo_altitude': ${hasChallengesUnderscore ? '‚úÖ Collection "challenges" existe' : '‚ùå Collection "challenges" n\'existe pas'}`);
      
      if (hasChallengesUnderscore) {
        const count = await dbUnderscore.collection('challenges').countDocuments();
        console.log(`   ‚Üí Nombre de documents: ${count}`);
        
        // Afficher un exemple
        if (count > 0) {
          const sample = await dbUnderscore.collection('challenges').find().limit(1).toArray();
          console.log(`   ‚Üí Exemple: ${JSON.stringify(sample[0], null, 2).substring(0, 150)}...`);
        }
      }
    }
    
    console.log('\nüõ†Ô∏è SOLUTION RECOMMAND√âE:');
    
    if (veloAltitudeTiret && veloAltitudeUnderscore) {
      console.log('1. Les deux bases de donn√©es existent, ce qui explique la confusion.');
      console.log('2. Ex√©cutez le script "standardize-database.js" pour migrer toutes les donn√©es vers velo-altitude (avec tiret).');
      console.log('3. Puis ex√©cutez "fix-database-name.js" pour supprimer d√©finitivement la base velo_altitude (avec underscore).');
    } else if (veloAltitudeTiret) {
      console.log('1. Seule la base "velo-altitude" (avec tiret) existe, mais l\'interface MongoDB Atlas l\'affiche incorrectement.');
      console.log('2. Essayez de vider le cache de votre navigateur et de vous reconnecter √† MongoDB Atlas.');
      console.log('3. Si le probl√®me persiste, ce pourrait √™tre un bug d\'affichage de MongoDB Atlas.');
    } else if (veloAltitudeUnderscore) {
      console.log('1. Seule la base "velo_altitude" (avec underscore) existe.');
      console.log('2. Ex√©cutez le script "standardize-database.js" pour cr√©er la base avec tiret et y migrer les donn√©es.');
    } else {
      console.log('1. Aucune des deux bases n\'existe. V√©rifiez que vous √™tes connect√© au bon cluster MongoDB.');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  } finally {
    if (client) {
      await client.close();
      console.log('\nConnexion MongoDB ferm√©e');
    }
  }
}

// Ex√©cuter la v√©rification
verifierChallenges().catch(console.error);
