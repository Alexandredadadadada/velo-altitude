/**
 * Script pour r√©soudre d√©finitivement le probl√®me de nom de base de donn√©es
 * Migration compl√®te de velo_altitude vers velo-altitude
 */

require('dotenv').config();
const { MongoClient } = require('mongodb');

async function fixDatabaseName() {
  const uri = process.env.MONGODB_URI || "mongodb+srv://veloaltitude:veloaltitude2025@cluster0grandest.mongodb.net/?retryWrites=true&w=majority";
  const client = new MongoClient(uri);
  
  try {
    console.log('=== CORRECTION DU NOM DE LA BASE DE DONN√âES ===');
    console.log('üì° Connexion √† MongoDB...');
    await client.connect();
    console.log('‚úÖ Connect√© √† MongoDB');
    
    // V√©rifier les bases de donn√©es existantes
    const adminDb = client.db('admin');
    const dbs = await adminDb.admin().listDatabases();
    
    console.log('\nüì¶ BASES DE DONN√âES EXISTANTES:');
    dbs.databases.forEach(db => {
      console.log(`   - ${db.name} (${Math.round(db.sizeOnDisk / 1024)} KB)`);
    });
    
    // V√©rifier si velo_altitude existe
    const veloAltitudeExists = dbs.databases.some(db => db.name === 'velo_altitude');
    const veloAltitudeDashExists = dbs.databases.some(db => db.name === 'velo-altitude');
    
    if (!veloAltitudeExists) {
      console.log('\n‚ö†Ô∏è La base de donn√©es velo_altitude n\'existe pas');
    }
    
    if (!veloAltitudeDashExists) {
      console.log('\n‚ö†Ô∏è La base de donn√©es velo-altitude n\'existe pas');
    }
    
    if (veloAltitudeExists) {
      // Obtenir toutes les collections dans velo_altitude
      const oldDb = client.db('velo_altitude');
      const collections = await oldDb.listCollections().toArray();
      
      console.log(`\nüìö COLLECTIONS DANS velo_altitude: ${collections.length}`);
      
      if (collections.length > 0) {
        // S'assurer que velo-altitude existe
        const newDb = client.db('velo-altitude');
        
        // Pour chaque collection, copier les donn√©es
        for (const collInfo of collections) {
          const collName = collInfo.name;
          console.log(`üîÑ Migration de la collection ${collName}...`);
          
          // Compter les documents dans la collection source
          const sourceCollection = oldDb.collection(collName);
          const count = await sourceCollection.countDocuments();
          console.log(`   - ${count} documents trouv√©s`);
          
          if (count > 0) {
            // R√©cup√©rer tous les documents
            const documents = await sourceCollection.find({}).toArray();
            
            // Ins√©rer dans la nouvelle collection
            const targetCollection = newDb.collection(collName);
            
            // V√©rifier si la collection cible existe d√©j√†
            const targetExists = await newDb.listCollections({ name: collName }).hasNext();
            if (targetExists) {
              console.log(`   - La collection ${collName} existe d√©j√† dans velo-altitude`);
              
              // V√©rifier si elle contient d√©j√† des documents
              const targetCount = await targetCollection.countDocuments();
              if (targetCount > 0) {
                console.log(`   - La collection cible contient d√©j√† ${targetCount} documents`);
                console.log(`   - Cr√©ation d'une sauvegarde avant fusion...`);
                
                // Cr√©er une sauvegarde de la collection cible
                const backupName = `${collName}_backup_${Date.now()}`;
                await newDb.collection(backupName).insertMany(await targetCollection.find({}).toArray());
                console.log(`   - Sauvegarde cr√©√©e: ${backupName}`);
                
                // Strat√©gie de fusion: v√©rifier pour chaque document s'il existe d√©j√†
                let inserted = 0;
                for (const doc of documents) {
                  // V√©rifier si un document avec le m√™me nom existe d√©j√†
                  const exists = await targetCollection.findOne({ name: doc.name });
                  if (!exists) {
                    await targetCollection.insertOne(doc);
                    inserted++;
                  }
                }
                
                console.log(`   - ${inserted} nouveaux documents ajout√©s`);
              } else {
                // Si la collection est vide, on peut simplement copier tous les documents
                await targetCollection.insertMany(documents);
                console.log(`   - ${documents.length} documents copi√©s`);
              }
            } else {
              // Si la collection n'existe pas, la cr√©er et copier les documents
              await targetCollection.insertMany(documents);
              console.log(`   - ${documents.length} documents copi√©s vers la nouvelle collection`);
            }
          }
        }
        
        // V√©rifier si toutes les donn√©es ont √©t√© migr√©es
        console.log('\nüîç V√âRIFICATION DE LA MIGRATION...');
        let allMigrated = true;
        
        for (const collInfo of collections) {
          const collName = collInfo.name;
          const oldCount = await oldDb.collection(collName).countDocuments();
          const newCount = await newDb.collection(collName).countDocuments();
          
          if (oldCount <= newCount) {
            console.log(`‚úÖ ${collName}: ${oldCount}/${newCount} documents migr√©s`);
          } else {
            console.log(`‚ùå ${collName}: ${oldCount}/${newCount} documents migr√©s - INCOMPLET`);
            allMigrated = false;
          }
        }
        
        if (allMigrated) {
          console.log('\nüóëÔ∏è Toutes les donn√©es ont √©t√© migr√©es. Voulez-vous supprimer la base velo_altitude? (y/n)');
          // En production, on ajouterait ici une interaction avec l'utilisateur.
          // Pour ce script, on simule une r√©ponse positive.
          const response = 'y';
          
          if (response.toLowerCase() === 'y') {
            console.log('üóëÔ∏è Suppression de la base de donn√©es velo_altitude...');
            await adminDb.command({ dropDatabase: 'velo_altitude' });
            console.log('‚úÖ Base de donn√©es velo_altitude supprim√©e avec succ√®s');
          } else {
            console.log('‚è≠Ô∏è La base de donn√©es velo_altitude a √©t√© conserv√©e');
          }
        } else {
          console.log('\n‚ö†Ô∏è La migration est incompl√®te, veuillez v√©rifier les erreurs ci-dessus');
        }
      } else {
        console.log('‚ö†Ô∏è Aucune collection trouv√©e dans velo_altitude');
      }
    }
    
    // V√©rifier les bases de donn√©es apr√®s les op√©rations
    const finalDbs = await adminDb.admin().listDatabases();
    
    console.log('\nüì¶ BASES DE DONN√âES FINALES:');
    finalDbs.databases.forEach(db => {
      console.log(`   - ${db.name} (${Math.round(db.sizeOnDisk / 1024)} KB)`);
    });
    
    console.log('\n=== OP√âRATION TERMIN√âE ===');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await client.close();
    console.log('üì° Connexion MongoDB ferm√©e');
  }
}

// Lancer la correction
fixDatabaseName().catch(console.error);
