/**
 * Script pour ajouter les cols restants √† la base de donn√©es velo-altitude
 * Utilise une approche modulaire et s'int√®gre avec les services existants
 */

require('dotenv').config();
const ColDataService = require('./services/ColDataService');
const remainingCols = require('./data/remaining-cols');

// Fonction pour cr√©er une sauvegarde avant la modification
async function createBackup() {
  const { MongoClient } = require('mongodb');
  const uri = process.env.MONGODB_URI || "mongodb+srv://veloaltitude:veloaltitude2025@cluster0grandest.mongodb.net/velo-altitude?retryWrites=true&w=majority";
  
  try {
    console.log('\n=== CR√âATION DE LA SAUVEGARDE ===');
    const client = new MongoClient(uri);
    await client.connect();
    
    const db = client.db('velo-altitude');
    const colsCollection = db.collection('cols');
    
    // R√©cup√©rer tous les cols actuels
    const existingCols = await colsCollection.find({}).toArray();
    console.log(`üì¶ ${existingCols.length} cols trouv√©s dans la base de donn√©es`);
    
    // Cr√©er une collection de sauvegarde avec timestamp
    const timestamp = Date.now();
    const backupCollectionName = `cols_backup_${timestamp}`;
    
    if (existingCols.length > 0) {
      // Cr√©er la collection de sauvegarde
      await db.createCollection(backupCollectionName);
      const backupCollection = db.collection(backupCollectionName);
      
      // Copier les donn√©es
      await backupCollection.insertMany(existingCols);
      console.log(`‚úÖ Sauvegarde cr√©√©e avec succ√®s: ${backupCollectionName}`);
    } else {
      console.log('‚ÑπÔ∏è Aucune donn√©e √† sauvegarder');
    }
    
    await client.close();
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de la sauvegarde:', error);
    return false;
  }
}

// Fonction pour v√©rifier l'√©tat de la base de donn√©es
async function verifyDatabase() {
  const { MongoClient } = require('mongodb');
  const uri = process.env.MONGODB_URI || "mongodb+srv://veloaltitude:veloaltitude2025@cluster0grandest.mongodb.net/velo-altitude?retryWrites=true&w=majority";
  
  try {
    console.log('\n=== V√âRIFICATION DE LA BASE DE DONN√âES ===');
    const client = new MongoClient(uri);
    await client.connect();
    
    const db = client.db('velo-altitude');
    const colsCollection = db.collection('cols');
    
    // Compter le nombre total de cols
    const totalCols = await colsCollection.countDocuments();
    console.log(`üìä Total des cols dans la base: ${totalCols}`);
    
    // V√©rifier les cols avec profil d'√©l√©vation
    const colsWithElevation = await colsCollection.countDocuments({
      $or: [
        { "elevation_profile": { $exists: true, $ne: null } },
        { "visualization3D.elevationProfile": { $exists: true, $ne: null } }
      ]
    });
    console.log(`üìà Cols avec profil d'√©l√©vation: ${colsWithElevation}`);
    
    // V√©rifier les cols avec donn√©es 3D
    const colsWith3D = await colsCollection.countDocuments({
      "visualization3D": { $exists: true, $ne: null }
    });
    console.log(`üèîÔ∏è Cols avec donn√©es de visualisation 3D: ${colsWith3D}`);
    
    // V√©rifier les diff√©rentes difficult√©s
    const difficulties = await colsCollection.aggregate([
      { $group: { _id: "$difficulty", count: { $sum: 1 } } },
      { $sort: { _id: 1 } }
    ]).toArray();
    
    console.log('üîç R√©partition par difficult√©:');
    difficulties.forEach(d => {
      console.log(`   - ${d._id || 'non d√©fini'}: ${d.count} cols`);
    });
    
    // V√©rifier les r√©gions repr√©sent√©es
    const regions = await colsCollection.aggregate([
      { $group: { _id: "$region", count: { $sum: 1 } } },
      { $sort: { _id: 1 } }
    ]).toArray();
    
    console.log('üó∫Ô∏è R√©partition par r√©gion:');
    regions.forEach(r => {
      console.log(`   - ${r._id || 'non d√©finie'}: ${r.count} cols`);
    });
    
    await client.close();
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification de la base de donn√©es:', error);
    return false;
  }
}

// Fonction principale
async function addRemainingCols() {
  try {
    console.log('=== AJOUT DES COLS RESTANTS ===');
    console.log(`üìã ${remainingCols.length} cols √† traiter\n`);
    
    // Cr√©er une sauvegarde
    const backupSuccess = await createBackup();
    if (!backupSuccess) {
      console.log('‚ö†Ô∏è La sauvegarde a √©chou√©. Souhaitez-vous continuer ? (y/n)');
      // Dans un script r√©el, nous ajouterions ici une gestion de la r√©ponse utilisateur
    }
    
    // Initialiser le service de donn√©es
    const mongoUri = process.env.MONGODB_URI || "mongodb+srv://veloaltitude:veloaltitude2025@cluster0grandest.mongodb.net/velo-altitude?retryWrites=true&w=majority";
    const colService = new ColDataService(mongoUri);
    
    // Ajouter les cols
    await colService.addNewCols(remainingCols);
    
    // V√©rifier la base de donn√©es
    await verifyDatabase();
    
    console.log('\n=== OP√âRATION TERMIN√âE ===');
    console.log('‚úÖ Tous les cols ont √©t√© trait√©s');
    
  } catch (error) {
    console.error('‚ùå Erreur globale:', error);
  }
}

// Lancer le script
console.log('üöÄ D√©marrage du script d\'ajout des cols restants...');
addRemainingCols().catch(console.error);
