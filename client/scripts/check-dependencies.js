/**
 * Script de v√©rification des d√©pendances pour Velo-Altitude
 * 
 * Ce script v√©rifie que toutes les d√©pendances n√©cessaires sont install√©es
 * et √† jour avant le d√©ploiement en production.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const chalk = require('chalk');

console.log(chalk.blue.bold('üîç V√©rification des d√©pendances Velo-Altitude'));
console.log(chalk.blue('================================================'));

// Chemin vers le package.json
const packageJsonPath = path.resolve(__dirname, '..', 'package.json');

// V√©rifier l'existence du package.json
if (!fs.existsSync(packageJsonPath)) {
  console.error(chalk.red.bold('‚ùå Le fichier package.json est introuvable!'));
  process.exit(1);
}

// Lire le package.json
const packageJson = require(packageJsonPath);

// Liste des d√©pendances critiques pour la production
const criticalDependencies = [
  '@auth0/auth0-react',
  'axios',
  'react',
  'react-dom',
  'react-router-dom',
  'react-query',
  'react-error-boundary'
];

// V√©rifier les d√©pendances critiques
console.log(chalk.blue.bold('\nüìã V√©rification des d√©pendances critiques:'));

let allDependenciesOk = true;

criticalDependencies.forEach(dep => {
  console.log(chalk.gray(`V√©rification de ${dep}...`));
  
  if (!packageJson.dependencies[dep]) {
    console.error(chalk.red(`‚ùå ERREUR: La d√©pendance ${dep} n'est pas install√©e!`));
    allDependenciesOk = false;
    return;
  }
  
  console.log(chalk.green(`‚úÖ ${dep} - OK (${packageJson.dependencies[dep]})`));
});

// V√©rifier les vuln√©rabilit√©s npm
console.log(chalk.blue.bold('\nüõ°Ô∏è V√©rification des vuln√©rabilit√©s:'));

try {
  console.log(chalk.gray('Ex√©cution de npm audit...'));
  const auditOutput = execSync('npm audit --json', { encoding: 'utf8', stdio: ['pipe', 'pipe', 'ignore'] });
  const auditResult = JSON.parse(auditOutput);
  
  const highSeverities = auditResult.metadata?.vulnerabilities?.high || 0;
  const criticalSeverities = auditResult.metadata?.vulnerabilities?.critical || 0;
  
  if (highSeverities > 0 || criticalSeverities > 0) {
    console.warn(chalk.yellow(`‚ö†Ô∏è AVERTISSEMENT: ${highSeverities} vuln√©rabilit√©s de niveau √©lev√© et ${criticalSeverities} critiques d√©tect√©es`));
    console.warn(chalk.yellow('   Consid√©rez ex√©cuter npm audit fix avant le d√©ploiement'));
    // Ne pas bloquer le build pour les vuln√©rabilit√©s, juste avertir
  } else {
    console.log(chalk.green('‚úÖ Aucune vuln√©rabilit√© critique d√©tect√©e'));
  }
} catch (error) {
  console.warn(chalk.yellow('‚ö†Ô∏è Impossible d\'ex√©cuter npm audit. Continuez avec pr√©caution.'));
  console.warn(chalk.gray(error.message));
}

// V√©rifier les packages obsol√®tes
console.log(chalk.blue.bold('\nüì¶ V√©rification des packages obsol√®tes:'));

try {
  console.log(chalk.gray('Ex√©cution de npm outdated...'));
  const outdatedOutput = execSync('npm outdated --json', { encoding: 'utf8', stdio: ['pipe', 'pipe', 'ignore'] });
  
  if (outdatedOutput.trim()) {
    const outdatedPackages = JSON.parse(outdatedOutput);
    const outdatedCount = Object.keys(outdatedPackages).length;
    
    if (outdatedCount > 0) {
      console.warn(chalk.yellow(`‚ö†Ô∏è AVERTISSEMENT: ${outdatedCount} packages sont obsol√®tes`));
      console.warn(chalk.yellow('   Consid√©rez mettre √† jour les packages avant le d√©ploiement'));
      // Ne pas bloquer le build pour les packages obsol√®tes, juste avertir
    }
  } else {
    console.log(chalk.green('‚úÖ Tous les packages sont √† jour'));
  }
} catch (error) {
  // Si npm outdated ne trouve rien, il peut sortir avec un code d'erreur
  if (error.status === 0) {
    console.log(chalk.green('‚úÖ Tous les packages sont √† jour'));
  } else {
    console.warn(chalk.yellow('‚ö†Ô∏è Impossible de v√©rifier les packages obsol√®tes. Continuez avec pr√©caution.'));
    console.warn(chalk.gray(error.message));
  }
}

// R√©sultat final
console.log(chalk.blue('\n================================================'));
if (allDependenciesOk) {
  console.log(chalk.green.bold('‚úÖ V√©rification des d√©pendances compl√®te: Le projet est pr√™t pour le d√©ploiement!'));
} else {
  console.error(chalk.red.bold('‚ùå Certaines d√©pendances critiques sont manquantes. Corrigez les probl√®mes avant le d√©ploiement.'));
  process.exit(1);
}

console.log(chalk.blue('\nRecommandations:'));
console.log(chalk.gray('1. Ex√©cutez npm ci au lieu de npm install en production pour des installations plus fiables'));
console.log(chalk.gray('2. Consid√©rez utiliser npm-check-updates pour maintenir vos d√©pendances √† jour'));
console.log(chalk.gray('3. V√©rifiez r√©guli√®rement les vuln√©rabilit√©s avec npm audit'));
