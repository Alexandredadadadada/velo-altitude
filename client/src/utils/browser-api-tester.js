/**
 * Testeur d'API Velo-Altitude pour navigateur
 * 
 * Cet utilitaire permet de tester l'API directement depuis la console du navigateur.
 * Pour l'utiliser:
 * 1. Copiez ce code dans la console du navigateur lorsque l'application est en cours d'ex√©cution
 * 2. Appelez les fonctions comme veloApiTest.testPublicEndpoints() ou veloApiTest.testProtectedEndpoints()
 */

// Fonction pour obtenir une r√©f√©rence √† l'orchestrateur API
function getApiOrchestrator() {
  // Cette fonction suppose que window.__VELO_APP_CONTEXT contient des r√©f√©rences aux objets du contexte React
  // Si ce n'est pas le cas, il faudra adapter cette logique √† la structure de votre application
  try {
    // Essayer d'abord d'obtenir depuis le contexte d'application (si disponible)
    if (window.__VELO_APP_CONTEXT && window.__VELO_APP_CONTEXT.apiOrchestrator) {
      return window.__VELO_APP_CONTEXT.apiOrchestrator;
    }
    
    // Sinon, importer directement l'instance
    // Note: Cela peut ne pas fonctionner selon la configuration de bundling
    return window.RealApiOrchestrator || null;
  } catch (error) {
    console.error('Impossible d\'acc√©der √† l\'orchestrateur API:', error);
    return null;
  }
}

// Configuration pour l'inspection des requ√™tes
const requestInspector = {
  enabled: true,
  
  // Enregistre les headers des requ√™tes r√©elles pour inspection
  monitorHeaders() {
    if (!this.enabled || this._initialized) return;
    
    console.log('üîç Activation du monitoring des en-t√™tes HTTP...');
    
    // Sauvegarder la m√©thode originale
    this._originalFetch = window.fetch;
    this._initialized = true;
    this.requests = [];
    
    // Remplacer fetch par notre version instrument√©e
    window.fetch = async (...args) => {
      const [url, options = {}] = args;
      
      try {
        // Capturer le d√©but de la requ√™te
        const requestStartTime = performance.now();
        
        // Ex√©cuter la requ√™te originale
        const response = await this._originalFetch(...args);
        
        // Calculer le temps de r√©ponse
        const responseTime = performance.now() - requestStartTime;
        
        // Cloner la r√©ponse pour ne pas la consommer
        const clonedResponse = response.clone();
        let responseBody;
        
        try {
          // Tenter de lire le corps de la r√©ponse comme JSON
          responseBody = await clonedResponse.json();
        } catch (e) {
          // Si ce n'est pas du JSON, laisser vide
          responseBody = null;
        }
        
        // Enregistrer les informations de la requ√™te
        const requestInfo = {
          url,
          method: options.method || 'GET',
          headers: options.headers || {},
          timestamp: new Date(),
          responseTime,
          status: response.status,
          statusText: response.statusText,
          hasAuthHeader: options.headers && 
                        (options.headers.Authorization || 
                         (options.headers.get && options.headers.get('Authorization'))),
          responseType: clonedResponse.headers.get('content-type'),
          responseSize: responseBody ? JSON.stringify(responseBody).length : 0,
          responseBody: responseBody
        };
        
        // Ajouter √† notre liste
        this.requests.unshift(requestInfo);
        
        // Garder seulement les 50 derni√®res requ√™tes
        if (this.requests.length > 50) {
          this.requests.pop();
        }
        
        // Retourner la r√©ponse originale
        return response;
      } catch (error) {
        console.error('Erreur pendant l\'inspection:', error);
        // En cas d'erreur, appeler fetch original directement
        return this._originalFetch(...args);
      }
    };
    
    console.log('‚úÖ Monitoring des en-t√™tes HTTP activ√©');
  },
  
  // Arr√™te le monitoring
  stopMonitoring() {
    if (!this._initialized) return;
    
    window.fetch = this._originalFetch;
    this._initialized = false;
    console.log('‚ùå Monitoring des en-t√™tes HTTP d√©sactiv√©');
  },
  
  // Affiche un r√©sum√© des requ√™tes captur√©es
  reportRequests() {
    if (!this._initialized || this.requests.length === 0) {
      console.log('Aucune requ√™te captur√©e');
      return [];
    }
    
    console.group('üìä R√©sum√© des requ√™tes captur√©es');
    console.log(`Total: ${this.requests.length} requ√™tes`);
    
    // Compter les requ√™tes par endpoint
    const endpointCounts = {};
    this.requests.forEach(req => {
      const endpoint = req.url.split('?')[0]; // Ignorer les param√®tres
      endpointCounts[endpoint] = (endpointCounts[endpoint] || 0) + 1;
    });
    
    console.log('Requ√™tes par endpoint:');
    Object.entries(endpointCounts)
      .sort((a, b) => b[1] - a[1])
      .forEach(([endpoint, count]) => {
        console.log(`- ${endpoint}: ${count}`);
      });
    
    // V√©rifier les en-t√™tes d'authentification
    const withAuth = this.requests.filter(req => req.hasAuthHeader).length;
    console.log(`Avec en-t√™te d'auth: ${withAuth}/${this.requests.length} (${Math.round(withAuth/this.requests.length*100)}%)`);
    
    console.groupEnd();
    
    return this.requests;
  },
  
  // G√©n√©rer un rapport au format markdown
  generateMarkdown() {
    if (!this._initialized || this.requests.length === 0) {
      return "Aucune requ√™te captur√©e";
    }
    
    // Regrouper par endpoint
    const endpointGroups = {};
    this.requests.forEach(req => {
      const endpoint = req.url.split('?')[0]; // Ignorer les param√®tres
      if (!endpointGroups[endpoint]) {
        endpointGroups[endpoint] = [];
      }
      endpointGroups[endpoint].push(req);
    });
    
    let markdown = `# Rapport d'inspection des requ√™tes API\n\n`;
    markdown += `## R√©sum√©\n`;
    markdown += `- **Total des requ√™tes:** ${this.requests.length}\n`;
    markdown += `- **Requ√™tes avec authentification:** ${this.requests.filter(req => req.hasAuthHeader).length}\n`;
    markdown += `- **Temps de r√©ponse moyen:** ${Math.round(this.requests.reduce((sum, req) => sum + req.responseTime, 0) / this.requests.length)}ms\n\n`;
    
    markdown += `## D√©tail par endpoint\n\n`;
    
    Object.entries(endpointGroups).forEach(([endpoint, requests]) => {
      markdown += `### ${endpoint}\n`;
      markdown += `- **Nombre d'appels:** ${requests.length}\n`;
      markdown += `- **M√©thodes:** ${[...new Set(requests.map(r => r.method))].join(', ')}\n`;
      markdown += `- **Statuts:** ${[...new Set(requests.map(r => r.status))].join(', ')}\n`;
      markdown += `- **Authentification:** ${requests.some(r => r.hasAuthHeader) ? '‚úÖ' : '‚ùå'}\n`;
      markdown += `- **Temps de r√©ponse moyen:** ${Math.round(requests.reduce((sum, r) => sum + r.responseTime, 0) / requests.length)}ms\n\n`;
    });
    
    return markdown;
  }
};

// Utilitaire de test d'API
const veloApiTest = {
  results: {
    public: {},
    protected: {}
  },
  
  // Test des endpoints publics
  async testPublicEndpoints() {
    console.group('%cüß™ Test des endpoints publics', 'font-weight: bold; font-size: 16px; color: #4caf50;');
    
    const apiOrchestrator = getApiOrchestrator();
    if (!apiOrchestrator) {
      console.error('‚ùå Impossible d\'acc√©der √† l\'orchestrateur API. Utilisez √† la place:');
      console.log('import RealApiOrchestrator from "./services/api/RealApiOrchestrator";');
      console.log('RealApiOrchestrator.getAllCols().then(console.log).catch(console.error);');
      console.groupEnd();
      return;
    }
    
    try {
      // Test getAllCols
      console.group('getAllCols()');
      try {
        console.time('getAllCols');
        const cols = await apiOrchestrator.getAllCols();
        console.timeEnd('getAllCols');
        console.log('‚úÖ R√©ponse:', cols);
        console.log(`üìä ${cols.length} cols r√©cup√©r√©s`);
        this.results.public.getAllCols = { success: true, data: cols };
        
        // Si nous avons des cols, utiliser le premier pour d'autres tests
        if (cols.length > 0) {
          const firstCol = cols[0];
          console.log('üìç Premier col pour tests suppl√©mentaires:', firstCol.id);
          
          // Test getColById avec le premier col
          console.group('getColById()');
          try {
            console.time('getColById');
            const col = await apiOrchestrator.getColById(firstCol.id);
            console.timeEnd('getColById');
            console.log('‚úÖ R√©ponse:', col);
            this.results.public.getColById = { success: true, data: col };
          } catch (error) {
            console.error('‚ùå Erreur:', error);
            this.results.public.getColById = { success: false, error };
          }
          console.groupEnd();
          
          // Test getColWeather avec le premier col
          console.group('getColWeather()');
          try {
            console.time('getColWeather');
            const weather = await apiOrchestrator.getColWeather(firstCol.id);
            console.timeEnd('getColWeather');
            console.log('‚úÖ R√©ponse:', weather);
            this.results.public.getColWeather = { success: true, data: weather };
          } catch (error) {
            console.error('‚ùå Erreur:', error);
            this.results.public.getColWeather = { success: false, error };
          }
          console.groupEnd();
          
          // Test getWeatherForecast avec le premier col
          console.group('getWeatherForecast()');
          try {
            console.time('getWeatherForecast');
            const forecast = await apiOrchestrator.getWeatherForecast(firstCol.id, 5);
            console.timeEnd('getWeatherForecast');
            console.log('‚úÖ R√©ponse:', forecast);
            this.results.public.getWeatherForecast = { success: true, data: forecast };
          } catch (error) {
            console.error('‚ùå Erreur:', error);
            this.results.public.getWeatherForecast = { success: false, error };
          }
          console.groupEnd();
        }
      } catch (error) {
        console.error('‚ùå Erreur:', error);
        this.results.public.getAllCols = { success: false, error };
      }
      console.groupEnd();
      
      // Test searchCols
      console.group('searchCols()');
      try {
        const query = 'alpe'; // Recherche commune
        console.time('searchCols');
        const searchResults = await apiOrchestrator.searchCols(query);
        console.timeEnd('searchCols');
        console.log(`‚úÖ R√©ponse pour '${query}':`, searchResults);
        console.log(`üìä ${searchResults.length} r√©sultats trouv√©s`);
        this.results.public.searchCols = { success: true, data: searchResults };
      } catch (error) {
        console.error('‚ùå Erreur:', error);
        this.results.public.searchCols = { success: false, error };
      }
      console.groupEnd();
      
      // Test getColsByRegion
      console.group('getColsByRegion()');
      try {
        const region = 'alps'; // R√©gion commune
        console.time('getColsByRegion');
        const regionResults = await apiOrchestrator.getColsByRegion(region);
        console.timeEnd('getColsByRegion');
        console.log(`‚úÖ R√©ponse pour r√©gion '${region}':`, regionResults);
        console.log(`üìä ${regionResults.length} cols trouv√©s dans la r√©gion`);
        this.results.public.getColsByRegion = { success: true, data: regionResults };
      } catch (error) {
        console.error('‚ùå Erreur:', error);
        this.results.public.getColsByRegion = { success: false, error };
      }
      console.groupEnd();
      
      // Test getColsByDifficulty
      console.group('getColsByDifficulty()');
      try {
        const difficulty = 'medium'; // Difficult√© commune
        console.time('getColsByDifficulty');
        const difficultyResults = await apiOrchestrator.getColsByDifficulty(difficulty);
        console.timeEnd('getColsByDifficulty');
        console.log(`‚úÖ R√©ponse pour difficult√© '${difficulty}':`, difficultyResults);
        console.log(`üìä ${difficultyResults.length} cols trouv√©s pour cette difficult√©`);
        this.results.public.getColsByDifficulty = { success: true, data: difficultyResults };
      } catch (error) {
        console.error('‚ùå Erreur:', error);
        this.results.public.getColsByDifficulty = { success: false, error };
      }
      console.groupEnd();
      
      // Test getAllMajeurs7Challenges
      console.group('getAllMajeurs7Challenges()');
      try {
        console.time('getAllMajeurs7Challenges');
        const challenges = await apiOrchestrator.getAllMajeurs7Challenges();
        console.timeEnd('getAllMajeurs7Challenges');
        console.log('‚úÖ R√©ponse:', challenges);
        console.log(`üìä ${challenges.length} d√©fis trouv√©s`);
        this.results.public.getAllMajeurs7Challenges = { success: true, data: challenges };
      } catch (error) {
        console.error('‚ùå Erreur:', error);
        this.results.public.getAllMajeurs7Challenges = { success: false, error };
      }
      console.groupEnd();
      
    } catch (error) {
      console.error('‚ùå Erreur globale:', error);
    }
    
    console.groupEnd();
    return this.results.public;
  },
  
  // Test des endpoints prot√©g√©s
  async testProtectedEndpoints() {
    console.group('%cüîí Test des endpoints prot√©g√©s', 'font-weight: bold; font-size: 16px; color: #2196f3;');
    
    const apiOrchestrator = getApiOrchestrator();
    if (!apiOrchestrator) {
      console.error('‚ùå Impossible d\'acc√©der √† l\'orchestrateur API');
      console.groupEnd();
      return;
    }
    
    try {
      // V√©rifier d'abord si nous avons un token
      console.group('üîë V√©rification du token');
      // Cette fonction suppos√©e existe dans l'application
      const authUtils = window.authUtils || {};
      const getToken = authUtils.getToken || (() => Promise.resolve(null));
      
      const token = await getToken();
      if (!token) {
        console.warn('‚ö†Ô∏è Aucun token d\'authentification trouv√©. Les tests prot√©g√©s √©choueront probablement.');
      } else {
        console.log('‚úÖ Token trouv√©:', token.substring(0, 15) + '...');
      }
      console.groupEnd();
      
      // Test getUserProfile
      console.group('getUserProfile()');
      try {
        // Utiliser 'me' comme ID si c'est la convention de l'API, ou 'current'
        const userId = 'me'; 
        console.time('getUserProfile');
        const profile = await apiOrchestrator.getUserProfile(userId);
        console.timeEnd('getUserProfile');
        console.log('‚úÖ R√©ponse:', profile);
        this.results.protected.getUserProfile = { success: true, data: profile };
        
        // Si nous avons un profil, utiliser son ID pour d'autres tests
        if (profile && profile.id) {
          const actualUserId = profile.id;
          
          // Test getUserActivities
          console.group('getUserActivities()');
          try {
            console.time('getUserActivities');
            const activities = await apiOrchestrator.getUserActivities(actualUserId);
            console.timeEnd('getUserActivities');
            console.log('‚úÖ R√©ponse:', activities);
            console.log(`üìä ${activities.activities?.length || 0} activit√©s sur ${activities.total || 0}`);
            this.results.protected.getUserActivities = { success: true, data: activities };
          } catch (error) {
            console.error('‚ùå Erreur:', error);
            this.results.protected.getUserActivities = { success: false, error };
          }
          console.groupEnd();
          
          // Test getUserTrainingPlans
          console.group('getUserTrainingPlans()');
          try {
            console.time('getUserTrainingPlans');
            const plans = await apiOrchestrator.getUserTrainingPlans(actualUserId);
            console.timeEnd('getUserTrainingPlans');
            console.log('‚úÖ R√©ponse:', plans);
            console.log(`üìä ${plans?.length || 0} plans d'entra√Ænement`);
            this.results.protected.getUserTrainingPlans = { success: true, data: plans };
          } catch (error) {
            console.error('‚ùå Erreur:', error);
            this.results.protected.getUserTrainingPlans = { success: false, error };
          }
          console.groupEnd();
          
          // Test getUserNutritionPlan
          console.group('getUserNutritionPlan()');
          try {
            console.time('getUserNutritionPlan');
            const nutritionPlan = await apiOrchestrator.getUserNutritionPlan(actualUserId);
            console.timeEnd('getUserNutritionPlan');
            console.log('‚úÖ R√©ponse:', nutritionPlan);
            this.results.protected.getUserNutritionPlan = { success: true, data: nutritionPlan };
          } catch (error) {
            console.error('‚ùå Erreur:', error);
            this.results.protected.getUserNutritionPlan = { success: false, error };
          }
          console.groupEnd();
          
          // Test updateUserProfile
          console.group('updateUserProfile()');
          try {
            // Pr√©paration d'une mise √† jour mineure (bio uniquement)
            const profileUpdate = {
              bio: `Bio mise √† jour le ${new Date().toLocaleString()}`
            };
            console.time('updateUserProfile');
            const updatedProfile = await apiOrchestrator.updateUserProfile(actualUserId, profileUpdate);
            console.timeEnd('updateUserProfile');
            console.log('‚úÖ R√©ponse:', updatedProfile);
            this.results.protected.updateUserProfile = { success: true, data: updatedProfile };
          } catch (error) {
            console.error('‚ùå Erreur:', error);
            this.results.protected.updateUserProfile = { success: false, error };
          }
          console.groupEnd();
          
          // Test getMajeurs7Progress
          console.group('getMajeurs7Progress()');
          try {
            // R√©cup√©rer d'abord les challenges
            let challenges = [];
            try {
              challenges = await apiOrchestrator.getAllMajeurs7Challenges();
            } catch (error) {
              console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer les challenges:', error);
            }
            
            if (challenges.length > 0) {
              const firstChallenge = challenges[0];
              console.time('getMajeurs7Progress');
              const progress = await apiOrchestrator.getMajeurs7Progress(actualUserId, firstChallenge.id);
              console.timeEnd('getMajeurs7Progress');
              console.log('‚úÖ R√©ponse:', progress);
              this.results.protected.getMajeurs7Progress = { success: true, data: progress };
            } else {
              console.warn('‚ö†Ô∏è Aucun challenge disponible pour tester getMajeurs7Progress');
              this.results.protected.getMajeurs7Progress = { success: false, error: new Error('Aucun challenge disponible') };
            }
          } catch (error) {
            console.error('‚ùå Erreur:', error);
            this.results.protected.getMajeurs7Progress = { success: false, error };
          }
          console.groupEnd();
          
          // Test getFTPHistory
          console.group('getFTPHistory()');
          try {
            console.time('getFTPHistory');
            const ftpHistory = await apiOrchestrator.getFTPHistory(actualUserId);
            console.timeEnd('getFTPHistory');
            console.log('‚úÖ R√©ponse:', ftpHistory);
            this.results.protected.getFTPHistory = { success: true, data: ftpHistory };
          } catch (error) {
            console.error('‚ùå Erreur:', error);
            this.results.protected.getFTPHistory = { success: false, error };
          }
          console.groupEnd();
        }
      } catch (error) {
        console.error('‚ùå Erreur:', error);
        this.results.protected.getUserProfile = { success: false, error };
      }
      console.groupEnd();
      
    } catch (error) {
      console.error('‚ùå Erreur globale:', error);
    }
    
    console.groupEnd();
    return this.results.protected;
  },
  
  // Rapport de synth√®se
  generateReport() {
    console.group('%cüìã Rapport de synth√®se', 'font-weight: bold; font-size: 16px; color: #9c27b0;');
    
    // Compter les r√©sultats
    const publicResults = Object.entries(this.results.public);
    const protectedResults = Object.entries(this.results.protected);
    
    const publicSuccess = publicResults.filter(([_, result]) => result.success).length;
    const publicTotal = publicResults.length;
    
    const protectedSuccess = protectedResults.filter(([_, result]) => result.success).length;
    const protectedTotal = protectedResults.length;
    
    const totalSuccess = publicSuccess + protectedSuccess;
    const totalTests = publicTotal + protectedTotal;
    
    // Afficher les statistiques
    console.log(`üìä Endpoints publics: ${publicSuccess}/${publicTotal} r√©ussis`);
    console.log(`üîí Endpoints prot√©g√©s: ${protectedSuccess}/${protectedTotal} r√©ussis`);
    console.log(`üèÅ Total: ${totalSuccess}/${totalTests} r√©ussis (${Math.round((totalSuccess/totalTests || 0) * 100)}%)`);
    
    // Afficher les erreurs
    const publicErrors = publicResults.filter(([_, result]) => !result.success);
    const protectedErrors = protectedResults.filter(([_, result]) => !result.success);
    
    if (publicErrors.length > 0 || protectedErrors.length > 0) {
      console.group('‚ùå Erreurs d√©tect√©es');
      
      if (publicErrors.length > 0) {
        console.group('Endpoints publics');
        publicErrors.forEach(([name, result]) => {
          console.log(`${name}: ${result.error?.message || 'Erreur inconnue'}`);
        });
        console.groupEnd();
      }
      
      if (protectedErrors.length > 0) {
        console.group('Endpoints prot√©g√©s');
        protectedErrors.forEach(([name, result]) => {
          console.log(`${name}: ${result.error?.message || 'Erreur inconnue'}`);
        });
        console.groupEnd();
      }
      
      console.groupEnd();
    }
    
    console.groupEnd();
    
    // G√©n√©rer le rapport format√© pour documentation
    return this.generateFormattedReport();
  },
  
  // G√©n√©rer un rapport d√©taill√© format√© en markdown
  generateFormattedReport() {
    const now = new Date();
    let report = `# Rapport de validation API - Velo-Altitude\n\n`;
    report += `*G√©n√©r√© le ${now.toLocaleDateString()} √† ${now.toLocaleTimeString()}*\n\n`;
    
    report += `## R√©sum√©\n\n`;
    
    // Compter les r√©sultats
    const publicResults = Object.entries(this.results.public);
    const protectedResults = Object.entries(this.results.protected);
    
    const publicSuccess = publicResults.filter(([_, result]) => result.success).length;
    const publicTotal = publicResults.length;
    
    const protectedSuccess = protectedResults.filter(([_, result]) => result.success).length;
    const protectedTotal = protectedResults.length;
    
    const totalSuccess = publicSuccess + protectedSuccess;
    const totalTests = publicTotal + protectedTotal;
    
    report += `- **Endpoints publics**: ${publicSuccess}/${publicTotal} r√©ussis\n`;
    report += `- **Endpoints prot√©g√©s**: ${protectedSuccess}/${protectedTotal} r√©ussis\n`;
    report += `- **Total**: ${totalSuccess}/${totalTests} r√©ussis (${Math.round((totalSuccess/totalTests || 0) * 100)}%)\n\n`;
    
    // Rapport d√©taill√© des endpoints publics
    report += `## Endpoints publics\n\n`;
    publicResults.forEach(([name, result]) => {
      report += `### \`${name}()\`\n`;
      report += `- **Statut**: ${result.success ? '‚úÖ Succ√®s' : '‚ùå √âchec'}\n`;
      if (!result.success) {
        report += `- **Erreur**: ${result.error?.message || 'Erreur inconnue'}\n`;
      } else {
        report += `- **Format de r√©ponse**: ${Array.isArray(result.data) ? 'Array' : 'Object'}\n`;
        
        if (Array.isArray(result.data)) {
          report += `- **Nombre d'√©l√©ments**: ${result.data.length}\n`;
          if (result.data.length > 0) {
            report += `- **Exemple de structure**:\n\`\`\`json\n${JSON.stringify(result.data[0], null, 2).substring(0, 500)}${result.data[0] && JSON.stringify(result.data[0], null, 2).length > 500 ? '...' : ''}\n\`\`\`\n`;
          }
        } else if (result.data) {
          report += `- **Structure**:\n\`\`\`json\n${JSON.stringify(result.data, null, 2).substring(0, 500)}${result.data && JSON.stringify(result.data, null, 2).length > 500 ? '...' : ''}\n\`\`\`\n`;
        }
      }
      report += '\n';
    });
    
    // Rapport d√©taill√© des endpoints prot√©g√©s
    report += `## Endpoints prot√©g√©s\n\n`;
    protectedResults.forEach(([name, result]) => {
      report += `### \`${name}()\`\n`;
      report += `- **Statut**: ${result.success ? '‚úÖ Succ√®s' : '‚ùå √âchec'}\n`;
      
      // V√©rifier si les en-t√™tes d'authentification √©taient pr√©sents
      const authHeaders = requestInspector._initialized && requestInspector.requests.some(req => 
        req.url.includes(name.toLowerCase()) && req.hasAuthHeader
      );
      report += `- **En-t√™tes d'authentification**: ${authHeaders ? '‚úÖ Pr√©sents' : '‚ùì Non d√©tect√©s'}\n`;
      
      if (!result.success) {
        report += `- **Erreur**: ${result.error?.message || 'Erreur inconnue'}\n`;
      } else {
        report += `- **Format de r√©ponse**: ${Array.isArray(result.data) ? 'Array' : 'Object'}\n`;
        
        if (Array.isArray(result.data)) {
          report += `- **Nombre d'√©l√©ments**: ${result.data.length}\n`;
          if (result.data.length > 0) {
            report += `- **Exemple de structure**:\n\`\`\`json\n${JSON.stringify(result.data[0], null, 2).substring(0, 500)}${result.data[0] && JSON.stringify(result.data[0], null, 2).length > 500 ? '...' : ''}\n\`\`\`\n`;
          }
        } else if (result.data) {
          report += `- **Structure**:\n\`\`\`json\n${JSON.stringify(result.data, null, 2).substring(0, 500)}${result.data && JSON.stringify(result.data, null, 2).length > 500 ? '...' : ''}\n\`\`\`\n`;
        }
      }
      report += '\n';
    });
    
    // Rapport des requ√™tes HTTP
    if (requestInspector._initialized && requestInspector.requests.length > 0) {
      report += `## Analyse des requ√™tes HTTP\n\n`;
      report += `- **Total des requ√™tes**: ${requestInspector.requests.length}\n`;
      report += `- **Requ√™tes avec authentification**: ${requestInspector.requests.filter(req => req.hasAuthHeader).length}\n\n`;
      
      // Grouper par endpoint
      const endpointGroups = {};
      requestInspector.requests.forEach(req => {
        const endpoint = req.url.split('?')[0]; // Ignorer les param√®tres
        if (!endpointGroups[endpoint]) {
          endpointGroups[endpoint] = [];
        }
        endpointGroups[endpoint].push(req);
      });
      
      report += `### D√©tail par endpoint\n\n`;
      
      Object.entries(endpointGroups).forEach(([endpoint, requests]) => {
        report += `#### ${endpoint}\n`;
        report += `- **Nombre d'appels**: ${requests.length}\n`;
        report += `- **M√©thodes**: ${[...new Set(requests.map(r => r.method))].join(', ')}\n`;
        report += `- **Statuts**: ${[...new Set(requests.map(r => r.status))].join(', ')}\n`;
        report += `- **Authentification**: ${requests.some(r => r.hasAuthHeader) ? '‚úÖ Pr√©sente' : '‚ùå Absente'}\n\n`;
      });
    }
    
    // Conclusions et recommandations
    report += `## Conclusions\n\n`;
    
    if (totalSuccess === totalTests) {
      report += `‚úÖ **Tous les endpoints ont √©t√© valid√©s avec succ√®s.**\n\n`;
    } else {
      const successRate = Math.round((totalSuccess / totalTests) * 100);
      report += `‚ö†Ô∏è **${successRate}% des endpoints ont √©t√© valid√©s avec succ√®s.** Des erreurs ont √©t√© d√©tect√©es et doivent √™tre analys√©es.\n\n`;
    }
    
    // R√©sum√© des probl√®mes
    const allErrors = [...publicErrors, ...protectedErrors];
    if (allErrors.length > 0) {
      report += `### Probl√®mes identifi√©s\n\n`;
      allErrors.forEach(([name, result]) => {
        report += `- **${name}**: ${result.error?.message || 'Erreur inconnue'}\n`;
      });
      report += '\n';
    }
    
    // Ajouter des recommandations
    report += `## Recommandations\n\n`;
    
    // Recommandations bas√©es sur les r√©sultats
    if (allErrors.length > 0) {
      report += `1. V√©rifier la disponibilit√© des endpoints √©chou√©s avec l'√©quipe backend\n`;
      report += `2. S'assurer que les structures de donn√©es correspondent aux attentes de l'API\n`;
    }
    
    // Recommandations g√©n√©rales
    report += `3. S'assurer que les tokens d'authentification sont correctement transmis\n`;
    report += `4. V√©rifier la gestion des erreurs c√¥t√© client pour tous les endpoints\n`;
    report += `5. Confirmer les conventions de nommage et la structure des r√©ponses avec l'√©quipe backend\n`;
    
    return report;
  },
  
  // Ex√©cuter tous les tests et g√©n√©rer le rapport
  async runAll() {
    await this.testPublicEndpoints();
    await this.testProtectedEndpoints();
    return this.generateReport();
  }
};

// Exposer l'utilitaire √† window pour utilisation dans la console
window.veloApiTest = veloApiTest;

// Message d'aide
console.log('%cüß™ Testeur d\'API Velo-Altitude charg√©', 'font-weight: bold; color: #4caf50;');
console.log('Utilisez window.veloApiTest pour acc√©der √† l\'utilitaire de test');
console.log('Commandes disponibles:');
console.log('- veloApiTest.testPublicEndpoints() - Teste les endpoints publics');
console.log('- veloApiTest.testProtectedEndpoints() - Teste les endpoints prot√©g√©s');
console.log('- veloApiTest.runAll() - Ex√©cute tous les tests et g√©n√®re un rapport');
console.log('- veloApiTest.results - Voir les r√©sultats bruts');
console.log('- veloApiTest.generateReport() - G√©n√©rer un rapport de synth√®se');

// Retourner l'utilitaire pour cha√Ænage
veloApiTest;

// Activation du monitoring des requ√™tes
requestInspector.monitorHeaders();

// Afficher les requ√™tes captur√©es
requestInspector.reportRequests();
