/**
 * Utilitaire de pr√©chargement des donn√©es m√©t√©o pour les cols et itin√©raires populaires
 * Optimise les performances en chargeant en arri√®re-plan les donn√©es m√©t√©o pour les destinations fr√©quentes
 */
import axios from 'axios';
import weatherCache from './weatherCache';
import { popular_locations } from '../data/popular-locations';

class WeatherPreloader {
  constructor() {
    this.isInitialized = false;
    this.isPreloading = false;
    this.preloadQueue = [];
    this.preloadInterval = null;
    this.syncInProgress = false;
    this.stats = {
      totalPreloaded: 0,
      lastPreloadTime: null,
      successCount: 0,
      errorCount: 0
    };
  }

  /**
   * Initialise le pr√©chargeur de donn√©es m√©t√©o
   * @param {Object} options Options de configuration
   */
  initialize(options = {}) {
    if (this.isInitialized) return;
    
    const defaultOptions = {
      preloadPopularOnStart: true,
      preloadInterval: 30 * 60 * 1000, // 30 minutes
      concurrentPreloads: 2,
      enableSync: true
    };
    
    this.options = { ...defaultOptions, ...options };
    this.isInitialized = true;
    
    console.log('[WeatherPreloader] ‚ö° Pr√©chargeur de donn√©es m√©t√©o initialis√©');
    
    // Pr√©charger les donn√©es m√©t√©o pour les cols populaires au d√©marrage
    if (this.options.preloadPopularOnStart) {
      this.preloadPopularLocations();
    }
    
    // Configurer la synchronisation p√©riodique
    if (this.options.enableSync && this.options.preloadInterval > 0) {
      this.preloadInterval = setInterval(() => {
        this.preloadPopularLocations();
      }, this.options.preloadInterval);
      
      console.log(`[WeatherPreloader] üîÑ Synchronisation planifi√©e toutes les ${this.options.preloadInterval / 60000} minutes`);
    }
  }

  /**
   * Pr√©charge les donn√©es m√©t√©o pour les cols et itin√©raires populaires
   */
  async preloadPopularLocations() {
    if (this.syncInProgress) {
      console.log('[WeatherPreloader] ‚è≥ Synchronisation d√©j√† en cours');
      return;
    }
    
    this.syncInProgress = true;
    console.log('[WeatherPreloader] üîÑ D√©marrage de la synchronisation des donn√©es m√©t√©o');
    
    try {
      // Ajouter les cols populaires √† la file d'attente de pr√©chargement
      this.preloadQueue = [...popular_locations];
      
      // M√©langer la file pour √©viter de toujours pr√©charger les m√™mes donn√©es en premier
      this.shuffleQueue();
      
      // D√©marrer le pr√©chargement
      await this.startPreloading();
      
      this.stats.lastPreloadTime = new Date();
      console.log(`[WeatherPreloader] ‚úÖ Synchronisation termin√©e avec ${this.stats.successCount} succ√®s et ${this.stats.errorCount} erreurs`);
    } catch (error) {
      console.error('[WeatherPreloader] ‚ùå Erreur lors de la synchronisation:', error);
    } finally {
      this.syncInProgress = false;
    }
  }

  /**
   * Pr√©charge les donn√©es m√©t√©o pour une location sp√©cifique
   * @param {Object} location Objet contenant latitude, longitude et nom
   */
  async preloadLocation(location) {
    if (!location || !location.lat || !location.lng) {
      console.error('[WeatherPreloader] ‚ùå Donn√©es de localisation invalides');
      return;
    }
    
    try {
      console.log(`[WeatherPreloader] üîç Pr√©chargement des donn√©es m√©t√©o pour ${location.name || 'lieu inconnu'}`);
      
      // R√©cup√©rer les donn√©es m√©t√©o actuelles
      const currentWeather = await axios.get(`/api/weather/current?lat=${location.lat}&lon=${location.lng}`);
      
      // Stocker dans le cache
      weatherCache.getWeatherData(
        location.lat.toString(),
        location.lng.toString(),
        async () => currentWeather.data
      );
      
      // R√©cup√©rer √©galement les pr√©visions
      const forecast = await axios.get(`/api/weather/forecast?lat=${location.lat}&lon=${location.lng}`);
      
      // Stocker dans le cache avec une cl√© diff√©rente pour les pr√©visions
      weatherCache.getWeatherData(
        `forecast_${location.lat}`,
        `forecast_${location.lng}`,
        async () => forecast.data
      );
      
      this.stats.successCount++;
      this.stats.totalPreloaded++;
      
      return true;
    } catch (error) {
      console.error(`[WeatherPreloader] ‚ùå Erreur lors du pr√©chargement pour ${location.name || 'lieu inconnu'}:`, error);
      this.stats.errorCount++;
      return false;
    }
  }

  /**
   * D√©marre le processus de pr√©chargement en parall√®le
   * @returns {Promise<void>}
   */
  async startPreloading() {
    this.isPreloading = true;
    
    // R√©initialiser les compteurs
    this.stats.successCount = 0;
    this.stats.errorCount = 0;
    
    // Pr√©charger en parall√®le avec une limite de concurrence
    const concurrentPreloads = this.options.concurrentPreloads || 2;
    const tasks = [];
    
    for (let i = 0; i < concurrentPreloads && this.preloadQueue.length > 0; i++) {
      tasks.push(this.processPreloadQueue());
    }
    
    await Promise.all(tasks);
    this.isPreloading = false;
  }

  /**
   * Traite la file d'attente de pr√©chargement, un √©l√©ment √† la fois
   * @returns {Promise<void>}
   */
  async processPreloadQueue() {
    while (this.preloadQueue.length > 0) {
      const location = this.preloadQueue.shift();
      await this.preloadLocation(location);
      
      // Petite pause entre les requ√™tes pour √©viter les limitations d'API
      await new Promise(resolve => setTimeout(resolve, 500));
    }
  }

  /**
   * M√©lange la file d'attente de pr√©chargement
   */
  shuffleQueue() {
    for (let i = this.preloadQueue.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [this.preloadQueue[i], this.preloadQueue[j]] = [this.preloadQueue[j], this.preloadQueue[i]];
    }
  }

  /**
   * Ajoute une location √† la file de pr√©chargement
   * @param {Object} location Objet contenant latitude, longitude et nom
   */
  addToPreloadQueue(location) {
    if (!location || !location.lat || !location.lng) return;
    
    this.preloadQueue.push(location);
    
    // Si le pr√©chargement n'est pas en cours, le d√©marrer
    if (!this.isPreloading && !this.syncInProgress) {
      this.startPreloading();
    }
  }

  /**
   * Arr√™te le pr√©chargeur et nettoie les ressources
   */
  shutdown() {
    if (this.preloadInterval) {
      clearInterval(this.preloadInterval);
    }
    
    this.isInitialized = false;
    this.preloadQueue = [];
    console.log('[WeatherPreloader] üõë Pr√©chargeur de donn√©es m√©t√©o arr√™t√©');
  }

  /**
   * Obtient les statistiques du pr√©chargeur
   * @returns {Object} Statistiques
   */
  getStats() {
    return {
      ...this.stats,
      queueLength: this.preloadQueue.length,
      isPreloading: this.isPreloading,
      isSyncing: this.syncInProgress
    };
  }
}

// Cr√©er une instance singleton
const weatherPreloader = new WeatherPreloader();

export default weatherPreloader;
