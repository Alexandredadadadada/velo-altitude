import React, { createContext, useContext, useState, useEffect } from 'react';

// Créer une seule instance de contexte
const AuthContext = createContext(null);

// Assurer qu'il n'y a qu'une seule instance du contexte d'authentification
export const AuthProvider = ({ children }) => {
  const [state, setState] = useState({
    currentUser: null,
    user: null, // Duplication pour compatibilité avec différentes parties du code
    isAuthenticated: false,
    isAdmin: false,
    loading: true
  });

  // Charger l'utilisateur depuis le localStorage au démarrage
  useEffect(() => {
    const loadUser = async () => {
      try {
        // Tenter de charger depuis localStorage
        const storedUser = localStorage.getItem('velo_altitude_user');
        if (storedUser) {
          const user = JSON.parse(storedUser);
          setState({
            currentUser: user,
            user: user,
            isAuthenticated: true,
            isAdmin: user.role === 'admin',
            loading: false
          });
        } else {
          // Pas d'utilisateur stocké
          setState(prev => ({ ...prev, loading: false }));
        }
      } catch (error) {
        console.error('Erreur lors du chargement de l\'utilisateur:', error);
        setState(prev => ({ ...prev, loading: false }));
      }
    };

    loadUser();
  }, []);

  // Fonctions d'authentification
  const login = async (credentials) => {
    // Simulation de login pour le moment
    // À remplacer par votre vraie logique d'authentification
    try {
      // Simulation d'un appel API
      const user = {
        id: 'user-123',
        name: 'Utilisateur Test',
        email: credentials.email || 'test@velo-altitude.com',
        role: 'admin',
        preferences: { theme: 'light', language: 'fr' },
        profile: { weight: 75, height: 180, ftp: 250 }
      };
      
      // Stocker l'utilisateur dans localStorage
      localStorage.setItem('velo_altitude_user', JSON.stringify(user));
      
      // Mettre à jour l'état
      setState({
        currentUser: user,
        user: user,
        isAuthenticated: true,
        isAdmin: user.role === 'admin',
        loading: false
      });
      
      return true;
    } catch (error) {
      console.error('Erreur de connexion:', error);
      return false;
    }
  };

  const logout = async () => {
    try {
      // Supprimer l'utilisateur du localStorage
      localStorage.removeItem('velo_altitude_user');
      
      // Réinitialiser l'état
      setState({
        currentUser: null,
        user: null,
        isAuthenticated: false,
        isAdmin: false,
        loading: false
      });
      
      return true;
    } catch (error) {
      console.error('Erreur de déconnexion:', error);
      return false;
    }
  };

  const updateUserProfile = async (data) => {
    try {
      const updatedUser = { ...state.currentUser, ...data };
      localStorage.setItem('velo_altitude_user', JSON.stringify(updatedUser));
      
      setState({
        currentUser: updatedUser,
        user: updatedUser,
        isAuthenticated: true,
        isAdmin: updatedUser.role === 'admin',
        loading: false
      });
      
      return updatedUser;
    } catch (error) {
      console.error('Erreur de mise à jour du profil:', error);
      return state.currentUser;
    }
  };

  const getToken = () => {
    // Simulation - à remplacer par votre logique réelle
    return 'simulated-jwt-token';
  };

  // Valeur complète du contexte avec toutes les propriétés et méthodes
  const authValue = {
    ...state,
    login,
    logout,
    updateUserProfile,
    getToken
  };

  return <AuthContext.Provider value={authValue}>{children}</AuthContext.Provider>;
};

// Hook useAuth avec protection contre les erreurs et valeur par défaut sécurisée
export const useAuth = () => {
  try {
    const context = useContext(AuthContext);
    
    // Si le contexte est undefined, on fournit une valeur par défaut au lieu de throw
    if (context === undefined) {
      console.warn('[AUTH] useAuth appelé en dehors d\'un AuthProvider, utilisation de valeurs par défaut');
      
      return {
        currentUser: null,
        user: null,
        isAuthenticated: false,
        isAdmin: false,
        loading: false,
        login: () => {
          console.warn('[AUTH] Tentative de login sans AuthProvider');
          return Promise.resolve(false);
        },
        logout: () => {
          console.warn('[AUTH] Tentative de logout sans AuthProvider');
          return Promise.resolve(false);
        },
        updateUserProfile: () => {
          console.warn('[AUTH] Tentative de mise à jour du profil sans AuthProvider');
          return Promise.resolve(null);
        },
        getToken: () => {
          console.warn('[AUTH] Tentative d\'obtention de token sans AuthProvider');
          return null;
        }
      };
    }
    
    return context;
  } catch (error) {
    console.error('[AUTH] Erreur dans useAuth:', error);
    
    // Valeur par défaut sécurisée en cas d'erreur
    return {
      currentUser: null,
      user: null,
      isAuthenticated: false,
      isAdmin: false,
      loading: false,
      login: () => Promise.resolve(false),
      logout: () => Promise.resolve(false),
      updateUserProfile: () => Promise.resolve(null),
      getToken: () => null
    };
  }
};

// Créer des exports par défaut des anciennes implémentations pour compatibilité
export default {
  AuthProvider,
  useAuth,
  AuthContext
};
