// auth-override.js
console.log("üîí Initialisation du syst√®me d'authentification de secours");

// Cr√©er un utilisateur fictif global
window.MOCK_USER = {
  id: "demo-user-123",
  name: "Utilisateur D√©mo",
  email: "demo@velo-altitude.com",
  role: "admin",
  preferences: { theme: "light", language: "fr" },
  profile: { weight: 75, height: 180, ftp: 250 }
};

// Cr√©er un objet d'authentification global
window.AUTH_CONTEXT = {
  currentUser: window.MOCK_USER,
  user: window.MOCK_USER,
  isAuthenticated: true,
  isAdmin: true,
  loading: false,
  login: () => {
    console.log("üì• Login simul√©");
    return Promise.resolve(true);
  },
  logout: () => {
    console.log("üì§ Logout simul√©");
    return Promise.resolve(true);
  },
  updateUserProfile: (data) => {
    console.log("‚úèÔ∏è Mise √† jour du profil simul√©e", data);
    return Promise.resolve({...window.MOCK_USER, ...data});
  },
  getToken: () => "demo-token-xyz-123"
};

// Remplacer la fonction useAuth globalement
window.useAuth = () => window.AUTH_CONTEXT;

// Intercepter les erreurs React li√©es √† l'authentification
const originalError = console.error;
console.error = function(msg, ...args) {
  if (typeof msg === 'string' && 
      (msg.includes('useAuth') || msg.includes('AuthProvider'))) {
    console.log("üõ°Ô∏è Erreur d'authentification intercept√©e et neutralis√©e");
    return;
  }
  return originalError.call(this, msg, ...args);
};

console.log("‚úÖ Syst√®me d'authentification de secours activ√©");
