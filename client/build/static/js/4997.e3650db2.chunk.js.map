{"version":3,"file":"static/js/4997.e3650db2.chunk.js","mappings":"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","sources":["services/UserService.js","pages/TrainingDashboard.js","services/FTPEstimationService.js","services/TrainingSystem.js","components/common/NotificationSystem.js","utils/lazyLoadHelper.js"],"sourcesContent":["/**\n * Service de gestion des utilisateurs\n * Fournit des méthodes pour récupérer et mettre à jour les profils utilisateurs\n */\nclass UserService {\n  /**\n   * Récupère le profil de l'utilisateur connecté\n   * @returns {Promise<Object>} Profil utilisateur\n   */\n  async getCurrentUserProfile() {\n    try {\n      // Dans une application réelle, ceci serait un appel API\n      // Simulation d'un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Profil utilisateur mocké\n      const mockProfile = {\n        id: 'u123',\n        name: 'Jean Dupont',\n        email: 'jean.dupont@example.com',\n        age: 35,\n        weight: 75,\n        height: 182,\n        ftp: 240,\n        level: 'intermediate',\n        cyclist_type: 'all-rounder',\n        preferred_terrain: 'mixed',\n        weekly_hours: 8,\n        hrmax: 185,\n        hrrest: 52,\n        region: 'Grand Est',\n        following: 24,\n        followers: 18,\n        achievementCount: 12,\n        created_at: '2024-07-15',\n        avatar: '/assets/avatars/default.jpg'\n      };\n      \n      return mockProfile;\n    } catch (error) {\n      console.error('Erreur lors de la récupération du profil utilisateur:', error);\n      throw new Error('Impossible de récupérer le profil utilisateur');\n    }\n  }\n  \n  /**\n   * Récupère le profil d'un utilisateur spécifique par son ID\n   * @param {string} userId - Identifiant de l'utilisateur\n   * @returns {Promise<Object>} Profil utilisateur\n   */\n  async getUserProfile(userId) {\n    try {\n      // Simulation d'un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Profils utilisateurs mockés\n      const mockProfiles = {\n        'u123': {\n          id: 'u123',\n          name: 'Jean Dupont',\n          age: 35,\n          weight: 75,\n          height: 182,\n          ftp: 240,\n          level: 'intermediate',\n          cyclist_type: 'all-rounder',\n          preferred_terrain: 'mixed',\n          weekly_hours: 8,\n          hrmax: 185,\n          hrrest: 52,\n          region: 'Grand Est',\n          following: 24,\n          followers: 18,\n          achievementCount: 12,\n          created_at: '2024-07-15',\n          avatar: '/assets/avatars/default.jpg'\n        },\n        'u456': {\n          id: 'u456',\n          name: 'Marie Martin',\n          age: 29,\n          weight: 62,\n          height: 168,\n          ftp: 205,\n          level: 'beginner',\n          cyclist_type: 'climber',\n          preferred_terrain: 'hills',\n          weekly_hours: 5,\n          hrmax: 192,\n          hrrest: 56,\n          region: 'Grand Est',\n          following: 32,\n          followers: 15,\n          achievementCount: 8,\n          created_at: '2024-09-10',\n          avatar: '/assets/avatars/default2.jpg'\n        },\n        'u789': {\n          id: 'u789',\n          name: 'Pierre Lambert',\n          age: 42,\n          weight: 82,\n          height: 188,\n          ftp: 280,\n          level: 'advanced',\n          cyclist_type: 'sprinter',\n          preferred_terrain: 'flat',\n          weekly_hours: 12,\n          hrmax: 178,\n          hrrest: 48,\n          region: 'Grand Est',\n          following: 56,\n          followers: 124,\n          achievementCount: 28,\n          created_at: '2024-05-22',\n          avatar: '/assets/avatars/default3.jpg'\n        }\n      };\n      \n      const profile = mockProfiles[userId];\n      \n      if (!profile) {\n        throw new Error('Utilisateur non trouvé');\n      }\n      \n      return profile;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération du profil utilisateur (ID: ${userId}):`, error);\n      throw new Error('Impossible de récupérer le profil utilisateur');\n    }\n  }\n  \n  /**\n   * Met à jour le profil utilisateur\n   * @param {Object} profileData - Données du profil à mettre à jour\n   * @returns {Promise<Object>} Profil utilisateur mis à jour\n   */\n  async updateUserProfile(profileData) {\n    try {\n      // Simulation d'un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 700));\n      \n      // Validation des données\n      if (!profileData.id) {\n        throw new Error('ID utilisateur manquant');\n      }\n      \n      // Dans une application réelle, ceci serait un appel API PUT\n      console.log('Mise à jour du profil utilisateur:', profileData);\n      \n      // Simuler une réponse de succès avec les données mises à jour\n      return {\n        ...profileData,\n        updated_at: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du profil utilisateur:', error);\n      throw new Error('Impossible de mettre à jour le profil utilisateur');\n    }\n  }\n  \n  /**\n   * Récupère l'historique d'entraînement de l'utilisateur\n   * @param {string} userId - Identifiant de l'utilisateur\n   * @param {number} limit - Nombre maximum d'entrées à récupérer\n   * @returns {Promise<Array>} Historique d'entraînement\n   */\n  async getUserWorkoutHistory(userId, limit = 10) {\n    try {\n      // Simulation d'un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 600));\n      \n      // Dans une application réelle, ceci serait un appel API\n      // Historique d'entraînement mocké\n      const mockHistory = [\n        {\n          id: 'h1',\n          workoutId: 'threshold-classic',\n          workoutName: 'Seuil Classique',\n          date: '2025-03-20',\n          completed: true,\n          duration: 60,\n          avgPower: 210,\n          normalizedPower: 230,\n          tss: 85,\n          ifactor: 0.92,\n          heartRate: {\n            avg: 145,\n            max: 172\n          },\n          zones: {\n            z1: 12, // % du temps passé en zone 1\n            z2: 18,\n            z3: 10,\n            z4: 52,\n            z5: 8,\n            z6: 0,\n            z7: 0\n          }\n        },\n        {\n          id: 'h2',\n          workoutId: 'threshold-classic',\n          workoutName: 'Seuil Classique',\n          date: '2025-02-25',\n          completed: true,\n          duration: 62,\n          avgPower: 205,\n          normalizedPower: 225,\n          tss: 83,\n          ifactor: 0.90,\n          heartRate: {\n            avg: 148,\n            max: 175\n          },\n          zones: {\n            z1: 14,\n            z2: 20,\n            z3: 12,\n            z4: 47,\n            z5: 7,\n            z6: 0,\n            z7: 0\n          }\n        },\n        {\n          id: 'h3',\n          workoutId: 'hiit-vo2max',\n          workoutName: 'HIIT VO2max',\n          date: '2025-02-18',\n          completed: true,\n          duration: 60,\n          avgPower: 228,\n          normalizedPower: 251,\n          tss: 92,\n          ifactor: 0.98,\n          heartRate: {\n            avg: 158,\n            max: 182\n          },\n          zones: {\n            z1: 10,\n            z2: 14,\n            z3: 12,\n            z4: 25,\n            z5: 35,\n            z6: 4,\n            z7: 0\n          }\n        },\n        {\n          id: 'h4',\n          workoutId: 'endurance-foundation',\n          workoutName: 'Fondation d\\'Endurance',\n          date: '2025-02-12',\n          completed: true,\n          duration: 90,\n          avgPower: 172,\n          normalizedPower: 178,\n          tss: 78,\n          ifactor: 0.70,\n          heartRate: {\n            avg: 132,\n            max: 145\n          },\n          zones: {\n            z1: 5,\n            z2: 85,\n            z3: 10,\n            z4: 0,\n            z5: 0,\n            z6: 0,\n            z7: 0\n          }\n        },\n        {\n          id: 'h5',\n          workoutId: 'threshold-classic',\n          workoutName: 'Seuil Classique',\n          date: '2025-01-30',\n          completed: false, // Entraînement non terminé\n          duration: 45, // Sur 60 prévus\n          avgPower: 208,\n          normalizedPower: 220,\n          tss: 62,\n          ifactor: 0.88,\n          heartRate: {\n            avg: 146,\n            max: 168\n          },\n          zones: {\n            z1: 15,\n            z2: 22,\n            z3: 15,\n            z4: 42,\n            z5: 6,\n            z6: 0,\n            z7: 0\n          }\n        }\n      ];\n      \n      return mockHistory.slice(0, limit);\n    } catch (error) {\n      console.error(`Erreur lors de la récupération de l'historique d'entraînement (ID: ${userId}):`, error);\n      throw new Error('Impossible de récupérer l\\'historique d\\'entraînement');\n    }\n  }\n  \n  /**\n   * Récupère les statistiques d'entraînement de l'utilisateur\n   * @param {string} userId - Identifiant de l'utilisateur\n   * @param {string} period - Période pour les statistiques (week, month, year, all)\n   * @returns {Promise<Object>} Statistiques d'entraînement\n   */\n  async getUserTrainingStats(userId, period = 'month') {\n    try {\n      // Simulation d'un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 600));\n      \n      // Dans une application réelle, ceci serait un appel API\n      // Statistiques d'entraînement mockées\n      const mockStats = {\n        workoutCount: 14,\n        totalDuration: 842, // minutes\n        totalTSS: 1248,\n        avgWeeklyTSS: 312,\n        completionRate: 0.89, // 89% des entraînements terminés\n        ftpHistory: [\n          { date: '2025-01-05', value: 225 },\n          { date: '2025-02-10', value: 232 },\n          { date: '2025-03-15', value: 240 }\n        ],\n        powerDistribution: {\n          z1: 12, // % du temps passé en zone 1\n          z2: 35,\n          z3: 18,\n          z4: 25,\n          z5: 8,\n          z6: 2,\n          z7: 0\n        },\n        workoutTypes: {\n          RECOVERY: 2,\n          ENDURANCE: 5,\n          THRESHOLD: 4,\n          HIIT: 3\n        }\n      };\n      \n      return mockStats;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération des statistiques d'entraînement (ID: ${userId}):`, error);\n      throw new Error('Impossible de récupérer les statistiques d\\'entraînement');\n    }\n  }\n}\n\n// Export une instance singleton du service\nexport default new UserService();\n","import React, { useState, useEffect, Suspense } from 'react';\nimport { \n  Container, \n  Grid, \n  Typography, \n  Paper, \n  Box, \n  Tabs, \n  Tab, \n  Card, \n  CardHeader, \n  CardContent, \n  Alert, \n  Button, \n  Divider\n} from '@mui/material';\nimport { \n  CalendarMonth as CalendarIcon, \n  FitnessCenter as DumbbellIcon, \n  Timeline as ChartIcon, \n  Settings as UserSettingsIcon,\n  DirectionsBike as BikeIcon, \n  Favorite as HeartbeatIcon, \n  Build as ToolboxIcon,\n  FilterList as FilterIcon,\n  FormatListBulleted as ListIcon\n} from '@mui/icons-material';\nimport { \n  Routes,\n  Route,\n  useNavigate,\n  useLocation\n} from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { useNotification } from '../components/common/NotificationSystem';\n\n// Import de l'utilitaire de lazy loading\nimport { lazyLoad, LoadingFallback } from '../utils/lazyLoadHelper';\n\n// Lazy load des composants d'entraînement\nconst TrainingModule = lazyLoad(() => import('../components/training/TrainingModule'), {\n  moduleName: 'Module d\\'entraînement',\n  skeletonType: 'content'\n});\n\nconst WorkoutLibrary = lazyLoad(() => import('../components/training/WorkoutLibrary'), {\n  moduleName: 'Bibliothèque d\\'entraînements',\n  skeletonType: 'complex'\n});\n\nconst HIITBuilder = lazyLoad(() => import('../components/training/HIITBuilder'), {\n  moduleName: 'Générateur HIIT',\n  skeletonType: 'content'\n});\n\nconst HIITVisualizer = lazyLoad(() => import('../components/training/HIITVisualizer'), {\n  moduleName: 'Visualiseur HIIT',\n  skeletonType: 'content'\n});\n\nconst CyclingCoach = lazyLoad(() => import('../components/coach/CyclingCoach'), {\n  moduleName: 'Coach virtuel',\n  skeletonType: 'complex'\n});\n\nconst TrainingProgramsExplorer = lazyLoad(() => import('../components/training/TrainingProgramsExplorer'), {\n  moduleName: 'Explorateur de programmes',\n  skeletonType: 'complex',\n  minDelay: 500\n});\n\n// Services et utilitaires\nimport UserService from '../services/UserService';\nimport TrainingSystem from '../services/TrainingSystem';\n\n/**\n * Tableau de bord principal pour l'écosystème d'entraînement\n */\nconst TrainingDashboard = () => {\n  const { t } = useTranslation();\n  const { notify } = useNotification();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [activeTab, setActiveTab] = useState(() => {\n    const path = location.pathname.split('/').pop();\n    if (path === 'training') return 'overview';\n    return path;\n  });\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedWorkout, setSelectedWorkout] = useState(null);\n  const [trainingStats, setTrainingStats] = useState(null);\n  const [weeklyPlan, setWeeklyPlan] = useState([]);\n  const [showVisualizer, setShowVisualizer] = useState(false);\n\n  // Charger le profil utilisateur et les statistiques\n  useEffect(() => {\n    const loadUserData = async () => {\n      try {\n        setLoading(true);\n        \n        // Simulation d'appel API\n        await new Promise(resolve => setTimeout(resolve, 800));\n        \n        // Profil utilisateur (à remplacer par un appel réel à l'API)\n        const mockUserProfile = {\n          id: 'u123',\n          name: 'Jean Dupont',\n          age: 35,\n          weight: 75,\n          height: 182,\n          ftp: 240,\n          level: 'intermediate',\n          cyclist_type: 'all-rounder',\n          preferred_terrain: 'mixed',\n          weekly_hours: 8,\n          hrmax: 185,\n          hrrest: 52,\n          created_at: '2024-07-15'\n        };\n        \n        setUserProfile(mockUserProfile);\n        \n        // Statistiques d'entraînement (à remplacer par des données réelles)\n        setTrainingStats({\n          totalWorkouts: 124,\n          totalHours: 187,\n          totalTSS: 9580,\n          ftpProgress: [\n            { date: '2025-01-01', value: 220 },\n            { date: '2025-02-01', value: 230 },\n            { date: '2025-03-01', value: 240 }\n          ],\n          weeklyVolume: [12, 8, 10, 6, 9, 11, 7, 12],\n          lastWorkouts: [\n            { id: 'w1', type: 'HIIT', name: 'Intervals 4x4', date: '2025-04-01', tss: 98 },\n            { id: 'w2', type: 'ENDURANCE', name: 'Endurance longue', date: '2025-03-29', tss: 120 },\n            { id: 'w3', type: 'THRESHOLD', name: 'Sweet Spot', date: '2025-03-27', tss: 85 }\n          ]\n        });\n        \n        // Plan hebdomadaire (à remplacer par des données réelles)\n        setWeeklyPlan(generateWeeklyPlan(mockUserProfile));\n      } catch (error) {\n        console.error('Erreur lors du chargement des données utilisateur:', error);\n        notify.error('Impossible de charger les données utilisateur');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadUserData();\n  }, [notify]);\n  \n  // Surveiller les changements de route pour mettre à jour l'onglet actif\n  useEffect(() => {\n    const path = location.pathname.split('/').pop();\n    if (path === 'training') {\n      setActiveTab('overview');\n    } else if (['library', 'programs', 'hiitBuilder', 'coach'].includes(path)) {\n      setActiveTab(path);\n    }\n  }, [location.pathname]);\n\n  /**\n   * Génère un plan hebdomadaire basé sur le profil utilisateur\n   */\n  const generateWeeklyPlan = (profile) => {\n    if (!profile) return [];\n    \n    return TrainingSystem.generateWeeklyPlan(profile);\n  };\n\n  /**\n   * Gestion de la sélection d'un entraînement\n   */\n  const handleSelectWorkout = (workout) => {\n    setSelectedWorkout(workout);\n    \n    // Option: naviguer vers la page de détail\n    // history.push(`/training/workout/${workout.id}`);\n  };\n\n  /**\n   * Sauvegarder un entraînement\n   */\n  const handleSaveWorkout = (workout) => {\n    try {\n      // Logique de sauvegarde (à remplacer par un appel API)\n      console.log('Sauvegarde de l\\'entraînement:', workout);\n      \n      notify.success('Entraînement sauvegardé avec succès');\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de la sauvegarde de l\\'entraînement:', error);\n      notify.error('Erreur lors de la sauvegarde');\n      return false;\n    }\n  };\n\n  /**\n   * Visualiser un entraînement\n   */\n  const handlePreviewWorkout = (workout) => {\n    setSelectedWorkout(workout);\n    setShowVisualizer(true);\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  /**\n   * Terminer un entraînement\n   */\n  const handleWorkoutComplete = (stats) => {\n    // Traiter les statistiques d'entraînement\n    console.log('Workout completed with stats:', stats);\n    \n    // Notification de succès\n    notify.success(t('training.workout_completed'));\n    \n    // Retour à la bibliothèque\n    setSelectedWorkout(null);\n    setShowVisualizer(false);\n  };\n  \n  /**\n   * Gestion du changement d'onglet\n   */\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n    navigate(`/training/${newValue === 'overview' ? '' : newValue}`);\n  };\n  \n  /**\n   * Gestion de la sélection d'un programme d'entraînement\n   */\n  const handleSelectProgram = (program) => {\n    console.log('Selected program:', program);\n    \n    // TODO: Implémenter l'ajout au calendrier ou autre action\n    notify.success(t('training.program_selected', { name: program.title }));\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ width: '100%', mb: 4 }}>\n        <Tabs\n          value={activeTab}\n          onChange={handleTabChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          allowScrollButtonsMobile\n          aria-label={t('training.navigation')}\n        >\n          <Tab \n            value=\"overview\"\n            label={t('training.overview')} \n            icon={<BikeIcon />} \n            iconPosition=\"start\"\n          />\n          <Tab \n            value=\"programs\"\n            label={t('training.programs')} \n            icon={<FilterIcon />} \n            iconPosition=\"start\"\n          />\n          <Tab \n            value=\"library\"\n            label={t('training.workout_library')} \n            icon={<ListIcon />} \n            iconPosition=\"start\"\n          />\n          <Tab \n            value=\"hiitBuilder\"\n            label={t('training.hiit_builder')} \n            icon={<ToolboxIcon />}\n            iconPosition=\"start\" \n          />\n          <Tab \n            value=\"coach\"\n            label={t('training.coach')} \n            icon={<HeartbeatIcon />} \n            iconPosition=\"start\"\n          />\n        </Tabs>\n      </Box>\n      \n      <Routes>\n        <Route path=\"/\" element={\n          <Box>\n            {loading ? (\n              <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>\n                <Typography>{t('common.loading')}...</Typography>\n              </Box>\n            ) : (\n              <Grid container spacing={4}>\n                <Grid item xs={12} md={8}>\n                  <Card sx={{ mb: 4 }}>\n                    <CardHeader\n                      title={\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                          <CalendarIcon sx={{ mr: 1 }} />\n                          {t('training.weekly_plan')}\n                        </Box>\n                      }\n                    />\n                    <CardContent>\n                      {userProfile ? (\n                        <Box>\n                          {weeklyPlan.length > 0 ? (\n                            weeklyPlan.map((day, index) => (\n                              <Paper\n                                key={index}\n                                elevation={0}\n                                variant=\"outlined\"\n                                sx={{ p: 2, mb: 2 }}\n                              >\n                                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n                                  <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                                    {day.day}\n                                  </Typography>\n                                  {day.workout ? (\n                                    <Button\n                                      size=\"small\"\n                                      variant=\"outlined\"\n                                      onClick={() => handleSelectWorkout(day.workout)}\n                                    >\n                                      {t('training.view_details')}\n                                    </Button>\n                                  ) : (\n                                    <Typography variant=\"body2\" color=\"text.secondary\">\n                                      {t('training.rest_day')}\n                                    </Typography>\n                                  )}\n                                </Box>\n                                {day.workout && (\n                                  <>\n                                    <Typography variant=\"body1\">\n                                      {day.workout.name}\n                                    </Typography>\n                                    <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>\n                                      <DumbbellIcon fontSize=\"small\" sx={{ mr: 0.5, color: 'text.secondary' }} />\n                                      <Typography variant=\"body2\" color=\"text.secondary\">\n                                        {day.workout.type} • {day.workout.duration} min • {day.workout.intensity}\n                                      </Typography>\n                                    </Box>\n                                  </>\n                                )}\n                              </Paper>\n                            ))\n                          ) : (\n                            <Alert severity=\"info\">\n                              {t('training.no_plan_available')}\n                            </Alert>\n                          )}\n                          \n                          <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\n                            <Button\n                              variant=\"outlined\"\n                              startIcon={<CalendarIcon />}\n                              onClick={() => setWeeklyPlan(generateWeeklyPlan(userProfile))}\n                            >\n                              {t('training.regenerate_plan')}\n                            </Button>\n                          </Box>\n                        </Box>\n                      ) : (\n                        <Alert severity=\"warning\">\n                          {t('training.profile_incomplete')}\n                        </Alert>\n                      )}\n                    </CardContent>\n                  </Card>\n                </Grid>\n                \n                <Grid item xs={12} md={4}>\n                  <Card>\n                    <CardHeader\n                      title={\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                          <UserSettingsIcon sx={{ mr: 1 }} />\n                          {t('training.profile')}\n                        </Box>\n                      }\n                    />\n                    <CardContent>\n                      {userProfile ? (\n                        <Box>\n                          <Typography variant=\"h6\" gutterBottom>\n                            {userProfile.name}\n                          </Typography>\n                          \n                          <Grid container spacing={2} sx={{ mb: 2 }}>\n                            <Grid item xs={6}>\n                              <Typography variant=\"body2\" color=\"text.secondary\">\n                                {t('training.profile.level')}\n                              </Typography>\n                              <Typography variant=\"body1\">\n                                {t(`training.levels.${userProfile.level}`)}\n                              </Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                              <Typography variant=\"body2\" color=\"text.secondary\">\n                                {t('training.profile.ftp')}\n                              </Typography>\n                              <Typography variant=\"body1\">\n                                {userProfile.ftp} W\n                              </Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                              <Typography variant=\"body2\" color=\"text.secondary\">\n                                {t('training.profile.cyclist_type')}\n                              </Typography>\n                              <Typography variant=\"body1\">\n                                {t(`training.cyclist_types.${userProfile.cyclist_type}`)}\n                              </Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                              <Typography variant=\"body2\" color=\"text.secondary\">\n                                {t('training.profile.weekly_hours')}\n                              </Typography>\n                              <Typography variant=\"body1\">\n                                {userProfile.weekly_hours} h\n                              </Typography>\n                            </Grid>\n                          </Grid>\n                          \n                          <Button\n                            variant=\"outlined\"\n                            fullWidth\n                            component=\"a\"\n                            href=\"/profile/settings\"\n                          >\n                            {t('training.edit_profile')}\n                          </Button>\n                        </Box>\n                      ) : (\n                        <Alert severity=\"warning\">\n                          {t('training.profile_incomplete')}\n                        </Alert>\n                      )}\n                    </CardContent>\n                  </Card>\n                  \n                  <Card sx={{ mt: 3 }}>\n                    <CardHeader\n                      title={\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                          <ChartIcon sx={{ mr: 1 }} />\n                          {t('training.stats_title')}\n                        </Box>\n                      }\n                    />\n                    <CardContent>\n                      {trainingStats ? (\n                        <Box>\n                          <Grid container spacing={2} sx={{ mb: 3 }}>\n                            <Grid item xs={6}>\n                              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                                {t('training.stats.workouts')}\n                              </Typography>\n                              <Typography variant=\"h6\">\n                                {trainingStats.totalWorkouts}\n                              </Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                                {t('training.stats.hours')}\n                              </Typography>\n                              <Typography variant=\"h6\">\n                                {trainingStats.totalHours}\n                              </Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                                {t('training.stats.tss')}\n                              </Typography>\n                              <Typography variant=\"h6\">\n                                {trainingStats.totalTSS}\n                              </Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                                {t('training.stats.ftp_progress')}\n                              </Typography>\n                              <Typography variant=\"h6\" color=\"success.main\">\n                                +{trainingStats.ftpProgress[trainingStats.ftpProgress.length - 1].value - \n                                  trainingStats.ftpProgress[0].value} W\n                              </Typography>\n                            </Grid>\n                          </Grid>\n                          \n                          <Button \n                            variant=\"outlined\" \n                            fullWidth\n                            href=\"/visualizations\"\n                          >\n                            {t('training.view_detailed_analytics')}\n                          </Button>\n                        </Box>\n                      ) : (\n                        <Alert severity=\"info\">\n                          {t('training.no_stats_available')}\n                        </Alert>\n                      )}\n                    </CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            )}\n          </Box>\n        } />\n        <Route path=\"/programs\" element={\n          <Suspense fallback={<LoadingFallback moduleName=\"Explorateur de programmes\" />}>\n            <TrainingProgramsExplorer \n              userProfile={userProfile} \n              onProgramSelect={handleSelectProgram} \n            />\n          </Suspense>\n        } />\n        <Route path=\"/library\" element={\n          <Suspense fallback={<LoadingFallback moduleName=\"Bibliothèque d'entraînements\" />}>\n            <WorkoutLibrary \n              userProfile={userProfile}\n              onSelectWorkout={handleSelectWorkout}\n              onSaveWorkout={handleSaveWorkout}\n            />\n          </Suspense>\n        } />\n        <Route path=\"/hiitBuilder\" element={\n          <Suspense fallback={<LoadingFallback moduleName=\"Générateur HIIT\" />}>\n            <HIITBuilder \n              userProfile={userProfile}\n              onSaveWorkout={handleSaveWorkout}\n              onPreviewWorkout={handlePreviewWorkout}\n            />\n          </Suspense>\n        } />\n        <Route path=\"/coach\" element={\n          <Suspense fallback={<LoadingFallback moduleName=\"Coach virtuel\" />}>\n            <CyclingCoach \n              userProfile={userProfile}\n              onRecommendWorkout={handlePreviewWorkout}\n            />\n          </Suspense>\n        } />\n      </Routes>\n      \n      {/* HIIT Visualizer Dialog (ne dépend pas des routes) */}\n      {showVisualizer && selectedWorkout && (\n        <Suspense fallback={<LoadingFallback moduleName=\"Visualiseur HIIT\" />}>\n          <HIITVisualizer\n            workout={selectedWorkout}\n            open={showVisualizer}\n            onClose={() => setShowVisualizer(false)}\n            onWorkoutComplete={handleWorkoutComplete}\n          />\n        </Suspense>\n      )}\n    </Container>\n  );\n};\n\nexport default TrainingDashboard;\n","/**\n * Service de calcul et d'estimation de la FTP (Functional Threshold Power)\n * Offre diverses méthodes pour estimer la FTP d'un cycliste basées sur\n * différents paramètres physiologiques et tests de performance\n * \n * Références scientifiques:\n * - Allen, H., & Coggan, A. (2019). Training and Racing with a Power Meter. VeloPress.\n * - Coggan, A. R. (2018). Power Profiling. TrainingPeaks Blog.\n * - Pinot, J., & Grappe, F. (2011). The record power profile to assess performance in elite cyclists.\n */\n\n/**\n * Estime la FTP basée sur le poids et le niveau du cycliste\n * @param {number} weight - Poids en kg\n * @param {string} level - Niveau du cycliste (beginner, intermediate, advanced, elite)\n * @returns {number} FTP estimée en watts\n */\nexport const estimateFTPFromWeight = (weight, level = 'intermediate') => {\n  if (!weight || typeof weight !== 'number' || weight <= 0 || isNaN(weight)) {\n    console.warn('Poids invalide pour l\\'estimation FTP', { weight });\n    return null;\n  }\n\n  // Coefficients watts/kg basés sur les données de Coggan & Allen (2019)\n  // Ces valeurs sont des moyennes empiriques observées chez des cyclistes de différents niveaux\n  const ftpMultipliers = {\n    beginner: { min: 1.5, avg: 2.0, max: 2.5 },       // Débutant (< 1 an d'entraînement structuré)\n    intermediate: { min: 2.5, avg: 3.0, max: 3.5 },   // Intermédiaire (1-3 ans d'entraînement)\n    advanced: { min: 3.5, avg: 4.0, max: 4.5 },       // Avancé (> 3 ans d'entraînement régulier)\n    elite: { min: 4.5, avg: 5.2, max: 6.0 }           // Élite (niveau national/international)\n  };\n\n  // Utiliser le niveau demandé ou par défaut intermediate\n  const multiplier = ftpMultipliers[level] || ftpMultipliers.intermediate;\n  \n  // Utiliser la valeur moyenne pour le calcul\n  return Math.round(weight * multiplier.avg);\n};\n\n/**\n * Estime la FTP à partir d'un test de 20 minutes\n * @param {number} power20min - Puissance moyenne sur un test de 20 minutes (watts)\n * @returns {number} FTP estimée en watts\n * \n * Référence: La FTP est généralement environ 95% de la puissance maximale sur 20 minutes\n * (Allen & Coggan, 2019)\n */\nexport const estimateFTPFrom20MinTest = (power20min) => {\n  if (!power20min || typeof power20min !== 'number' || power20min <= 0 || isNaN(power20min)) {\n    console.warn('Puissance 20min invalide pour l\\'estimation FTP', { power20min });\n    return null;\n  }\n  \n  // Facteur généralement accepté: 95% de la puissance moyenne sur 20min\n  return Math.round(power20min * 0.95);\n};\n\n/**\n * Estime la FTP à partir d'un test de 8 minutes (avec facteur ajustable)\n * @param {number} power8min - Puissance moyenne sur un test de 8 minutes (watts)\n * @param {number} factor - Facteur d'ajustement (par défaut 0.9)\n * @returns {number} FTP estimée en watts\n * \n * Référence: La FTP est généralement environ 90% de la puissance maximale sur 8 minutes\n * (Allen & Coggan, 2019)\n */\nexport const estimateFTPFrom8MinTest = (power8min, factor = 0.9) => {\n  if (!power8min || typeof power8min !== 'number' || power8min <= 0 || isNaN(power8min)) {\n    console.warn('Puissance 8min invalide pour l\\'estimation FTP', { power8min });\n    return null;\n  }\n  \n  // Validation du facteur\n  if (typeof factor !== 'number' || factor <= 0 || factor >= 1 || isNaN(factor)) {\n    console.warn('Facteur invalide pour l\\'estimation FTP', { factor });\n    factor = 0.9; // Valeur par défaut de sécurité\n  }\n  \n  return Math.round(power8min * factor);\n};\n\n/**\n * Estime la FTP à partir d'un test de 5 minutes (avec facteur ajustable)\n * @param {number} power5min - Puissance moyenne sur un test de 5 minutes (watts)\n * @param {number} factor - Facteur d'ajustement (par défaut 0.85)\n * @returns {number} FTP estimée en watts\n * \n * Référence: La FTP est généralement environ 85% de la puissance maximale sur 5 minutes\n * (Adaptation des recherches d'Allen & Coggan)\n */\nexport const estimateFTPFrom5MinTest = (power5min, factor = 0.85) => {\n  if (!power5min || typeof power5min !== 'number' || power5min <= 0 || isNaN(power5min)) {\n    console.warn('Puissance 5min invalide pour l\\'estimation FTP', { power5min });\n    return null;\n  }\n  \n  // Validation du facteur\n  if (typeof factor !== 'number' || factor <= 0 || factor >= 1 || isNaN(factor)) {\n    console.warn('Facteur invalide pour l\\'estimation FTP', { factor });\n    factor = 0.85; // Valeur par défaut de sécurité\n  }\n  \n  return Math.round(power5min * factor);\n};\n\n/**\n * Calcule la puissance critique (CP) à partir des tests de 5min et 1min\n * @param {number} power5min - Puissance moyenne sur 5 minutes (watts)\n * @param {number} power1min - Puissance moyenne sur 1 minute (watts)\n * @returns {Object} CP et AWC (Anaerobic Work Capacity)\n * \n * Référence: Modèle à 2 paramètres de Monod & Scherrer (1965)\n * P = AWC/t + CP\n * où P est la puissance maintenue pendant un temps t,\n * AWC est la capacité de travail anaérobie, et CP est la puissance critique\n */\nexport const calculateCP = (power5min, power1min) => {\n  if (!power5min || !power1min || \n      typeof power5min !== 'number' || typeof power1min !== 'number' || \n      power5min <= 0 || power1min <= 0 || \n      isNaN(power5min) || isNaN(power1min)) {\n    console.warn('Puissances invalides pour le calcul CP', { power5min, power1min });\n    return null;\n  }\n  \n  const t5 = 5 * 60; // 5 minutes en secondes\n  const t1 = 60;     // 1 minute en secondes\n  \n  // Résoudre pour CP (puissance critique)\n  const cp = (power5min * t5 - power1min * t1) / (t5 - t1);\n  \n  // Calculer AWC (capacité de travail anaérobie)\n  const awc = (power1min - cp) * t1;\n  \n  return {\n    cp: Math.round(cp),\n    awc: Math.round(awc)\n  };\n};\n\n/**\n * Estime la FTP à partir d'un test de 1 minute (facteur direct)\n * @param {number} power1min - Puissance moyenne sur un test de 1 minute (watts)\n * @param {number} factor - Facteur d'ajustement (par défaut 0.75)\n * @returns {number} FTP estimée en watts\n * \n * Note: Cette méthode est moins précise que les autres et devrait être utilisée\n * uniquement quand d'autres données ne sont pas disponibles\n */\nexport const estimateFTPFrom1MinTest = (power1min, factor = 0.75) => {\n  if (!power1min || typeof power1min !== 'number' || power1min <= 0 || isNaN(power1min)) {\n    console.warn('Puissance 1min invalide pour l\\'estimation FTP', { power1min });\n    return null;\n  }\n  \n  // Validation du facteur\n  if (typeof factor !== 'number' || factor <= 0 || factor >= 1 || isNaN(factor)) {\n    console.warn('Facteur invalide pour l\\'estimation FTP', { factor });\n    factor = 0.75; // Valeur par défaut de sécurité\n  }\n  \n  return Math.round(power1min * factor);\n};\n\n/**\n * Estime la FTP à partir de la puissance critique (modèle à 2 paramètres)\n * @param {number} cp - Puissance critique (W)\n * @returns {number} FTP estimée en watts\n * \n * Référence: La FTP est généralement environ 97% de la CP (Moritani et al., 1981)\n */\nexport const estimateFTPFromCP = (cp) => {\n  if (!cp || typeof cp !== 'number' || cp <= 0 || isNaN(cp)) {\n    console.warn('Puissance critique invalide pour l\\'estimation FTP', { cp });\n    return null;\n  }\n  \n  // FTP est typiquement légèrement inférieure à CP\n  return Math.round(cp * 0.97);\n};\n\n/**\n * Estime la FTP à partir d'un test Ramp\n * @param {number} maxPower - Puissance maximale atteinte dans le test Ramp (watts)\n * @param {number} factor - Facteur d'ajustement (par défaut 0.75)\n * @returns {number} FTP estimée en watts\n * \n * Référence: Protocole utilisé par Zwift et TrainerRoad\n */\nexport const estimateFTPFromRampTest = (maxPower, factor = 0.75) => {\n  if (!maxPower || typeof maxPower !== 'number' || maxPower <= 0 || isNaN(maxPower)) {\n    console.warn('Puissance maximale du test Ramp invalide', { maxPower });\n    return null;\n  }\n  \n  // Validation du facteur\n  if (typeof factor !== 'number' || factor <= 0 || factor >= 1 || isNaN(factor)) {\n    console.warn('Facteur invalide pour l\\'estimation FTP', { factor });\n    factor = 0.75; // Valeur par défaut de sécurité\n  }\n  \n  // La FTP est généralement environ 75% de la puissance maximale du test Ramp\n  return Math.round(maxPower * factor);\n};\n\n/**\n * Estime la FTP à partir de données de fréquence cardiaque\n * @param {Object} params - Paramètres cardiaques et physiologiques\n * @returns {number} FTP estimée en watts\n * \n * Référence: Adaptation des recherches de Lamberts et al. (2011)\n */\nexport const estimateFTPFromHR = (params) => {\n  const { maxHR, restingHR, ltHR, weight, vo2max } = params;\n  \n  // Vérifier si nous avons les données minimales requises\n  if (!maxHR || !restingHR || !weight || \n      typeof maxHR !== 'number' || typeof restingHR !== 'number' || typeof weight !== 'number' ||\n      maxHR <= restingHR || weight <= 0) {\n    console.warn('Paramètres cardiaques invalides', params);\n    return null;\n  }\n  \n  let estimatedFTP = null;\n  \n  // Si nous avons la FC au seuil lactique\n  if (ltHR && typeof ltHR === 'number' && ltHR > restingHR && ltHR < maxHR) {\n    // Calcul du % de FC max\n    const percentOfMax = ltHR / maxHR;\n    \n    // Estimation watts/kg basée sur le niveau de forme (lié au % FC max au seuil)\n    let ftpPerKg;\n    \n    if (percentOfMax > 0.92) ftpPerKg = 4.5;      // Très entraîné\n    else if (percentOfMax > 0.89) ftpPerKg = 4.0; // Bien entraîné\n    else if (percentOfMax > 0.85) ftpPerKg = 3.5; // Entraîné\n    else if (percentOfMax > 0.82) ftpPerKg = 3.0; // Modérément entraîné\n    else ftpPerKg = 2.5;                          // Moins entraîné\n    \n    estimatedFTP = Math.round(ftpPerKg * weight);\n  }\n  // Si nous avons une estimation du VO2max\n  else if (vo2max && typeof vo2max === 'number' && vo2max > 20) {\n    // Conversion VO2max en watts/kg (d'après Hawley & Noakes, 1992)\n    // FTP correspond généralement à ~70-75% du VO2max\n    estimatedFTP = Math.round((vo2max * 0.75) * weight * 0.0123);\n  }\n  // Sinon, utiliser la réserve cardiaque (approche de Karvonen)\n  else {\n    const hrReserve = maxHR - restingHR;\n    // Estimer LTHR à 85-89% de la réserve cardiaque\n    const estimatedLTHR = restingHR + (hrReserve * 0.87);\n    const percentOfMax = estimatedLTHR / maxHR;\n    \n    // Même logique que ci-dessus pour estimer watts/kg\n    let ftpPerKg;\n    \n    if (percentOfMax > 0.92) ftpPerKg = 4.5;      // Très entraîné\n    else if (percentOfMax > 0.89) ftpPerKg = 4.0; // Bien entraîné\n    else if (percentOfMax > 0.85) ftpPerKg = 3.5; // Entraîné\n    else if (percentOfMax > 0.82) ftpPerKg = 3.0; // Modérément entraîné\n    else ftpPerKg = 2.5;                          // Moins entraîné\n    \n    estimatedFTP = Math.round(ftpPerKg * weight);\n  }\n  \n  return estimatedFTP;\n};\n\n/**\n * Valide et normalise une valeur FTP\n * @param {number} ftp - La valeur FTP à valider\n * @param {Object} profile - Le profil utilisateur pour l'estimation en cas de valeur invalide\n * @returns {number} FTP validée ou estimée\n */\nexport const validateFTP = (ftp, profile = {}) => {\n  if (ftp && typeof ftp === 'number' && ftp > 0 && !isNaN(ftp)) {\n    // FTP valide, vérifier si elle est dans une plage raisonnable\n    if (ftp < 50) {\n      console.warn('FTP anormalement basse:', ftp);\n      // Si le profil a un poids, essayer d'estimer une valeur plus réaliste\n      if (profile.weight) {\n        return estimateFTPFromWeight(profile.weight, profile.level);\n      }\n      return 100; // Valeur minimale par défaut\n    }\n    \n    if (ftp > 500) {\n      console.warn('FTP potentiellement très élevée:', ftp);\n      // Ne pas corriger automatiquement les valeurs élevées, certains cyclistes peuvent avoir des FTP élevées\n    }\n    \n    return ftp; // Valeur valide\n  }\n  \n  // FTP invalide, essayer d'estimer à partir du profil\n  console.warn('FTP invalide, tentative d\\'estimation à partir du profil', { ftp });\n  \n  if (profile.weight && typeof profile.weight === 'number' && profile.weight > 0) {\n    const estimatedFTP = estimateFTPFromWeight(profile.weight, profile.level);\n    console.info(`FTP estimée à partir du poids (${profile.weight}kg): ${estimatedFTP}W`);\n    return estimatedFTP;\n  }\n  \n  // Valeurs par défaut basées sur le niveau\n  const defaultFTP = {\n    beginner: 150,\n    intermediate: 200,\n    advanced: 250,\n    elite: 300\n  }[profile.level] || 200;\n  \n  console.info(`FTP par défaut utilisée: ${defaultFTP}W`);\n  return defaultFTP;\n};\n\n/**\n * Calcule les zones de puissance basées sur la FTP\n * @param {number} ftp - Valeur FTP en watts\n * @returns {Object} Zones de puissance\n * \n * Référence: Zones d'entraînement définies par Allen & Coggan (2019)\n */\nexport const calculatePowerZones = (ftp) => {\n  if (!ftp || typeof ftp !== 'number' || ftp <= 0 || isNaN(ftp)) {\n    console.warn('FTP invalide pour le calcul des zones', { ftp });\n    ftp = 200; // Valeur par défaut sécurisée\n  }\n  \n  return {\n    zone1: {\n      name: 'Récupération Active',\n      description: 'Très facile, récupération active',\n      min: Math.round(ftp * 0.0),\n      max: Math.round(ftp * 0.55),\n      percentFtp: '0-55%'\n    },\n    zone2: {\n      name: 'Endurance',\n      description: 'Effort soutenu longue durée, conversation possible',\n      min: Math.round(ftp * 0.56),\n      max: Math.round(ftp * 0.75),\n      percentFtp: '56-75%'\n    },\n    zone3: {\n      name: 'Tempo',\n      description: 'Rythme soutenu mais confortable, respiration plus intense',\n      min: Math.round(ftp * 0.76),\n      max: Math.round(ftp * 0.9),\n      percentFtp: '76-90%'\n    },\n    zone4: {\n      name: 'Seuil',\n      description: 'Effort intense au niveau du seuil lactique, 20-30min max',\n      min: Math.round(ftp * 0.91),\n      max: Math.round(ftp * 1.05),\n      percentFtp: '91-105%'\n    },\n    zone5: {\n      name: 'VO2max',\n      description: 'Effort très intense, 3-8min par intervalle',\n      min: Math.round(ftp * 1.06),\n      max: Math.round(ftp * 1.2),\n      percentFtp: '106-120%'\n    },\n    zone6: {\n      name: 'Capacité Anaérobie',\n      description: 'Effort anaérobie maximal, 30s-3min par intervalle',\n      min: Math.round(ftp * 1.21),\n      max: Math.round(ftp * 1.5),\n      percentFtp: '121-150%'\n    },\n    zone7: {\n      name: 'Sprint/Neuromuscular',\n      description: 'Puissance maximale, efforts <30s',\n      min: Math.round(ftp * 1.51),\n      max: Infinity,\n      percentFtp: '>150%'\n    }\n  };\n};\n\n/**\n * Calculer les zones cardiaques basées sur la fréquence cardiaque maximale\n * @param {number} maxHR - Fréquence cardiaque maximale (bpm)\n * @param {number} restingHR - Fréquence cardiaque au repos (bpm)\n * @returns {Object} Zones cardiaques\n * \n * Référence: Zones de Karvonen basées sur la réserve cardiaque (FCmax-FCrepos)\n */\nexport const calculateHeartRateZones = (maxHR, restingHR) => {\n  if (!maxHR || !restingHR || \n      typeof maxHR !== 'number' || typeof restingHR !== 'number' || \n      maxHR <= restingHR || \n      isNaN(maxHR) || isNaN(restingHR)) {\n    console.warn('Fréquences cardiaques invalides', { maxHR, restingHR });\n    return null;\n  }\n  \n  const hrReserve = maxHR - restingHR;\n  \n  return {\n    zone1: {\n      name: 'Récupération',\n      min: Math.round(restingHR + (hrReserve * 0.5)),\n      max: Math.round(restingHR + (hrReserve * 0.6)),\n      percentHRR: '50-60%'\n    },\n    zone2: {\n      name: 'Endurance de base',\n      min: Math.round(restingHR + (hrReserve * 0.6) + 1),\n      max: Math.round(restingHR + (hrReserve * 0.7)),\n      percentHRR: '60-70%'\n    },\n    zone3: {\n      name: 'Endurance avancée',\n      min: Math.round(restingHR + (hrReserve * 0.7) + 1),\n      max: Math.round(restingHR + (hrReserve * 0.8)),\n      percentHRR: '70-80%'\n    },\n    zone4: {\n      name: 'Seuil',\n      min: Math.round(restingHR + (hrReserve * 0.8) + 1),\n      max: Math.round(restingHR + (hrReserve * 0.9)),\n      percentHRR: '80-90%'\n    },\n    zone5: {\n      name: 'VO2max',\n      min: Math.round(restingHR + (hrReserve * 0.9) + 1),\n      max: maxHR,\n      percentHRR: '90-100%'\n    }\n  };\n};\n\nexport default {\n  estimateFTPFromWeight,\n  estimateFTPFrom20MinTest,\n  estimateFTPFrom8MinTest,\n  estimateFTPFrom5MinTest,\n  estimateFTPFrom1MinTest,\n  calculateCP,\n  estimateFTPFromCP,\n  estimateFTPFromRampTest,\n  estimateFTPFromHR,\n  validateFTP,\n  calculatePowerZones,\n  calculateHeartRateZones\n};\n","/**\n * Service centralisé pour le système d'entraînement\n * Gère la cohérence entre les différents types d'entraînement\n * et sert de point d'entrée unifié pour toutes les fonctionnalités liées\n */\n\nimport FTPService from './FTPEstimationService';\n\n// Types d'entraînement disponibles\nexport const TRAINING_TYPES = {\n  ENDURANCE: 'endurance',           // Endurance fondamentale (Z1-Z2)\n  TEMPO: 'tempo',                   // Tempo (Z3)\n  THRESHOLD: 'threshold',           // Seuil (Z4)\n  VO2MAX: 'vo2max',                 // VO2max (Z5)\n  ANAEROBIC: 'anaerobic',           // Capacité anaérobie (Z6)\n  SPRINT: 'sprint',                 // Sprint/Neuromuscular (Z7)\n  HIIT: 'hiit',                     // Entraînement par intervalles haute intensité (mixte)\n  RECOVERY: 'recovery',             // Récupération active (Z1)\n  STRENGTH: 'strength',             // Force spécifique (faible cadence, Z3-Z4)\n  TECHNIQUE: 'technique',           // Technique de pédalage, agilité, etc.\n  CLIMBING: 'climbing',             // Entraînement en montée\n  LONG_RIDE: 'longRide'             // Sortie longue\n};\n\n// Objectifs d'entraînement\nexport const TRAINING_GOALS = {\n  GENERAL_FITNESS: 'generalFitness',    // Forme générale et santé\n  ENDURANCE: 'enduranceBuilding',       // Construction d'endurance\n  POWER: 'powerDevelopment',            // Développement de puissance\n  SPEED: 'speedDevelopment',            // Développement de vitesse\n  WEIGHT_LOSS: 'weightLoss',            // Perte de poids\n  EVENT_PREP: 'eventPreparation',       // Préparation à un événement\n  RACE_PREP: 'racePreparation',         // Préparation à la compétition\n  RECOVERY: 'activeRecovery'            // Récupération active\n};\n\n// Profils de cycliste\nexport const CYCLIST_PROFILES = {\n  ALL_ROUND: 'allRound',            // Polyvalent\n  CLIMBER: 'climber',               // Grimpeur\n  ROULEUR: 'rouleur',               // Rouleur\n  SPRINTER: 'sprinter',             // Sprinteur\n  PUNCHEUR: 'puncheur',             // Puncheur\n  TIME_TRIAL: 'timeTrial',          // Spécialiste du contre-la-montre\n  RECREATIONAL: 'recreational',     // Cycliste récréatif\n  TOURING: 'touring'                // Cyclotouriste\n};\n\n// Niveaux de cycliste\nexport const CYCLIST_LEVELS = {\n  BEGINNER: 'beginner',             // Débutant\n  INTERMEDIATE: 'intermediate',     // Intermédiaire\n  ADVANCED: 'advanced',             // Avancé\n  ELITE: 'elite'                    // Élite\n};\n\n/**\n * Calcule les métriques d'entraînement globales\n * @param {Object} workout - Séance d'entraînement avec intervalles\n * @param {number} ftp - FTP du cycliste\n * @returns {Object} Métriques calculées (TSS, IF, etc.)\n */\nexport const calculateTrainingMetrics = (workout, ftp) => {\n  if (!workout || !workout.intervals || !Array.isArray(workout.intervals) || !ftp) {\n    console.error('Données insuffisantes pour calculer les métriques', { workout, ftp });\n    return {\n      tss: 0,\n      if: 0,\n      work: 0,\n      avgPower: 0,\n      normalizedPower: 0,\n      duration: 0\n    };\n  }\n\n  try {\n    // Calcul de la durée en secondes\n    const totalDuration = workout.intervals.reduce((total, interval) => {\n      return total + (interval.duration || 0) + (interval.restDuration || 0);\n    }, 0);\n    \n    // Calcul du travail total en joules\n    const totalWork = workout.intervals.reduce((total, interval) => {\n      const workDuration = interval.duration || 0;\n      const power = interval.power || 0;\n      return total + (workDuration * power);\n    }, 0);\n    \n    // Puissance moyenne\n    const avgPower = totalWork / totalDuration || 0;\n    \n    // Calcul de la puissance normalisée (simplifiée)\n    // Normalement nécessite un algorithme plus complexe avec échantillonnage aux 30s\n    // Cette simplification est une approximation\n    const normalizedPower = Math.pow(\n      workout.intervals.reduce((total, interval) => {\n        const workDuration = interval.duration || 0;\n        const power = interval.power || 0;\n        return total + (workDuration * Math.pow(power, 4));\n      }, 0) / totalDuration,\n      0.25\n    ) || 0;\n    \n    // Intensité relative\n    const intensityFactor = normalizedPower / ftp;\n    \n    // Training Stress Score\n    const tss = (totalDuration * normalizedPower * intensityFactor) / (ftp * 3600) * 100;\n    \n    return {\n      tss: Math.round(tss),\n      if: parseFloat(intensityFactor.toFixed(2)),\n      work: Math.round(totalWork / 1000), // kJ\n      avgPower: Math.round(avgPower),\n      normalizedPower: Math.round(normalizedPower),\n      duration: Math.round(totalDuration / 60) // minutes\n    };\n  } catch (error) {\n    console.error('Erreur lors du calcul des métriques d\\'entraînement', error);\n    return {\n      tss: 0,\n      if: 0,\n      work: 0,\n      avgPower: 0,\n      normalizedPower: 0,\n      duration: 0\n    };\n  }\n};\n\n/**\n * Calcule la charge d'entraînement chronique (CTL), aiguë (ATL) et l'équilibre (TSB)\n * @param {Array} activities - Historique des activités avec TSS\n * @param {number} days - Nombre de jours à analyser\n * @returns {Object} CTL, ATL et TSB pour chaque jour\n */\nexport const calculateTrainingLoad = (activities, days = 42) => {\n  if (!activities || !Array.isArray(activities)) {\n    return { ctl: [], atl: [], tsb: [] };\n  }\n\n  // Trier les activités par date\n  const sortedActivities = [...activities].sort((a, b) => \n    new Date(a.date) - new Date(b.date)\n  );\n\n  // Créer un tableau de jours avec TSS\n  const now = new Date();\n  const daysList = [];\n  \n  for (let i = days - 1; i >= 0; i--) {\n    const date = new Date(now);\n    date.setDate(date.getDate() - i);\n    const dateString = date.toISOString().split('T')[0];\n    \n    // Trouver les activités pour ce jour\n    const dayActivities = sortedActivities.filter(a => \n      a.date.startsWith(dateString)\n    );\n    \n    // Calculer le TSS total pour ce jour\n    const dayTSS = dayActivities.reduce((sum, activity) => \n      sum + (activity.tss || 0), 0\n    );\n    \n    daysList.push({\n      date: dateString,\n      tss: dayTSS\n    });\n  }\n  \n  // Calculer CTL (42 jours), ATL (7 jours) et TSB\n  const result = daysList.map((day, index) => {\n    // Calculer CTL (constante de temps de 42 jours)\n    let ctlSum = 0;\n    let ctlDays = 0;\n    \n    for (let i = 0; i <= Math.min(index, 41); i++) {\n      const factor = Math.exp(-i / 42);\n      ctlSum += daysList[index - i].tss * factor;\n      ctlDays += factor;\n    }\n    \n    const ctl = ctlSum / ctlDays;\n    \n    // Calculer ATL (constante de temps de 7 jours)\n    let atlSum = 0;\n    let atlDays = 0;\n    \n    for (let i = 0; i <= Math.min(index, 6); i++) {\n      const factor = Math.exp(-i / 7);\n      atlSum += daysList[index - i].tss * factor;\n      atlDays += factor;\n    }\n    \n    const atl = atlSum / atlDays;\n    \n    // TSB = CTL - ATL\n    const tsb = ctl - atl;\n    \n    return {\n      date: day.date,\n      ctl: parseFloat(ctl.toFixed(1)),\n      atl: parseFloat(atl.toFixed(1)),\n      tsb: parseFloat(tsb.toFixed(1)),\n      tss: day.tss\n    };\n  });\n  \n  return result;\n};\n\n/**\n * Détermine les recommandations d'entraînement basées sur le profil et l'historique\n * @param {Object} userProfile - Profil de l'utilisateur\n * @param {Array} trainingHistory - Historique des entraînements\n * @returns {Object} Recommandations personnalisées\n */\nexport const getTrainingRecommendations = (userProfile, trainingHistory) => {\n  if (!userProfile) {\n    return { \n      recommendedTypes: [], \n      weeklyStructure: [],\n      focusAreas: [],\n      message: \"Complétez d'abord votre profil pour obtenir des recommandations personnalisées.\"\n    };\n  }\n  \n  // Extraire les informations pertinentes du profil\n  const { level, goal, profile, ftp, age, weight, hoursPerWeek } = userProfile;\n  \n  // Définir les types d'entraînement recommandés selon le niveau et l'objectif\n  let recommendedTypes = [];\n  let weeklyStructure = [];\n  let focusAreas = [];\n  let message = \"\";\n  \n  // Vérifier et valider la FTP\n  const validFtp = FTPService.validateFTP(ftp, userProfile);\n  \n  // Base pour tous les cyclistes: endurance + récupération\n  recommendedTypes.push(TRAINING_TYPES.ENDURANCE, TRAINING_TYPES.RECOVERY);\n  \n  // Ajuster selon le niveau\n  if (level === CYCLIST_LEVELS.BEGINNER) {\n    // Débutants: Principalement endurance et technique\n    recommendedTypes.push(TRAINING_TYPES.TECHNIQUE);\n    message = \"Concentrez-vous sur le développement d'une base d'endurance solide et la technique de pédalage.\";\n    \n    weeklyStructure = [\n      { day: 1, type: TRAINING_TYPES.ENDURANCE, duration: 60 },\n      { day: 3, type: TRAINING_TYPES.TECHNIQUE, duration: 45 },\n      { day: 5, type: TRAINING_TYPES.ENDURANCE, duration: 75 },\n      { day: 7, type: TRAINING_TYPES.RECOVERY, duration: 45 }\n    ];\n    \n    focusAreas = [\"Constance\", \"Endurance de base\", \"Technique\"];\n    \n  } else if (level === CYCLIST_LEVELS.INTERMEDIATE) {\n    // Intermédiaires: Ajouter seuil et force\n    recommendedTypes.push(\n      TRAINING_TYPES.THRESHOLD, \n      TRAINING_TYPES.STRENGTH,\n      TRAINING_TYPES.TEMPO\n    );\n    \n    message = \"Commencez à incorporer des entraînements au seuil et de force spécifique à votre routine.\";\n    \n    weeklyStructure = [\n      { day: 1, type: TRAINING_TYPES.ENDURANCE, duration: 90 },\n      { day: 3, type: TRAINING_TYPES.THRESHOLD, duration: 60 },\n      { day: 5, type: TRAINING_TYPES.STRENGTH, duration: 60 },\n      { day: 6, type: TRAINING_TYPES.LONG_RIDE, duration: 120 },\n      { day: 7, type: TRAINING_TYPES.RECOVERY, duration: 45 }\n    ];\n    \n    focusAreas = [\"Seuil de puissance\", \"Force spécifique\", \"Volume d'endurance\"];\n    \n  } else if (level === CYCLIST_LEVELS.ADVANCED || level === CYCLIST_LEVELS.ELITE) {\n    // Avancés/Elite: Tous les types d'entraînement\n    recommendedTypes.push(\n      TRAINING_TYPES.THRESHOLD,\n      TRAINING_TYPES.VO2MAX,\n      TRAINING_TYPES.HIIT,\n      TRAINING_TYPES.ANAEROBIC,\n      TRAINING_TYPES.SPRINT,\n      TRAINING_TYPES.STRENGTH\n    );\n    \n    message = \"Votre niveau vous permet d'utiliser toute la gamme des entraînements spécifiques au cyclisme.\";\n    \n    weeklyStructure = [\n      { day: 1, type: TRAINING_TYPES.ENDURANCE, duration: 120 },\n      { day: 2, type: TRAINING_TYPES.VO2MAX, duration: 60 },\n      { day: 3, type: TRAINING_TYPES.RECOVERY, duration: 45 },\n      { day: 4, type: TRAINING_TYPES.THRESHOLD, duration: 90 },\n      { day: 5, type: TRAINING_TYPES.HIIT, duration: 60 },\n      { day: 6, type: TRAINING_TYPES.LONG_RIDE, duration: 180 },\n      { day: 7, type: TRAINING_TYPES.RECOVERY, duration: 60 }\n    ];\n    \n    focusAreas = [\"Puissance au seuil\", \"VO2max\", \"Capacité anaérobie\", \"Périodisation\"];\n  }\n  \n  // Ajuster selon le profil de cycliste\n  if (profile === CYCLIST_PROFILES.CLIMBER) {\n    recommendedTypes.push(TRAINING_TYPES.CLIMBING);\n    focusAreas.push(\"Puissance en montée\", \"Rapport poids/puissance\");\n  } else if (profile === CYCLIST_PROFILES.SPRINTER) {\n    recommendedTypes.push(TRAINING_TYPES.SPRINT);\n    focusAreas.push(\"Puissance maximale\", \"Accélération\");\n  } else if (profile === CYCLIST_PROFILES.TOURING) {\n    recommendedTypes.push(TRAINING_TYPES.LONG_RIDE);\n    focusAreas.push(\"Endurance longue distance\", \"Économie d'effort\");\n  }\n  \n  // Ajuster selon l'âge\n  if (age && age > 50) {\n    // Privilégier récupération et limiter haute intensité pour seniors\n    focusAreas.push(\"Récupération optimale\", \"Intensité contrôlée\");\n    message += \" À votre âge, accordez une attention particulière à la récupération entre les séances.\";\n  }\n  \n  // Intégrer l'historique d'entraînement pour les recommandations\n  if (trainingHistory && trainingHistory.length > 0) {\n    const recentHistory = trainingHistory.slice(0, 14); // Deux dernières semaines\n    \n    // Analyser la charge d'entraînement récente\n    const trainingLoad = calculateTrainingLoad(recentHistory);\n    const latestTSB = trainingLoad[trainingLoad.length - 1]?.tsb || 0;\n    \n    // Ajuster selon la fraîcheur/fatigue\n    if (latestTSB < -20) {\n      // Fatigue importante\n      message += \" Votre fatigue est élevée. Privilégiez les séances de récupération cette semaine.\";\n      recommendedTypes = [TRAINING_TYPES.RECOVERY, TRAINING_TYPES.ENDURANCE];\n    } else if (latestTSB > 10) {\n      // Bonne fraîcheur\n      message += \" Votre niveau de fraîcheur est optimal pour des séances de haute intensité.\";\n    }\n    \n    // Identifier les lacunes dans l'entraînement\n    const typeDistribution = recentHistory.reduce((acc, workout) => {\n      const type = workout.type || TRAINING_TYPES.ENDURANCE;\n      acc[type] = (acc[type] || 0) + 1;\n      return acc;\n    }, {});\n    \n    // Recommander les types sous-représentés\n    Object.values(TRAINING_TYPES).forEach(type => {\n      if (!typeDistribution[type] && recommendedTypes.includes(type)) {\n        message += ` Pensez à intégrer des séances de ${type} qui sont absentes de votre entraînement récent.`;\n      }\n    });\n  }\n  \n  return {\n    recommendedTypes: [...new Set(recommendedTypes)], // Éliminer les doublons\n    weeklyStructure,\n    focusAreas,\n    message\n  };\n};\n\n/**\n * Génère un plan d'entraînement personnalisé\n * @param {Object} userProfile - Profil de l'utilisateur\n * @param {Object} preferences - Préférences d'entraînement\n * @param {number} weeks - Durée du plan en semaines\n * @returns {Object} Plan d'entraînement complet\n */\nexport const generateTrainingPlan = (userProfile, preferences, weeks = 8) => {\n  // Cette fonction sera développée pour générer un plan complet\n  // avec périodisation et progression\n  \n  return {\n    // Structure à développer\n    startDate: new Date(),\n    endDate: new Date(Date.now() + weeks * 7 * 24 * 60 * 60 * 1000),\n    phases: [],\n    weeklySchedule: []\n  };\n};\n\nexport default {\n  TRAINING_TYPES,\n  TRAINING_GOALS,\n  CYCLIST_PROFILES,\n  CYCLIST_LEVELS,\n  calculateTrainingMetrics,\n  calculateTrainingLoad,\n  getTrainingRecommendations,\n  generateTrainingPlan\n};\n","import React, { useState, useEffect, createContext, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Toast, ToastContainer } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { \n  faCheckCircle, faExclamationTriangle, \n  faExclamationCircle, faInfoCircle, \n  faTimes \n} from '@fortawesome/free-solid-svg-icons';\n\n// Contexte pour la gestion des notifications\nconst NotificationContext = createContext();\n\n/**\n * Provider pour le système de notification\n * Permet de gérer les notifications à travers l'application\n */\nexport const NotificationProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState([]);\n\n  // Ajouter une nouvelle notification\n  const addNotification = (notification) => {\n    const id = Date.now().toString();\n    const defaultDuration = notification.type === 'error' ? 8000 : 5000;\n    \n    setNotifications(prev => [\n      ...prev,\n      {\n        id,\n        type: 'info',\n        title: '',\n        message: '',\n        duration: defaultDuration,\n        ...notification,\n        timestamp: new Date()\n      }\n    ]);\n    \n    // Enregistrer les erreurs dans la console pour le débogage\n    if (notification.type === 'error') {\n      console.error(`Notification d'erreur: ${notification.title || ''} - ${notification.message || ''}`, \n                    notification.error || '');\n    }\n    \n    return id;\n  };\n\n  // Supprimer une notification par ID\n  const removeNotification = (id) => {\n    setNotifications(prev => prev.filter(notif => notif.id !== id));\n  };\n\n  // Méthodes d'utilitaire pour différents types de notifications\n  const notify = {\n    success: (message, options = {}) => addNotification({ \n      type: 'success', message, ...options \n    }),\n    \n    error: (message, error = null, options = {}) => {\n      // Extraire le message d'erreur si un objet Error est fourni\n      let errorMessage = message;\n      if (error && typeof error === 'object') {\n        if (error.message) {\n          errorMessage = `${message}: ${error.message}`;\n        }\n        \n        // Enregistrer l'erreur complète dans la console\n        console.error('Détails de l\\'erreur:', error);\n      }\n      \n      return addNotification({ \n        type: 'error', \n        message: errorMessage, \n        error,\n        ...options \n      });\n    },\n    \n    warning: (message, options = {}) => addNotification({ \n      type: 'warning', message, ...options \n    }),\n    \n    info: (message, options = {}) => addNotification({ \n      type: 'info', message, ...options \n    })\n  };\n\n  // Auto-supprimer les notifications après leur durée\n  useEffect(() => {\n    const timers = notifications.map(notification => {\n      if (notification.duration) {\n        return setTimeout(() => {\n          removeNotification(notification.id);\n        }, notification.duration);\n      }\n      return null;\n    }).filter(Boolean);\n\n    return () => {\n      timers.forEach(timer => clearTimeout(timer));\n    };\n  }, [notifications]);\n\n  return (\n    <NotificationContext.Provider value={{ notifications, addNotification, removeNotification, notify }}>\n      {children}\n      <NotificationDisplay />\n    </NotificationContext.Provider>\n  );\n};\n\nNotificationProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\n/**\n * Hook pour utiliser le système de notification\n */\nexport const useNotification = () => {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification doit être utilisé à l\\'intérieur d\\'un NotificationProvider');\n  }\n  return context;\n};\n\n/**\n * Composant d'affichage des notifications\n */\nconst NotificationDisplay = () => {\n  const { notifications, removeNotification } = useContext(NotificationContext);\n\n  // Obtenir l'icône correspondant au type de notification\n  const getIcon = (type) => {\n    switch (type) {\n      case 'success':\n        return faCheckCircle;\n      case 'error':\n        return faExclamationCircle;\n      case 'warning':\n        return faExclamationTriangle;\n      case 'info':\n      default:\n        return faInfoCircle;\n    }\n  };\n\n  return (\n    <>\n      {/* Notifications en bas à droite pour les messages de statut */}\n      <ToastContainer position=\"bottom-end\" className=\"p-3\" style={{ zIndex: 1100 }}>\n        {notifications\n          .filter(notification => notification.type !== 'error')\n          .map(notification => (\n            <Toast \n              key={notification.id}\n              onClose={() => removeNotification(notification.id)}\n              bg={notification.type === 'info' ? 'light' : notification.type}\n              text={notification.type === 'info' ? 'dark' : 'white'}\n              delay={notification.duration}\n              autohide\n            >\n              <Toast.Header>\n                <FontAwesomeIcon icon={getIcon(notification.type)} className=\"me-2\" />\n                <strong className=\"me-auto\">\n                  {notification.title || \n                  (notification.type === 'success' ? 'Succès' : \n                   notification.type === 'warning' ? 'Attention' : 'Information')}\n                </strong>\n                <small>{notification.timestamp?.toLocaleTimeString()}</small>\n              </Toast.Header>\n              <Toast.Body>\n                {notification.message}\n              </Toast.Body>\n            </Toast>\n          ))}\n      </ToastContainer>\n\n      {/* Alertes centrées pour les erreurs importantes */}\n      <div className=\"notification-alerts-container\" style={{ \n        position: 'fixed', \n        top: '20px', \n        left: '50%', \n        transform: 'translateX(-50%)',\n        zIndex: 1100,\n        maxWidth: '90%',\n        width: '500px'\n      }}>\n        {notifications\n          .filter(notification => notification.type === 'error')\n          .map(notification => (\n            <Alert \n              key={notification.id} \n              variant=\"danger\" \n              dismissible\n              onClose={() => removeNotification(notification.id)}\n              className=\"mb-3 shadow-sm\"\n            >\n              <div className=\"d-flex align-items-center\">\n                <FontAwesomeIcon icon={faExclamationCircle} className=\"me-2\" size=\"lg\" />\n                <div>\n                  <Alert.Heading>{notification.title || 'Erreur'}</Alert.Heading>\n                  <p className=\"mb-0\">{notification.message}</p>\n                </div>\n              </div>\n              {notification.details && (\n                <div className=\"mt-2 pt-2 border-top\">\n                  <small className=\"text-muted\">{notification.details}</small>\n                </div>\n              )}\n            </Alert>\n          ))}\n      </div>\n    </>\n  );\n};\n\n/**\n * Composant d'alerte\n */\nexport const Notification = ({ type, title, message, onClose, dismissible = true }) => {\n  return (\n    <Alert variant={type} dismissible={dismissible} onClose={onClose}>\n      {title && <Alert.Heading>{title}</Alert.Heading>}\n      <p className=\"mb-0\">{message}</p>\n    </Alert>\n  );\n};\n\nNotification.propTypes = {\n  type: PropTypes.oneOf(['success', 'info', 'warning', 'error', 'danger']),\n  title: PropTypes.string,\n  message: PropTypes.string.isRequired,\n  onClose: PropTypes.func,\n  dismissible: PropTypes.bool\n};\n\nexport default NotificationProvider;\n","/**\n * Utilitaire pour faciliter le chargement paresseux (lazy loading) des composants\n * et données dans l'application Dashboard-Velo\n */\n\nimport React, { lazy, Suspense } from 'react';\nimport { LinearProgress, Skeleton, Box, Typography, Paper } from '@mui/material';\nimport { DirectionsBike } from '@mui/icons-material';\n\n/**\n * Wrapper d'un composant React pour le lazy loading avec un fallback visuellement attrayant\n * @param {Function} importFunction - Fonction d'importation dynamique du composant\n * @param {Object} options - Options de configuration\n * @param {string} options.moduleName - Nom du module pour l'affichage dans le fallback\n * @param {number} options.minDelay - Délai minimum d'affichage du fallback (ms)\n * @param {string} options.skeletonType - Type de squelette ('text', 'card', 'complex', 'content')\n * @param {number} options.skeletonHeight - Hauteur du squelette (px)\n * @returns {React.LazyExoticComponent} Composant avec lazy loading\n */\nexport const lazyLoad = (importFunction, options = {}) => {\n  const {\n    moduleName = 'Composant',\n    minDelay = 300,\n    skeletonType = 'content',\n    skeletonHeight = 400\n  } = options;\n  \n  // Ajout d'un délai minimum pour éviter les flashs\n  const importWithMinDelay = () => {\n    return Promise.all([\n      importFunction(),\n      new Promise(resolve => setTimeout(resolve, minDelay))\n    ]).then(([moduleExport]) => moduleExport);\n  };\n  \n  const LazyComponent = lazy(importWithMinDelay);\n  \n  return props => (\n    <Suspense fallback={<LoadingFallback type={skeletonType} name={moduleName} height={skeletonHeight} />}>\n      <LazyComponent {...props} />\n    </Suspense>\n  );\n};\n\n/**\n * Composant fallback visuellement attrayant pour les composants en chargement\n * @param {Object} props - Propriétés du composant\n * @param {string} props.type - Type de fallback ('text', 'card', 'complex', 'content')\n * @param {string} props.name - Nom du module en cours de chargement\n * @param {number} props.height - Hauteur du fallback\n * @returns {React.Component} Composant de fallback\n */\nexport const LoadingFallback = ({ type = 'content', name = 'Contenu', height = 400 }) => {\n  // Styles communs\n  const commonStyles = {\n    width: '100%',\n    height: height,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'relative',\n    overflow: 'hidden'\n  };\n  \n  // Animation du cycliste\n  const bikeAnimation = {\n    '@keyframes ride': {\n      '0%': { transform: 'translateX(-100%)' },\n      '100%': { transform: 'translateX(100%)' }\n    },\n    animation: 'ride 4s infinite linear',\n    position: 'absolute',\n    bottom: '20%',\n    fontSize: 40,\n    color: 'primary.main',\n  };\n  \n  switch (type) {\n    case 'text':\n      return (\n        <Box sx={{ width: '100%', p: 2 }}>\n          <Skeleton animation=\"wave\" height={40} width=\"70%\" />\n          <Skeleton animation=\"wave\" height={20} width=\"90%\" />\n          <Skeleton animation=\"wave\" height={20} width=\"85%\" />\n          <Skeleton animation=\"wave\" height={20} width=\"80%\" />\n          <LinearProgress color=\"primary\" sx={{ mt: 1 }} />\n        </Box>\n      );\n      \n    case 'card':\n      return (\n        <Paper elevation={2} sx={{ p: 2, width: '100%' }}>\n          <Skeleton animation=\"wave\" variant=\"rectangular\" height={140} width=\"100%\" />\n          <Skeleton animation=\"wave\" height={40} width=\"60%\" sx={{ mt: 2 }} />\n          <Skeleton animation=\"wave\" height={20} width=\"90%\" />\n          <Skeleton animation=\"wave\" height={20} width=\"85%\" />\n          <Skeleton animation=\"wave\" height={36} width=\"30%\" sx={{ mt: 1 }} />\n          <LinearProgress color=\"primary\" sx={{ mt: 2 }} />\n        </Paper>\n      );\n      \n    case 'complex':\n      return (\n        <Box sx={{ width: '100%' }}>\n          <Box sx={{ mb: 2 }}>\n            <Skeleton animation=\"wave\" height={40} width=\"50%\" />\n            <LinearProgress color=\"primary\" sx={{ mt: 1 }} />\n          </Box>\n          <Grid container spacing={2}>\n            {[1, 2, 3, 4].map(i => (\n              <Grid item xs={12} sm={6} md={3} key={i}>\n                <Paper elevation={1} sx={{ p: 2 }}>\n                  <Skeleton animation=\"wave\" variant=\"rectangular\" height={120} />\n                  <Skeleton animation=\"wave\" height={30} width=\"80%\" sx={{ mt: 1 }} />\n                  <Skeleton animation=\"wave\" height={20} width=\"90%\" />\n                </Paper>\n              </Grid>\n            ))}\n          </Grid>\n        </Box>\n      );\n      \n    case 'content':\n    default:\n      return (\n        <Box sx={commonStyles}>\n          <Box \n            sx={{\n              borderRadius: 2,\n              backgroundColor: 'background.paper',\n              p: 3,\n              textAlign: 'center',\n              maxWidth: 400,\n              zIndex: 1\n            }}\n          >\n            <Typography variant=\"h6\" color=\"primary\" gutterBottom>\n              Chargement du module {name}\n            </Typography>\n            <LinearProgress color=\"primary\" sx={{ mb: 2, mt: 1 }} />\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Préparation des données en cours...\n            </Typography>\n          </Box>\n          \n          <Box sx={bikeAnimation}>\n            <DirectionsBike fontSize=\"inherit\" color=\"inherit\" />\n          </Box>\n        </Box>\n      );\n  }\n};\n\n/**\n * Fonction pour créer un composant React qui charge les données selon une stratégie de lazy loading\n * @param {Function} Component - Composant React à wrapper\n * @param {Function} dataFetcher - Fonction asynchrone qui charge les données\n * @returns {Function} Composant avec chargement de données optimisé\n */\nexport const withLazyData = (Component, dataFetcher) => {\n  return function WithLazyDataWrapper(props) {\n    const [data, setData] = React.useState(null);\n    const [loading, setLoading] = React.useState(true);\n    const [error, setError] = React.useState(null);\n    \n    React.useEffect(() => {\n      let isMounted = true;\n      \n      const fetchData = async () => {\n        try {\n          setLoading(true);\n          // Simuler un délai minimum pour éviter les flashs de chargement\n          const [result] = await Promise.all([\n            dataFetcher(props),\n            new Promise(resolve => setTimeout(resolve, 300))\n          ]);\n          \n          if (isMounted) {\n            setData(result);\n            setLoading(false);\n          }\n        } catch (err) {\n          console.error('Erreur lors du chargement des données:', err);\n          if (isMounted) {\n            setError(err);\n            setLoading(false);\n          }\n        }\n      };\n      \n      fetchData();\n      \n      return () => {\n        isMounted = false;\n      };\n    }, [props.id]); // Rechargement quand l'ID change\n    \n    if (loading) {\n      return (\n        <LoadingFallback \n          type={props.loadingType || 'content'} \n          name={props.moduleName || 'données'} \n          height={props.loadingHeight || 400} \n        />\n      );\n    }\n    \n    if (error) {\n      return (\n        <Box sx={{ p: 3, textAlign: 'center' }}>\n          <Typography variant=\"h6\" color=\"error\" gutterBottom>\n            Impossible de charger les données\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Une erreur s'est produite. Veuillez réessayer plus tard.\n          </Typography>\n          <Button \n            variant=\"outlined\" \n            color=\"primary\" \n            sx={{ mt: 2 }} \n            onClick={() => window.location.reload()}\n          >\n            Réessayer\n          </Button>\n        </Box>\n      );\n    }\n    \n    return <Component {...props} data={data} />;\n  };\n};\n\n// Hook personnalisé pour le lazy loading des données\nexport const useLazyData = (fetchFunction, dependencies = []) => {\n  const [data, setData] = React.useState(null);\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState(null);\n  \n  React.useEffect(() => {\n    let isMounted = true;\n    \n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const result = await fetchFunction();\n        \n        if (isMounted) {\n          setData(result);\n          setLoading(false);\n        }\n      } catch (err) {\n        console.error('Erreur lors du chargement des données:', err);\n        if (isMounted) {\n          setError(err);\n          setLoading(false);\n        }\n      }\n    };\n    \n    fetchData();\n    \n    return () => {\n      isMounted = false;\n    };\n  }, dependencies);\n  \n  return { data, loading, error, refresh: () => setLoading(true) };\n};\n\nexport default {\n  lazyLoad,\n  LoadingFallback,\n  withLazyData,\n  useLazyData\n};\n"],"names":["getCurrentUserProfile","Promise","resolve","setTimeout","id","name","email","age","weight","height","ftp","level","cyclist_type","preferred_terrain","weekly_hours","hrmax","hrrest","region","following","followers","achievementCount","created_at","avatar","error","console","Error","getUserProfile","userId","profile","updateUserProfile","profileData","log","updated_at","Date","toISOString","getUserWorkoutHistory","limit","arguments","length","undefined","workoutId","workoutName","date","completed","duration","avgPower","normalizedPower","tss","ifactor","heartRate","avg","max","zones","z1","z2","z3","z4","z5","z6","z7","slice","getUserTrainingStats","workoutCount","totalDuration","totalTSS","avgWeeklyTSS","completionRate","ftpHistory","value","powerDistribution","workoutTypes","RECOVERY","ENDURANCE","THRESHOLD","HIIT","lazyLoad","moduleName","skeletonType","WorkoutLibrary","HIITBuilder","HIITVisualizer","CyclingCoach","TrainingProgramsExplorer","minDelay","TrainingDashboard","t","useTranslation","notify","useNotification","navigate","useNavigate","location","useLocation","activeTab","setActiveTab","useState","path","pathname","split","pop","userProfile","setUserProfile","loading","setLoading","selectedWorkout","setSelectedWorkout","trainingStats","setTrainingStats","weeklyPlan","setWeeklyPlan","showVisualizer","setShowVisualizer","useEffect","async","mockUserProfile","totalWorkouts","totalHours","ftpProgress","weeklyVolume","lastWorkouts","type","generateWeeklyPlan","loadUserData","includes","TrainingSystem","handleSelectWorkout","workout","handleSaveWorkout","success","handlePreviewWorkout","window","scrollTo","top","behavior","_jsxs","Container","maxWidth","children","_jsx","Box","sx","width","mb","Tabs","onChange","handleTabChange","event","newValue","indicatorColor","textColor","variant","scrollButtons","allowScrollButtonsMobile","Tab","label","icon","BikeIcon","iconPosition","FilterIcon","ListIcon","ToolboxIcon","HeartbeatIcon","Routes","Route","element","display","justifyContent","py","Typography","Grid","container","spacing","item","xs","md","Card","CardHeader","title","alignItems","CalendarIcon","mr","CardContent","map","day","index","Paper","elevation","p","fontWeight","Button","size","onClick","color","_Fragment","mt","DumbbellIcon","fontSize","intensity","Alert","severity","startIcon","UserSettingsIcon","gutterBottom","fullWidth","component","href","ChartIcon","Suspense","fallback","LoadingFallback","onProgramSelect","program","onSelectWorkout","onSaveWorkout","onPreviewWorkout","onRecommendWorkout","open","onClose","onWorkoutComplete","stats","estimateFTPFromWeight","isNaN","warn","ftpMultipliers","beginner","min","intermediate","advanced","elite","multiplier","Math","round","estimateFTPFrom20MinTest","power20min","estimateFTPFrom8MinTest","power8min","factor","estimateFTPFrom5MinTest","power5min","estimateFTPFrom1MinTest","power1min","calculateCP","cp","awc","estimateFTPFromCP","estimateFTPFromRampTest","maxPower","estimateFTPFromHR","params","maxHR","restingHR","ltHR","vo2max","estimatedFTP","percentOfMax","ftpPerKg","validateFTP","info","defaultFTP","calculatePowerZones","zone1","description","percentFtp","zone2","zone3","zone4","zone5","zone6","zone7","Infinity","calculateHeartRateZones","hrReserve","percentHRR","TRAINING_TYPES","TEMPO","VO2MAX","ANAEROBIC","SPRINT","STRENGTH","TECHNIQUE","CLIMBING","LONG_RIDE","CYCLIST_PROFILES","ALL_ROUND","CLIMBER","ROULEUR","SPRINTER","PUNCHEUR","TIME_TRIAL","RECREATIONAL","TOURING","CYCLIST_LEVELS","BEGINNER","INTERMEDIATE","ADVANCED","ELITE","calculateTrainingLoad","activities","days","Array","isArray","ctl","atl","tsb","sortedActivities","sort","a","b","now","daysList","i","setDate","getDate","dateString","dayTSS","filter","startsWith","reduce","sum","activity","push","ctlSum","ctlDays","exp","atlSum","atlDays","parseFloat","toFixed","TRAINING_GOALS","GENERAL_FITNESS","POWER","SPEED","WEIGHT_LOSS","EVENT_PREP","RACE_PREP","calculateTrainingMetrics","intervals","if","work","total","interval","restDuration","totalWork","power","pow","workDuration","intensityFactor","getTrainingRecommendations","trainingHistory","recommendedTypes","weeklyStructure","focusAreas","message","goal","hoursPerWeek","FTPService","_trainingLoad","recentHistory","trainingLoad","latestTSB","typeDistribution","acc","Object","values","forEach","Set","generateTrainingPlan","preferences","weeks","startDate","endDate","phases","weeklySchedule","NotificationContext","createContext","context","useContext","importFunction","options","skeletonHeight","importWithMinDelay","all","then","_ref","moduleExport","LazyComponent","lazy","props","_ref2","commonStyles","flexDirection","position","overflow","bikeAnimation","transform","animation","bottom","Skeleton","LinearProgress","sm","borderRadius","backgroundColor","textAlign","zIndex","DirectionsBike"],"sourceRoot":""}