{"version":3,"file":"static/js/4507.ca953035.chunk.js","mappings":"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","sources":["components/cols/ColVisualization3D.js","services/colService.js","services/api.js","components/cols/ColFlyThrough.js","components/cols/ColDetail.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { Canvas, useFrame, useThree } from '@react-three/fiber';\nimport { OrbitControls, PerspectiveCamera, Text } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { Box, Typography, CircularProgress, Paper } from '@mui/material';\n\n// Composant pour la route du col\nconst ColRoad = ({ data, color = \"#444444\" }) => {\n  const meshRef = useRef();\n  const points = data.map(point => new THREE.Vector3(point.x, point.y, point.z));\n  const curve = new THREE.CatmullRomCurve3(points);\n  \n  // Créer la géométrie du tube (route)\n  const tubeGeometry = new THREE.TubeGeometry(\n    curve,\n    100,  // Segments tubulaires\n    0.2,  // Rayon\n    8,    // Segments radiaux\n    false // Fermé\n  );\n\n  return (\n    <mesh ref={meshRef}>\n      <primitive object={tubeGeometry} attach=\"geometry\" />\n      <meshStandardMaterial color={color} roughness={0.6} />\n    </mesh>\n  );\n};\n\n// Composant pour le terrain environnant\nconst Terrain = ({ data }) => {\n  const meshRef = useRef();\n  \n  // Déterminer les dimensions du terrain\n  const maxX = Math.max(...data.map(p => p.x)) + 2;\n  const maxY = Math.max(...data.map(p => p.y)) + 1;\n  const minY = Math.min(...data.map(p => p.y)) - 0.5;\n  \n  // Créer une simple géométrie de plan pour le terrain\n  return (\n    <mesh ref={meshRef} rotation={[-Math.PI / 2, 0, 0]} position={[maxX / 2, minY - 0.1, 0]}>\n      <planeGeometry args={[maxX * 1.5, 10]} />\n      <meshStandardMaterial color=\"#4b7f52\" wireframe={false} />\n    </mesh>\n  );\n};\n\n// Composant pour les points d'intérêt\nconst PointOfInterest = ({ position, name, type }) => {\n  const [hovered, setHovered] = useState(false);\n  \n  // Choisir la couleur en fonction du type\n  let color;\n  switch (type) {\n    case 'viewpoint':\n      color = \"#1E88E5\"; // Bleu\n      break;\n    case 'rest':\n      color = \"#43A047\"; // Vert\n      break;\n    case 'summit':\n      color = \"#E53935\"; // Rouge\n      break;\n    default:\n      color = \"#FFC107\"; // Jaune\n  }\n  \n  return (\n    <group position={position}>\n      <mesh \n        onPointerOver={() => setHovered(true)}\n        onPointerOut={() => setHovered(false)}\n      >\n        <sphereGeometry args={[0.15, 16, 16]} />\n        <meshStandardMaterial color={color} />\n      </mesh>\n      \n      {hovered && (\n        <Text\n          position={[0, 0.3, 0]}\n          color=\"white\"\n          fontSize={0.15}\n          maxWidth={2}\n          textAlign=\"center\"\n          anchorX=\"center\"\n          anchorY=\"middle\"\n          outlineWidth={0.01}\n          outlineColor=\"#000000\"\n        >\n          {name}\n        </Text>\n      )}\n    </group>\n  );\n};\n\n// Composant pour la caméra et les contrôles\nconst SceneSetup = ({ data }) => {\n  const { camera } = useThree();\n  \n  // Calcul du centre et de la taille de la scène pour cadrage\n  const maxX = Math.max(...data.map(p => p.x));\n  const maxY = Math.max(...data.map(p => p.y));\n  \n  // Position initiale de la caméra\n  useEffect(() => {\n    camera.position.set(maxX / 2, maxY * 2, 5);\n    camera.lookAt(maxX / 2, 0, 0);\n  }, [camera, maxX, maxY]);\n  \n  return (\n    <>\n      <OrbitControls \n        enablePan={true}\n        enableZoom={true}\n        enableRotate={true}\n        target={[maxX / 2, maxY / 2, 0]}\n      />\n      <ambientLight intensity={0.5} />\n      <directionalLight position={[10, 10, 5]} intensity={0.7} />\n      <directionalLight position={[-10, 10, 5]} intensity={0.3} />\n    </>\n  );\n};\n\n// Animation de la caméra pour \"parcourir\" le col\nconst CameraAnimation = ({ data, isPlaying }) => {\n  const { camera } = useThree();\n  const points = data.map(point => new THREE.Vector3(point.x, point.y + 0.5, point.z));\n  const curve = new THREE.CatmullRomCurve3(points);\n  \n  // Points pour la \"preview\" du chemin\n  const [progress, setProgress] = useState(0);\n  \n  useFrame(() => {\n    if (isPlaying) {\n      setProgress((prev) => (prev + 0.001) % 1);\n      const position = curve.getPoint(progress);\n      const lookAtPos = curve.getPoint(Math.min(progress + 0.01, 1));\n      \n      camera.position.set(position.x, position.y, position.z);\n      camera.lookAt(lookAtPos.x, lookAtPos.y, lookAtPos.z);\n    }\n  });\n  \n  return null;\n};\n\n// Composant principal de visualisation 3D\nconst ColVisualization3D = ({ colId, colData, pointsOfInterest }) => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [terrainData, setTerrainData] = useState(null);\n  const [isAnimating, setIsAnimating] = useState(false);\n  \n  useEffect(() => {\n    // Les données sont déjà fournies en props\n    if (colData) {\n      setTerrainData(colData);\n      setLoading(false);\n    } else {\n      setError(\"Données du col non disponibles\");\n      setLoading(false);\n    }\n  }, [colData]);\n  \n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n  \n  if (error) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"400px\">\n        <Typography color=\"error\">{error}</Typography>\n      </Box>\n    );\n  }\n  \n  if (!terrainData) return null;\n  \n  return (\n    <Paper elevation={2} sx={{ height: '400px', width: '100%', overflow: 'hidden', position: 'relative' }}>\n      <Typography\n        variant=\"button\"\n        sx={{\n          position: 'absolute',\n          top: 10,\n          left: 10,\n          zIndex: 1,\n          backgroundColor: 'rgba(0,0,0,0.6)',\n          color: 'white',\n          padding: '5px 10px',\n          borderRadius: '4px',\n          cursor: 'pointer',\n        }}\n        onClick={() => setIsAnimating(!isAnimating)}\n      >\n        {isAnimating ? 'Arrêter l\\'animation' : 'Parcourir le col'}\n      </Typography>\n      \n      <Canvas shadows>\n        <SceneSetup data={terrainData} />\n        <CameraAnimation data={terrainData} isPlaying={isAnimating} />\n        <Terrain data={terrainData} />\n        <ColRoad data={terrainData} />\n        \n        {pointsOfInterest && pointsOfInterest.map((poi, index) => {\n          // Trouver le point correspondant à la distance du POI\n          const distanceRatio = poi.distance / Math.max(...terrainData.map(p => p.x));\n          const nearestIndex = Math.floor(distanceRatio * terrainData.length);\n          const point = terrainData[Math.min(nearestIndex, terrainData.length - 1)];\n          \n          return (\n            <PointOfInterest \n              key={index}\n              position={[point.x, point.y + 0.3, point.z]}\n              name={poi.name}\n              type={poi.type}\n            />\n          );\n        })}\n      </Canvas>\n    </Paper>\n  );\n};\n\nexport default ColVisualization3D;\n","/**\n * Service pour la gestion des données des cols cyclistes\n */\nimport api from './api';\n\n// Vérifier si nous utilisons les données mockées ou les API réelles\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK_DATA === 'true';\n\n// Données mockées des cols cyclistes\nconst mockCols = [\n  {\n    id: 'col-1',\n    name: 'Col du Grand Ballon',\n    elevation: 1424,\n    location: {\n      lat: 47.9019,\n      lng: 7.0958\n    },\n    difficulty: 'Difficile',\n    length: 9.3,\n    avgGradient: 6.8,\n    maxGradient: 11.2,\n    region: 'Vosges',\n    description: 'Le Grand Ballon, plus haut sommet du massif des Vosges, offre une ascension exigeante avec des panoramas exceptionnels sur la plaine d\\'Alsace.',\n    imageUrl: 'https://www.cyclingcols.com/sites/default/files/col/Grand%20Ballon/grand%20ballon%20gravel.jpg',\n    terrainData: {\n      elevationProfile: [\n        { distance: 0, elevation: 454 },\n        { distance: 1, elevation: 525 },\n        { distance: 2, elevation: 610 },\n        { distance: 3, elevation: 703 },\n        { distance: 4, elevation: 812 },\n        { distance: 5, elevation: 918 },\n        { distance: 6, elevation: 1049 },\n        { distance: 7, elevation: 1186 },\n        { distance: 8, elevation: 1320 },\n        { distance: 9, elevation: 1424 }\n      ],\n      // Coordonnées 3D approximatives pour la visualisation\n      coordinates3D: Array.from({ length: 100 }, (_, i) => {\n        const t = i / 99;\n        const distance = t * 9.3;\n        const elevation = 454 + t * (1424 - 454);\n        const width = 0.5 * Math.sin(t * Math.PI); // Largeur de la route\n        \n        return {\n          x: distance,  // Distance horizontale\n          y: elevation / 100,  // Élévation (échelle réduite pour la visualisation)\n          z: width      // Largeur de la route\n        };\n      }),\n      // Points d'intérêt le long du col\n      pointsOfInterest: [\n        { distance: 2.3, type: 'viewpoint', name: 'Vue sur la Vallée de Guebwiller' },\n        { distance: 5.7, type: 'rest', name: 'Ferme-Auberge du Grand Ballon' },\n        { distance: 9.3, type: 'summit', name: 'Sommet du Grand Ballon' }\n      ]\n    }\n  },\n  {\n    id: 'col-2',\n    name: 'Col de la Schlucht',\n    elevation: 1139,\n    location: {\n      lat: 48.0565,\n      lng: 7.0094\n    },\n    difficulty: 'Modéré',\n    length: 7.8,\n    avgGradient: 5.5,\n    maxGradient: 8.0,\n    region: 'Vosges',\n    description: 'Le Col de la Schlucht est l\\'un des cols les plus connus des Vosges, reliant la vallée de Kaysersberg à celle de Gérardmer, avec une route bien entretenue et des forêts luxuriantes.',\n    imageUrl: 'https://www.cyclingcols.com/sites/default/files/col/Schlucht/col%20de%20la%20schlucht_0.jpg',\n    terrainData: {\n      elevationProfile: [\n        { distance: 0, elevation: 710 },\n        { distance: 1, elevation: 760 },\n        { distance: 2, elevation: 815 },\n        { distance: 3, elevation: 880 },\n        { distance: 4, elevation: 940 },\n        { distance: 5, elevation: 1000 },\n        { distance: 6, elevation: 1075 },\n        { distance: 7, elevation: 1120 },\n        { distance: 7.8, elevation: 1139 }\n      ],\n      // Coordonnées 3D approximatives pour la visualisation\n      coordinates3D: Array.from({ length: 100 }, (_, i) => {\n        const t = i / 99;\n        const distance = t * 7.8;\n        const elevation = 710 + t * (1139 - 710);\n        const width = 0.7 * Math.sin(t * Math.PI); // Largeur de la route\n        \n        return {\n          x: distance,  // Distance horizontale\n          y: elevation / 100,  // Élévation (échelle réduite pour la visualisation)\n          z: width      // Largeur de la route\n        };\n      }),\n      // Points d'intérêt le long du col\n      pointsOfInterest: [\n        { distance: 2.5, type: 'rest', name: 'Auberge du Schantzwasen' },\n        { distance: 4.8, type: 'viewpoint', name: 'Point de vue sur les Vosges' },\n        { distance: 7.8, type: 'summit', name: 'Col de la Schlucht' }\n      ]\n    }\n  },\n  {\n    id: 'col-3',\n    name: 'Col du Donon',\n    elevation: 727,\n    location: {\n      lat: 48.5121,\n      lng: 7.1526\n    },\n    difficulty: 'Facile',\n    length: 5.4,\n    avgGradient: 4.2,\n    maxGradient: 7.5,\n    region: 'Vosges',\n    description: 'Le Col du Donon est une ascension accessible offrant de beaux passages forestiers et des vues dégagées au sommet, dominé par le Temple du Donon.',\n    imageUrl: 'https://www.cyclingcols.com/sites/default/files/col/Donon/donon.jpg',\n    terrainData: {\n      elevationProfile: [\n        { distance: 0, elevation: 500 },\n        { distance: 1, elevation: 540 },\n        { distance: 2, elevation: 580 },\n        { distance: 3, elevation: 630 },\n        { distance: 4, elevation: 670 },\n        { distance: 5, elevation: 710 },\n        { distance: 5.4, elevation: 727 }\n      ],\n      // Coordonnées 3D approximatives pour la visualisation\n      coordinates3D: Array.from({ length: 100 }, (_, i) => {\n        const t = i / 99;\n        const distance = t * 5.4;\n        const elevation = 500 + t * (727 - 500);\n        const width = 0.6 * Math.sin(t * Math.PI); // Largeur de la route\n        \n        return {\n          x: distance,  // Distance horizontale\n          y: elevation / 100,  // Élévation (échelle réduite pour la visualisation)\n          z: width      // Largeur de la route\n        };\n      }),\n      // Points d'intérêt le long du col\n      pointsOfInterest: [\n        { distance: 1.8, type: 'rest', name: 'Aire de pique-nique' },\n        { distance: 3.5, type: 'viewpoint', name: 'Panorama sur la vallée' },\n        { distance: 5.4, type: 'summit', name: 'Temple du Donon' }\n      ]\n    }\n  }\n];\n\nconst ColService = {\n  /**\n   * Récupère la liste des cols cyclistes\n   * @param {Object} options - Options de filtrage\n   * @returns {Promise<Array>} Liste des cols\n   */\n  getAllCols: async (options = {}) => {\n    try {\n      if (USE_MOCK_DATA) {\n        console.log('Using mock data for cols');\n        \n        // Filtrer les cols selon les options\n        let filteredCols = [...mockCols];\n        \n        if (options.region) {\n          filteredCols = filteredCols.filter(col => col.region === options.region);\n        }\n        \n        if (options.difficulty) {\n          filteredCols = filteredCols.filter(col => col.difficulty === options.difficulty);\n        }\n        \n        if (options.minElevation) {\n          filteredCols = filteredCols.filter(col => col.elevation >= options.minElevation);\n        }\n        \n        if (options.maxElevation) {\n          filteredCols = filteredCols.filter(col => col.elevation <= options.maxElevation);\n        }\n        \n        if (options.surface && options.surface.length > 0) {\n          filteredCols = filteredCols.filter(col => \n            options.surface.some(s => col.surface && col.surface.toLowerCase().includes(s.toLowerCase()))\n          );\n        }\n        \n        if (options.technicalDifficulty) {\n          filteredCols = filteredCols.filter(col => \n            col.technical_difficulty && col.technical_difficulty.toString() === options.technicalDifficulty.toString()\n          );\n        }\n        \n        if (options.seasons && options.seasons.length > 0) {\n          filteredCols = filteredCols.filter(col => \n            col.recommended_season && options.seasons.some(s => \n              col.recommended_season.map(rs => rs.toLowerCase()).includes(s.toLowerCase())\n            )\n          );\n        }\n        \n        // Simuler une latence réseau\n        await new Promise(resolve => setTimeout(resolve, 500));\n        return filteredCols;\n      }\n      \n      // Construire les paramètres de requête\n      const params = new URLSearchParams();\n      if (options.region) params.append('region', options.region);\n      if (options.difficulty) params.append('difficulty', options.difficulty);\n      if (options.minElevation) params.append('minElevation', options.minElevation);\n      if (options.maxElevation) params.append('maxElevation', options.maxElevation);\n      if (options.surface && options.surface.length > 0) {\n        options.surface.forEach(surface => {\n          params.append('surface', surface.toLowerCase());\n        });\n      }\n      if (options.technicalDifficulty) params.append('technicalDifficulty', options.technicalDifficulty);\n      if (options.seasons && options.seasons.length > 0) {\n        options.seasons.forEach(season => {\n          params.append('season', season.toLowerCase());\n        });\n      }\n      \n      // Appel API réel\n      const response = await api.get(`/cols?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching cols:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Récupère les détails d'un col spécifique\n   * @param {string} colId - ID du col\n   * @returns {Promise<Object>} Détails du col\n   */\n  getColById: async (colId) => {\n    try {\n      if (USE_MOCK_DATA) {\n        console.log(`Using mock data for col ${colId}`);\n        \n        const col = mockCols.find(c => c.id === colId);\n        if (!col) {\n          throw new Error(`Col with ID ${colId} not found`);\n        }\n        \n        // Simuler une latence réseau\n        await new Promise(resolve => setTimeout(resolve, 300));\n        return col;\n      }\n      \n      // Appel API réel\n      const response = await api.get(`/cols/${colId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching col ${colId}:`, error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Récupère les données d'élévation d'un col pour le graphique\n   * @param {string} colId - ID du col\n   * @returns {Promise<Array>} Données d'élévation\n   */\n  getColElevationData: async (colId) => {\n    try {\n      if (USE_MOCK_DATA) {\n        console.log(`Using mock data for elevation profile of col ${colId}`);\n        \n        const col = mockCols.find(c => c.id === colId);\n        if (!col) {\n          throw new Error(`Col with ID ${colId} not found`);\n        }\n        \n        // Simuler une latence réseau\n        await new Promise(resolve => setTimeout(resolve, 200));\n        return col.terrainData.elevationProfile;\n      }\n      \n      // Appel API réel\n      const response = await api.get(`/cols/${colId}/elevation`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching elevation data for col ${colId}:`, error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Récupère les données de terrain 3D d'un col pour la visualisation\n   * @param {string} colId - ID du col\n   * @returns {Promise<Object>} Données de terrain 3D\n   */\n  getCol3DTerrainData: async (colId) => {\n    try {\n      if (USE_MOCK_DATA) {\n        console.log(`Using mock data for 3D terrain of col ${colId}`);\n        \n        const col = mockCols.find(c => c.id === colId);\n        if (!col) {\n          throw new Error(`Col with ID ${colId} not found`);\n        }\n        \n        // Simuler une latence réseau\n        await new Promise(resolve => setTimeout(resolve, 400));\n        return {\n          coordinates: col.terrainData.coordinates3D,\n          pointsOfInterest: col.terrainData.pointsOfInterest\n        };\n      }\n      \n      // Appel API réel\n      const response = await api.get(`/cols/${colId}/terrain3d`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching 3D terrain data for col ${colId}:`, error);\n      throw error;\n    }\n  }\n};\n\nexport default ColService;\n","/**\n * Service de configuration centrale pour les API\n * Ce fichier configure axios pour toutes les requêtes API\n */\nimport axios from 'axios';\n\n// Récupérer l'URL de base depuis les variables d'environnement\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK_DATA === 'true';\n\n// Création d'une instance axios avec la configuration de base\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  // Ajouter un timeout par défaut pour éviter les requêtes bloquées indéfiniment\n  timeout: 30000, // 30 secondes\n  // Activer les credentials pour les cookies\n  withCredentials: true\n});\n\n// Intercepteur pour ajouter le token d'authentification JWT à chaque requête\napi.interceptors.request.use(\n  (config) => {\n    // Récupérer le token depuis les cookies ou localStorage\n    // Note: Les cookies httpOnly ne sont pas accessibles via JavaScript\n    // mais le token peut être stocké dans localStorage pour la compatibilité\n    const token = localStorage.getItem('authToken');\n    \n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    \n    // Ajouter un timestamp pour éviter la mise en cache des requêtes GET\n    if (config.method === 'get') {\n      config.params = {\n        ...config.params,\n        _t: Date.now()\n      };\n    }\n    \n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Intercepteur pour gérer les réponses et les erreurs\napi.interceptors.response.use(\n  (response) => {\n    // Vérifier si la réponse contient un nouveau token d'accès\n    const newToken = response.headers['x-new-access-token'];\n    if (newToken) {\n      // Mettre à jour le token dans localStorage\n      localStorage.setItem('authToken', newToken);\n    }\n    \n    return response;\n  },\n  (error) => {\n    // Gérer les erreurs d'authentification (401)\n    if (error.response && error.response.status === 401) {\n      // Vérifier si l'erreur est due à un token expiré\n      const isTokenExpired = \n        error.response.data?.error?.type === 'auth_token_expired' ||\n        error.response.data?.message?.includes('expired');\n      \n      // Si le token est expiré, tenter de le rafraîchir automatiquement\n      // Cette logique sera gérée par le service d'authentification\n      \n      // Pour l'instant, déconnecter l'utilisateur\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('user');\n      \n      // Rediriger vers la page de connexion si nécessaire\n      if (window.location.pathname !== '/login') {\n        window.location.href = '/login?expired=true';\n      }\n    }\n    \n    // Gérer les erreurs de timeout\n    if (error.code === 'ECONNABORTED' && error.message.includes('timeout')) {\n      error.response = {\n        data: {\n          error: {\n            type: 'timeout_error',\n            message: 'La requête a pris trop de temps à s\\'exécuter',\n            severity: 'warning'\n          }\n        }\n      };\n    }\n    \n    // Gérer les erreurs réseau\n    if (!error.response) {\n      error.response = {\n        data: {\n          error: {\n            type: 'network_error',\n            message: 'Impossible de se connecter au serveur',\n            severity: 'warning',\n            details: error.message\n          }\n        }\n      };\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n/**\n * Fonction utilitaire pour créer des requêtes avec gestion de cache\n * @param {string} url - URL de la requête\n * @param {Object} options - Options de la requête\n * @returns {Promise} Promesse avec les données de la réponse\n */\nconst createCachedRequest = (url, options = {}) => {\n  const { cacheDuration = 5 * 60 * 1000, forceRefresh = false } = options;\n  \n  // Clé de cache unique pour cette requête\n  const cacheKey = `api_cache_${url}`;\n  \n  // Vérifier si les données sont en cache et toujours valides\n  const cachedData = localStorage.getItem(cacheKey);\n  if (cachedData && !forceRefresh) {\n    try {\n      const { data, timestamp } = JSON.parse(cachedData);\n      const isValid = Date.now() - timestamp < cacheDuration;\n      \n      if (isValid) {\n        return Promise.resolve(data);\n      }\n    } catch (error) {\n      // Ignorer les erreurs de parsing et continuer avec la requête\n      console.warn('Erreur lors de la lecture du cache:', error);\n    }\n  }\n  \n  // Effectuer la requête API\n  return api.get(url)\n    .then(response => {\n      // Mettre en cache les données\n      localStorage.setItem(cacheKey, JSON.stringify({\n        data: response.data,\n        timestamp: Date.now()\n      }));\n      \n      return response.data;\n    });\n};\n\nexport { api, USE_MOCK_DATA, createCachedRequest };\nexport default api;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Box, Button, Typography, Slider, Paper, Grid, IconButton, Tooltip, CircularProgress } from '@mui/material';\nimport { \n  PlayArrow, Pause, ReplayOutlined, \n  SlowMotionVideo, Speed, FlightTakeoff,\n  FlightLand, CameraAlt, VolumeUp, VolumeOff,\n  ZoomIn, ZoomOut, Fullscreen, FullscreenExit,\n  TouchApp\n} from '@mui/icons-material';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { GPUComputationRenderer } from 'three/examples/jsm/misc/GPUComputationRenderer';\nimport styled from 'styled-components';\n\n// Composant pour la fonctionnalité Fly-through des cols cyclistes\nconst ColFlyThrough = ({ \n  colId, \n  colData, \n  pointsOfInterest, \n  elevationData, \n  isMobile \n}) => {\n  // Références\n  const containerRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const controlsRef = useRef(null);\n  const pathRef = useRef(null);\n  const flyThroughRef = useRef(null);\n  const statsRef = useRef(null);\n  \n  // État\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [speed, setSpeed] = useState(1);\n  const [isMuted, setIsMuted] = useState(true);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [currentElevation, setCurrentElevation] = useState(0);\n  const [currentGradient, setCurrentGradient] = useState(0);\n  const [currentDistance, setCurrentDistance] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [cameraMode, setCameraMode] = useState('follow'); // 'follow', 'orbit', 'cinematic'\n  const [totalDistance, setTotalDistance] = useState(0);\n  \n  // Initialisation de la scène Three.js\n  useEffect(() => {\n    if (!containerRef.current || !colData || colData.length === 0) return;\n    \n    const container = containerRef.current;\n    const width = container.clientWidth;\n    const height = container.clientHeight;\n    \n    // Initialiser la scène\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x87ceeb); // Ciel bleu\n    scene.fog = new THREE.FogExp2(0x87ceeb, 0.002);\n    sceneRef.current = scene;\n    \n    // Initialiser la caméra\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 10000);\n    camera.position.set(0, 50, 200);\n    cameraRef.current = camera;\n    \n    // Initialiser le renderer\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(width, height);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.shadowMap.enabled = true;\n    container.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    \n    // Contrôles pour la visualisation interactive\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.maxPolarAngle = Math.PI / 2;\n    controls.enabled = false; // Désactivé par défaut, activé en mode 'orbit'\n    controlsRef.current = controls;\n    \n    // Éclairage\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n    scene.add(ambientLight);\n    \n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(100, 100, 50);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.mapSize.width = 1024;\n    directionalLight.shadow.mapSize.height = 1024;\n    scene.add(directionalLight);\n    \n    // Créer le terrain basé sur les données du col\n    const createTerrain = () => {\n      // Créer le groupe pour le terrain\n      const terrainGroup = new THREE.Group();\n      scene.add(terrainGroup);\n      \n      // Créer la route\n      const createPath = () => {\n        // Convertir les coordonnées du col en points 3D\n        const points = colData.map(point => {\n          return new THREE.Vector3(\n            point.x * 10, // Échelle pour visualisation\n            point.elevation,\n            point.y * 10\n          );\n        });\n        \n        // Calculer la distance totale\n        let distance = 0;\n        for (let i = 1; i < points.length; i++) {\n          distance += points[i].distanceTo(points[i - 1]);\n        }\n        setTotalDistance(distance / 10); // En kilomètres\n        \n        // Créer la courbe du chemin\n        const curve = new THREE.CatmullRomCurve3(points);\n        pathRef.current = curve;\n        \n        // Créer la géométrie de la route\n        const pathGeometry = new THREE.TubeGeometry(curve, 200, 2, 8, false);\n        const pathMaterial = new THREE.MeshStandardMaterial({ \n          color: 0x333333,\n          roughness: 0.8,\n          metalness: 0.2\n        });\n        const pathMesh = new THREE.Mesh(pathGeometry, pathMaterial);\n        pathMesh.receiveShadow = true;\n        terrainGroup.add(pathMesh);\n        \n        return curve;\n      };\n      \n      // Créer le terrain autour de la route\n      const createTerrainMesh = (path) => {\n        // Créer une géométrie de terrain plus large\n        const terrainWidth = 1000;\n        const terrainDepth = 1000;\n        const terrainSegments = 100;\n        \n        const terrainGeometry = new THREE.PlaneGeometry(\n          terrainWidth, \n          terrainDepth, \n          terrainSegments,\n          terrainSegments\n        );\n        \n        // Déformer le terrain en fonction du chemin\n        const vertices = terrainGeometry.attributes.position.array;\n        \n        for (let i = 0; i < vertices.length; i += 3) {\n          const x = vertices[i];\n          const z = vertices[i + 2];\n          \n          // Trouver le point le plus proche sur le chemin\n          let minDistance = Infinity;\n          let elevation = 0;\n          \n          // Échantillonner le chemin\n          for (let t = 0; t <= 1; t += 0.01) {\n            const pathPoint = path.getPoint(t);\n            const distance = new THREE.Vector2(x - pathPoint.x, z - pathPoint.z).length();\n            \n            if (distance < minDistance) {\n              minDistance = distance;\n              elevation = pathPoint.y;\n            }\n          }\n          \n          // Appliquer l'élévation avec un facteur de lissage basé sur la distance\n          const smoothFactor = Math.min(1, minDistance / 50);\n          vertices[i + 1] = elevation * (1 - smoothFactor) + (elevation - 50) * smoothFactor;\n        }\n        \n        // Recalculer les normales pour un éclairage correct\n        terrainGeometry.computeVertexNormals();\n        \n        // Rotation pour orienter le terrain correctement\n        terrainGeometry.rotateX(-Math.PI / 2);\n        \n        // Matériau du terrain avec dégradé en fonction de l'élévation\n        const terrainMaterial = new THREE.MeshStandardMaterial({\n          vertexColors: true,\n          roughness: 0.8,\n          metalness: 0.2\n        });\n        \n        // Ajouter des couleurs en fonction de l'élévation\n        const colors = [];\n        const color = new THREE.Color();\n        \n        for (let i = 0; i < vertices.length; i += 3) {\n          const elevation = vertices[i + 1];\n          \n          // Palette de couleurs pour le terrain\n          if (elevation < 200) {\n            color.setRGB(0.2, 0.5, 0.2); // Vert foncé\n          } else if (elevation < 500) {\n            color.setRGB(0.4, 0.6, 0.3); // Vert\n          } else if (elevation < 1000) {\n            color.setRGB(0.6, 0.6, 0.4); // Vert-brun\n          } else if (elevation < 1500) {\n            color.setRGB(0.7, 0.7, 0.6); // Brun clair\n          } else if (elevation < 2000) {\n            color.setRGB(0.8, 0.8, 0.8); // Gris\n          } else {\n            color.setRGB(1, 1, 1); // Blanc (neige)\n          }\n          \n          colors.push(color.r, color.g, color.b);\n        }\n        \n        const colorAttribute = new THREE.Float32BufferAttribute(colors, 3);\n        terrainGeometry.setAttribute('color', colorAttribute);\n        \n        const terrainMesh = new THREE.Mesh(terrainGeometry, terrainMaterial);\n        terrainMesh.receiveShadow = true;\n        terrainGroup.add(terrainMesh);\n      };\n      \n      // Ajouter les points d'intérêt\n      const addPointsOfInterest = (path) => {\n        if (!pointsOfInterest || pointsOfInterest.length === 0) return;\n        \n        pointsOfInterest.forEach(poi => {\n          // Trouver la position sur le chemin\n          const position = path.getPoint(poi.position / totalDistance);\n          \n          // Créer un marqueur\n          const markerGeometry = new THREE.SphereGeometry(3, 16, 16);\n          \n          // Couleur en fonction du type de POI\n          let markerColor = 0xff0000;\n          \n          if (poi.type === 'viewpoint') {\n            markerColor = 0x00ff00;\n          } else if (poi.type === 'rest') {\n            markerColor = 0x0000ff;\n          } else if (poi.type === 'summit') {\n            markerColor = 0xff9900;\n          }\n          \n          const markerMaterial = new THREE.MeshStandardMaterial({ \n            color: markerColor,\n            emissive: markerColor,\n            emissiveIntensity: 0.3\n          });\n          \n          const marker = new THREE.Mesh(markerGeometry, markerMaterial);\n          marker.position.copy(position);\n          marker.position.y += 5; // Légèrement au-dessus du terrain\n          marker.castShadow = true;\n          \n          // Ajouter un texte flottant\n          const canvas = document.createElement('canvas');\n          const context = canvas.getContext('2d');\n          canvas.width = 256;\n          canvas.height = 128;\n          \n          context.fillStyle = '#ffffff';\n          context.fillRect(0, 0, canvas.width, canvas.height);\n          context.fillStyle = '#000000';\n          context.font = 'Bold 20px Arial';\n          context.fillText(poi.name, 10, 64);\n          \n          const texture = new THREE.CanvasTexture(canvas);\n          const labelMaterial = new THREE.SpriteMaterial({ map: texture });\n          const label = new THREE.Sprite(labelMaterial);\n          label.position.copy(marker.position);\n          label.position.y += 10;\n          label.scale.set(20, 10, 1);\n          \n          terrainGroup.add(marker);\n          terrainGroup.add(label);\n        });\n      };\n      \n      // Créer les éléments du terrain\n      const path = createPath();\n      createTerrainMesh(path);\n      addPointsOfInterest(path);\n      \n      return { path, terrainGroup };\n    };\n    \n    // Initialiser les éléments du terrain\n    const { path } = createTerrain();\n    \n    // Fonction d'animation\n    const flyThroughAnimation = {\n      animationId: null,\n      isPlaying: false,\n      progress: 0,\n      speed: 1,\n      \n      start: function() {\n        this.isPlaying = true;\n        setIsPlaying(true);\n        this.animate();\n      },\n      \n      pause: function() {\n        this.isPlaying = false;\n        setIsPlaying(false);\n        if (this.animationId) {\n          cancelAnimationFrame(this.animationId);\n        }\n      },\n      \n      reset: function() {\n        this.progress = 0;\n        setProgress(0);\n        this.updateCamera();\n      },\n      \n      setProgress: function(value) {\n        this.progress = Math.max(0, Math.min(1, value));\n        setProgress(value);\n        this.updateCamera();\n      },\n      \n      setSpeed: function(value) {\n        this.speed = value;\n        setSpeed(value);\n      },\n      \n      updateCamera: function() {\n        if (!path) return;\n        \n        // Obtenir la position actuelle sur le chemin\n        const pathPoint = path.getPoint(this.progress);\n        \n        // Calculer la direction (tangente)\n        const tangent = path.getTangent(this.progress);\n        \n        // Position de la caméra en fonction du mode\n        if (cameraMode === 'follow') {\n          // Mode suivi : caméra derrière le point actuel\n          camera.position.set(\n            pathPoint.x - tangent.x * 10,\n            pathPoint.y + 5, // Un peu au-dessus du chemin\n            pathPoint.z - tangent.z * 10\n          );\n          \n          // Regarder vers l'avant sur le chemin\n          const lookAtPoint = new THREE.Vector3(\n            pathPoint.x + tangent.x * 20,\n            pathPoint.y + 1,\n            pathPoint.z + tangent.z * 20\n          );\n          camera.lookAt(lookAtPoint);\n        } else if (cameraMode === 'cinematic') {\n          // Mode cinématique : caméra qui suit avec un angle\n          const angle = this.progress * Math.PI * 4; // Rotation autour du chemin\n          const radius = 20;\n          \n          camera.position.set(\n            pathPoint.x + Math.cos(angle) * radius,\n            pathPoint.y + 10,\n            pathPoint.z + Math.sin(angle) * radius\n          );\n          \n          camera.lookAt(pathPoint);\n        }\n        \n        // Mettre à jour les statistiques\n        if (elevationData && elevationData.length > 0) {\n          const index = Math.floor(this.progress * (elevationData.length - 1));\n          const data = elevationData[index];\n          \n          if (data) {\n            setCurrentElevation(data.elevation);\n            setCurrentGradient(data.gradient);\n            setCurrentDistance(data.distance);\n          }\n        }\n      },\n      \n      animate: function() {\n        if (!this.isPlaying) return;\n        \n        // Mettre à jour la progression\n        const progressIncrement = 0.0001 * this.speed;\n        this.progress += progressIncrement;\n        \n        // Boucler ou arrêter à la fin\n        if (this.progress >= 1) {\n          this.progress = 0;\n        }\n        \n        setProgress(this.progress);\n        this.updateCamera();\n        \n        // Continuer l'animation\n        this.animationId = requestAnimationFrame(() => this.animate());\n      }\n    };\n    \n    flyThroughRef.current = flyThroughAnimation;\n    \n    // Initialiser la position de la caméra\n    flyThroughAnimation.updateCamera();\n    \n    // Gestionnaire de redimensionnement\n    const handleResize = () => {\n      const width = container.clientWidth;\n      const height = container.clientHeight;\n      \n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n    \n    window.addEventListener('resize', handleResize);\n    \n    // Fonction d'animation générale (incluant OrbitControls)\n    const animate = () => {\n      requestAnimationFrame(animate);\n      \n      if (controlsRef.current) {\n        controlsRef.current.update();\n      }\n      \n      renderer.render(scene, camera);\n    };\n    \n    animate();\n    \n    // Signal que le chargement est terminé\n    setLoading(false);\n    \n    // Nettoyage\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      \n      if (flyThroughRef.current && flyThroughRef.current.animationId) {\n        cancelAnimationFrame(flyThroughRef.current.animationId);\n      }\n      \n      if (rendererRef.current && container.contains(rendererRef.current.domElement)) {\n        container.removeChild(rendererRef.current.domElement);\n      }\n      \n      if (controlsRef.current) {\n        controlsRef.current.dispose();\n      }\n    };\n  }, [colData, pointsOfInterest, cameraMode, elevationData]);\n  \n  // Gestion des interactions utilisateur\n  const handlePlayPause = () => {\n    if (flyThroughRef.current) {\n      if (isPlaying) {\n        flyThroughRef.current.pause();\n      } else {\n        flyThroughRef.current.start();\n      }\n    }\n  };\n  \n  const handleReset = () => {\n    if (flyThroughRef.current) {\n      flyThroughRef.current.reset();\n    }\n  };\n  \n  const handleProgressChange = (event, newValue) => {\n    if (flyThroughRef.current) {\n      flyThroughRef.current.setProgress(newValue);\n    }\n  };\n  \n  const handleSpeedChange = (event, newValue) => {\n    if (flyThroughRef.current) {\n      flyThroughRef.current.setSpeed(newValue);\n    }\n  };\n  \n  const handleMuteToggle = () => {\n    setIsMuted(!isMuted);\n  };\n  \n  const handleFullscreenToggle = () => {\n    if (!containerRef.current) return;\n    \n    if (!isFullscreen) {\n      if (containerRef.current.requestFullscreen) {\n        containerRef.current.requestFullscreen();\n      }\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    }\n    \n    setIsFullscreen(!isFullscreen);\n  };\n  \n  const handleCameraModeChange = (mode) => {\n    setCameraMode(mode);\n    \n    if (controlsRef.current) {\n      controlsRef.current.enabled = mode === 'orbit';\n    }\n  };\n  \n  // Écouteur pour les changements de plein écran\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n    \n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    \n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n    };\n  }, []);\n  \n  // Afficher un indicateur de chargement\n  if (loading) {\n    return (\n      <Box \n        display=\"flex\" \n        flexDirection=\"column\"\n        justifyContent=\"center\" \n        alignItems=\"center\" \n        height=\"100%\"\n        sx={{ backgroundColor: 'rgba(0, 0, 0, 0.03)' }}\n      >\n        <CircularProgress size={40} />\n        <Typography variant=\"subtitle1\" sx={{ mt: 2 }}>\n          Préparation du Fly-through...\n        </Typography>\n      </Box>\n    );\n  }\n  \n  // Afficher un message d'erreur\n  if (error) {\n    return (\n      <Box \n        display=\"flex\" \n        justifyContent=\"center\" \n        alignItems=\"center\" \n        height=\"100%\"\n        sx={{ backgroundColor: 'rgba(0, 0, 0, 0.03)' }}\n      >\n        <Typography color=\"error\" role=\"alert\">{error}</Typography>\n      </Box>\n    );\n  }\n  \n  return (\n    <Box \n      sx={{ \n        position: 'relative', \n        height: '100%', \n        overflow: 'hidden',\n        borderRadius: '8px',\n        boxShadow: 3\n      }}\n      ref={containerRef}\n      onMouseMove={() => setShowControls(true)}\n      onMouseLeave={() => setTimeout(() => setShowControls(false), 3000)}\n      onTouchStart={() => setShowControls(true)}\n      onTouchEnd={() => setTimeout(() => setShowControls(false), 3000)}\n    >\n      {/* Statistiques en temps réel */}\n      <StatsOverlay \n        show={showControls || isMobile} \n        ref={statsRef}\n        isMobile={isMobile}\n      >\n        <Typography variant={isMobile ? 'caption' : 'body2'}>\n          Altitude: <strong>{currentElevation.toFixed(0)} m</strong>\n        </Typography>\n        <Typography variant={isMobile ? 'caption' : 'body2'}>\n          Pente: <strong>{currentGradient.toFixed(1)}%</strong>\n        </Typography>\n        <Typography variant={isMobile ? 'caption' : 'body2'}>\n          Distance: <strong>{currentDistance.toFixed(1)} / {totalDistance.toFixed(1)} km</strong>\n        </Typography>\n      </StatsOverlay>\n      \n      {/* Contrôles de la visualisation */}\n      <ControlsOverlay \n        show={showControls || isMobile}\n        isMobile={isMobile}\n      >\n        {/* Contrôles principaux */}\n        <ControlButtonsGroup>\n          <Tooltip title={isPlaying ? \"Pause\" : \"Lecture\"}>\n            <IconButton \n              onClick={handlePlayPause} \n              color=\"primary\"\n              size={isMobile ? \"small\" : \"medium\"}\n            >\n              {isPlaying ? <Pause /> : <PlayArrow />}\n            </IconButton>\n          </Tooltip>\n          \n          <Tooltip title=\"Recommencer\">\n            <IconButton \n              onClick={handleReset} \n              color=\"primary\"\n              size={isMobile ? \"small\" : \"medium\"}\n            >\n              <ReplayOutlined />\n            </IconButton>\n          </Tooltip>\n          \n          <Box sx={{ width: isMobile ? 100 : 150, mx: 1 }}>\n            <Slider\n              value={progress}\n              onChange={handleProgressChange}\n              min={0}\n              max={1}\n              step={0.001}\n              aria-label=\"Progression\"\n              size={isMobile ? \"small\" : \"medium\"}\n            />\n          </Box>\n          \n          <Tooltip title={isMuted ? \"Activer le son\" : \"Couper le son\"}>\n            <IconButton \n              onClick={handleMuteToggle} \n              color=\"primary\"\n              size={isMobile ? \"small\" : \"medium\"}\n            >\n              {isMuted ? <VolumeOff /> : <VolumeUp />}\n            </IconButton>\n          </Tooltip>\n          \n          <Tooltip title={isFullscreen ? \"Quitter le plein écran\" : \"Plein écran\"}>\n            <IconButton \n              onClick={handleFullscreenToggle} \n              color=\"primary\"\n              size={isMobile ? \"small\" : \"medium\"}\n            >\n              {isFullscreen ? <FullscreenExit /> : <Fullscreen />}\n            </IconButton>\n          </Tooltip>\n        </ControlButtonsGroup>\n        \n        {/* Contrôles avancés */}\n        <AdvancedControlsGroup>\n          <Box sx={{ display: 'flex', alignItems: 'center', mr: 2 }}>\n            <Typography variant={isMobile ? 'caption' : 'body2'} sx={{ mr: 1 }}>\n              Vitesse:\n            </Typography>\n            <Box sx={{ width: isMobile ? 80 : 100 }}>\n              <Slider\n                value={speed}\n                onChange={handleSpeedChange}\n                min={0.5}\n                max={3}\n                step={0.5}\n                marks={[\n                  { value: 0.5, label: isMobile ? '' : '0.5x' },\n                  { value: 1, label: isMobile ? '' : '1x' },\n                  { value: 2, label: isMobile ? '' : '2x' },\n                  { value: 3, label: isMobile ? '' : '3x' }\n                ]}\n                aria-label=\"Vitesse\"\n                size=\"small\"\n              />\n            </Box>\n          </Box>\n          \n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Typography variant={isMobile ? 'caption' : 'body2'} sx={{ mr: 1 }}>\n              Caméra:\n            </Typography>\n            <Box sx={{ display: 'flex' }}>\n              <Tooltip title=\"Suivre le parcours\">\n                <IconButton \n                  onClick={() => handleCameraModeChange('follow')} \n                  color={cameraMode === 'follow' ? \"primary\" : \"default\"}\n                  size=\"small\"\n                >\n                  <FlightTakeoff />\n                </IconButton>\n              </Tooltip>\n              \n              <Tooltip title=\"Caméra libre\">\n                <IconButton \n                  onClick={() => handleCameraModeChange('orbit')} \n                  color={cameraMode === 'orbit' ? \"primary\" : \"default\"}\n                  size=\"small\"\n                >\n                  <CameraAlt />\n                </IconButton>\n              </Tooltip>\n              \n              <Tooltip title=\"Vue cinématique\">\n                <IconButton \n                  onClick={() => handleCameraModeChange('cinematic')} \n                  color={cameraMode === 'cinematic' ? \"primary\" : \"default\"}\n                  size=\"small\"\n                >\n                  <SlowMotionVideo />\n                </IconButton>\n              </Tooltip>\n            </Box>\n          </Box>\n        </AdvancedControlsGroup>\n      </ControlsOverlay>\n      \n      {/* Indicateur de contrôle tactile */}\n      {isMobile && (\n        <TouchIndicator>\n          <TouchApp />\n          <Typography variant=\"caption\">\n            Touchez pour afficher les contrôles\n          </Typography>\n        </TouchIndicator>\n      )}\n    </Box>\n  );\n};\n\n// Composants stylisés\nconst StatsOverlay = styled(Box)`\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  background-color: rgba(255, 255, 255, 0.8);\n  padding: 8px 12px;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  transition: opacity 0.3s ease-in-out;\n  opacity: ${props => props.show ? 1 : 0};\n  pointer-events: ${props => props.show ? 'auto' : 'none'};\n  z-index: 10;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  font-size: ${props => props.isMobile ? '0.75rem' : '0.875rem'};\n`;\n\nconst ControlsOverlay = styled(Box)`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: rgba(255, 255, 255, 0.9);\n  padding: ${props => props.isMobile ? '8px' : '12px'};\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;\n  opacity: ${props => props.show ? 1 : 0};\n  transform: translateY(${props => props.show ? '0' : '100%'});\n  pointer-events: ${props => props.show ? 'auto' : 'none'};\n  z-index: 10;\n  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);\n`;\n\nconst ControlButtonsGroup = styled(Box)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst AdvancedControlsGroup = styled(Box)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  padding-top: 4px;\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n`;\n\nconst TouchIndicator = styled(Box)`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  color: rgba(255, 255, 255, 0.8);\n  opacity: 0.7;\n  pointer-events: none;\n  \n  & > .MuiSvgIcon-root {\n    font-size: 3rem;\n    animation: pulse 2s infinite;\n  }\n  \n  @keyframes pulse {\n    0% {\n      opacity: 0.7;\n      transform: scale(1);\n    }\n    50% {\n      opacity: 1;\n      transform: scale(1.1);\n    }\n    100% {\n      opacity: 0.7;\n      transform: scale(1);\n    }\n  }\n`;\n\nexport default React.memo(ColFlyThrough);\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { \n  Box, Card, CardContent, Typography, Grid, Divider, \n  Button, Chip, CircularProgress, Paper, Tabs, Tab,\n  useMediaQuery, useTheme, Container, Badge, Tooltip\n} from '@mui/material';\nimport { \n  Terrain as TerrainIcon, \n  Visibility as VisibilityIcon,\n  NavigationRounded as NavigationIcon,\n  LocationOn as LocationIcon,\n  Hotel as HotelIcon,\n  ShowChart as LineChartIcon,\n  ThreeDRotation as ThreeDIcon,\n  AccessTime as AccessTimeIcon,\n  Flight as FlightIcon,\n  VrpanoOutlined as FlyThroughIcon\n} from '@mui/icons-material';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, ResponsiveContainer } from 'recharts';\nimport ColVisualization3D from './ColVisualization3D';\nimport ColFlyThrough from './ColFlyThrough';\nimport ColService from '../../services/colService';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport 'react-lazy-load-image-component/src/effects/blur.css';\n\n// Composant d'information et visualisation de cols cyclistes\nconst ColDetail = ({ colId }) => {\n  const [col, setCol] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [elevationData, setElevationData] = useState([]);\n  const [terrain3DData, setTerrain3DData] = useState(null);\n  const [currentTab, setCurrentTab] = useState(0);\n  \n  // Theme et Media Queries pour le responsive\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const isTablet = useMediaQuery(theme.breakpoints.between('sm', 'md'));\n\n  // Charger les données du col\n  useEffect(() => {\n    const fetchColData = async () => {\n      try {\n        setLoading(true);\n        \n        // Récupérer les détails du col\n        const colData = await ColService.getColById(colId);\n        setCol(colData);\n        \n        // Récupérer les données d'élévation pour le graphique\n        const elevData = await ColService.getColElevationData(colId);\n        setElevationData(elevData);\n        \n        // Récupérer les données de terrain pour la visualisation 3D\n        const terrainData = await ColService.getCol3DTerrainData(colId);\n        setTerrain3DData(terrainData);\n        \n        setLoading(false);\n      } catch (err) {\n        console.error('Erreur lors du chargement des données du col:', err);\n        setError('Impossible de charger les données du col. Veuillez réessayer plus tard.');\n        setLoading(false);\n      }\n    };\n    \n    if (colId) {\n      fetchColData();\n    }\n  }, [colId]);\n\n  // Gérer le changement d'onglet - optimisé avec useCallback\n  const handleChangeTab = useCallback((event, newValue) => {\n    setCurrentTab(newValue);\n  }, []);\n\n  // Afficher un indicateur de chargement\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight={isMobile ? \"200px\" : \"400px\"}>\n        <CircularProgress aria-label=\"Chargement des données du col\" />\n      </Box>\n    );\n  }\n\n  // Afficher un message d'erreur\n  if (error) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight={isMobile ? \"200px\" : \"400px\"}>\n        <Typography color=\"error\" role=\"alert\">{error}</Typography>\n      </Box>\n    );\n  }\n\n  // Si aucun col n'est sélectionné ou trouvé\n  if (!col) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight={isMobile ? \"200px\" : \"400px\"}>\n        <Typography variant=\"subtitle1\">\n          Sélectionnez un col pour voir ses détails\n        </Typography>\n      </Box>\n    );\n  }\n\n  // Rendu du composant\n  return (\n    <Card elevation={3}>\n      <CardContent sx={{ p: isMobile ? 1.5 : 3 }}>\n        {/* En-tête avec nom et difficulté */}\n        <Box \n          mb={2} \n          display=\"flex\" \n          flexDirection={isMobile ? \"column\" : \"row\"} \n          justifyContent={isMobile ? \"center\" : \"space-between\"} \n          alignItems={isMobile ? \"center\" : \"flex-start\"}\n          gap={isMobile ? 1 : 0}\n        >\n          <Typography \n            variant={isMobile ? \"h5\" : \"h4\"} \n            component=\"h1\"\n            align={isMobile ? \"center\" : \"left\"}\n          >\n            {col.name}\n          </Typography>\n          <Chip \n            icon={<TerrainIcon />} \n            label={col.difficulty} \n            color={\n              col.difficulty === 'Difficile' ? 'error' : \n              col.difficulty === 'Modéré' ? 'warning' : 'success'\n            }\n            size={isMobile ? \"small\" : \"medium\"}\n            aria-label={`Difficulté: ${col.difficulty}`}\n          />\n        </Box>\n        \n        {/* Image du col avec lazy loading */}\n        <Box mb={2}>\n          <LazyLoadImage\n            src={col.imageUrl} \n            alt={`Vue du col ${col.name}`}\n            effect=\"blur\"\n            style={{ \n              width: '100%', \n              height: isMobile ? '180px' : '250px', \n              objectFit: 'cover', \n              borderRadius: '8px' \n            }}\n            wrapperClassName=\"lazy-image-wrapper\"\n          />\n        </Box>\n        \n        <Typography \n          variant=\"body1\" \n          paragraph \n          sx={{ \n            mb: 3,\n            fontSize: isMobile ? '0.9rem' : '1rem',\n            textAlign: isMobile ? 'justify' : 'left'\n          }}\n        >\n          {col.description}\n        </Typography>\n        \n        {/* Statistiques clés */}\n        <Grid container spacing={isMobile ? 1 : 3} sx={{ mb: 3 }}>\n          <Grid item xs={6} sm={6} md={4}>\n            <Paper sx={{ p: isMobile ? 1 : 2, height: '100%' }}>\n              <Box display=\"flex\" alignItems=\"center\" mb={0.5}>\n                <TerrainIcon color=\"primary\" sx={{ mr: 0.5, fontSize: isMobile ? '1rem' : '1.25rem' }} />\n                <Typography variant={isMobile ? \"body2\" : \"h6\"}>Altitude</Typography>\n              </Box>\n              <Typography \n                variant={isMobile ? \"h6\" : \"h4\"} \n                component=\"p\" \n                align=\"center\"\n                sx={{ mt: isMobile ? 0.5 : 1 }}\n              >\n                {col.altitude} m\n              </Typography>\n            </Paper>\n          </Grid>\n          <Grid item xs={6} sm={6} md={4}>\n            <Paper sx={{ p: isMobile ? 1 : 2, height: '100%' }}>\n              <Box display=\"flex\" alignItems=\"center\" mb={0.5}>\n                <AccessTimeIcon color=\"primary\" sx={{ mr: 0.5, fontSize: isMobile ? '1rem' : '1.25rem' }} />\n                <Typography variant={isMobile ? \"body2\" : \"h6\"}>Longueur</Typography>\n              </Box>\n              <Typography \n                variant={isMobile ? \"h6\" : \"h4\"} \n                component=\"p\" \n                align=\"center\"\n                sx={{ mt: isMobile ? 0.5 : 1 }}\n              >\n                {col.length} km\n              </Typography>\n            </Paper>\n          </Grid>\n          <Grid item xs={12} sm={12} md={4}>\n            <Paper sx={{ p: isMobile ? 1 : 2, height: '100%' }}>\n              <Box display=\"flex\" alignItems=\"center\" mb={0.5}>\n                <NavigationIcon color=\"primary\" sx={{ mr: 0.5, fontSize: isMobile ? '1rem' : '1.25rem' }} />\n                <Typography variant={isMobile ? \"body2\" : \"h6\"}>Pente moyenne</Typography>\n              </Box>\n              <Typography \n                variant={isMobile ? \"h6\" : \"h4\"} \n                component=\"p\" \n                align=\"center\"\n                sx={{ mt: isMobile ? 0.5 : 1 }}\n              >\n                {col.avgGradient}%\n              </Typography>\n            </Paper>\n          </Grid>\n        </Grid>\n        \n        <Divider sx={{ mb: 2 }} />\n        \n        {/* Onglets */}\n        <Box sx={{ mb: 2 }}>\n          <Tabs \n            value={currentTab} \n            onChange={handleChangeTab}\n            variant=\"scrollable\"\n            scrollButtons={isMobile ? \"auto\" : \"desktop\"}\n            allowScrollButtonsMobile\n            aria-label=\"Onglets de visualisation du col\"\n          >\n            <Tab \n              label={isMobile ? \"Profil\" : \"Profil d'élévation\"} \n              icon={<LineChartIcon />} \n              id={`tab-chart-${colId}`}\n              aria-controls={`tabpanel-chart-${colId}`}\n              iconPosition=\"start\"\n            />\n            <Tab \n              label={isMobile ? \"3D\" : \"Visualisation 3D\"} \n              icon={<ThreeDIcon />} \n              id={`tab-3d-${colId}`}\n              aria-controls={`tabpanel-3d-${colId}`}\n              iconPosition=\"start\"\n            />\n            <Tab \n              label={isMobile ? \"Fly\" : \"Fly-through\"} \n              icon={<FlyThroughIcon />} \n              id={`tab-fly-${colId}`}\n              aria-controls={`tabpanel-fly-${colId}`}\n              iconPosition=\"start\"\n            />\n          </Tabs>\n        </Box>\n        \n        {/* Contenu des onglets */}\n        <Box sx={{ mb: 3 }}>\n          {/* Onglet Profil d'élévation */}\n          <Box \n            role=\"tabpanel\" \n            id={`tabpanel-chart-${colId}`}\n            hidden={currentTab !== 0} \n            sx={{ \n              height: isMobile ? '250px' : isTablet ? '300px' : '400px', \n              mb: 2 \n            }}\n            aria-labelledby={`tab-chart-${colId}`}\n          >\n            {currentTab === 0 && (\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart\n                  data={elevationData}\n                  margin={{ \n                    top: 10, \n                    right: isMobile ? 5 : 30, \n                    left: isMobile ? 5 : 20, \n                    bottom: 10 \n                  }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis \n                    dataKey=\"distance\" \n                    label={{ \n                      value: 'Distance (km)', \n                      position: 'insideBottomRight', \n                      offset: -10,\n                      fontSize: isMobile ? 10 : 12\n                    }} \n                    tick={{ fontSize: isMobile ? 10 : 12 }}\n                  />\n                  <YAxis \n                    label={{ \n                      value: 'Élévation (m)', \n                      angle: -90, \n                      position: 'insideLeft',\n                      fontSize: isMobile ? 10 : 12\n                    }} \n                    domain={['dataMin - 50', 'dataMax + 50']}\n                    tick={{ fontSize: isMobile ? 10 : 12 }}\n                  />\n                  <RechartsTooltip \n                    formatter={(value) => [`${value} m`, 'Élévation']} \n                    labelFormatter={(value) => `Distance: ${value} km`} \n                    contentStyle={{ fontSize: isMobile ? '0.75rem' : '0.875rem' }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"elevation\" \n                    stroke=\"#2196F3\" \n                    dot={false} \n                    strokeWidth={isMobile ? 1.5 : 2} \n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            )}\n          </Box>\n          \n          {/* Onglet Visualisation 3D - hauteur adaptative pour les appareils mobiles */}\n          <Box \n            role=\"tabpanel\" \n            id={`tabpanel-3d-${colId}`}\n            hidden={currentTab !== 1} \n            sx={{ \n              height: isMobile ? '300px' : isTablet ? '350px' : '450px', \n              mb: 2 \n            }}\n            aria-labelledby={`tab-3d-${colId}`}\n          >\n            {currentTab === 1 && terrain3DData && (\n              <ColVisualization3D \n                colId={colId}\n                colData={terrain3DData.coordinates}\n                pointsOfInterest={terrain3DData.pointsOfInterest}\n                isMobile={isMobile}\n              />\n            )}\n          </Box>\n\n          {/* Nouvel onglet: Fly-through */}\n          <Box \n            role=\"tabpanel\" \n            id={`tabpanel-fly-${colId}`}\n            hidden={currentTab !== 2} \n            sx={{ \n              height: isMobile ? '350px' : isTablet ? '400px' : '500px', \n              mb: 2 \n            }}\n            aria-labelledby={`tab-fly-${colId}`}\n          >\n            {currentTab === 2 && terrain3DData && (\n              <ColFlyThrough \n                colId={colId}\n                colData={terrain3DData.coordinates}\n                pointsOfInterest={terrain3DData.pointsOfInterest}\n                elevationData={elevationData}\n                isMobile={isMobile}\n              />\n            )}\n          </Box>\n        </Box>\n        \n        {/* Points d'intérêt */}\n        <Typography \n          variant={isMobile ? \"h6\" : \"h5\"} \n          component=\"h2\" \n          sx={{ mb: isMobile ? 1 : 2 }}\n        >\n          Points d'intérêt\n        </Typography>\n        \n        <Grid container spacing={isMobile ? 1 : 2}>\n          {col.terrainData.pointsOfInterest.map((poi, index) => (\n            <Grid item xs={12} sm={6} md={4} key={index}>\n              <Paper \n                sx={{ \n                  p: isMobile ? 1.5 : 2,\n                  transition: 'transform 0.2s ease-in-out',\n                  '&:hover': {\n                    transform: 'translateY(-4px)',\n                    boxShadow: 3\n                  }\n                }}\n              >\n                <Box display=\"flex\" alignItems=\"center\" mb={1}>\n                  {poi.type === 'viewpoint' && (\n                    <VisibilityIcon \n                      color=\"primary\" \n                      sx={{ mr: 1, fontSize: isMobile ? '1.1rem' : '1.25rem' }} \n                      aria-hidden=\"true\"\n                    />\n                  )}\n                  {poi.type === 'rest' && (\n                    <HotelIcon \n                      color=\"primary\" \n                      sx={{ mr: 1, fontSize: isMobile ? '1.1rem' : '1.25rem' }} \n                      aria-hidden=\"true\"\n                    />\n                  )}\n                  {poi.type === 'summit' && (\n                    <TerrainIcon \n                      color=\"primary\" \n                      sx={{ mr: 1, fontSize: isMobile ? '1.1rem' : '1.25rem' }} \n                      aria-hidden=\"true\"\n                    />\n                  )}\n                  <Typography \n                    variant={isMobile ? \"subtitle1\" : \"h6\"}\n                    sx={{ fontSize: isMobile ? '0.9rem' : 'inherit' }}\n                  >\n                    {poi.name}\n                  </Typography>\n                </Box>\n                <Typography \n                  variant=\"body2\" \n                  color=\"textSecondary\"\n                  sx={{ fontSize: isMobile ? '0.8rem' : 'inherit' }}\n                >\n                  À {poi.distance} km du départ\n                </Typography>\n              </Paper>\n            </Grid>\n          ))}\n        </Grid>\n        \n        {/* Boutons d'action */}\n        <Box \n          mt={3} \n          display=\"flex\" \n          flexDirection={isMobile ? \"column\" : \"row\"} \n          justifyContent={isMobile ? \"center\" : \"space-between\"}\n          gap={isMobile ? 1 : 0}\n        >\n          <Button \n            variant=\"outlined\" \n            color=\"primary\"\n            fullWidth={isMobile}\n            aria-label=\"Voir le col sur la carte\"\n          >\n            Voir sur la carte\n          </Button>\n          <Button \n            variant=\"contained\" \n            color=\"primary\"\n            fullWidth={isMobile}\n            startIcon={<FlyThroughIcon />}\n            onClick={() => setCurrentTab(2)}\n            sx={{ mt: isMobile ? 1 : 0, mx: isMobile ? 0 : 1 }}\n            aria-label=\"Explorer le col en Fly-through\"\n          >\n            Explorer en Fly-through\n          </Button>\n          <Button \n            variant=\"contained\" \n            color=\"primary\"\n            fullWidth={isMobile}\n            sx={{ mt: isMobile ? 1 : 0 }}\n            aria-label=\"Ajouter le col à mon itinéraire\"\n          >\n            Ajouter à mon itinéraire\n          </Button>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default React.memo(ColDetail);\n"],"names":["ColRoad","_ref","data","color","meshRef","useRef","points","map","point","THREE","x","y","z","curve","tubeGeometry","_jsxs","ref","children","_jsx","object","attach","roughness","Terrain","_ref2","maxX","Math","max","p","minY","min","rotation","PI","position","args","wireframe","PointOfInterest","_ref3","name","type","hovered","setHovered","useState","onPointerOver","onPointerOut","Text","fontSize","maxWidth","textAlign","anchorX","anchorY","outlineWidth","outlineColor","SceneSetup","_ref4","camera","useThree","maxY","useEffect","set","lookAt","_Fragment","OrbitControls","enablePan","enableZoom","enableRotate","target","intensity","CameraAnimation","_ref5","isPlaying","progress","setProgress","useFrame","prev","getPoint","lookAtPos","_ref6","colId","colData","pointsOfInterest","loading","setLoading","error","setError","terrainData","setTerrainData","isAnimating","setIsAnimating","Box","display","justifyContent","alignItems","height","CircularProgress","Typography","Paper","elevation","sx","width","overflow","variant","top","left","zIndex","backgroundColor","padding","borderRadius","cursor","onClick","Canvas","shadows","poi","index","distanceRatio","distance","nearestIndex","floor","length","USE_MOCK_DATA","process","Array","from","_","i","t","sin","getAllCols","async","options","arguments","undefined","params","URLSearchParams","region","append","difficulty","minElevation","maxElevation","surface","forEach","toLowerCase","technicalDifficulty","seasons","season","api","get","toString","console","getColById","getColElevationData","getCol3DTerrainData","axios","create","baseURL","headers","timeout","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","method","_t","Date","now","Promise","reject","response","newToken","setItem","status","_error$response$data","_error$response$data$","_error$response$data2","_error$response$data3","message","includes","removeItem","window","location","pathname","href","code","severity","details","ColFlyThrough","elevationData","isMobile","containerRef","sceneRef","cameraRef","rendererRef","controlsRef","pathRef","flyThroughRef","statsRef","setIsPlaying","speed","setSpeed","isMuted","setIsMuted","isFullscreen","setIsFullscreen","currentElevation","setCurrentElevation","currentGradient","setCurrentGradient","currentDistance","setCurrentDistance","showControls","setShowControls","cameraMode","setCameraMode","totalDistance","setTotalDistance","current","container","clientWidth","clientHeight","scene","background","fog","renderer","antialias","setSize","setPixelRatio","devicePixelRatio","shadowMap","enabled","appendChild","domElement","controls","enableDamping","dampingFactor","maxPolarAngle","ambientLight","add","directionalLight","castShadow","shadow","mapSize","path","createTerrain","terrainGroup","createPath","distanceTo","pathGeometry","pathMaterial","metalness","pathMesh","receiveShadow","terrainGeometry","vertices","attributes","array","minDistance","Infinity","pathPoint","smoothFactor","computeVertexNormals","rotateX","terrainMaterial","vertexColors","colors","setRGB","push","r","g","b","colorAttribute","setAttribute","terrainMesh","createTerrainMesh","markerGeometry","markerColor","markerMaterial","emissive","emissiveIntensity","marker","copy","canvas","document","createElement","context","getContext","fillStyle","fillRect","font","fillText","texture","labelMaterial","label","scale","addPointsOfInterest","flyThroughAnimation","animationId","start","this","animate","pause","cancelAnimationFrame","reset","updateCamera","value","tangent","getTangent","lookAtPoint","angle","radius","cos","gradient","progressIncrement","requestAnimationFrame","handleResize","aspect","updateProjectionMatrix","addEventListener","update","render","removeEventListener","contains","removeChild","dispose","handleCameraModeChange","mode","handleFullscreenChange","fullscreenElement","flexDirection","size","mt","role","boxShadow","onMouseMove","onMouseLeave","setTimeout","onTouchStart","onTouchEnd","StatsOverlay","show","toFixed","ControlsOverlay","ControlButtonsGroup","Tooltip","title","IconButton","handlePlayPause","Pause","PlayArrow","handleReset","ReplayOutlined","mx","Slider","onChange","handleProgressChange","event","newValue","step","handleMuteToggle","VolumeOff","VolumeUp","handleFullscreenToggle","exitFullscreen","requestFullscreen","FullscreenExit","Fullscreen","AdvancedControlsGroup","mr","handleSpeedChange","marks","FlightTakeoff","CameraAlt","SlowMotionVideo","TouchIndicator","TouchApp","styled","props","React","ColDetail","col","setCol","setElevationData","terrain3DData","setTerrain3DData","currentTab","setCurrentTab","theme","useTheme","useMediaQuery","breakpoints","down","isTablet","between","ColService","elevData","err","fetchColData","handleChangeTab","useCallback","minHeight","Card","CardContent","mb","gap","component","align","Chip","icon","TerrainIcon","LazyLoadImage","src","imageUrl","alt","effect","style","objectFit","wrapperClassName","paragraph","description","Grid","spacing","item","xs","sm","md","altitude","AccessTimeIcon","NavigationIcon","avgGradient","Divider","Tabs","scrollButtons","allowScrollButtonsMobile","Tab","LineChartIcon","id","iconPosition","ThreeDIcon","FlyThroughIcon","hidden","ResponsiveContainer","LineChart","margin","right","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","offset","tick","YAxis","domain","RechartsTooltip","formatter","labelFormatter","contentStyle","Line","stroke","dot","strokeWidth","ColVisualization3D","coordinates","transition","transform","VisibilityIcon","HotelIcon","Button","fullWidth","startIcon"],"sourceRoot":""}