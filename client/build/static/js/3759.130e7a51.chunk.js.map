{"version":3,"file":"static/js/3759.130e7a51.chunk.js","mappings":"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","sources":["components/nutrition/MealPlanner.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Grid,\n  Paper,\n  Typography,\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardActions,\n  Divider,\n  TextField,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Chip,\n  IconButton,\n  CircularProgress,\n  Alert,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Stack\n} from '@mui/material';\nimport {\n  Add,\n  Delete,\n  Edit,\n  Favorite,\n  FavoriteBorder,\n  DirectionsBike,\n  Restaurant,\n  LocalDining,\n  Coffee,\n  FilterList,\n  CheckCircle,\n  Print,\n  Share\n} from '@mui/icons-material';\nimport nutritionService from '../../services/nutritionService';\nimport { useAuth } from '../../contexts/AuthContext';\n\n/**\n * Composant de planification des repas pour les cyclistes\n * Permet de créer, modifier et gérer des plans de repas adaptés aux besoins nutritionnels\n */\nconst MealPlanner = ({ nutritionData, userId }) => {\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [plannerData, setPlannerData] = useState(null);\n  const [selectedPlan, setSelectedPlan] = useState(null);\n  const [planType, setPlanType] = useState('ride-day');\n  const [openMealDialog, setOpenMealDialog] = useState(false);\n  const [currentMeal, setCurrentMeal] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [autoGenerateDialog, setAutoGenerateDialog] = useState(false);\n  const [generationOptions, setGenerationOptions] = useState({\n    goalType: 'performance',\n    mealCount: 5,\n    allergies: [],\n    preferences: 'balanced'\n  });\n  const [mealTypes] = useState([\n    { id: 'breakfast', label: 'Petit-déjeuner', icon: <Coffee /> },\n    { id: 'pre-ride', label: 'Avant-effort', icon: <DirectionsBike /> },\n    { id: 'during-ride', label: 'Pendant l\\'effort', icon: <DirectionsBike /> },\n    { id: 'post-ride', label: 'Après-effort', icon: <DirectionsBike /> },\n    { id: 'lunch', label: 'Déjeuner', icon: <Restaurant /> },\n    { id: 'dinner', label: 'Dîner', icon: <LocalDining /> },\n    { id: 'snack', label: 'Collation', icon: <Restaurant /> }\n  ]);\n\n  // Utiliser les données passées en props ou les récupérer si non disponibles\n  useEffect(() => {\n    if (nutritionData) {\n      setPlannerData(nutritionData);\n    } else {\n      fetchMealPlans();\n    }\n  }, [nutritionData, userId]);\n\n  // Récupérer les plans de repas\n  const fetchMealPlans = async () => {\n    if (!userId) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await nutritionService.getUserNutritionData(userId);\n      \n      if (!data || !data.mealPlans) {\n        throw new Error('Données de plans de repas invalides');\n      }\n      \n      setPlannerData(data);\n      \n      // Sélectionner le premier plan par défaut s'il existe et correspond au type sélectionné\n      const filteredPlans = data.mealPlans.filter(plan => plan.type === planType);\n      if (filteredPlans.length > 0) {\n        setSelectedPlan(filteredPlans[0]);\n      }\n    } catch (err) {\n      console.error('Erreur lors de la récupération des plans de repas:', err);\n      setError('Impossible de charger les plans de repas.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Filtrer les plans par type\n  const filteredPlans = plannerData?.mealPlans?.filter(plan => plan.type === planType) || [];\n\n  // Changer le type de plan sélectionné\n  const handlePlanTypeChange = (type) => {\n    setPlanType(type);\n    setSelectedPlan(null);\n  };\n\n  // Sélectionner un plan\n  const handleSelectPlan = (plan) => {\n    setSelectedPlan(plan);\n  };\n\n  // Ouvrir le dialogue pour ajouter/modifier un repas\n  const handleOpenMealDialog = (meal = null) => {\n    setCurrentMeal(meal);\n    setOpenMealDialog(true);\n  };\n\n  // Fermer le dialogue de repas\n  const handleCloseMealDialog = () => {\n    setOpenMealDialog(false);\n    setCurrentMeal(null);\n  };\n\n  // Calculer les totaux nutritionnels pour un repas\n  const calculateMealTotals = (items) => {\n    if (!items || !items.length) return { calories: 0, carbs: 0, protein: 0, fat: 0 };\n    \n    return items.reduce((totals, item) => {\n      return {\n        calories: totals.calories + (item.calories || 0),\n        carbs: totals.carbs + (item.carbs || 0),\n        protein: totals.protein + (item.protein || 0),\n        fat: totals.fat + (item.fat || 0)\n      };\n    }, { calories: 0, carbs: 0, protein: 0, fat: 0 });\n  };\n\n  // Calculer les totaux nutritionnels pour un plan\n  const calculatePlanTotals = (meals) => {\n    if (!meals || !meals.length) return { calories: 0, carbs: 0, protein: 0, fat: 0 };\n    \n    return meals.reduce((totals, meal) => {\n      const mealTotals = calculateMealTotals(meal.items);\n      return {\n        calories: totals.calories + mealTotals.calories,\n        carbs: totals.carbs + mealTotals.carbs,\n        protein: totals.protein + mealTotals.protein,\n        fat: totals.fat + mealTotals.fat\n      };\n    }, { calories: 0, carbs: 0, protein: 0, fat: 0 });\n  };\n\n  // Ouvrir le dialogue pour la génération automatique de plan\n  const handleOpenAutoGenerateDialog = () => {\n    setAutoGenerateDialog(true);\n  };\n\n  // Fermer le dialogue de génération automatique\n  const handleCloseAutoGenerateDialog = () => {\n    setAutoGenerateDialog(false);\n  };\n\n  // Mettre à jour les options de génération\n  const handleGenerationOptionChange = (option, value) => {\n    setGenerationOptions(prev => ({\n      ...prev,\n      [option]: value\n    }));\n  };\n\n  // Générer automatiquement un plan de repas basé sur les objectifs\n  const handleGenerateMealPlan = async () => {\n    try {\n      setLoading(true);\n      \n      // Récupérer les données nutritionnelles de base de l'utilisateur si nécessaire\n      let userData = plannerData;\n      if (!userData || !userData.metrics || !userData.goals) {\n        userData = await nutritionService.getUserNutritionData(userId);\n      }\n      \n      // Vérifier que les données nécessaires sont disponibles\n      if (!userData || !userData.metrics || !userData.goals) {\n        throw new Error('Données du profil incomplètes pour générer un plan');\n      }\n      \n      // Calculer les besoins nutritionnels\n      const nutritionNeeds = await nutritionService.calculateNutrition({\n        weight: userData.metrics.weight,\n        height: userData.metrics.height,\n        age: userData.metrics.age || 30,\n        gender: userData.metrics.gender || 'male',\n        activityLevel: userData.metrics.activityLevel || 'moderate',\n        goals: generationOptions.goalType || userData.goals.type\n      });\n      \n      // Générer un nom de plan unique\n      const planName = `Plan ${generationOptions.goalType} (${new Date().toLocaleDateString()})`;\n      \n      // Créer la structure de plan de base\n      const newPlan = {\n        id: `plan-${Date.now()}`,\n        name: planName,\n        type: planType,\n        totalCalories: nutritionNeeds.calories,\n        macronutrients: nutritionNeeds.macronutrients,\n        meals: []\n      };\n      \n      // Répartition des calories par repas selon le nombre de repas souhaité\n      const mealCalorieDistribution = {\n        breakfast: 0.25,\n        lunch: 0.3,\n        dinner: 0.25,\n        snack: 0.1,\n        'pre-ride': 0.15,\n        'during-ride': 0.1,\n        'post-ride': 0.15\n      };\n      \n      // Adapter la distribution selon le type de jour\n      if (planType === 'ride-day') {\n        // Jour d'entraînement: inclure repas pré/pendant/post-effort\n        const meals = [];\n        \n        // Petit-déjeuner\n        meals.push({\n          id: `meal-${Date.now()}-1`,\n          type: 'breakfast',\n          name: 'Petit-déjeuner',\n          time: '07:00',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.breakfast),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.breakfast),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.breakfast),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.breakfast),\n          items: generateMealItems('breakfast', Math.round(nutritionNeeds.calories * mealCalorieDistribution.breakfast), generationOptions)\n        });\n        \n        // Collation pré-entraînement\n        meals.push({\n          id: `meal-${Date.now()}-2`,\n          type: 'pre-ride',\n          name: 'Collation pré-entraînement',\n          time: '09:30',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution['pre-ride']),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution['pre-ride']),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution['pre-ride']),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution['pre-ride']),\n          items: generateMealItems('pre-ride', Math.round(nutritionNeeds.calories * mealCalorieDistribution['pre-ride']), generationOptions)\n        });\n        \n        // Nutrition pendant l'effort\n        meals.push({\n          id: `meal-${Date.now()}-3`,\n          type: 'during-ride',\n          name: 'Nutrition pendant l\\'effort',\n          time: '11:00',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution['during-ride']),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution['during-ride']),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution['during-ride']),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution['during-ride']),\n          items: generateMealItems('during-ride', Math.round(nutritionNeeds.calories * mealCalorieDistribution['during-ride']), generationOptions)\n        });\n        \n        // Récupération post-entraînement\n        meals.push({\n          id: `meal-${Date.now()}-4`,\n          type: 'post-ride',\n          name: 'Récupération post-entraînement',\n          time: '13:00',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution['post-ride']),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution['post-ride']),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution['post-ride']),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution['post-ride']),\n          items: generateMealItems('post-ride', Math.round(nutritionNeeds.calories * mealCalorieDistribution['post-ride']), generationOptions)\n        });\n        \n        // Déjeuner\n        meals.push({\n          id: `meal-${Date.now()}-5`,\n          type: 'lunch',\n          name: 'Déjeuner',\n          time: '14:00',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.lunch),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.lunch),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.lunch),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.lunch),\n          items: generateMealItems('lunch', Math.round(nutritionNeeds.calories * mealCalorieDistribution.lunch), generationOptions)\n        });\n        \n        // Dîner\n        meals.push({\n          id: `meal-${Date.now()}-6`,\n          type: 'dinner',\n          name: 'Dîner',\n          time: '19:30',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.dinner),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.dinner),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.dinner),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.dinner),\n          items: generateMealItems('dinner', Math.round(nutritionNeeds.calories * mealCalorieDistribution.dinner), generationOptions)\n        });\n        \n        newPlan.meals = meals;\n      } else {\n        // Jour de récupération: repas standards sans collations spécifiques à l'effort\n        const meals = [];\n        \n        // Petit-déjeuner\n        meals.push({\n          id: `meal-${Date.now()}-1`,\n          type: 'breakfast',\n          name: 'Petit-déjeuner',\n          time: '08:00',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.breakfast),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.breakfast),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.breakfast),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.breakfast),\n          items: generateMealItems('breakfast', Math.round(nutritionNeeds.calories * mealCalorieDistribution.breakfast), generationOptions)\n        });\n        \n        // Collation matinale\n        meals.push({\n          id: `meal-${Date.now()}-2`,\n          type: 'snack',\n          name: 'Collation matinale',\n          time: '10:30',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.snack),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.snack),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.snack),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.snack),\n          items: generateMealItems('snack', Math.round(nutritionNeeds.calories * mealCalorieDistribution.snack), generationOptions)\n        });\n        \n        // Déjeuner\n        meals.push({\n          id: `meal-${Date.now()}-3`,\n          type: 'lunch',\n          name: 'Déjeuner',\n          time: '13:00',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.lunch),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.lunch),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.lunch),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.lunch),\n          items: generateMealItems('lunch', Math.round(nutritionNeeds.calories * mealCalorieDistribution.lunch), generationOptions)\n        });\n        \n        // Collation après-midi\n        meals.push({\n          id: `meal-${Date.now()}-4`,\n          type: 'snack',\n          name: 'Collation après-midi',\n          time: '16:30',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.snack),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.snack),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.snack),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.snack),\n          items: generateMealItems('snack', Math.round(nutritionNeeds.calories * mealCalorieDistribution.snack), generationOptions)\n        });\n        \n        // Dîner\n        meals.push({\n          id: `meal-${Date.now()}-5`,\n          type: 'dinner',\n          name: 'Dîner',\n          time: '19:30',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.dinner),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.dinner),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.dinner),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.dinner),\n          items: generateMealItems('dinner', Math.round(nutritionNeeds.calories * mealCalorieDistribution.dinner), generationOptions)\n        });\n        \n        newPlan.meals = meals;\n      }\n      \n      // Mettre à jour les données avec le nouveau plan\n      const updatedData = {\n        ...plannerData,\n        mealPlans: [...(plannerData.mealPlans || []), newPlan]\n      };\n      \n      setPlannerData(updatedData);\n      setSelectedPlan(newPlan);\n      setAutoGenerateDialog(false);\n      \n      // Simuler la sauvegarde en backend (à implémenter avec un vrai service)\n      console.log('Nouveau plan de repas généré:', newPlan);\n      \n    } catch (err) {\n      console.error('Erreur lors de la génération du plan de repas:', err);\n      setError('Impossible de générer le plan de repas. Vérifiez que votre profil est complet.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Générer des éléments de repas en fonction du type et de l'objectif calorique\n  const generateMealItems = (mealType, targetCalories, options) => {\n    // Base de données simplifiée d'aliments par type de repas\n    const foodDatabase = {\n      breakfast: [\n        { name: 'Flocons d\\'avoine', quantity: '60g', calories: 240, carbs: 40, protein: 8, fat: 5 },\n        { name: 'Pain complet', quantity: '2 tranches', calories: 180, carbs: 30, protein: 8, fat: 2 },\n        { name: 'Œufs brouillés', quantity: '2 œufs', calories: 160, carbs: 2, protein: 14, fat: 10 },\n        { name: 'Yaourt grec', quantity: '200g', calories: 150, carbs: 6, protein: 15, fat: 8 },\n        { name: 'Banane', quantity: '1 moyenne', calories: 100, carbs: 25, protein: 1, fat: 0 },\n        { name: 'Lait d\\'amande', quantity: '250ml', calories: 80, carbs: 3, protein: 1, fat: 5 }\n      ],\n      'pre-ride': [\n        { name: 'Banane', quantity: '1 moyenne', calories: 100, carbs: 25, protein: 1, fat: 0 },\n        { name: 'Barre de céréales', quantity: '1 barre', calories: 150, carbs: 25, protein: 5, fat: 3 },\n        { name: 'Pain aux raisins', quantity: '2 tranches', calories: 180, carbs: 35, protein: 6, fat: 2 },\n        { name: 'Compote de pommes', quantity: '1 pot', calories: 80, carbs: 20, protein: 0, fat: 0 }\n      ],\n      'during-ride': [\n        { name: 'Gel énergétique', quantity: '1 sachet', calories: 100, carbs: 25, protein: 0, fat: 0 },\n        { name: 'Boisson isotonique', quantity: '500ml', calories: 120, carbs: 30, protein: 0, fat: 0 },\n        { name: 'Barre énergétique', quantity: '1 barre', calories: 180, carbs: 40, protein: 2, fat: 1 },\n        { name: 'Banane', quantity: '1 moyenne', calories: 100, carbs: 25, protein: 1, fat: 0 },\n        { name: 'Abricots secs', quantity: '30g', calories: 80, carbs: 18, protein: 1, fat: 0 }\n      ],\n      'post-ride': [\n        { name: 'Shake protéiné', quantity: '1 portion', calories: 180, carbs: 15, protein: 25, fat: 2 },\n        { name: 'Yaourt grec avec miel', quantity: '200g + 15g', calories: 200, carbs: 25, protein: 15, fat: 5 },\n        { name: 'Sandwich jambon fromage', quantity: '1 petit', calories: 300, carbs: 30, protein: 20, fat: 10 },\n        { name: 'Lait chocolaté', quantity: '250ml', calories: 180, carbs: 26, protein: 8, fat: 5 }\n      ],\n      lunch: [\n        { name: 'Pâtes au poulet et légumes', quantity: '300g', calories: 450, carbs: 60, protein: 30, fat: 10 },\n        { name: 'Salade de quinoa au saumon', quantity: '250g', calories: 400, carbs: 40, protein: 25, fat: 15 },\n        { name: 'Bowl de riz, légumineuses et légumes', quantity: '350g', calories: 500, carbs: 70, protein: 20, fat: 12 },\n        { name: 'Wrap au poulet et crudités', quantity: '1 grand', calories: 350, carbs: 40, protein: 25, fat: 10 }\n      ],\n      dinner: [\n        { name: 'Poisson et légumes vapeur', quantity: '300g', calories: 350, carbs: 20, protein: 30, fat: 15 },\n        { name: 'Poulet aux légumes et quinoa', quantity: '350g', calories: 450, carbs: 40, protein: 35, fat: 12 },\n        { name: 'Omelette aux légumes et pommes de terre', quantity: '300g', calories: 400, carbs: 30, protein: 25, fat: 20 },\n        { name: 'Soupe de légumes et croûtons', quantity: '400ml', calories: 250, carbs: 30, protein: 10, fat: 8 }\n      ],\n      snack: [\n        { name: 'Yaourt et fruits', quantity: '150g + 100g', calories: 150, carbs: 25, protein: 8, fat: 2 },\n        { name: 'Poignée de fruits secs et noix', quantity: '30g', calories: 180, carbs: 15, protein: 5, fat: 10 },\n        { name: 'Barre protéinée', quantity: '1 barre', calories: 200, carbs: 20, protein: 15, fat: 7 },\n        { name: 'Smoothie fruits et lait', quantity: '250ml', calories: 160, carbs: 30, protein: 5, fat: 2 }\n      ]\n    };\n    \n    // Adapter la sélection selon les préférences et objectifs\n    const availableFoods = foodDatabase[mealType] || [];\n    let remainingCalories = targetCalories;\n    const selectedItems = [];\n    \n    // Sélectionner des aliments jusqu'à atteindre l'objectif calorique\n    while (remainingCalories > 50 && availableFoods.length > 0) {\n      // Sélectionner aléatoirement un aliment\n      const randomIndex = Math.floor(Math.random() * availableFoods.length);\n      const selectedFood = { ...availableFoods[randomIndex] };\n      \n      // Ajuster la quantité si nécessaire pour ne pas dépasser l'objectif calorique\n      if (selectedFood.calories > remainingCalories) {\n        const ratio = remainingCalories / selectedFood.calories;\n        selectedFood.quantity = `${Math.round(parseInt(selectedFood.quantity) * ratio)}g`;\n        selectedFood.calories = Math.round(selectedFood.calories * ratio);\n        selectedFood.carbs = Math.round(selectedFood.carbs * ratio);\n        selectedFood.protein = Math.round(selectedFood.protein * ratio);\n        selectedFood.fat = Math.round(selectedFood.fat * ratio);\n      }\n      \n      // Ajouter l'aliment à la sélection\n      selectedItems.push({\n        id: `item-${Date.now()}-${selectedItems.length}`,\n        ...selectedFood\n      });\n      \n      remainingCalories -= selectedFood.calories;\n      \n      // Éviter de sélectionner à nouveau le même aliment\n      availableFoods.splice(randomIndex, 1);\n    }\n    \n    return selectedItems;\n  };\n\n  // Rendu de la liste des plans\n  const renderPlans = () => {\n    return (\n      <Grid container spacing={2} sx={{ mb: 4 }}>\n        {filteredPlans.map((plan) => (\n          <Grid item xs={12} sm={6} md={4} key={plan.id}>\n            <Card \n              variant={selectedPlan && selectedPlan.id === plan.id ? 'elevation' : 'outlined'} \n              elevation={selectedPlan && selectedPlan.id === plan.id ? 3 : 1}\n              sx={{ \n                cursor: 'pointer',\n                borderColor: selectedPlan && selectedPlan.id === plan.id ? 'primary.main' : 'divider'\n              }}\n              onClick={() => handleSelectPlan(plan)}\n            >\n              <CardContent>\n                <Typography variant=\"h6\" component=\"div\">{plan.name}</Typography>\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                  <DirectionsBike fontSize=\"small\" color=\"primary\" sx={{ mr: 1 }} />\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {plan.type === 'ride-day' \n                      ? 'Jour d\\'entraînement' \n                      : 'Jour de récupération'}\n                  </Typography>\n                </Box>\n                <Divider sx={{ my: 1 }} />\n                <Typography variant=\"body2\">\n                  {plan.meals?.length || 0} repas • {calculatePlanTotals(plan.meals).calories} kcal\n                </Typography>\n              </CardContent>\n              <CardActions>\n                <Button \n                  size=\"small\" \n                  startIcon={<Edit />}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    // Logique d'édition du plan\n                  }}\n                >\n                  Modifier\n                </Button>\n                <Button \n                  size=\"small\" \n                  startIcon={\n                    plan.favorite \n                      ? <Favorite color=\"error\" /> \n                      : <FavoriteBorder />\n                  }\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    // Logique pour marquer comme favori\n                  }}\n                >\n                  {plan.favorite ? 'Favori' : 'Ajouter aux favoris'}\n                </Button>\n              </CardActions>\n            </Card>\n          </Grid>\n        ))}\n        {/* Carte pour ajouter un nouveau plan */}\n        <Grid item xs={12} sm={6} md={4}>\n          <Card\n            variant=\"outlined\"\n            sx={{\n              height: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n              cursor: 'pointer',\n              borderStyle: 'dashed'\n            }}\n            onClick={() => {\n              // Logique pour ajouter un nouveau plan\n            }}\n          >\n            <CardContent sx={{ textAlign: 'center' }}>\n              <Add fontSize=\"large\" color=\"primary\" />\n              <Typography variant=\"body1\" sx={{ mt: 1 }}>\n                Créer un nouveau plan\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  // Rendu du détail d'un plan sélectionné\n  const renderPlanDetails = () => {\n    if (!selectedPlan) return null;\n\n    const planTotals = calculatePlanTotals(selectedPlan.meals);\n\n    return (\n      <Box>\n        <Paper elevation={0} sx={{ p: 2, mb: 3, bgcolor: 'background.default' }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h5\">{selectedPlan.name}</Typography>\n            <Box>\n              <IconButton size=\"small\" sx={{ mr: 1 }} title=\"Imprimer\">\n                <Print />\n              </IconButton>\n              <IconButton size=\"small\" sx={{ mr: 1 }} title=\"Partager\">\n                <Share />\n              </IconButton>\n            </Box>\n          </Box>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={8}>\n              <Typography variant=\"body2\" paragraph>\n                Ce plan est conçu pour les {selectedPlan.type === 'ride-day' \n                  ? 'jours d\\'entraînement avec une consommation adaptée avant, pendant et après l\\'effort.' \n                  : 'jours de récupération pour optimiser la régénération musculaire et le repos.'\n                }\n              </Typography>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <Stack direction=\"row\" spacing={2} justifyContent=\"flex-end\">\n                <Box textAlign=\"center\">\n                  <Typography variant=\"h6\">{planTotals.calories}</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">kcal</Typography>\n                </Box>\n                <Divider orientation=\"vertical\" flexItem />\n                <Box textAlign=\"center\">\n                  <Typography variant=\"h6\">{planTotals.carbs}g</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">Glucides</Typography>\n                </Box>\n                <Divider orientation=\"vertical\" flexItem />\n                <Box textAlign=\"center\">\n                  <Typography variant=\"h6\">{planTotals.protein}g</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">Protéines</Typography>\n                </Box>\n                <Divider orientation=\"vertical\" flexItem />\n                <Box textAlign=\"center\">\n                  <Typography variant=\"h6\">{planTotals.fat}g</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">Lipides</Typography>\n                </Box>\n              </Stack>\n            </Grid>\n          </Grid>\n        </Paper>\n\n        {/* Liste des repas */}\n        {selectedPlan.meals?.map((meal, index) => {\n          const mealType = mealTypes.find(type => type.id === meal.type) || { label: meal.type, icon: <Restaurant /> };\n          const mealTotals = calculateMealTotals(meal.items);\n          \n          return (\n            <Paper key={index} elevation={1} sx={{ p: 2, mb: 2 }}>\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  {mealType.icon}\n                  <Typography variant=\"h6\" sx={{ ml: 1 }}>{mealType.label}</Typography>\n                </Box>\n                <Box>\n                  <Button \n                    size=\"small\" \n                    startIcon={<Edit />}\n                    onClick={() => handleOpenMealDialog(meal)}\n                  >\n                    Modifier\n                  </Button>\n                </Box>\n              </Box>\n              \n              <TableContainer>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Aliment</TableCell>\n                      <TableCell>Quantité</TableCell>\n                      <TableCell align=\"right\">Calories</TableCell>\n                      <TableCell align=\"right\">G</TableCell>\n                      <TableCell align=\"right\">P</TableCell>\n                      <TableCell align=\"right\">L</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {meal.items?.map((item, itemIndex) => (\n                      <TableRow key={itemIndex}>\n                        <TableCell>{item.name}</TableCell>\n                        <TableCell>{item.quantity}</TableCell>\n                        <TableCell align=\"right\">{item.calories}</TableCell>\n                        <TableCell align=\"right\">{item.carbs}g</TableCell>\n                        <TableCell align=\"right\">{item.protein}g</TableCell>\n                        <TableCell align=\"right\">{item.fat}g</TableCell>\n                      </TableRow>\n                    ))}\n                    {/* Ligne des totaux */}\n                    <TableRow>\n                      <TableCell colSpan={2}><strong>Total</strong></TableCell>\n                      <TableCell align=\"right\"><strong>{mealTotals.calories}</strong></TableCell>\n                      <TableCell align=\"right\"><strong>{mealTotals.carbs}g</strong></TableCell>\n                      <TableCell align=\"right\"><strong>{mealTotals.protein}g</strong></TableCell>\n                      <TableCell align=\"right\"><strong>{mealTotals.fat}g</strong></TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Paper>\n          );\n        })}\n\n        {/* Bouton pour ajouter un repas */}\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>\n          <Button\n            variant=\"outlined\"\n            startIcon={<Add />}\n            onClick={() => handleOpenMealDialog()}\n          >\n            Ajouter un repas\n          </Button>\n        </Box>\n      </Box>\n    );\n  };\n\n  // Rendu du dialogue pour ajouter/modifier un repas\n  const renderMealDialog = () => {\n    return (\n      <Dialog open={openMealDialog} onClose={handleCloseMealDialog} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          {currentMeal ? 'Modifier le repas' : 'Ajouter un repas'}\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <FormControl fullWidth>\n                <InputLabel id=\"meal-type-label\">Type de repas</InputLabel>\n                <Select\n                  labelId=\"meal-type-label\"\n                  value={currentMeal?.type || ''}\n                  label=\"Type de repas\"\n                  // onChange={...}\n                >\n                  {mealTypes.map((type) => (\n                    <MenuItem value={type.id} key={type.id}>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        {type.icon}\n                        <Typography sx={{ ml: 1 }}>{type.label}</Typography>\n                      </Box>\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            \n            {/* Liste des aliments du repas */}\n            <Grid item xs={12}>\n              <Typography variant=\"subtitle1\" gutterBottom>Aliments</Typography>\n              {currentMeal?.items?.map((item, index) => (\n                <Paper key={index} variant=\"outlined\" sx={{ p: 1, mb: 1 }}>\n                  <Grid container spacing={2} alignItems=\"center\">\n                    <Grid item xs={5}>\n                      <Typography variant=\"body2\">{item.name}</Typography>\n                    </Grid>\n                    <Grid item xs={3}>\n                      <Typography variant=\"body2\">{item.quantity}</Typography>\n                    </Grid>\n                    <Grid item xs={3}>\n                      <Typography variant=\"body2\">{item.calories} kcal</Typography>\n                    </Grid>\n                    <Grid item xs={1}>\n                      <IconButton size=\"small\" color=\"error\">\n                        <Delete fontSize=\"small\" />\n                      </IconButton>\n                    </Grid>\n                  </Grid>\n                </Paper>\n              ))}\n              \n              {/* Formulaire d'ajout d'aliment */}\n              <Box sx={{ border: '1px dashed', borderColor: 'divider', p: 2, mt: 2 }}>\n                <Typography variant=\"subtitle2\" gutterBottom>Ajouter un aliment</Typography>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      label=\"Nom de l'aliment\"\n                      size=\"small\"\n                      fullWidth\n                      // value={...}\n                      // onChange={...}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      label=\"Quantité\"\n                      size=\"small\"\n                      fullWidth\n                      // value={...}\n                      // onChange={...}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={3}>\n                    <TextField\n                      label=\"Calories\"\n                      size=\"small\"\n                      fullWidth\n                      type=\"number\"\n                      // value={...}\n                      // onChange={...}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={3}>\n                    <TextField\n                      label=\"Glucides (g)\"\n                      size=\"small\"\n                      fullWidth\n                      type=\"number\"\n                      // value={...}\n                      // onChange={...}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={3}>\n                    <TextField\n                      label=\"Protéines (g)\"\n                      size=\"small\"\n                      fullWidth\n                      type=\"number\"\n                      // value={...}\n                      // onChange={...}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={3}>\n                    <TextField\n                      label=\"Lipides (g)\"\n                      size=\"small\"\n                      fullWidth\n                      type=\"number\"\n                      // value={...}\n                      // onChange={...}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Button variant=\"contained\" startIcon={<Add />}>\n                      Ajouter\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Box>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseMealDialog}>Annuler</Button>\n          <Button variant=\"contained\" onClick={handleCloseMealDialog}>\n            {currentMeal ? 'Enregistrer les modifications' : 'Ajouter le repas'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  };\n\n  // Rendu du dialogue de génération automatique\n  const renderAutoGenerateDialog = () => {\n    return (\n      <Dialog\n        open={autoGenerateDialog}\n        onClose={handleCloseAutoGenerateDialog}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Générer un plan de repas automatiquement</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={3} sx={{ mt: 1 }}>\n            <Grid item xs={12}>\n              <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                Configurez les options pour générer un plan de repas personnalisé qui correspond à vos objectifs et préférences.\n              </Typography>\n            </Grid>\n            \n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Objectif</InputLabel>\n                <Select\n                  value={generationOptions.goalType}\n                  onChange={(e) => handleGenerationOptionChange('goalType', e.target.value)}\n                  label=\"Objectif\"\n                >\n                  <MenuItem value=\"performance\">Performance</MenuItem>\n                  <MenuItem value=\"weight-loss\">Perte de poids</MenuItem>\n                  <MenuItem value=\"maintenance\">Maintenance</MenuItem>\n                  <MenuItem value=\"recovery\">Récupération</MenuItem>\n                </Select>\n                <FormHelperText>Sélectionnez votre objectif principal</FormHelperText>\n              </FormControl>\n            </Grid>\n            \n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Nombre de repas</InputLabel>\n                <Select\n                  value={generationOptions.mealCount}\n                  onChange={(e) => handleGenerationOptionChange('mealCount', e.target.value)}\n                  label=\"Nombre de repas\"\n                >\n                  <MenuItem value={3}>3 repas par jour</MenuItem>\n                  <MenuItem value={4}>4 repas par jour</MenuItem>\n                  <MenuItem value={5}>5 repas par jour</MenuItem>\n                  <MenuItem value={6}>6 repas par jour</MenuItem>\n                </Select>\n                <FormHelperText>Incluant repas principaux et collations</FormHelperText>\n              </FormControl>\n            </Grid>\n            \n            <Grid item xs={12}>\n              <FormControl fullWidth>\n                <InputLabel>Style alimentaire</InputLabel>\n                <Select\n                  value={generationOptions.preferences}\n                  onChange={(e) => handleGenerationOptionChange('preferences', e.target.value)}\n                  label=\"Style alimentaire\"\n                >\n                  <MenuItem value=\"balanced\">Équilibré</MenuItem>\n                  <MenuItem value=\"high-carb\">Riche en glucides</MenuItem>\n                  <MenuItem value=\"high-protein\">Riche en protéines</MenuItem>\n                  <MenuItem value=\"vegetarian\">Végétarien</MenuItem>\n                </Select>\n                <FormHelperText>Adaptez la distribution des macronutriments selon vos préférences</FormHelperText>\n              </FormControl>\n            </Grid>\n            \n            <Grid item xs={12}>\n              <Typography variant=\"subtitle2\" gutterBottom>Allergies ou intolérances</Typography>\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n                {['Gluten', 'Lactose', 'Arachides', 'Fruits à coque', 'Soja'].map((allergen) => (\n                  <Chip\n                    key={allergen}\n                    label={allergen}\n                    onClick={() => {\n                      const allergies = [...generationOptions.allergies];\n                      if (allergies.includes(allergen)) {\n                        const index = allergies.indexOf(allergen);\n                        allergies.splice(index, 1);\n                      } else {\n                        allergies.push(allergen);\n                      }\n                      handleGenerationOptionChange('allergies', allergies);\n                    }}\n                    color={generationOptions.allergies.includes(allergen) ? 'primary' : 'default'}\n                    variant={generationOptions.allergies.includes(allergen) ? 'filled' : 'outlined'}\n                  />\n                ))}\n              </Box>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseAutoGenerateDialog}>Annuler</Button>\n          <Button \n            variant=\"contained\" \n            onClick={handleGenerateMealPlan}\n            disabled={loading}\n          >\n            {loading ? <CircularProgress size={24} /> : 'Générer mon plan'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  };\n\n  // Rendu principal du composant\n  return (\n    <Box>\n      <Paper sx={{ p: 2, mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">Planificateur de repas</Typography>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<Add />}\n            onClick={handleOpenAutoGenerateDialog}\n          >\n            Générer un plan\n          </Button>\n        </Box>\n        <Typography variant=\"body2\" paragraph>\n          Créez et gérez vos plans de repas pour optimiser votre alimentation en fonction de vos objectifs et de vos entraînements.\n        </Typography>\n        \n        <Box sx={{ mb: 2 }}>\n          <Button\n            variant={planType === 'ride-day' ? 'contained' : 'outlined'}\n            onClick={() => handlePlanTypeChange('ride-day')}\n            sx={{ mr: 2 }}\n            startIcon={<DirectionsBike />}\n          >\n            Jours d'entraînement\n          </Button>\n          <Button\n            variant={planType === 'recovery-day' ? 'contained' : 'outlined'}\n            onClick={() => handlePlanTypeChange('recovery-day')}\n            startIcon={<Restaurant />}\n          >\n            Jours de récupération\n          </Button>\n        </Box>\n      </Paper>\n\n      {loading ? (\n        <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n          <CircularProgress />\n        </Box>\n      ) : error ? (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      ) : (\n        <>\n          {(!plannerData || !plannerData.mealPlans || plannerData.mealPlans.length === 0) ? (\n            <Alert severity=\"info\" sx={{ mb: 3 }}>\n              Aucun plan de repas disponible. Créez votre premier plan en cliquant sur \"Générer un plan\".\n            </Alert>\n          ) : (\n            <>\n              {renderPlans()}\n              {selectedPlan && renderPlanDetails()}\n            </>\n          )}\n          {renderMealDialog()}\n          {renderAutoGenerateDialog()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default MealPlanner;\n"],"names":["_ref","_plannerData$mealPlan","nutritionData","userId","user","useAuth","loading","setLoading","useState","error","setError","plannerData","setPlannerData","selectedPlan","setSelectedPlan","planType","setPlanType","openMealDialog","setOpenMealDialog","currentMeal","setCurrentMeal","searchTerm","setSearchTerm","autoGenerateDialog","setAutoGenerateDialog","generationOptions","setGenerationOptions","goalType","mealCount","allergies","preferences","mealTypes","id","label","icon","_jsx","Coffee","DirectionsBike","Restaurant","LocalDining","useEffect","fetchMealPlans","async","data","nutritionService","getUserNutritionData","mealPlans","Error","filteredPlans","filter","plan","type","length","err","console","handlePlanTypeChange","handleOpenMealDialog","arguments","undefined","handleCloseMealDialog","calculateMealTotals","items","reduce","totals","item","calories","carbs","protein","fat","calculatePlanTotals","meals","meal","mealTotals","handleCloseAutoGenerateDialog","handleGenerationOptionChange","option","value","prev","handleGenerateMealPlan","userData","metrics","goals","nutritionNeeds","calculateNutrition","weight","height","age","gender","activityLevel","planName","Date","toLocaleDateString","newPlan","now","name","totalCalories","macronutrients","mealCalorieDistribution","breakfast","lunch","dinner","snack","push","time","Math","round","grams","generateMealItems","updatedData","log","mealType","targetCalories","options","availableFoods","quantity","remainingCalories","selectedItems","randomIndex","floor","random","selectedFood","ratio","parseInt","splice","_jsxs","Box","children","Paper","sx","p","mb","display","justifyContent","alignItems","Typography","variant","Button","color","startIcon","Add","onClick","handleOpenAutoGenerateDialog","paragraph","mr","my","CircularProgress","Alert","severity","_Fragment","Grid","container","spacing","map","_plan$meals","xs","sm","md","Card","elevation","cursor","borderColor","handleSelectPlan","CardContent","component","fontSize","Divider","CardActions","size","Edit","e","stopPropagation","favorite","Favorite","FavoriteBorder","flexDirection","borderStyle","textAlign","mt","renderPlanDetails","_selectedPlan$meals","planTotals","bgcolor","IconButton","title","Print","Share","Stack","direction","orientation","flexItem","index","_meal$items","find","ml","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","itemIndex","colSpan","renderMealDialog","_currentMeal$items","Dialog","open","onClose","maxWidth","fullWidth","DialogTitle","DialogContent","dividers","FormControl","InputLabel","Select","labelId","MenuItem","gutterBottom","Delete","border","TextField","DialogActions","onChange","target","FormHelperText","flexWrap","gap","allergen","Chip","includes","indexOf","disabled"],"sourceRoot":""}