{"version":3,"file":"static/js/4222.6db9d8b1.chunk.js","mappings":"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jI,OAAOuiB,yBAA0Bxa,EAAOI,WAAW,UAC/D,CAAE,MAAOvD,GACP,OAAO,CACT,CACF,CASAsZ,iBAAAA,CAAkBhW,EAAIiC,GAGpB,GAAIA,EAAU,CACZ,MAAMqY,EAAgBrY,EAAS/H,cAG/B,GAAIogB,EAActe,SAAS,UACzB,OAAIse,EAActe,SAAS,YAAoB,KAC3Cse,EAActe,SAAS,YAAoB,KACxC,IAGT,GAAIse,EAActe,SAAS,QACzB,OAAIse,EAActe,SAAS,UAAkB,KACtC,KAGT,GAAIse,EAActe,SAAS,SACzB,OAAIse,EAActe,SAAS,QAAUse,EAActe,SAAS,OAAe,KACvEse,EAActe,SAAS,QAAUse,EAActe,SAAS,OAAe,KACvEse,EAActe,SAAS,QAAUse,EAActe,SAAS,OAAe,KACpE,KAIT,GAAIse,EAActe,SAAS,WAAase,EAActe,SAAS,WAC7D,OAAIse,EAActe,SAAS,OAAe,KACtCse,EAActe,SAAS,WAAase,EAActe,SAAS,UAAkB,KAC1E,KAGT,GAAIse,EAActe,SAAS,QAAUse,EAActe,SAAS,UAC1D,OAAIse,EAActe,SAAS,QAAgB,KACvCse,EAActe,SAAS,QAAgB,KACpC,KAGT,GAAIse,EAActe,SAAS,SACzB,OAAIse,EAActe,SAAS,QAAgB,KACvCse,EAActe,SAAS,OAAe,KACnC,IAEX,CAGA,MAAMuD,EAAiBS,EAAGE,aAAaF,EAAGG,kBAC1C,OAAIZ,GAAkB,MAAc,KAChCA,GAAkB,KAAa,KAC/BA,GAAkB,KAAa,KAC5B,GACT,CAQA+T,WAAAA,CAAYrR,GACV,IAAKA,EAAU,OAAO,EAEtB,MAAMqY,EAAgBrY,EAAS/H,cAC/B,OAAOogB,EAActe,SAAS,WACvBse,EAActe,SAAS,SACvBse,EAActe,SAAS,QACvBse,EAActe,SAAS,WACrBse,EAActe,SAAS,WACvBse,EAActe,SAAS,QAElC,CAOAsY,cAAAA,GAEE,MAAI,iBAAkBtc,WAChBA,UAAUyG,aAAe,OAI3BzG,UAAUkZ,qBAAuBlZ,UAAUkZ,oBAAsB,IAKjEzd,KAAKqf,aAAaC,I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","sources":["services/apiCache.js","services/progressive3DLoader.js","services/timeoutConfig.js","utils/PerformanceDetector.js","utils/deviceCapabilityDetector.js","utils/3DConfigManager.js","utils/mobileOptimizer.js","utils/batteryOptimizer.js","components/visualization/ColVisualization3D.js","services/featureFlags.js"],"sourcesContent":["/**\n * Service de cache API avancé\n * Permet de réduire les appels API redondants et d'améliorer les performances\n * Supporte plusieurs stratégies de cache, invalidation intelligente et persistance\n */\nimport axios from 'axios';\nimport featureFlagsService from './featureFlags';\n\n// Constantes pour les stratégies de cache\nconst CACHE_STRATEGIES = {\n  NETWORK_FIRST: 'network-first',  // Essaie le réseau, utilise le cache en fallback\n  CACHE_FIRST: 'cache-first',      // Utilise le cache, fait appel au réseau si expiré ou absent\n  STALE_WHILE_REVALIDATE: 'stale-while-revalidate', // Retourne le cache immédiatement et met à jour en arrière-plan\n  NETWORK_ONLY: 'network-only',    // Toujours utiliser le réseau (désactive le cache)\n  CACHE_ONLY: 'cache-only'         // Toujours utiliser le cache (mode hors ligne)\n};\n\n// Structure de l'élément de cache\nclass CacheItem {\n  constructor(data, params = {}) {\n    this.data = data;\n    this.timestamp = Date.now();\n    this.expiry = this.timestamp + (params.ttl || 5 * 60 * 1000); // 5 minutes par défaut\n    this.staleExpiry = this.expiry + (params.staleTime || 60 * 60 * 1000); // 1 heure de plus pour les données obsolètes\n    this.tags = params.tags || [];\n    this.etag = params.etag || null;\n    this.lastModified = params.lastModified || null;\n  }\n\n  isExpired() {\n    return Date.now() > this.expiry;\n  }\n\n  isStale() {\n    return this.isExpired() && Date.now() <= this.staleExpiry;\n  }\n\n  // Méthode pour étendre la durée de vie du cache\n  extend(additionalTime) {\n    this.expiry += additionalTime;\n    this.staleExpiry += additionalTime;\n  }\n}\n\n/**\n * Service principal de gestion du cache API\n */\nclass ApiCacheService {\n  constructor() {\n    this.cache = new Map();\n    this.pendingRequests = new Map();\n    this.isInitialized = false;\n    this.storageKey = 'api_cache_data';\n    this.defaultTTL = 5 * 60 * 1000; // 5 minutes par défaut\n    this.maxCacheSize = 100; // Nombre maximum d'entrées dans le cache\n    this.defaultStrategy = CACHE_STRATEGIES.CACHE_FIRST;\n    this.networkMonitor = {\n      isOnline: true,\n      lastCheck: Date.now()\n    };\n    this.statistics = {\n      hits: 0,\n      misses: 0,\n      errors: 0,\n      networkCalls: 0\n    };\n    this.ttlConfigKey = 'api_cache_ttl_config';\n    this.categoryTTLs = {};\n\n    // Création d'une instance axios personnalisée\n    this.axiosInstance = axios.create({\n      timeout: 10000, // 10 secondes de timeout par défaut\n    });\n\n    // Intercepteur pour ajouter les headers de cache\n    this.axiosInstance.interceptors.request.use(config => {\n      const cacheKey = this.generateCacheKey(config.url, config.params);\n      \n      // Ajouter les headers conditionnels si disponibles\n      const cachedItem = this.cache.get(cacheKey);\n      if (cachedItem) {\n        if (cachedItem.etag) {\n          config.headers['If-None-Match'] = cachedItem.etag;\n        }\n        if (cachedItem.lastModified) {\n          config.headers['If-Modified-Since'] = cachedItem.lastModified;\n        }\n      }\n      \n      return config;\n    });\n\n    // Intercepteur pour gérer les réponses 304 Not Modified\n    this.axiosInstance.interceptors.response.use(\n      response => {\n        // Capture des headers ETag et Last-Modified\n        const newHeaders = {};\n        if (response.headers.etag) {\n          newHeaders.etag = response.headers.etag;\n        }\n        if (response.headers['last-modified']) {\n          newHeaders.lastModified = response.headers['last-modified'];\n        }\n        \n        // Ajouter les headers à la réponse pour utilisation dans le cache\n        response.cacheHeaders = newHeaders;\n        return response;\n      },\n      error => {\n        // Si 304 Not Modified, considérer comme un succès\n        if (error.response && error.response.status === 304) {\n          const cacheKey = this.generateCacheKey(\n            error.config.url, \n            error.config.params\n          );\n          const cachedItem = this.cache.get(cacheKey);\n          \n          if (cachedItem) {\n            // Créer une réponse simulée avec les données du cache\n            const response = {\n              data: cachedItem.data,\n              status: 200,\n              statusText: 'OK (from cache)',\n              headers: error.response.headers,\n              config: error.config,\n              fromCache: true\n            };\n            \n            // Prolonger la durée de vie du cache\n            cachedItem.extend(this.defaultTTL);\n            this.cache.set(cacheKey, cachedItem);\n            \n            return response;\n          }\n        }\n        \n        return Promise.reject(error);\n      }\n    );\n  }\n\n  /**\n   * Initialise le service de cache\n   * @returns {Promise<void>}\n   */\n  async initialize() {\n    if (this.isInitialized) return;\n    \n    try {\n      // Charger les TTL spécifiques par catégorie depuis les feature flags\n      await this.loadTTLConfigurations();\n      \n      // Si le caching avancé est activé, charger depuis le stockage\n      if (featureFlagsService.isEnabled('enableAdvancedCaching')) {\n        await this.loadCacheFromStorage();\n      }\n      \n      // Configurer la surveillance réseau\n      this.setupNetworkMonitoring();\n      \n      // Configurer le nettoyage périodique du cache\n      this.setupPeriodicCleanup();\n      \n      this.isInitialized = true;\n      console.info('Service de cache API initialisé', {\n        cacheSize: this.cache.size,\n        defaultTTL: this.formatDuration(this.defaultTTL)\n      });\n    } catch (error) {\n      console.error('Erreur lors de l\\'initialisation du cache API:', error);\n    }\n  }\n\n  /**\n   * Configure la surveillance de la connexion réseau\n   */\n  setupNetworkMonitoring() {\n    if (typeof window !== 'undefined') {\n      // Détecter les changements de connectivité\n      window.addEventListener('online', () => {\n        this.networkMonitor.isOnline = true;\n        this.networkMonitor.lastCheck = Date.now();\n        console.info('Connectivité rétablie - API Cache passe en mode en ligne');\n      });\n      \n      window.addEventListener('offline', () => {\n        this.networkMonitor.isOnline = false;\n        this.networkMonitor.lastCheck = Date.now();\n        console.info('Connectivité perdue - API Cache passe en mode hors ligne');\n      });\n      \n      // État initial\n      this.networkMonitor.isOnline = navigator.onLine;\n    }\n  }\n\n  /**\n   * Configure le nettoyage périodique du cache\n   */\n  setupPeriodicCleanup() {\n    // Nettoyer toutes les heures\n    const CLEANUP_INTERVAL = 60 * 60 * 1000;\n    \n    if (typeof window !== 'undefined') {\n      setInterval(() => this.cleanupCache(), CLEANUP_INTERVAL);\n    }\n  }\n\n  /**\n   * Nettoie le cache en supprimant les entrées expirées et en respectant la taille maximale\n   */\n  cleanupCache() {\n    if (this.cache.size === 0) return;\n    \n    console.info('Nettoyage du cache API en cours...');\n    const now = Date.now();\n    let deleteCount = 0;\n    \n    // Supprimer les entrées complètement expirées (même stale)\n    for (const [key, item] of this.cache.entries()) {\n      if (now > item.staleExpiry) {\n        this.cache.delete(key);\n        deleteCount++;\n      }\n    }\n    \n    // Si le cache est toujours trop grand, supprimer les entrées les plus anciennes\n    if (this.cache.size > this.maxCacheSize) {\n      const excess = this.cache.size - this.maxCacheSize;\n      const entries = Array.from(this.cache.entries())\n        .sort((a, b) => a[1].timestamp - b[1].timestamp);\n      \n      for (let i = 0; i < excess; i++) {\n        this.cache.delete(entries[i][0]);\n        deleteCount++;\n      }\n    }\n    \n    console.info(`Nettoyage du cache terminé: ${deleteCount} entrées supprimées`);\n    this.saveCacheToStorage();\n  }\n\n  /**\n   * Charge le cache depuis le localStorage\n   */\n  async loadCacheFromStorage() {\n    try {\n      const storedCache = localStorage.getItem(this.storageKey);\n      if (!storedCache) return;\n      \n      const parsedCache = JSON.parse(storedCache);\n      const now = Date.now();\n      let validEntries = 0;\n      \n      // Ne charger que les entrées non complètement expirées\n      Object.entries(parsedCache).forEach(([key, value]) => {\n        // Recréer l'objet CacheItem correctement avec ses méthodes\n        const cacheItem = new CacheItem(value.data, {\n          ttl: value.expiry - value.timestamp,\n          staleTime: value.staleExpiry - value.expiry,\n          tags: value.tags,\n          etag: value.etag,\n          lastModified: value.lastModified\n        });\n        \n        // Restaurer les timestamps originaux\n        cacheItem.timestamp = value.timestamp;\n        cacheItem.expiry = value.expiry;\n        cacheItem.staleExpiry = value.staleExpiry;\n        \n        // Ne pas charger les entrées complètement expirées\n        if (now <= cacheItem.staleExpiry) {\n          this.cache.set(key, cacheItem);\n          validEntries++;\n        }\n      });\n      \n      console.info(`Cache chargé depuis le localStorage: ${validEntries} entrées valides`);\n    } catch (error) {\n      console.error('Erreur lors du chargement du cache depuis le localStorage:', error);\n      // Si erreur, démarrer avec un cache vide\n      this.cache.clear();\n    }\n  }\n\n  /**\n   * Sauvegarde le cache dans le localStorage\n   */\n  saveCacheToStorage() {\n    try {\n      // Convertir le Map en objet pour le stockage\n      const cacheObject = {};\n      \n      for (const [key, value] of this.cache.entries()) {\n        cacheObject[key] = {\n          data: value.data,\n          timestamp: value.timestamp,\n          expiry: value.expiry,\n          staleExpiry: value.staleExpiry,\n          tags: value.tags,\n          etag: value.etag,\n          lastModified: value.lastModified\n        };\n      }\n      \n      localStorage.setItem(this.storageKey, JSON.stringify(cacheObject));\n    } catch (error) {\n      console.error('Erreur lors de la sauvegarde du cache dans le localStorage:', error);\n    }\n  }\n\n  /**\n   * Génère une clé de cache unique pour une URL et des paramètres\n   * @param {string} url URL de la requête\n   * @param {Object} params Paramètres de la requête\n   * @returns {string} Clé de cache unique\n   */\n  generateCacheKey(url, params = {}) {\n    // Normaliser l'URL\n    const normalizedUrl = url.toLowerCase().trim();\n    \n    // Trier les paramètres pour assurer la cohérence des clés\n    const sortedParams = {};\n    if (params) {\n      Object.keys(params).sort().forEach(key => {\n        sortedParams[key] = params[key];\n      });\n    }\n    \n    // Créer une clé unique\n    return `${normalizedUrl}|${JSON.stringify(sortedParams)}`;\n  }\n\n  /**\n   * Effectue une requête GET avec gestion de cache\n   * @param {string} url URL de la requête\n   * @param {Object} options Options de la requête\n   * @param {Object} options.params Paramètres de la requête\n   * @param {string} options.strategy Stratégie de cache à utiliser\n   * @param {number} options.ttl Durée de vie du cache en millisecondes\n   * @param {Array<string>} options.tags Tags associés à cette entrée de cache\n   * @returns {Promise<any>} Données de la réponse\n   */\n  async get(url, options = {}) {\n    // Initialiser le service si ce n'est pas déjà fait\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n    \n    const {\n      params = {},\n      strategy = this.defaultStrategy,\n      tags = []\n    } = options;\n    \n    // Utiliser le TTL approprié pour cette URL\n    const ttl = this.getTTLForUrl(url, options);\n    \n    // Créer la clé de cache\n    const cacheKey = this.generateCacheKey(url, params);\n    \n    // Vérifier si la réponse est en cache\n    const cachedItem = this.cache.get(cacheKey);\n    \n    // Options de cache à utiliser pour la mise en cache\n    const cacheOptions = { ttl, tags };\n    \n    // Vérifier si le caching est activé\n    const isCachingEnabled = featureFlagsService.isEnabled('enableApiCaching');\n    \n    // Si le caching est désactivé, faire un appel réseau direct\n    if (!isCachingEnabled || strategy === CACHE_STRATEGIES.NETWORK_ONLY) {\n      return this.fetchFromNetwork(url, params);\n    }\n    \n    // Gestion du mode hors ligne forcé\n    if (strategy === CACHE_STRATEGIES.CACHE_ONLY) {\n      if (cachedItem) {\n        this.statistics.hits++;\n        return { ...cachedItem.data, fromCache: true };\n      } else {\n        this.statistics.misses++;\n        throw new Error('Aucune donnée en cache et mode CACHE_ONLY activé');\n      }\n    }\n    \n    // Gestion du mode hors ligne en cas de perte de connectivité\n    if (!this.networkMonitor.isOnline) {\n      if (cachedItem) {\n        console.info('Mode hors ligne - Utilisation du cache pour:', url);\n        return { ...cachedItem.data, fromCache: true };\n      } else {\n        throw new Error('Aucune donnée en cache et appareil hors ligne');\n      }\n    }\n    \n    // Stratégie CACHE_FIRST\n    if (strategy === CACHE_STRATEGIES.CACHE_FIRST) {\n      if (cachedItem && !cachedItem.isExpired()) {\n        this.statistics.hits++;\n        return { ...cachedItem.data, fromCache: true };\n      }\n      \n      // Cache expiré ou absent\n      try {\n        const response = await this.fetchFromNetwork(url, params);\n        this.cacheResponse(cacheKey, response, cacheOptions);\n        return response;\n      } catch (error) {\n        // En cas d'erreur réseau, utiliser le cache même expiré si disponible\n        if (cachedItem) {\n          console.warn('Erreur réseau - Utilisation du cache expiré pour:', url);\n          return { ...cachedItem.data, fromCache: true, stale: true };\n        }\n        throw error;\n      }\n    }\n    \n    // Stratégie STALE_WHILE_REVALIDATE\n    if (strategy === CACHE_STRATEGIES.STALE_WHILE_REVALIDATE) {\n      // Si un élément est en cache, le retourner immédiatement\n      if (cachedItem) {\n        // Mettre à jour en arrière-plan si expiré\n        if (cachedItem.isExpired()) {\n          this.fetchFromNetworkAndUpdateCache(url, params, cacheKey, cacheOptions)\n            .catch(error => console.error('Erreur lors de la mise à jour du cache en arrière-plan:', error));\n        }\n        \n        this.statistics.hits++;\n        return { ...cachedItem.data, fromCache: true, stale: cachedItem.isExpired() };\n      }\n      \n      // Rien en cache, faire un appel réseau\n      const response = await this.fetchFromNetwork(url, params);\n      this.cacheResponse(cacheKey, response, cacheOptions);\n      return response;\n    }\n    \n    // Par défaut: NETWORK_FIRST\n    try {\n      const response = await this.fetchFromNetwork(url, params);\n      this.cacheResponse(cacheKey, response, cacheOptions);\n      return response;\n    } catch (error) {\n      // En cas d'erreur réseau, utiliser le cache si disponible\n      if (cachedItem) {\n        console.warn('Erreur réseau - Utilisation du cache pour:', url);\n        this.statistics.hits++;\n        return { ...cachedItem.data, fromCache: true, stale: cachedItem.isExpired() };\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Effectue une requête POST (non mise en cache)\n   * @param {string} url URL de la requête\n   * @param {Object} data Données à envoyer\n   * @param {Object} config Configuration axios supplémentaire\n   * @returns {Promise<any>} Réponse de la requête\n   */\n  async post(url, data, config = {}) {\n    return this.axiosInstance.post(url, data, config).then(response => response.data);\n  }\n\n  /**\n   * Effectue une requête PUT (non mise en cache)\n   * @param {string} url URL de la requête\n   * @param {Object} data Données à envoyer\n   * @param {Object} config Configuration axios supplémentaire\n   * @returns {Promise<any>} Réponse de la requête\n   */\n  async put(url, data, config = {}) {\n    return this.axiosInstance.put(url, data, config).then(response => response.data);\n  }\n\n  /**\n   * Effectue une requête DELETE (non mise en cache)\n   * @param {string} url URL de la requête\n   * @param {Object} config Configuration axios supplémentaire\n   * @returns {Promise<any>} Réponse de la requête\n   */\n  async delete(url, config = {}) {\n    return this.axiosInstance.delete(url, config).then(response => response.data);\n  }\n\n  /**\n   * Effectue un appel réseau et met à jour le cache en arrière-plan\n   * @param {string} url URL de la requête\n   * @param {Object} params Paramètres de la requête\n   * @param {string} cacheKey Clé de cache\n   * @param {Object} cacheOptions Options de cache\n   * @returns {Promise<void>}\n   */\n  async fetchFromNetworkAndUpdateCache(url, params, cacheKey, cacheOptions) {\n    try {\n      const response = await this.fetchFromNetwork(url, params);\n      this.cacheResponse(cacheKey, response, cacheOptions);\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du cache en arrière-plan:', error);\n    }\n  }\n\n  /**\n   * Effectue un appel réseau en gérant les requêtes en parallèle\n   * @param {string} url URL de la requête\n   * @param {Object} params Paramètres de la requête\n   * @returns {Promise<any>} Données de la réponse\n   */\n  async fetchFromNetwork(url, params = {}) {\n    const cacheKey = this.generateCacheKey(url, params);\n    \n    // Vérifier si une requête identique est déjà en cours\n    if (this.pendingRequests.has(cacheKey)) {\n      return this.pendingRequests.get(cacheKey);\n    }\n    \n    // Créer une nouvelle promesse pour cette requête\n    const requestPromise = this.axiosInstance.get(url, { params })\n      .then(response => {\n        // Capturer les headers ETag et Last-Modified\n        const headers = response.cacheHeaders || {};\n        \n        this.statistics.networkCalls++;\n        this.pendingRequests.delete(cacheKey);\n        return {\n          data: response.data,\n          headers,\n          fromCache: false\n        };\n      })\n      .catch(error => {\n        this.statistics.errors++;\n        this.pendingRequests.delete(cacheKey);\n        throw error;\n      });\n    \n    // Enregistrer cette requête en cours\n    this.pendingRequests.set(cacheKey, requestPromise);\n    \n    return requestPromise;\n  }\n\n  /**\n   * Enregistre une réponse dans le cache\n   * @param {string} cacheKey Clé de cache\n   * @param {Object} response Réponse à mettre en cache\n   * @param {Object} options Options de cache\n   */\n  cacheResponse(cacheKey, response, options = {}) {\n    const { ttl = this.defaultTTL, tags = [] } = options;\n    \n    // Ne pas mettre en cache les réponses déjà issues du cache\n    if (response.fromCache) return;\n    \n    // Créer un objet de cache\n    const cacheItem = new CacheItem(response.data, {\n      ttl,\n      tags,\n      etag: response.headers?.etag,\n      lastModified: response.headers?.lastModified\n    });\n    \n    // Ajouter au cache\n    this.cache.set(cacheKey, cacheItem);\n    \n    // Si le cache dépasse sa taille maximale, supprimer les entrées les plus anciennes\n    if (this.cache.size > this.maxCacheSize) {\n      this.pruneCache();\n    }\n    \n    // Persister dans le localStorage si nécessaire\n    if (featureFlagsService.isEnabled('enableAdvancedCaching')) {\n      this.saveCacheToStorage();\n    }\n  }\n\n  /**\n   * Réduit la taille du cache en supprimant les entrées les plus anciennes\n   */\n  pruneCache() {\n    if (this.cache.size <= this.maxCacheSize) return;\n    \n    const excess = this.cache.size - this.maxCacheSize;\n    const entries = Array.from(this.cache.entries())\n      .sort((a, b) => a[1].timestamp - b[1].timestamp);\n    \n    for (let i = 0; i < excess; i++) {\n      this.cache.delete(entries[i][0]);\n    }\n  }\n\n  /**\n   * Invalide les entrées de cache pour une URL spécifique\n   * @param {string} url URL dont les entrées doivent être invalidées\n   * @param {Object} params Paramètres spécifiques (si null, toutes les entrées pour cette URL sont invalidées)\n   */\n  invalidateCache(url, params = null) {\n    if (params === null) {\n      // Invalider toutes les entrées commençant par cette URL\n      const normalizedUrl = url.toLowerCase().trim();\n      \n      for (const key of this.cache.keys()) {\n        if (key.startsWith(normalizedUrl)) {\n          this.cache.delete(key);\n        }\n      }\n    } else {\n      // Invalider uniquement l'entrée spécifique\n      const cacheKey = this.generateCacheKey(url, params);\n      this.cache.delete(cacheKey);\n    }\n    \n    // Persister les changements\n    if (featureFlagsService.isEnabled('enableAdvancedCaching')) {\n      this.saveCacheToStorage();\n    }\n  }\n\n  /**\n   * Invalide les entrées de cache par tags\n   * @param {Array<string>} tags Liste des tags à invalider\n   */\n  invalidateByTags(tags) {\n    if (!Array.isArray(tags) || tags.length === 0) return;\n    \n    const keysToDelete = [];\n    \n    // Trouver toutes les entrées correspondant aux tags\n    for (const [key, item] of this.cache.entries()) {\n      const hasMatchingTag = tags.some(tag => item.tags.includes(tag));\n      if (hasMatchingTag) {\n        keysToDelete.push(key);\n      }\n    }\n    \n    // Supprimer les entrées trouvées\n    keysToDelete.forEach(key => this.cache.delete(key));\n    \n    // Persister les changements\n    if (keysToDelete.length > 0 && featureFlagsService.isEnabled('enableAdvancedCaching')) {\n      this.saveCacheToStorage();\n    }\n  }\n\n  /**\n   * Efface tout le cache\n   */\n  clearCache() {\n    this.cache.clear();\n    localStorage.removeItem(this.storageKey);\n    console.info('Cache API entièrement effacé');\n  }\n\n  /**\n   * Récupère les statistiques d'utilisation du cache\n   * @returns {Object} Statistiques d'utilisation\n   */\n  getStatistics() {\n    return {\n      ...this.statistics,\n      cacheSize: this.cache.size,\n      pendingRequests: this.pendingRequests.size\n    };\n  }\n\n  /**\n   * Configure le service de cache\n   * @param {Object} config Configuration\n   */\n  configure(config = {}) {\n    if (config.defaultTTL) this.defaultTTL = config.defaultTTL;\n    if (config.maxCacheSize) this.maxCacheSize = config.maxCacheSize;\n    if (config.defaultStrategy) this.defaultStrategy = config.defaultStrategy;\n    \n    console.info('Configuration du cache API mise à jour:', config);\n  }\n\n  /**\n   * Charge les configurations TTL depuis les feature flags\n   */\n  async loadTTLConfigurations() {\n    try {\n      // Vérifier si la fonctionnalité de configuration TTL est activée\n      const configurationEnabled = featureFlagsService.isEnabled('enableConfigurableCacheTTL');\n      \n      if (configurationEnabled) {\n        // Récupérer le TTL global par défaut si configuré\n        const globalTTL = featureFlagsService.getValue('defaultCacheTTL');\n        if (globalTTL && typeof globalTTL === 'number' && globalTTL > 0) {\n          this.defaultTTL = globalTTL * 1000; // Conversion de secondes en millisecondes\n          console.info(`TTL de cache global configuré à ${this.formatDuration(this.defaultTTL)}`);\n        }\n        \n        // Récupérer les TTL spécifiques par catégorie\n        const categoryTTLs = featureFlagsService.getValue('categorySpecificTTLs') || {};\n        \n        for (const [category, ttl] of Object.entries(categoryTTLs)) {\n          if (typeof ttl === 'number' && ttl > 0) {\n            this.categoryTTLs[category] = ttl * 1000; // Conversion de secondes en millisecondes\n            console.info(`TTL de cache pour la catégorie \"${category}\" configuré à ${this.formatDuration(ttl * 1000)}`);\n          }\n        }\n        \n        // Sauvegarder la configuration pour référence\n        localStorage.setItem(this.ttlConfigKey, JSON.stringify({\n          defaultTTL: this.defaultTTL,\n          categoryTTLs: this.categoryTTLs\n        }));\n      } else {\n        // Si désactivé, utiliser les valeurs par défaut mais tenter de charger depuis le localStorage pour la persistance\n        const savedConfig = localStorage.getItem(this.ttlConfigKey);\n        if (savedConfig) {\n          try {\n            const { defaultTTL, categoryTTLs } = JSON.parse(savedConfig);\n            this.defaultTTL = defaultTTL || this.defaultTTL;\n            this.categoryTTLs = categoryTTLs || {};\n          } catch (e) {\n            console.warn('Impossible de charger la configuration TTL sauvegardée:', e);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Erreur lors du chargement des configurations TTL:', error);\n    }\n  }\n\n  /**\n   * Obtient le TTL approprié pour une URL donnée en se basant sur les catégories\n   * @param {string} url URL de la requête\n   * @param {Object} options Options de cache spécifiques à la requête\n   * @returns {number} TTL en millisecondes\n   */\n  getTTLForUrl(url, options = {}) {\n    // Si un TTL est explicitement défini dans les options, l'utiliser\n    if (options.ttl && typeof options.ttl === 'number') {\n      return options.ttl;\n    }\n    \n    // Vérifier si l'URL correspond à une catégorie configurée\n    const normalizedUrl = url.toLowerCase();\n    \n    // Définir les catégories d'URL et leurs patterns\n    const urlCategories = {\n      'cols': /(\\/api\\/cols|\\/api\\/passes)/,\n      'user': /\\/api\\/user/,\n      'activities': /\\/api\\/activities/,\n      'routes': /\\/api\\/routes/,\n      'weather': /\\/api\\/weather/,\n      'challenges': /\\/api\\/challenges/,\n      'social': /\\/api\\/social/\n    };\n    \n    // Vérifier si l'URL correspond à une catégorie ayant un TTL spécifique\n    for (const [category, pattern] of Object.entries(urlCategories)) {\n      if (pattern.test(normalizedUrl) && this.categoryTTLs[category]) {\n        return this.categoryTTLs[category];\n      }\n    }\n    \n    // Utiliser le TTL par défaut\n    return this.defaultTTL;\n  }\n\n  /**\n   * Formate une durée en millisecondes en chaîne de caractères lisible\n   * @param {number} ms Durée en millisecondes\n   * @returns {string} Durée formatée\n   */\n  formatDuration(ms) {\n    if (ms < 1000) return `${ms}ms`;\n    if (ms < 60000) return `${Math.round(ms / 1000)}s`;\n    if (ms < 3600000) return `${Math.round(ms / 60000)}m`;\n    return `${Math.round(ms / 3600000)}h`;\n  }\n}\n\n// Créer une instance singleton du service\nconst apiCacheService = new ApiCacheService();\n\n// Exporter les constantes et le service\nexport { CACHE_STRATEGIES };\nexport default apiCacheService;\n","/**\n * Service de chargement progressif pour visualisations 3D\n * Optimise les performances en adaptant la qualité du rendu aux capacités de l'appareil\n * et en utilisant un chargement progressif des détails\n */\nimport * as THREE from 'three';\nimport { mergeVertices } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport featureFlagsService from './featureFlags';\nimport apiCacheService, { CACHE_STRATEGIES } from './apiCache';\n\n// Niveaux de détail (LOD) pour le chargement progressif\nconst DETAIL_LEVELS = {\n  ULTRA_LOW: 'ultra-low',   // Pour appareils très limités ou chargement initial\n  LOW: 'low',               // Pour appareils mobiles bas de gamme\n  MEDIUM: 'medium',         // Pour la plupart des mobiles et tablettes\n  HIGH: 'high',             // Pour ordinateurs de bureau standard\n  ULTRA: 'ultra'            // Pour ordinateurs puissants\n};\n\n// Paramètres pour chaque niveau de détail\nconst DETAIL_PARAMS = {\n  [DETAIL_LEVELS.ULTRA_LOW]: {\n    segmentCount: 10,       // Nombre de segments pour les courbes\n    textureSize: 128,       // Taille des textures en pixels\n    shadowsEnabled: false,  // Désactiver les ombres\n    lightCount: 1,          // Nombre de sources lumineuses\n    terrainResolution: 8,   // Résolution du terrain (1 = pleine résolution)\n    maxVisibleElements: 20  // Nombre maximum d'éléments visibles\n  },\n  [DETAIL_LEVELS.LOW]: {\n    segmentCount: 20,\n    textureSize: 256,\n    shadowsEnabled: false,\n    lightCount: 2,\n    terrainResolution: 4,\n    maxVisibleElements: 50\n  },\n  [DETAIL_LEVELS.MEDIUM]: {\n    segmentCount: 32,\n    textureSize: 512,\n    shadowsEnabled: true,\n    lightCount: 2,\n    terrainResolution: 2,\n    maxVisibleElements: 100\n  },\n  [DETAIL_LEVELS.HIGH]: {\n    segmentCount: 64,\n    textureSize: 1024,\n    shadowsEnabled: true,\n    lightCount: 3,\n    terrainResolution: 1,\n    maxVisibleElements: 200\n  },\n  [DETAIL_LEVELS.ULTRA]: {\n    segmentCount: 128,\n    textureSize: 2048,\n    shadowsEnabled: true,\n    lightCount: 4,\n    terrainResolution: 1,\n    maxVisibleElements: 500\n  }\n};\n\n// Tailles des textures optimisées pour mobile\nconst MOBILE_TEXTURE_SIZES = {\n  thumbnail: 128,\n  small: 256,\n  medium: 512,\n  large: 1024\n};\n\n// Seuils de mémoire pour les appareils mobiles (en Mo)\nconst MEMORY_THRESHOLDS = {\n  critical: 150,  // Seuil critique - libération immédiate des ressources\n  warning: 300,   // Seuil d'avertissement - réduire la qualité\n  optimal: 500    // Seuil optimal - fonctionnement normal\n};\n\n// Géométries simplifiées pour remplacer les modèles complexes à distance\nconst SIMPLE_GEOMETRIES = {\n  tree: new THREE.BoxGeometry(1, 2, 1),\n  rock: new THREE.SphereGeometry(1, 4, 4),\n  building: new THREE.BoxGeometry(1, 1, 1)\n};\n\n/**\n * Class principale pour le chargement progressif des visualisations 3D\n */\nclass Progressive3DLoader {\n  constructor() {\n    this.progressiveModeEnabled = true;\n    this.currentDetailLevel = DETAIL_LEVELS.MEDIUM;\n    this.deviceCapabilities = null;\n    this.loadedModels = new Map();\n    this.loadingProgress = {};\n    this.worker = null;\n    this.frustumCullingEnabled = true;\n    this.lastRenderTime = 0;\n    this.targetFrameRate = 30;\n    this.renderTimeHistory = [];\n    this.adaptiveQualityEnabled = true;\n    this.isInitialized = false;\n    this.texturePool = new Map(); // Pool de textures réutilisables\n    this.activeRenderers = new Set(); // Ensemble des renderers actifs\n    this.memoryMonitorInterval = null;\n    this.contextLossHandled = false;\n    this.lowMemoryMode = false;\n    this.deviceMemory = null;\n    this.isIOS = false;\n    this.estimatedMemoryUsage = 0;\n  }\n\n  /**\n   * Initialise le service de chargement progressif\n   */\n  async initialize() {\n    if (this.isInitialized) return;\n    \n    try {\n      // Vérifier si le feature flag est activé\n      const progressiveLoadingEnabled = featureFlagsService.isEnabled('enableProgressiveLoading3D');\n      \n      if (!progressiveLoadingEnabled) {\n        console.info('Chargement progressif 3D désactivé via feature flags');\n        this.progressiveModeEnabled = false;\n        this.isInitialized = true;\n        return;\n      }\n      \n      // Détecter les capacités du dispositif\n      await this.detectDeviceCapabilities();\n      \n      // Initialiser le Web Worker si supporté\n      if (this.deviceCapabilities.webWorkerSupport) {\n        this.initializeWebWorker();\n      }\n      \n      // Initialiser les gestionnaires d'événements pour la perte de contexte WebGL\n      this.setupContextLossHandlers();\n      \n      // Configurer la surveillance de la mémoire pour les appareils mobiles\n      if (this.deviceCapabilities.isMobile) {\n        this.setupMemoryMonitoring();\n      }\n      \n      console.info('Service de chargement progressif 3D initialisé', {\n        detailLevel: this.currentDetailLevel,\n        adaptiveQuality: this.adaptiveQualityEnabled,\n        webWorker: this.worker !== null,\n        deviceMemory: this.deviceMemory,\n        isMobile: this.deviceCapabilities.isMobile,\n        isIOS: this.isIOS\n      });\n      \n      this.isInitialized = true;\n    } catch (error) {\n      console.error('Erreur lors de l\\'initialisation du chargement progressif 3D:', error);\n      // Fallback au mode standard en cas d'erreur\n      this.progressiveModeEnabled = false;\n      this.isInitialized = true;\n    }\n  }\n\n  /**\n   * Détecte les capacités du dispositif utilisé\n   */\n  async detectDeviceCapabilities() {\n    this.deviceCapabilities = {\n      webWorkerSupport: typeof Worker !== 'undefined',\n      webGLVersion: 1,\n      maxTextureSize: 2048,\n      anisotropySupport: false,\n      maxAnisotropy: 1,\n      isMobile: false,\n      devicePixelRatio: window.devicePixelRatio || 1\n    };\n    \n    // Détection des plateformes mobiles\n    this.deviceCapabilities.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    this.isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n    \n    // Détection de la mémoire disponible (si supportée)\n    if (navigator.deviceMemory) {\n      this.deviceMemory = navigator.deviceMemory;\n    } else {\n      // Estimation basée sur l'agent utilisateur\n      this.deviceMemory = this.deviceCapabilities.isMobile ? 2 : 8;\n    }\n    \n    try {\n      // Créer un canvas temporaire pour tester les capacités WebGL\n      const canvas = document.createElement('canvas');\n      let gl = canvas.getContext('webgl2');\n      \n      if (gl) {\n        this.deviceCapabilities.webGLVersion = 2;\n      } else {\n        gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n        this.deviceCapabilities.webGLVersion = gl ? 1 : 0;\n      }\n      \n      if (gl) {\n        // Détecter la taille maximale de texture\n        this.deviceCapabilities.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n        \n        // Détecter le support d'anisotropie\n        const ext = gl.getExtension('EXT_texture_filter_anisotropic') || \n                    gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || \n                    gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n        \n        if (ext) {\n          this.deviceCapabilities.anisotropySupport = true;\n          this.deviceCapabilities.maxAnisotropy = gl.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n        }\n        \n        // Libérer les ressources du contexte temporaire\n        const loseContext = gl.getExtension('WEBGL_lose_context');\n        if (loseContext) {\n          loseContext.loseContext();\n        }\n      }\n      \n      // Définir le niveau de détail approprié en fonction des capacités détectées\n      if (this.deviceCapabilities.isMobile) {\n        if (this.deviceMemory <= 2) {\n          this.currentDetailLevel = DETAIL_LEVELS.LOW;\n        } else {\n          this.currentDetailLevel = DETAIL_LEVELS.MEDIUM;\n        }\n        \n        // Activer automatiquement le frustum culling sur mobile\n        this.frustumCullingEnabled = true;\n      } else {\n        if (this.deviceCapabilities.webGLVersion >= 2) {\n          this.currentDetailLevel = DETAIL_LEVELS.HIGH;\n        } else {\n          this.currentDetailLevel = DETAIL_LEVELS.MEDIUM;\n        }\n      }\n      \n    } catch (error) {\n      console.error('Erreur lors de la détection des capacités WebGL:', error);\n      this.currentDetailLevel = DETAIL_LEVELS.LOW;\n    }\n    \n    return this.deviceCapabilities;\n  }\n\n  /**\n   * Unload d'un modèle et libération des ressources WebGL associées\n   * @param {string} modelId Identifiant du modèle\n   */\n  unloadModel(modelId) {\n    const model = this.loadedModels.get(modelId);\n    \n    if (model) {\n      // Libération améliorée des ressources Three.js\n      if (model.geometry) {\n        model.geometry.dispose();\n      }\n      \n      // Libérer les textures et matériaux\n      if (model.material) {\n        if (Array.isArray(model.material)) {\n          model.material.forEach(material => this.disposeMaterial(material));\n        } else {\n          this.disposeMaterial(model.material);\n        }\n      }\n      \n      // Libérer les animations et mixers s'ils existent\n      if (model.animations && model.mixer) {\n        model.mixer.stopAllAction();\n        model.mixer.uncacheRoot(model);\n      }\n      \n      // Libérer les enfants récursivement\n      if (model.children) {\n        model.children.forEach(child => {\n          this.disposeObject3D(child);\n        });\n      }\n      \n      // Supprimer de la scène si ajouté\n      if (model.parent) {\n        model.parent.remove(model);\n      }\n      \n      this.loadedModels.delete(modelId);\n      \n      // Mettre à jour l'estimation de la mémoire\n      this.updateMemoryUsage();\n      \n      console.info(`Modèle ${modelId} déchargé et ressources libérées`);\n    }\n  }\n\n  /**\n   * Libère les ressources d'un matériau\n   * @param {THREE.Material} material Le matériau à libérer\n   */\n  disposeMaterial(material) {\n    if (!material) return;\n    \n    // Libérer les textures\n    for (const propertyName in material) {\n      const property = material[propertyName];\n      if (property && property.isTexture) {\n        // Si la texture est dans le pool, la marquer comme disponible\n        if (this.texturePool.has(property.uuid)) {\n          const poolEntry = this.texturePool.get(property.uuid);\n          poolEntry.inUse = false;\n        } else {\n          // Sinon, libérer complètement\n          property.dispose();\n        }\n      }\n    }\n    \n    // Libérer le matériau lui-même\n    material.dispose();\n  }\n\n  /**\n   * Dispose récursivement un Object3D et toutes ses ressources\n   * @param {THREE.Object3D} object L'objet à libérer\n   */\n  disposeObject3D(object) {\n    if (!object) return;\n    \n    // Traiter les enfants de manière récursive\n    if (object.children && object.children.length > 0) {\n      // Créer une copie du tableau pour éviter les problèmes de modification pendant l'itération\n      const children = [...object.children];\n      children.forEach(child => {\n        this.disposeObject3D(child);\n        object.remove(child);\n      });\n    }\n    \n    // Libérer la géométrie\n    if (object.geometry) {\n      object.geometry.dispose();\n    }\n    \n    // Libérer le matériau\n    if (object.material) {\n      if (Array.isArray(object.material)) {\n        object.material.forEach(material => this.disposeMaterial(material));\n      } else {\n        this.disposeMaterial(object.material);\n      }\n    }\n  }\n\n  /**\n   * Mise en place des gestionnaires pour la perte de contexte WebGL\n   */\n  setupContextLossHandlers() {\n    // Enregistrer une fonction pour traiter la perte de contexte WebGL\n    window.addEventListener('webglcontextlost', (event) => {\n      event.preventDefault();\n      this.contextLossHandled = true;\n      console.warn('Contexte WebGL perdu, tentative de récupération...');\n      \n      // Arrêter tous les rendus 3D en cours\n      this.activeRenderers.forEach(renderer => {\n        renderer.forceContextLoss();\n      });\n      \n      // Passer en mode basse mémoire\n      this.lowMemoryMode = true;\n      this.currentDetailLevel = DETAIL_LEVELS.ULTRA_LOW;\n      \n      // Notifier l'application de la perte de contexte\n      document.dispatchEvent(new CustomEvent('webgl-context-lost'));\n    }, false);\n    \n    // Gestionnaire pour la restauration du contexte\n    window.addEventListener('webglcontextrestored', () => {\n      console.info('Contexte WebGL restauré');\n      this.contextLossHandled = false;\n      \n      // Réinitialiser les renderers\n      this.activeRenderers.forEach(renderer => {\n        renderer.resetState();\n      });\n      \n      // Réinitialiser les textures et matériaux si nécessaire\n      this.rebuildTextures();\n      \n      // Notifier l'application de la restauration du contexte\n      document.dispatchEvent(new CustomEvent('webgl-context-restored'));\n    }, false);\n  }\n\n  /**\n   * Surveille l'utilisation de la mémoire sur les appareils mobiles\n   */\n  setupMemoryMonitoring() {\n    // Nettoyer l'ancien interval si existant\n    if (this.memoryMonitorInterval) {\n      clearInterval(this.memoryMonitorInterval);\n    }\n    \n    // Établir un intervalle pour vérifier la mémoire\n    this.memoryMonitorInterval = setInterval(() => {\n      this.checkMemoryUsage();\n    }, 30000); // Vérifier toutes les 30 secondes\n    \n    // Ajouter des gestionnaires pour les événements de visibilité de page\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden) {\n        // L'utilisateur a quitté la page, libérer les ressources non essentielles\n        this.releaseNonEssentialResources();\n      } else {\n        // L'utilisateur est revenu, vérifier la mémoire\n        this.checkMemoryUsage();\n      }\n    });\n  }\n\n  /**\n   * Vérifier l'utilisation de la mémoire et prendre des mesures si nécessaire\n   */\n  checkMemoryUsage() {\n    // Estimation de l'utilisation de la mémoire\n    this.updateMemoryUsage();\n    \n    // Vérifier les performances du système\n    const performanceNow = performance.now();\n    const memoryUsageMB = this.estimatedMemoryUsage / (1024 * 1024);\n    \n    console.debug(`Utilisation estimée de la mémoire 3D: ${memoryUsageMB.toFixed(2)} MB`);\n    \n    // Mesures basées sur l'utilisation de la mémoire\n    if (memoryUsageMB > MEMORY_THRESHOLDS.critical) {\n      console.warn(`Utilisation critique de la mémoire: ${memoryUsageMB.toFixed(2)} MB`);\n      this.handleCriticalMemory();\n    } else if (memoryUsageMB > MEMORY_THRESHOLDS.warning) {\n      console.warn(`Avertissement mémoire: ${memoryUsageMB.toFixed(2)} MB`);\n      this.decreaseQuality();\n      this.releaseNonEssentialResources();\n    } else if (memoryUsageMB < MEMORY_THRESHOLDS.optimal && this.lowMemoryMode) {\n      // Si nous sommes en dessous du seuil optimal et en mode basse mémoire,\n      // nous pouvons revenir à un mode normal\n      this.lowMemoryMode = false;\n      if (this.adaptiveQualityEnabled) {\n        this.increaseQuality();\n      }\n    }\n  }\n\n  /**\n   * Gestion du cas critique de mémoire - libérer immédiatement les ressources\n   */\n  handleCriticalMemory() {\n    this.lowMemoryMode = true;\n    \n    // Réduire drastiquement la qualité\n    this.currentDetailLevel = DETAIL_LEVELS.ULTRA_LOW;\n    \n    // Libérer les modèles non essentiels\n    this.unloadNonVisibleModels();\n    \n    // Vider le pool de textures\n    this.clearTexturePool();\n    \n    // Forcer la libération de la mémoire si supporté\n    if (window.gc) window.gc();\n    \n    // Notifier l'application pour qu'elle prenne des mesures supplémentaires\n    document.dispatchEvent(new CustomEvent('webgl-memory-critical'));\n  }\n\n  /**\n   * Libération des ressources non essentielles\n   */\n  releaseNonEssentialResources() {\n    // Libérer les textures non utilisées\n    this.cleanupTexturePool();\n    \n    // Libérer les modèles en cache mais non visibles\n    this.unloadNonVisibleModels();\n  }\n\n  /**\n   * Décharger les modèles qui ne sont pas actuellement visibles\n   */\n  unloadNonVisibleModels() {\n    const visibleModelIds = new Set();\n    \n    // Obtenir les IDs des modèles actuellement visibles (ceci est une simulation, \n    // l'implémentation réelle dépendrait de comment la visibilité est gérée)\n    document.querySelectorAll('[data-model-visible=\"true\"]').forEach(el => {\n      const modelId = el.dataset.modelId;\n      if (modelId) visibleModelIds.add(modelId);\n    });\n    \n    // Décharger les modèles non visibles\n    this.loadedModels.forEach((model, modelId) => {\n      if (!visibleModelIds.has(modelId)) {\n        this.unloadModel(modelId);\n      }\n    });\n  }\n\n  /**\n   * Mise à jour de l'estimation de l'utilisation de la mémoire\n   */\n  updateMemoryUsage() {\n    let totalMemoryUsage = 0;\n    \n    // Calculer la mémoire utilisée par les géométries\n    this.loadedModels.forEach(model => {\n      if (model.geometry) {\n        // Estimation de la taille de la géométrie\n        if (model.geometry.attributes) {\n          for (const name in model.geometry.attributes) {\n            const attribute = model.geometry.attributes[name];\n            if (attribute.array) {\n              totalMemoryUsage += attribute.array.byteLength || 0;\n            }\n          }\n        }\n      }\n      \n      // Estimation de la taille des textures\n      if (model.material) {\n        const materials = Array.isArray(model.material) ? model.material : [model.material];\n        materials.forEach(material => {\n          for (const prop in material) {\n            const texture = material[prop];\n            if (texture && texture.isTexture && texture.image) {\n              const width = texture.image.width || 0;\n              const height = texture.image.height || 0;\n              // Estimation de 4 octets par pixel (RGBA)\n              totalMemoryUsage += width * height * 4;\n            }\n          }\n        });\n      }\n    });\n    \n    // Ajouter la mémoire utilisée par le pool de textures\n    this.texturePool.forEach(entry => {\n      const texture = entry.texture;\n      if (texture && texture.image) {\n        const width = texture.image.width || 0;\n        const height = texture.image.height || 0;\n        totalMemoryUsage += width * height * 4;\n      }\n    });\n    \n    this.estimatedMemoryUsage = totalMemoryUsage;\n    return totalMemoryUsage;\n  }\n\n  /**\n   * Gestion d'un pool de textures pour la réutilisation\n   * @param {string} url URL de la texture\n   * @param {object} options Options de la texture\n   * @returns {THREE.Texture} Texture du pool ou nouvelle texture\n   */\n  getTextureFromPool(url, options = {}) {\n    // Rechercher une texture disponible dans le pool\n    for (const [uuid, entry] of this.texturePool.entries()) {\n      if (!entry.inUse && entry.url === url) {\n        entry.inUse = true;\n        return entry.texture;\n      }\n    }\n    \n    // Si aucune texture n'est disponible, en créer une nouvelle\n    const texture = new THREE.TextureLoader().load(url);\n    \n    // Appliquer les options\n    if (options.anisotropy && this.deviceCapabilities.anisotropySupport) {\n      texture.anisotropy = Math.min(\n        options.anisotropy,\n        this.deviceCapabilities.maxAnisotropy\n      );\n    }\n    \n    // Ajouter au pool\n    this.texturePool.set(texture.uuid, {\n      texture,\n      url,\n      inUse: true,\n      lastUsed: Date.now()\n    });\n    \n    return texture;\n  }\n\n  /**\n   * Nettoyage des textures non utilisées dans le pool\n   */\n  cleanupTexturePool() {\n    const now = Date.now();\n    const unusedTimeout = 60000; // 1 minute\n    \n    for (const [uuid, entry] of this.texturePool.entries()) {\n      if (!entry.inUse && (now - entry.lastUsed > unusedTimeout)) {\n        entry.texture.dispose();\n        this.texturePool.delete(uuid);\n      }\n    }\n  }\n\n  /**\n   * Vider complètement le pool de textures\n   */\n  clearTexturePool() {\n    for (const [uuid, entry] of this.texturePool.entries()) {\n      entry.texture.dispose();\n    }\n    this.texturePool.clear();\n  }\n\n  /**\n   * Reconstruire les textures après une perte de contexte\n   */\n  rebuildTextures() {\n    // Recréer les textures qui étaient en utilisation\n    const texturesToRebuild = new Map();\n    \n    // Collecter les textures qui doivent être reconstruites\n    this.texturePool.forEach((entry, uuid) => {\n      if (entry.inUse) {\n        texturesToRebuild.set(uuid, {\n          url: entry.url,\n          options: entry.options\n        });\n      }\n    });\n    \n    // Vider le pool actuel\n    this.clearTexturePool();\n    \n    // Reconstruire les textures nécessaires\n    texturesToRebuild.forEach((info, uuid) => {\n      const texture = this.getTextureFromPool(info.url, info.options);\n      \n      // Mettre à jour les références dans les matériaux si nécessaire\n      this.loadedModels.forEach(model => {\n        if (model.material) {\n          const materials = Array.isArray(model.material) ? model.material : [model.material];\n          materials.forEach(material => {\n            for (const prop in material) {\n              if (material[prop] && material[prop].isTexture && material[prop].uuid === uuid) {\n                material[prop] = texture;\n              }\n            }\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Enregistre un renderer pour surveillance\n   * @param {THREE.WebGLRenderer} renderer Le renderer à surveiller\n   */\n  registerRenderer(renderer) {\n    if (renderer && !this.activeRenderers.has(renderer)) {\n      this.activeRenderers.add(renderer);\n      \n      // Configurer le renderer pour optimiser les performances mobiles\n      if (this.deviceCapabilities.isMobile) {\n        renderer.setPixelRatio(Math.min(this.deviceCapabilities.devicePixelRatio, 2));\n        renderer.shadowMap.enabled = this.currentDetailLevel !== DETAIL_LEVELS.ULTRA_LOW && \n                                     this.currentDetailLevel !== DETAIL_LEVELS.LOW;\n        renderer.shadowMap.autoUpdate = false; // Mettre à jour manuellement pour économiser des ressources\n      }\n    }\n  }\n\n  /**\n   * Désenregistre un renderer\n   * @param {THREE.WebGLRenderer} renderer Le renderer à désenregistrer\n   */\n  unregisterRenderer(renderer) {\n    if (renderer && this.activeRenderers.has(renderer)) {\n      this.activeRenderers.delete(renderer);\n    }\n  }\n\n  /**\n   * Optimise les géométries pour les appareils mobiles\n   * @param {THREE.BufferGeometry} geometry La géométrie à optimiser\n   * @returns {THREE.BufferGeometry} La géométrie optimisée\n   */\n  optimizeGeometryForMobile(geometry) {\n    if (!geometry || !this.deviceCapabilities.isMobile) return geometry;\n    \n    // Créer une copie de la géométrie\n    const optimized = geometry.clone();\n    \n    // Réduire la complexité pour les appareils mobiles\n    if (this.currentDetailLevel === DETAIL_LEVELS.ULTRA_LOW || this.currentDetailLevel === DETAIL_LEVELS.LOW) {\n      // Utiliser Three.js BufferGeometryUtils pour simplifier la géométrie\n      if (mergeVertices) {\n        return mergeVertices(optimized, 0.01);\n      }\n    }\n    \n    return optimized;\n  }\n\n  /**\n   * Libère toutes les ressources\n   */\n  dispose() {\n    // Arrêter le Web Worker\n    if (this.worker) {\n      this.worker.terminate();\n      this.worker = null;\n    }\n    \n    // Arrêter la surveillance de la mémoire\n    if (this.memoryMonitorInterval) {\n      clearInterval(this.memoryMonitorInterval);\n      this.memoryMonitorInterval = null;\n    }\n    \n    // Libérer tous les modèles et leurs ressources\n    this.loadedModels.forEach((model, modelId) => {\n      this.unloadModel(modelId);\n    });\n    \n    // Libérer les géométries simplifiées\n    for (const key in SIMPLE_GEOMETRIES) {\n      if (SIMPLE_GEOMETRIES[key]) {\n        SIMPLE_GEOMETRIES[key].dispose();\n      }\n    }\n    \n    // Vider le pool de textures\n    this.clearTexturePool();\n    \n    // Désenregistrer tous les renderers\n    this.activeRenderers.clear();\n    \n    // Vider le cache en mémoire\n    this.loadedModels.clear();\n    \n    // Réinitialiser l'état\n    this.loadingProgress = {};\n    this.renderTimeHistory = [];\n    this.isInitialized = false;\n    this.contextLossHandled = false;\n    this.lowMemoryMode = false;\n    \n    // Forcer la collecte des déchets (suggestion pour le navigateur)\n    if (window.gc) {\n      window.gc();\n    }\n    \n    console.info('Service de chargement progressif 3D libéré et ressources WebGL nettoyées');\n  }\n}\n\n// Créer une instance singleton du service\nconst progressive3DLoader = new Progressive3DLoader();\n\nexport { DETAIL_LEVELS, MOBILE_TEXTURE_SIZES };\nexport default progressive3DLoader;\n","/**\n * Service de configuration des timeouts et opérations asynchrones\n * Remplace les timeouts codés en dur par des valeurs configurables\n * et implémente des stratégies de retry avancées\n */\nimport featureFlagsService from './featureFlags';\n\n// Configuration par défaut des timeouts (en millisecondes)\nconst DEFAULT_TIMEOUT_CONFIG = {\n  // Timeouts pour les opérations réseau\n  api: {\n    standard: 10000,        // 10 secondes pour les requêtes API standard\n    long: 30000,            // 30 secondes pour les opérations plus longues\n    download: 60000,        // 60 secondes pour les téléchargements\n    upload: 120000          // 120 secondes pour les uploads\n  },\n  \n  // Timeouts pour les opérations UI\n  ui: {\n    toast: 3000,            // 3 secondes pour les notifications toast\n    autoClose: 5000,        // 5 secondes pour la fermeture automatique des dialogues\n    animation: 300,         // 300ms pour les animations UI\n    debounce: 300,          // 300ms pour le debounce des entrées utilisateur\n    throttle: 100           // 100ms pour le throttle des événements fréquents\n  },\n  \n  // Timeouts pour les fonctionnalités spécifiques\n  features: {\n    nutrition: {\n      calculation: 8000,    // 8 secondes pour les calculs nutritionnels\n      synchronization: 15000 // 15 secondes pour synchroniser le journal nutritionnel\n    },\n    training: {\n      planGeneration: 20000, // 20 secondes pour générer un plan d'entraînement\n      routeCalculation: 30000 // 30 secondes pour calculer un itinéraire\n    },\n    visualization3D: {\n      load: 25000,          // 25 secondes pour charger une visualisation 3D\n      render: 5000          // 5 secondes pour le rendu initial\n    },\n    weatherData: {\n      forecast: 12000,      // 12 secondes pour obtenir des prévisions météo\n      historical: 20000     // 20 secondes pour des données historiques\n    }\n  },\n  \n  // Configurations pour les retries\n  retry: {\n    maxAttempts: 3,         // Nombre maximum de tentatives\n    baseDelay: 1000,        // Délai initial entre les tentatives (1 seconde)\n    maxDelay: 15000,        // Délai maximum entre les tentatives (15 secondes)\n    factor: 2               // Facteur pour le backoff exponentiel\n  }\n};\n\n/**\n * Classe principale du service de timeout configurable\n */\nclass TimeoutConfigService {\n  constructor() {\n    this.config = { ...DEFAULT_TIMEOUT_CONFIG };\n    this.activeTimeouts = new Map();\n    this.activeIntervals = new Map();\n    this.pendingOperations = new Map();\n    this.isInitialized = false;\n  }\n\n  /**\n   * Initialise le service avec les configurations personnalisées\n   * @param {Object} customConfig Configuration personnalisée à fusionner\n   */\n  initialize(customConfig = {}) {\n    if (this.isInitialized) return;\n    \n    try {\n      // Charger depuis localStorage si disponible\n      const storedConfig = localStorage.getItem('timeout_config');\n      \n      if (storedConfig) {\n        try {\n          const parsedConfig = JSON.parse(storedConfig);\n          this.config = this.mergeConfigs(this.config, parsedConfig);\n        } catch (error) {\n          console.error('Erreur lors du parsing de la configuration des timeouts:', error);\n        }\n      }\n      \n      // Appliquer les configurations personnalisées\n      if (customConfig && Object.keys(customConfig).length > 0) {\n        this.config = this.mergeConfigs(this.config, customConfig);\n      }\n      \n      this.isInitialized = true;\n      console.info('Service de configuration des timeouts initialisé');\n    } catch (error) {\n      console.error('Erreur lors de l\\'initialisation du service de timeouts:', error);\n      // Fallback à la configuration par défaut\n      this.config = { ...DEFAULT_TIMEOUT_CONFIG };\n      this.isInitialized = true;\n    }\n  }\n\n  /**\n   * Fusionne deux objets de configuration de manière récursive\n   * @param {Object} baseConfig Configuration de base\n   * @param {Object} overrideConfig Configuration à appliquer\n   * @returns {Object} Configuration fusionnée\n   */\n  mergeConfigs(baseConfig, overrideConfig) {\n    const result = { ...baseConfig };\n    \n    for (const [key, value] of Object.entries(overrideConfig)) {\n      if (\n        typeof value === 'object' && \n        value !== null && \n        !Array.isArray(value) &&\n        typeof baseConfig[key] === 'object'\n      ) {\n        result[key] = this.mergeConfigs(baseConfig[key], value);\n      } else {\n        result[key] = value;\n      }\n    }\n    \n    return result;\n  }\n\n  /**\n   * Récupère une valeur de timeout depuis la configuration\n   * @param {string} path Chemin de la configuration (ex: 'api.standard')\n   * @param {number} defaultValue Valeur par défaut si le chemin n'existe pas\n   * @returns {number} Valeur du timeout\n   */\n  getTimeout(path, defaultValue = 10000) {\n    if (!this.isInitialized) {\n      this.initialize();\n    }\n    \n    const keys = path.split('.');\n    let value = this.config;\n    \n    for (const key of keys) {\n      if (value && typeof value === 'object' && key in value) {\n        value = value[key];\n      } else {\n        return defaultValue;\n      }\n    }\n    \n    return typeof value === 'number' ? value : defaultValue;\n  }\n\n  /**\n   * Met à jour une valeur de timeout dans la configuration\n   * @param {string} path Chemin de la configuration (ex: 'api.standard')\n   * @param {number} value Nouvelle valeur pour le timeout\n   * @param {boolean} persist Si true, sauvegarde la configuration dans localStorage\n   */\n  setTimeout(path, value, persist = true) {\n    if (!this.isInitialized) {\n      this.initialize();\n    }\n    \n    if (typeof value !== 'number' || value < 0) {\n      console.error('Valeur de timeout invalide:', value);\n      return;\n    }\n    \n    const keys = path.split('.');\n    let target = this.config;\n    \n    // Naviguer à travers l'objet config pour trouver le bon niveau\n    for (let i = 0; i < keys.length - 1; i++) {\n      const key = keys[i];\n      \n      if (!(key in target)) {\n        target[key] = {};\n      }\n      \n      target = target[key];\n    }\n    \n    // Définir la valeur finale\n    const lastKey = keys[keys.length - 1];\n    target[lastKey] = value;\n    \n    // Persister si demandé\n    if (persist) {\n      localStorage.setItem('timeout_config', JSON.stringify(this.config));\n    }\n  }\n\n  /**\n   * Crée un timeout avec suivi\n   * @param {Function} callback Fonction à exécuter\n   * @param {number} delay Délai en millisecondes\n   * @param {string} id Identifiant optionnel du timeout\n   * @returns {string} Identifiant du timeout\n   */\n  setTimeout(callback, delay, id = null) {\n    if (!this.isInitialized) {\n      this.initialize();\n    }\n    \n    // Générer un ID unique si non fourni\n    const timeoutId = id || `timeout_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n    \n    // Créer le timeout\n    const handle = setTimeout(() => {\n      this.activeTimeouts.delete(timeoutId);\n      callback();\n    }, delay);\n    \n    // Enregistrer le timeout\n    this.activeTimeouts.set(timeoutId, {\n      handle,\n      created: Date.now(),\n      delay,\n      expires: Date.now() + delay\n    });\n    \n    return timeoutId;\n  }\n\n  /**\n   * Crée un interval avec suivi\n   * @param {Function} callback Fonction à exécuter\n   * @param {number} delay Délai en millisecondes\n   * @param {string} id Identifiant optionnel de l'interval\n   * @returns {string} Identifiant de l'interval\n   */\n  setInterval(callback, delay, id = null) {\n    if (!this.isInitialized) {\n      this.initialize();\n    }\n    \n    // Générer un ID unique si non fourni\n    const intervalId = id || `interval_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n    \n    // Créer l'interval\n    const handle = setInterval(callback, delay);\n    \n    // Enregistrer l'interval\n    this.activeIntervals.set(intervalId, {\n      handle,\n      created: Date.now(),\n      delay\n    });\n    \n    return intervalId;\n  }\n\n  /**\n   * Annule un timeout par son identifiant\n   * @param {string} timeoutId Identifiant du timeout\n   * @returns {boolean} True si le timeout a été annulé\n   */\n  clearTimeout(timeoutId) {\n    if (this.activeTimeouts.has(timeoutId)) {\n      const { handle } = this.activeTimeouts.get(timeoutId);\n      clearTimeout(handle);\n      this.activeTimeouts.delete(timeoutId);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Annule un interval par son identifiant\n   * @param {string} intervalId Identifiant de l'interval\n   * @returns {boolean} True si l'interval a été annulé\n   */\n  clearInterval(intervalId) {\n    if (this.activeIntervals.has(intervalId)) {\n      const { handle } = this.activeIntervals.get(intervalId);\n      clearInterval(handle);\n      this.activeIntervals.delete(intervalId);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Exécute une fonction avec un timeout configurable\n   * @param {Function} fn Fonction à exécuter (Promise)\n   * @param {string} timeoutPath Chemin de la configuration du timeout\n   * @param {Object} options Options supplémentaires\n   * @returns {Promise} Résultat de la fonction ou rejet en cas de timeout\n   */\n  async withTimeout(fn, timeoutPath, options = {}) {\n    if (!this.isInitialized) {\n      this.initialize();\n    }\n    \n    const {\n      defaultTimeout = 10000,\n      onTimeout = null,\n      id = null,\n      abortable = false\n    } = options;\n    \n    // Récupérer la valeur de timeout\n    const timeout = this.getTimeout(timeoutPath, defaultTimeout);\n    \n    // Générer un ID pour cette opération\n    const operationId = id || `operation_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n    \n    // Créer un AbortController pour pouvoir annuler l'opération si nécessaire\n    const controller = abortable ? new AbortController() : null;\n    const signal = controller ? controller.signal : null;\n    \n    // Enregistrer l'opération\n    this.pendingOperations.set(operationId, {\n      id: operationId,\n      started: Date.now(),\n      timeout,\n      controller,\n      timeoutPath\n    });\n    \n    return new Promise((resolve, reject) => {\n      // Créer le timeout\n      const timeoutId = this.setTimeout(() => {\n        // Nettoyer\n        this.pendingOperations.delete(operationId);\n        \n        // Annuler l'opération si possible\n        if (controller) {\n          controller.abort();\n        }\n        \n        // Callback de timeout personnalisé\n        if (onTimeout) {\n          onTimeout(operationId, timeout);\n        }\n        \n        reject(new Error(`Opération ${operationId} expirée après ${timeout}ms`));\n      }, timeout, `timeout_for_${operationId}`);\n      \n      // Exécuter la fonction\n      Promise.resolve()\n        .then(() => fn(signal))\n        .then(result => {\n          // Succès, nettoyer\n          this.clearTimeout(timeoutId);\n          this.pendingOperations.delete(operationId);\n          resolve(result);\n        })\n        .catch(error => {\n          // Erreur, nettoyer\n          this.clearTimeout(timeoutId);\n          this.pendingOperations.delete(operationId);\n          reject(error);\n        });\n    });\n  }\n\n  /**\n   * Exécute une fonction avec retry automatique en cas d'échec\n   * @param {Function} fn Fonction à exécuter (Promise)\n   * @param {Object} options Options pour le retry\n   * @returns {Promise} Résultat de la fonction\n   */\n  async withRetry(fn, options = {}) {\n    if (!this.isInitialized) {\n      this.initialize();\n    }\n    \n    const {\n      maxAttempts = this.config.retry.maxAttempts,\n      baseDelay = this.config.retry.baseDelay,\n      maxDelay = this.config.retry.maxDelay,\n      factor = this.config.retry.factor,\n      shouldRetry = null,\n      onRetry = null,\n      timeoutPath = null\n    } = options;\n    \n    let attempt = 0;\n    \n    const execute = async () => {\n      try {\n        attempt++;\n        \n        // Exécuter avec timeout si spécifié\n        if (timeoutPath) {\n          return await this.withTimeout(fn, timeoutPath);\n        } else {\n          return await fn();\n        }\n      } catch (error) {\n        // Vérifier si on doit réessayer\n        const canRetry = \n          attempt < maxAttempts && \n          (!shouldRetry || shouldRetry(error, attempt));\n        \n        if (!canRetry) {\n          throw error;\n        }\n        \n        // Calculer le délai avec backoff exponentiel\n        const delay = Math.min(\n          baseDelay * Math.pow(factor, attempt - 1),\n          maxDelay\n        );\n        \n        // Notifier de la nouvelle tentative\n        if (onRetry) {\n          onRetry(error, attempt, delay);\n        }\n        \n        // Attendre avant de réessayer\n        await new Promise(resolve => setTimeout(resolve, delay));\n        \n        // Réessayer\n        return execute();\n      }\n    };\n    \n    return execute();\n  }\n\n  /**\n   * Exécute plusieurs fonctions en parallèle avec un timeout global\n   * @param {Array<Function>} fns Fonctions à exécuter\n   * @param {string} timeoutPath Chemin de la configuration du timeout\n   * @param {Object} options Options supplémentaires\n   * @returns {Promise<Array>} Résultats des fonctions\n   */\n  async withParallelTimeout(fns, timeoutPath, options = {}) {\n    if (!this.isInitialized) {\n      this.initialize();\n    }\n    \n    const {\n      defaultTimeout = 30000,\n      allOrNothing = false,\n      onTimeout = null\n    } = options;\n    \n    const timeout = this.getTimeout(timeoutPath, defaultTimeout);\n    const operationId = `parallel_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n    \n    return new Promise((resolve, reject) => {\n      // Créer le timeout global\n      const timeoutId = this.setTimeout(() => {\n        if (onTimeout) {\n          onTimeout(operationId, timeout);\n        }\n        \n        if (allOrNothing) {\n          reject(new Error(`Opérations parallèles expirées après ${timeout}ms`));\n        } else {\n          // Résoudre avec les résultats partiels et des erreurs pour les opérations en timeout\n          resolve(promises.map((p, i) => {\n            return p._settled ? p._result : new Error(`Opération ${i} expirée`);\n          }));\n        }\n      }, timeout, `timeout_for_${operationId}`);\n      \n      // Exécuter les fonctions avec tracking\n      const promises = fns.map((fn, i) => {\n        const p = Promise.resolve().then(() => fn());\n        \n        // Ajouter des propriétés pour le tracking\n        p._settled = false;\n        p._result = null;\n        \n        return p.then(result => {\n          p._settled = true;\n          p._result = result;\n          return result;\n        }).catch(error => {\n          p._settled = true;\n          p._result = error;\n          throw error;\n        });\n      });\n      \n      // Attendre toutes les fonctions\n      Promise.all(promises)\n        .then(results => {\n          this.clearTimeout(timeoutId);\n          resolve(results);\n        })\n        .catch(error => {\n          if (allOrNothing) {\n            this.clearTimeout(timeoutId);\n            reject(error);\n          } else {\n            // En mode partiel, on attend que toutes les promesses soient résolues/rejetées\n            Promise.allSettled(promises).then(() => {\n              this.clearTimeout(timeoutId);\n              resolve(promises.map(p => p._result));\n            });\n          }\n        });\n    });\n  }\n\n  /**\n   * Exécute une fonction avec un debounce\n   * @param {Function} fn Fonction à exécuter\n   * @param {number} delay Délai de debounce\n   * @param {Object} options Options supplémentaires\n   * @returns {Function} Fonction avec debounce\n   */\n  debounce(fn, delay = null, options = {}) {\n    if (!this.isInitialized) {\n      this.initialize();\n    }\n    \n    const {\n      timeoutPath = 'ui.debounce',\n      leading = false,\n      trailing = true,\n      maxWait = null\n    } = options;\n    \n    const actualDelay = delay || this.getTimeout(timeoutPath, 300);\n    let timeoutId = null;\n    let lastArgs = null;\n    let lastThis = null;\n    let lastCallTime = 0;\n    let lastInvokeTime = 0;\n    \n    function invokeFunc() {\n      const args = lastArgs;\n      const thisArg = lastThis;\n      \n      lastArgs = lastThis = null;\n      lastInvokeTime = Date.now();\n      \n      return fn.apply(thisArg, args);\n    }\n    \n    function shouldInvoke() {\n      const time = Date.now();\n      const timeSinceLastCall = time - lastCallTime;\n      const timeSinceLastInvoke = time - lastInvokeTime;\n      \n      return (\n        lastCallTime === 0 ||\n        timeSinceLastCall >= actualDelay ||\n        (maxWait !== null && timeSinceLastInvoke >= maxWait)\n      );\n    }\n    \n    function trailingEdge() {\n      timeoutId = null;\n      \n      if (trailing && lastArgs) {\n        return invokeFunc();\n      }\n      \n      lastArgs = lastThis = null;\n      return null;\n    }\n    \n    function leadingEdge() {\n      lastInvokeTime = Date.now();\n      \n      // Reset le timeout\n      timeoutId = setTimeout(trailingEdge, actualDelay);\n      \n      return leading ? invokeFunc() : null;\n    }\n    \n    function cancel() {\n      if (timeoutId !== null) {\n        clearTimeout(timeoutId);\n        timeoutId = null;\n      }\n      \n      lastArgs = lastThis = null;\n      lastCallTime = lastInvokeTime = 0;\n    }\n    \n    function flush() {\n      return timeoutId === null ? null : trailingEdge();\n    }\n    \n    function debounced(...args) {\n      const time = Date.now();\n      const isInvoking = shouldInvoke();\n      \n      lastArgs = args;\n      lastThis = this;\n      lastCallTime = time;\n      \n      if (isInvoking) {\n        if (timeoutId === null) {\n          return leadingEdge();\n        }\n        \n        if (maxWait !== null) {\n          // Gérer les appels pendant un maxWait\n          timeoutId = setTimeout(trailingEdge, actualDelay);\n          return invokeFunc();\n        }\n      }\n      \n      if (timeoutId === null) {\n        timeoutId = setTimeout(trailingEdge, actualDelay);\n      }\n      \n      return null;\n    }\n    \n    debounced.cancel = cancel;\n    debounced.flush = flush;\n    \n    return debounced;\n  }\n\n  /**\n   * Exécute une fonction avec un throttle\n   * @param {Function} fn Fonction à exécuter\n   * @param {number} delay Délai de throttle\n   * @param {Object} options Options supplémentaires\n   * @returns {Function} Fonction avec throttle\n   */\n  throttle(fn, delay = null, options = {}) {\n    if (!this.isInitialized) {\n      this.initialize();\n    }\n    \n    const {\n      timeoutPath = 'ui.throttle',\n      leading = true,\n      trailing = true\n    } = options;\n    \n    const actualDelay = delay || this.getTimeout(timeoutPath, 100);\n    \n    return this.debounce(fn, actualDelay, {\n      leading,\n      trailing,\n      maxWait: actualDelay\n    });\n  }\n\n  /**\n   * Libère les ressources en annulant tous les timeouts et intervals actifs\n   */\n  dispose() {\n    // Arrêter tous les timeouts\n    for (const [id, { handle }] of this.activeTimeouts.entries()) {\n      clearTimeout(handle);\n    }\n    \n    // Arrêter tous les intervals\n    for (const [id, { handle }] of this.activeIntervals.entries()) {\n      clearInterval(handle);\n    }\n    \n    // Réinitialiser les collections\n    this.activeTimeouts.clear();\n    this.activeIntervals.clear();\n    this.pendingOperations.clear();\n    \n    console.info('Service de timeout libéré');\n  }\n}\n\n// Créer une instance singleton du service\nconst timeoutConfigService = new TimeoutConfigService();\n\nexport { DEFAULT_TIMEOUT_CONFIG };\nexport default timeoutConfigService;\n","/**\n * Utilitaire de détection de performance pour optimiser les visualisations 3D\n * Détecte automatiquement les capacités de l'appareil et ajuste la qualité du rendu\n */\n\n// Exporter les niveaux de performance pour pouvoir les utiliser dans d'autres fichiers\nexport const PERF_LEVELS = {\n  ULTRA_LOW: 0,   // Appareils très anciens ou très contraints\n  LOW: 1,         // Appareils d'entrée de gamme ou anciens\n  MEDIUM_LOW: 2,  // Appareils intermédiaires faibles\n  MEDIUM: 3,      // Appareils moyens\n  MEDIUM_HIGH: 4, // Appareils intermédiaires puissants\n  HIGH: 5,        // Appareils haut de gamme\n  ULTRA_HIGH: 6   // Appareils haut de gamme\n};\n\nclass PerformanceDetector {\n  constructor() {\n    // Niveaux de performance\n    this.PERF_LEVELS = PERF_LEVELS;\n    \n    // Niveaux de qualité correspondants\n    this.QUALITY_PRESETS = {\n      ULTRA_LOW: {\n        terrainSegments: 32,\n        terrainTexture: 512,\n        usePostProcessing: false,\n        useRealisticLighting: false,\n        useShadows: false,\n        drawDistance: 5000,\n        useAntialiasing: false,\n        useBloom: false,\n        particleDensity: 0.2,\n        maxPointsOfInterest: 5,\n        maxBackgroundModels: 0\n      },\n      LOW: {\n        terrainSegments: 64,\n        terrainTexture: 1024,\n        usePostProcessing: false,\n        useRealisticLighting: false,\n        useShadows: false,\n        drawDistance: 8000,\n        useAntialiasing: false,\n        useBloom: false,\n        particleDensity: 0.4,\n        maxPointsOfInterest: 10,\n        maxBackgroundModels: 2\n      },\n      MEDIUM_LOW: {\n        terrainSegments: 96,\n        terrainTexture: 1024,\n        usePostProcessing: false,\n        useRealisticLighting: true,\n        useShadows: false,\n        drawDistance: 10000,\n        useAntialiasing: true,\n        useBloom: false,\n        particleDensity: 0.6,\n        maxPointsOfInterest: 15,\n        maxBackgroundModels: 5\n      },\n      MEDIUM: {\n        terrainSegments: 128,\n        terrainTexture: 2048,\n        usePostProcessing: true,\n        useRealisticLighting: true,\n        useShadows: true,\n        drawDistance: 12000,\n        useAntialiasing: true,\n        useBloom: false,\n        particleDensity: 0.7,\n        maxPointsOfInterest: 20,\n        maxBackgroundModels: 8\n      },\n      MEDIUM_HIGH: {\n        terrainSegments: 160,\n        terrainTexture: 2048,\n        usePostProcessing: true,\n        useRealisticLighting: true,\n        useShadows: true,\n        drawDistance: 15000,\n        useAntialiasing: true,\n        useBloom: true,\n        particleDensity: 0.8,\n        maxPointsOfInterest: 30,\n        maxBackgroundModels: 12\n      },\n      HIGH: {\n        terrainSegments: 192,\n        terrainTexture: 4096,\n        usePostProcessing: true,\n        useRealisticLighting: true,\n        useShadows: true,\n        drawDistance: 20000,\n        useAntialiasing: true,\n        useBloom: true,\n        particleDensity: 0.9,\n        maxPointsOfInterest: 50,\n        maxBackgroundModels: 20\n      },\n      ULTRA_HIGH: {\n        terrainSegments: 256,\n        terrainTexture: 4096,\n        usePostProcessing: true,\n        useRealisticLighting: true,\n        useShadows: true,\n        drawDistance: 30000,\n        useAntialiasing: true,\n        useBloom: true,\n        particleDensity: 1.0,\n        maxPointsOfInterest: 100,\n        maxBackgroundModels: 30\n      }\n    };\n    \n    // État de détection\n    this.perfLevel = null; // Niveau de performance détecté\n    this.isDetecting = false;\n    this.onDetectionComplete = null;\n    this.detectionTimeout = 10000; // 10 secondes max pour la détection\n    \n    // Paramètres du test\n    this.testDuration = 3000; // 3 secondes\n    this.targetFPS = 60;\n    this.minimumAcceptableFPS = 30;\n    \n    // Cache pour les réglages utilisateur\n    this.userOverrides = {};\n    this.storageKey = 'gec_performance_settings';\n    \n    // Niveau par défaut en attendant la détection\n    this.defaultLevel = PERF_LEVELS.MEDIUM;\n  }\n  \n  /**\n   * Détecte le niveau de performance de l'appareil\n   * @param {Function} callback - Fonction appelée une fois la détection terminée\n   * @returns {Promise} Résultat de la détection avec niveau de performance\n   */\n  async detectPerformance(callback = null) {\n    if (this.isDetecting) {\n      console.log('Détection de performance déjà en cours');\n      return;\n    }\n    \n    // Configurer la promesse et le timeout\n    this.isDetecting = true;\n    this.onDetectionComplete = callback;\n    \n    const detectionPromise = new Promise(async (resolve) => {\n      console.log('Démarrage de la détection de performance...');\n      \n      // Essayer de charger les préférences utilisateur\n      const savedSettings = this._loadUserSettings();\n      if (savedSettings && savedSettings.userSelectedLevel !== undefined) {\n        console.log('Utilisation des réglages utilisateur sauvegardés');\n        this.perfLevel = savedSettings.userSelectedLevel;\n        this.isDetecting = false;\n        if (this.onDetectionComplete) this.onDetectionComplete(this.perfLevel);\n        resolve({\n          level: this.perfLevel,\n          preset: this._getQualityPreset(),\n          source: 'user_preference'\n        });\n        return;\n      }\n      \n      // Détection multi-facteurs\n      try {\n        // 1. Niveau initial basé sur l'appareil et le navigateur\n        const initialLevel = this._detectInitialLevel();\n        \n        // 2. Test de FPS pour validation\n        const fpsResult = await this._runFPSTest();\n        \n        // 3. Déterminer le niveau final basé sur une combinaison de facteurs\n        this.perfLevel = this._determineLevelFromFPS(fpsResult, initialLevel);\n        \n        // 4. Ajustements additionnels basés sur la mémoire disponible et la résolution\n        this.perfLevel = this._adjustForMemoryAndResolution(this.perfLevel);\n        \n        console.log(`Détection terminée: niveau de performance ${this.perfLevel}`);\n        \n        // Sauvegarder le résultat pour les futures visites\n        this._saveDetectionResult();\n        \n        // Appeler le callback si fourni\n        if (this.onDetectionComplete) this.onDetectionComplete(this.perfLevel);\n        \n        this.isDetecting = false;\n        resolve({\n          level: this.perfLevel,\n          preset: this._getQualityPreset(),\n          source: 'detection',\n          fps: fpsResult\n        });\n      } catch (error) {\n        console.error('Erreur lors de la détection de performance:', error);\n        // En cas d'erreur, utiliser un niveau par défaut sécurisé\n        this.perfLevel = PERF_LEVELS.MEDIUM_LOW;\n        this.isDetecting = false;\n        \n        if (this.onDetectionComplete) this.onDetectionComplete(this.perfLevel);\n        \n        resolve({\n          level: this.perfLevel,\n          preset: this._getQualityPreset(),\n          source: 'error_fallback',\n          error: error.message\n        });\n      }\n    });\n    \n    // Ajouter un timeout de sécurité\n    const timeoutPromise = new Promise((resolve) => {\n      setTimeout(() => {\n        if (this.isDetecting) {\n          console.warn('Timeout de détection de performance');\n          this.isDetecting = false;\n          this.perfLevel = this.defaultLevel;\n          \n          if (this.onDetectionComplete) this.onDetectionComplete(this.perfLevel);\n          \n          resolve({\n            level: this.perfLevel,\n            preset: this._getQualityPreset(),\n            source: 'timeout'\n          });\n        }\n      }, this.detectionTimeout);\n    });\n    \n    // Retourne le premier qui termine: la détection ou le timeout\n    return Promise.race([detectionPromise, timeoutPromise]);\n  }\n  \n  /**\n   * Obtient les réglages de qualité correspondant au niveau détecté\n   * @param {number} customLevel - Niveau personnalisé (optionnel)\n   * @returns {Object} Réglages de qualité\n   */\n  getQualitySettings(customLevel = null) {\n    // Si pas encore détecté, utiliser le niveau par défaut\n    if (this.perfLevel === null && customLevel === null) {\n      console.warn('Niveau de performance non détecté, utilisation du niveau par défaut');\n      return this._getLevelPreset(this.defaultLevel);\n    }\n    \n    const level = customLevel !== null ? customLevel : this.perfLevel;\n    const preset = this._getLevelPreset(level);\n    \n    // Appliquer les overrides utilisateur\n    return { ...preset, ...this.userOverrides };\n  }\n  \n  /**\n   * Définit manuellement le niveau de qualité\n   * @param {number} level - Niveau de qualité\n   * @param {boolean} save - Sauvegarder le réglage pour les visites futures\n   * @returns {Object} Nouveaux réglages\n   */\n  setQualityLevel(level, save = true) {\n    if (!Object.values(PERF_LEVELS).includes(level)) {\n      console.error('Niveau de qualité invalide');\n      return this.getQualitySettings();\n    }\n    \n    this.perfLevel = level;\n    \n    if (save) {\n      this._saveUserSettings({ userSelectedLevel: level });\n    }\n    \n    return this.getQualitySettings();\n  }\n  \n  /**\n   * Remplace certains paramètres de qualité\n   * @param {Object} overrides - Paramètres à remplacer\n   * @param {boolean} save - Sauvegarder les overrides\n   * @returns {Object} Réglages mis à jour\n   */\n  overrideSettings(overrides, save = true) {\n    this.userOverrides = { ...this.userOverrides, ...overrides };\n    \n    if (save) {\n      this._saveUserSettings({ overrides: this.userOverrides });\n    }\n    \n    return this.getQualitySettings();\n  }\n  \n  /**\n   * Réinitialise tous les paramètres à leur valeur détectée\n   * @param {boolean} clearSaved - Effacer les préférences sauvegardées\n   * @returns {Object} Réglages réinitialisés\n   */\n  resetToDetectedSettings(clearSaved = true) {\n    this.userOverrides = {};\n    \n    if (clearSaved) {\n      localStorage.removeItem(this.storageKey);\n    }\n    \n    // Re-détecter si nécessaire\n    if (this.perfLevel === null) {\n      this.detectPerformance();\n      return this._getLevelPreset(this.defaultLevel);\n    }\n    \n    return this.getQualitySettings();\n  }\n  \n  /**\n   * Précharge les ressources à basse résolution puis améliore progressivement\n   * @param {Function} preloadCallback - Fonction appelée pour précharger à basse résolution\n   * @param {Function} upgradeCallback - Fonction appelée pour améliorer la qualité\n   * @returns {Promise} Résultat du préchargement\n   */\n  async progressiveLoad(preloadCallback, upgradeCallback) {\n    // Assurer que la détection est terminée\n    if (this.perfLevel === null) {\n      await this.detectPerformance();\n    }\n    \n    // Démarrer avec les paramètres de qualité basse, quelle que soit la détection\n    const lowQualitySettings = this._getLevelPreset(PERF_LEVELS.LOW);\n    \n    // Précharger avec la qualité basse\n    try {\n      await preloadCallback(lowQualitySettings);\n      \n      // Passer aux réglages détectés (amélioration progressive)\n      const targetSettings = this.getQualitySettings();\n      \n      // Si le niveau cible est supérieur au niveau bas\n      if (this.perfLevel > PERF_LEVELS.LOW) {\n        // Calculer les paliers intermédiaires pour une transition fluide\n        const steps = this.perfLevel - PERF_LEVELS.LOW;\n        \n        for (let i = 1; i <= steps; i++) {\n          // Niveau intermédiaire\n          const intermediateLevel = PERF_LEVELS.LOW + i;\n          const intermediateSettings = this._getLevelPreset(intermediateLevel);\n          \n          // Pause pour permettre au rendu de se stabiliser\n          await new Promise(resolve => setTimeout(resolve, 300));\n          \n          // Appliquer le niveau intermédiaire\n          await upgradeCallback(intermediateSettings, i, steps);\n        }\n      }\n      \n      return { success: true, finalSettings: targetSettings };\n    } catch (error) {\n      console.error('Erreur lors du chargement progressif:', error);\n      return { \n        success: false, \n        error: error.message,\n        // Rester avec les paramètres basse qualité en cas d'échec\n        finalSettings: lowQualitySettings \n      };\n    }\n  }\n  \n  // ---------- Méthodes privées ----------\n  \n  /**\n   * Détecte le niveau initial basé sur l'appareil et le navigateur\n   * @returns {number} Niveau initial estimé\n   * @private\n   */\n  _detectInitialLevel() {\n    // Vérifier si on est sur mobile\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    \n    // Vérifier si c'est Safari (peut avoir des problèmes avec WebGL)\n    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    \n    // Vérifier la mémoire disponible (si l'API est disponible)\n    let memoryScore = 3; // Score moyen par défaut\n    if (navigator.deviceMemory) {\n      // deviceMemory donne la RAM en GB (0.25, 0.5, 1, 2, 4, 8)\n      memoryScore = Math.min(6, Math.max(1, Math.floor(navigator.deviceMemory)));\n    }\n    \n    // Vérifier le nombre de cœurs CPU (si disponible)\n    let cpuScore = 3; // Score moyen par défaut\n    if (navigator.hardwareConcurrency) {\n      // Échelle proportionnelle jusqu'à 16 cœurs\n      cpuScore = Math.min(6, Math.max(1, Math.floor(navigator.hardwareConcurrency / 2)));\n    }\n    \n    // Vérifier la résolution de l'écran\n    const pixelCount = window.screen.width * window.screen.height;\n    const resolutionScore = Math.min(6, Math.max(1, Math.floor(pixelCount / (1280 * 720))));\n    \n    // Calculer le score initial\n    let score = Math.round((memoryScore + cpuScore + resolutionScore) / 3);\n    \n    // Ajustements particuliers\n    if (isMobile) score = Math.min(score, 4); // Plafonner les mobiles à HIGH (pas ULTRA)\n    if (isSafari) score = Math.min(score, 3); // Safari peut avoir des problèmes avec les visualisations 3D avancées\n    \n    console.log(`Détection initiale: mobile=${isMobile}, safari=${isSafari}, mémoire=${memoryScore}, CPU=${cpuScore}, résolution=${resolutionScore}, score=${score}`);\n    \n    return score;\n  }\n  \n  /**\n   * Exécute un test de FPS pour mesurer les performances réelles\n   * @returns {Promise<Object>} Résultats du test avec FPS moyen\n   * @private\n   */\n  async _runFPSTest() {\n    return new Promise((resolve) => {\n      // Créer un élément canvas temporaire pour le test\n      const canvas = document.createElement('canvas');\n      canvas.width = 512;\n      canvas.height = 512;\n      canvas.style.position = 'absolute';\n      canvas.style.left = '-9999px';  // Hors écran\n      document.body.appendChild(canvas);\n      \n      const ctx = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n      if (!ctx) {\n        document.body.removeChild(canvas);\n        // Si WebGL n'est pas disponible, supposer des performances basses\n        resolve({ avgFps: 15, framesCount: 0, supported: false });\n        return;\n      }\n      \n      let lastTime = performance.now();\n      let frames = 0;\n      let totalFps = 0;\n      \n      // Animation de test\n      const testAnimation = () => {\n        // Effacer le canvas\n        ctx.clearColor(0.0, 0.0, 0.0, 1.0);\n        ctx.clear(ctx.COLOR_BUFFER_BIT);\n        \n        // Dessiner un triangle (contenu simple pour le test)\n        // (Code simplifié pour l'exemple)\n        \n        // Calculer le FPS\n        const now = performance.now();\n        const delta = now - lastTime;\n        const fps = 1000 / delta;\n        \n        frames++;\n        totalFps += fps;\n        lastTime = now;\n        \n        // Continuer le test jusqu'à la durée spécifiée\n        if (performance.now() - startTime < this.testDuration) {\n          requestAnimationFrame(testAnimation);\n        } else {\n          // Test terminé\n          document.body.removeChild(canvas);\n          \n          const avgFps = totalFps / frames;\n          console.log(`Test FPS terminé: ${avgFps.toFixed(2)} FPS moyen sur ${frames} frames`);\n          \n          resolve({\n            avgFps,\n            framesCount: frames,\n            duration: this.testDuration,\n            supported: true\n          });\n        }\n      };\n      \n      // Démarrer le test\n      const startTime = performance.now();\n      requestAnimationFrame(testAnimation);\n    });\n  }\n  \n  /**\n   * Détermine le niveau de performance à partir des résultats du test FPS\n   * @param {Object} fpsResult - Résultats du test FPS\n   * @param {number} initialLevel - Niveau initial estimé\n   * @returns {number} Niveau final déterminé\n   * @private\n   */\n  _determineLevelFromFPS(fpsResult, initialLevel) {\n    if (!fpsResult.supported) {\n      // WebGL non supporté, utiliser le niveau minimum\n      return PERF_LEVELS.ULTRA_LOW;\n    }\n    \n    const { avgFps } = fpsResult;\n    \n    // Échelle progressive des FPS pour les différents niveaux\n    if (avgFps < 20) return PERF_LEVELS.ULTRA_LOW;\n    if (avgFps < 30) return PERF_LEVELS.LOW;\n    if (avgFps < 40) return PERF_LEVELS.MEDIUM_LOW;\n    if (avgFps < 50) return PERF_LEVELS.MEDIUM;\n    if (avgFps < 55) return PERF_LEVELS.MEDIUM_HIGH;\n    if (avgFps < 59) return PERF_LEVELS.HIGH;\n    \n    // Si les FPS sont excellents, considérer le niveau initial pour décider ULTRA_HIGH\n    return avgFps >= 59 && initialLevel >= PERF_LEVELS.HIGH \n      ? PERF_LEVELS.ULTRA_HIGH \n      : PERF_LEVELS.HIGH;\n  }\n  \n  /**\n   * Ajuste le niveau en fonction de la mémoire et de la résolution\n   * @param {number} level - Niveau à ajuster\n   * @returns {number} Niveau ajusté\n   * @private\n   */\n  _adjustForMemoryAndResolution(level) {\n    // Ajustements supplémentaires basés sur la mémoire\n    if (navigator.deviceMemory) {\n      if (navigator.deviceMemory <= 2 && level > PERF_LEVELS.MEDIUM) {\n        level = PERF_LEVELS.MEDIUM;\n      }\n      if (navigator.deviceMemory <= 1 && level > PERF_LEVELS.LOW) {\n        level = PERF_LEVELS.LOW;\n      }\n    }\n    \n    // Ajustements basés sur la résolution d'écran\n    const pixelCount = window.screen.width * window.screen.height;\n    if (pixelCount > 2560 * 1440 && level < PERF_LEVELS.MEDIUM_HIGH) {\n      // Écrans haute résolution ont besoin d'au moins MEDIUM_HIGH pour un bon rendu\n      level = PERF_LEVELS.MEDIUM_HIGH;\n    }\n    \n    // Protection contre les appareils à très haute résolution mais faibles performances\n    if (pixelCount > 3840 * 2160 && navigator.deviceMemory && navigator.deviceMemory <= 4) {\n      level = Math.min(level, PERF_LEVELS.MEDIUM_HIGH);\n    }\n    \n    return level;\n  }\n  \n  /**\n   * Obtient le preset de qualité pour un niveau donné\n   * @param {number} level - Niveau de performance\n   * @returns {Object} Preset de qualité\n   * @private\n   */\n  _getLevelPreset(level) {\n    switch (level) {\n      case PERF_LEVELS.ULTRA_LOW:\n        return this.QUALITY_PRESETS.ULTRA_LOW;\n      case PERF_LEVELS.LOW:\n        return this.QUALITY_PRESETS.LOW;\n      case PERF_LEVELS.MEDIUM_LOW:\n        return this.QUALITY_PRESETS.MEDIUM_LOW;\n      case PERF_LEVELS.MEDIUM:\n        return this.QUALITY_PRESETS.MEDIUM;\n      case PERF_LEVELS.MEDIUM_HIGH:\n        return this.QUALITY_PRESETS.MEDIUM_HIGH;\n      case PERF_LEVELS.HIGH:\n        return this.QUALITY_PRESETS.HIGH;\n      case PERF_LEVELS.ULTRA_HIGH:\n        return this.QUALITY_PRESETS.ULTRA_HIGH;\n      default:\n        return this.QUALITY_PRESETS.MEDIUM;\n    }\n  }\n  \n  /**\n   * Obtient le preset de qualité pour le niveau détecté actuel\n   * @returns {Object} Preset de qualité\n   * @private\n   */\n  _getQualityPreset() {\n    return this._getLevelPreset(this.perfLevel || this.defaultLevel);\n  }\n  \n  /**\n   * Sauvegarde le résultat de la détection\n   * @private\n   */\n  _saveDetectionResult() {\n    localStorage.setItem(this.storageKey, JSON.stringify({\n      detectedLevel: this.perfLevel,\n      timestamp: Date.now(),\n      userAgent: navigator.userAgent\n    }));\n  }\n  \n  /**\n   * Sauvegarde les préférences utilisateur\n   * @param {Object} settings - Paramètres à sauvegarder\n   * @private\n   */\n  _saveUserSettings(settings) {\n    const current = this._loadUserSettings() || {};\n    localStorage.setItem(this.storageKey, JSON.stringify({\n      ...current,\n      ...settings,\n      timestamp: Date.now()\n    }));\n  }\n  \n  /**\n   * Charge les préférences utilisateur\n   * @returns {Object|null} Paramètres sauvegardés ou null\n   * @private\n   */\n  _loadUserSettings() {\n    try {\n      const saved = localStorage.getItem(this.storageKey);\n      return saved ? JSON.parse(saved) : null;\n    } catch (e) {\n      console.error('Erreur lors du chargement des préférences:', e);\n      return null;\n    }\n  }\n}\n\n// Exporter une instance unique\nconst performanceDetector = new PerformanceDetector();\nexport default performanceDetector;\n","/**\n * deviceCapabilityDetector.js\n * Système avancé de détection des capacités de l'appareil\n * \n * Ce module fournit une détection précise des capacités matérielles et réseau\n * pour optimiser les performances des composants 3D et de l'interface utilisateur.\n */\n\nimport { PERF_LEVELS } from './PerformanceDetector';\n\nclass DeviceCapabilityDetector {\n  constructor() {\n    this.capabilities = {\n      // Capacités GPU\n      gpu: {\n        webGLSupport: false,\n        webGL2Support: false,\n        renderer: null,\n        vendor: null,\n        estimatedMemory: 0,\n        maxTextureSize: 0,\n        maxCubemapSize: 0,\n        glExtensions: [],\n        isMobileGPU: false\n      },\n      // CPU\n      cpu: {\n        cores: navigator.hardwareConcurrency || 2,\n        estimatedPerformance: 'medium'\n      },\n      // Écran\n      screen: {\n        resolution: { width: window.screen.width, height: window.screen.height },\n        pixelRatio: window.devicePixelRatio || 1,\n        effectiveResolution: {\n          width: Math.round(window.screen.width * (window.devicePixelRatio || 1)),\n          height: Math.round(window.screen.height * (window.devicePixelRatio || 1))\n        },\n        isHighDensity: (window.devicePixelRatio || 1) > 1.5\n      },\n      // Réseau\n      network: {\n        type: 'unknown',\n        effectiveType: 'unknown',\n        downlink: 0,\n        rtt: 0,\n        saveData: false\n      },\n      // Flags divers\n      flags: {\n        isMobile: false,\n        isTablet: false,\n        isLowEndDevice: false,\n        hasBatteryConstraints: false,\n        preferReducedMotion: false,\n        isOffline: !navigator.onLine\n      },\n      // Niveau de performance global\n      performanceLevel: PERF_LEVELS.MEDIUM\n    };\n    \n    this.benchmarkResults = null;\n    this.detectionComplete = false;\n    \n    // Initialiser la détection\n    this.detect();\n  }\n  \n  /**\n   * Récupère les capacités détectées\n   * @returns {Object} Objet contenant les capacités détectées\n   */\n  getCapabilities() {\n    if (!this.detectionComplete) {\n      console.warn('DeviceCapabilityDetector: getCapabilities appelé avant la fin de la détection');\n    }\n    return this.capabilities;\n  }\n  \n  /**\n   * Lance la détection complète des capacités\n   * @returns {Promise<Object>} Promesse résolue avec les capacités détectées\n   */\n  async detect() {\n    try {\n      // Détection simultanée des différentes capacités\n      await Promise.all([\n        this.detectGPUCapabilities(),\n        this.detectNetworkConditions(),\n        this.detectAccessibilityPreferences(),\n        this.detectDeviceType(),\n        this.detectBatteryStatus()\n      ]);\n      \n      // Charger les résultats précédents s'ils existent\n      this.loadCachedResults();\n      \n      // Exécuter le benchmark seulement si nécessaire (pas de résultats ou plus de 24h)\n      const needsBenchmark = !this.benchmarkResults || \n        (Date.now() - this.benchmarkResults.timestamp > 24 * 60 * 60 * 1000);\n        \n      if (needsBenchmark) {\n        this.benchmarkResults = await this.runLightBenchmark();\n        this.cacheBenchmarkResults();\n      }\n      \n      // Finaliser la détection\n      this.finalizeDetection();\n      this.detectionComplete = true;\n      \n      console.log('DeviceCapabilityDetector: détection terminée', {\n        performanceLevel: this.getPerformanceLevelName(this.capabilities.performanceLevel),\n        isMobile: this.capabilities.flags.isMobile,\n        gpuMemory: this.capabilities.gpu.estimatedMemory + 'MB',\n        cores: this.capabilities.cpu.cores\n      });\n      \n    } catch (error) {\n      console.error('DeviceCapabilityDetector: erreur lors de la détection', error);\n      // En cas d'erreur, utiliser des valeurs par défaut conservatrices\n      this.applyDefaultValues();\n      this.detectionComplete = true;\n    }\n    \n    return this.capabilities;\n  }\n  \n  /**\n   * Détecte les capacités GPU via WebGL\n   * @private\n   */\n  async detectGPUCapabilities() {\n    try {\n      // Tester le support WebGL\n      this.capabilities.gpu.webGLSupport = this.isWebGLSupported();\n      this.capabilities.gpu.webGL2Support = this.isWebGL2Supported();\n      \n      if (!this.capabilities.gpu.webGLSupport) {\n        console.warn('DeviceCapabilityDetector: WebGL non supporté');\n        return;\n      }\n      \n      // Créer un canvas temporaire\n      const canvas = document.createElement('canvas');\n      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n      \n      if (!gl) return;\n      \n      // Récupérer les informations du renderer\n      const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');\n      if (debugInfo) {\n        this.capabilities.gpu.renderer = gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);\n        this.capabilities.gpu.vendor = gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);\n      }\n      \n      // Estimer la mémoire GPU\n      const gpuMemory = this.estimateGPUMemory(gl, this.capabilities.gpu.renderer);\n      this.capabilities.gpu.estimatedMemory = gpuMemory;\n      \n      // Taille de texture maximale\n      this.capabilities.gpu.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n      this.capabilities.gpu.maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n      \n      // Extensions disponibles\n      this.capabilities.gpu.glExtensions = gl.getSupportedExtensions();\n      \n      // Détecter si c'est un GPU mobile\n      this.capabilities.gpu.isMobileGPU = this.isMobileGPU(this.capabilities.gpu.renderer);\n      \n    } catch (error) {\n      console.error('DeviceCapabilityDetector: erreur lors de la détection GPU', error);\n    }\n  }\n  \n  /**\n   * Détecte les conditions réseau via Network Information API\n   * @private\n   */\n  async detectNetworkConditions() {\n    try {\n      const connection = navigator.connection || \n                         navigator.mozConnection || \n                         navigator.webkitConnection;\n                         \n      if (connection) {\n        this.capabilities.network.type = connection.type || 'unknown';\n        this.capabilities.network.effectiveType = connection.effectiveType || 'unknown';\n        this.capabilities.network.downlink = connection.downlink || 0;\n        this.capabilities.network.rtt = connection.rtt || 0;\n        this.capabilities.network.saveData = !!connection.saveData;\n        \n        // Écouter les changements de connexion\n        connection.addEventListener('change', () => {\n          this.capabilities.network.type = connection.type || 'unknown';\n          this.capabilities.network.effectiveType = connection.effectiveType || 'unknown';\n          this.capabilities.network.downlink = connection.downlink || 0;\n          this.capabilities.network.rtt = connection.rtt || 0;\n          this.capabilities.network.saveData = !!connection.saveData;\n        });\n      }\n    } catch (error) {\n      console.error('DeviceCapabilityDetector: erreur lors de la détection réseau', error);\n    }\n  }\n  \n  /**\n   * Détecte les préférences d'accessibilité\n   * @private\n   */\n  async detectAccessibilityPreferences() {\n    try {\n      if (window.matchMedia) {\n        const motionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n        this.capabilities.flags.preferReducedMotion = motionQuery.matches;\n        \n        // Écouter les changements de préférence\n        motionQuery.addEventListener('change', (e) => {\n          this.capabilities.flags.preferReducedMotion = e.matches;\n        });\n      }\n    } catch (error) {\n      console.error('DeviceCapabilityDetector: erreur lors de la détection des préférences', error);\n    }\n  }\n  \n  /**\n   * Détecte le type d'appareil (mobile, tablette, desktop)\n   * @private\n   */\n  async detectDeviceType() {\n    try {\n      // Détection via user agent\n      const userAgent = navigator.userAgent || navigator.vendor || window.opera || '';\n      const mobileRegex = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i;\n      const tabletRegex = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(ad|hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i;\n      \n      this.capabilities.flags.isMobile = mobileRegex.test(userAgent);\n      this.capabilities.flags.isTablet = tabletRegex.test(userAgent) && !mobileRegex.test(userAgent);\n      \n      // Vérification supplémentaire basée sur la taille d'écran pour les tablettes\n      if (!this.capabilities.flags.isTablet && !this.capabilities.flags.isMobile) {\n        const minTabletWidth = 600;\n        const maxTabletWidth = 1024;\n        const screenWidth = window.screen.width;\n        \n        if (screenWidth >= minTabletWidth && screenWidth <= maxTabletWidth) {\n          this.capabilities.flags.isTablet = true;\n        }\n      }\n      \n      // Détecter les appareils de faible puissance\n      this.capabilities.flags.isLowEndDevice = this.isLowEndDevice();\n      \n    } catch (error) {\n      console.error('DeviceCapabilityDetector: erreur lors de la détection du type d\\'appareil', error);\n    }\n  }\n  \n  /**\n   * Détecte l'état de la batterie\n   * @private\n   */\n  async detectBatteryStatus() {\n    try {\n      if (navigator.getBattery) {\n        const battery = await navigator.getBattery();\n        \n        this.capabilities.flags.hasBatteryConstraints = \n          !battery.charging && battery.level < 0.3;\n          \n        // Écouter les changements de batterie\n        battery.addEventListener('levelchange', () => {\n          this.capabilities.flags.hasBatteryConstraints = \n            !battery.charging && battery.level < 0.3;\n        });\n        \n        battery.addEventListener('chargingchange', () => {\n          this.capabilities.flags.hasBatteryConstraints = \n            !battery.charging && battery.level < 0.3;\n        });\n      }\n    } catch (error) {\n      console.error('DeviceCapabilityDetector: erreur lors de la détection de la batterie', error);\n    }\n  }\n  \n  /**\n   * Charge les résultats de benchmark depuis le localStorage\n   * @private\n   */\n  loadCachedResults() {\n    try {\n      const cachedResults = localStorage.getItem('deviceBenchmarkResults');\n      if (cachedResults) {\n        this.benchmarkResults = JSON.parse(cachedResults);\n      }\n    } catch (error) {\n      console.error('DeviceCapabilityDetector: erreur lors du chargement des résultats', error);\n    }\n  }\n  \n  /**\n   * Exécute un benchmark léger pour évaluer les performances\n   * @returns {Promise<Object>} Résultats du benchmark\n   * @private\n   */\n  async runLightBenchmark() {\n    console.log('DeviceCapabilityDetector: démarrage du benchmark léger');\n    \n    const results = {\n      timestamp: Date.now(),\n      scores: {}\n    };\n    \n    try {\n      // Benchmark CPU (opérations mathématiques)\n      const cpuStartTime = performance.now();\n      let sum = 0;\n      for (let i = 0; i < 1000000; i++) {\n        sum += Math.sqrt(i) * Math.sin(i);\n      }\n      const cpuEndTime = performance.now();\n      results.scores.cpu = 1000 / (cpuEndTime - cpuStartTime);\n      \n      // Benchmark DOM\n      const domStartTime = performance.now();\n      const container = document.createElement('div');\n      document.body.appendChild(container);\n      for (let i = 0; i < 1000; i++) {\n        const el = document.createElement('div');\n        el.textContent = 'test';\n        el.style.backgroundColor = i % 2 === 0 ? 'red' : 'blue';\n        container.appendChild(el);\n      }\n      container.scrollTop = 100;\n      document.body.removeChild(container);\n      const domEndTime = performance.now();\n      results.scores.dom = 1000 / (domEndTime - domStartTime);\n      \n      // Si WebGL disponible, benchmark GPU\n      if (this.capabilities.gpu.webGLSupport) {\n        results.scores.gpu = await this.runWebGLBenchmark();\n      } else {\n        results.scores.gpu = 0;\n      }\n      \n      // Calcul du score global\n      results.scores.overall = (results.scores.cpu * 0.3 + \n                               results.scores.dom * 0.3 + \n                               results.scores.gpu * 0.4);\n      \n      console.log('DeviceCapabilityDetector: benchmark terminé', results.scores);\n      \n    } catch (error) {\n      console.error('DeviceCapabilityDetector: erreur lors du benchmark', error);\n      results.scores = {\n        cpu: 5,\n        dom: 5,\n        gpu: 5,\n        overall: 5\n      };\n    }\n    \n    return results;\n  }\n  \n  /**\n   * Exécute un benchmark WebGL pour évaluer les performances GPU\n   * @returns {Promise<number>} Score du benchmark\n   * @private\n   */\n  async runWebGLBenchmark() {\n    return new Promise((resolve) => {\n      try {\n        const canvas = document.createElement('canvas');\n        canvas.width = 512;\n        canvas.height = 512;\n        const gl = canvas.getContext('webgl');\n        \n        if (!gl) {\n          resolve(0);\n          return;\n        }\n        \n        // Vertex shader simple\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, `\n          attribute vec2 position;\n          void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n          }\n        `);\n        gl.compileShader(vertexShader);\n        \n        // Fragment shader avec calculs intensifs\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, `\n          precision mediump float;\n          uniform float time;\n          \n          void main() {\n            vec2 uv = gl_FragCoord.xy / 512.0;\n            float x = uv.x * sin(time * 0.1) * 10.0;\n            float y = uv.y * cos(time * 0.1) * 10.0;\n            \n            for(int i = 0; i < 10; i++) {\n              x = sin(x * y + time * 0.1) * 0.5 + 0.5;\n              y = cos(x * y + time * 0.1) * 0.5 + 0.5;\n            }\n            \n            gl_FragColor = vec4(x, y, x * y, 1.0);\n          }\n        `);\n        gl.compileShader(fragmentShader);\n        \n        // Créer le programme\n        const program = gl.createProgram();\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n        gl.linkProgram(program);\n        gl.useProgram(program);\n        \n        // Position attribute\n        const positionBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n          -1, -1,\n           1, -1,\n          -1,  1,\n           1,  1\n        ]), gl.STATIC_DRAW);\n        \n        const positionLocation = gl.getAttribLocation(program, 'position');\n        gl.enableVertexAttribArray(positionLocation);\n        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n        \n        // Time uniform\n        const timeLocation = gl.getUniformLocation(program, 'time');\n        \n        // Benchmark\n        let frames = 0;\n        const startTime = performance.now();\n        const maxTime = 1000; // 1 seconde de test\n        \n        const render = () => {\n          gl.uniform1f(timeLocation, performance.now() * 0.001);\n          gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n          frames++;\n          \n          const elapsedTime = performance.now() - startTime;\n          if (elapsedTime < maxTime) {\n            requestAnimationFrame(render);\n          } else {\n            const fps = frames / (elapsedTime * 0.001);\n            // Normaliser le score sur une échelle de 0 à 10\n            const normalizedScore = Math.min(fps / 30, 10);\n            resolve(normalizedScore);\n          }\n        };\n        \n        render();\n        \n      } catch (error) {\n        console.error('DeviceCapabilityDetector: erreur dans le benchmark WebGL', error);\n        resolve(0);\n      }\n    });\n  }\n  \n  /**\n   * Enregistre les résultats du benchmark dans localStorage\n   * @private\n   */\n  cacheBenchmarkResults() {\n    try {\n      if (this.benchmarkResults) {\n        localStorage.setItem('deviceBenchmarkResults', \n          JSON.stringify(this.benchmarkResults));\n      }\n    } catch (error) {\n      console.error('DeviceCapabilityDetector: erreur lors de la mise en cache', error);\n    }\n  }\n  \n  /**\n   * Finalise la détection et calcule le niveau de performance global\n   * @private\n   */\n  finalizeDetection() {\n    try {\n      // Déterminer le niveau de performance global\n      let performanceLevel = PERF_LEVELS.MEDIUM;\n      \n      if (this.capabilities.flags.isLowEndDevice || \n          this.capabilities.gpu.estimatedMemory < 512 ||\n          this.benchmarkResults?.scores.overall < 3) {\n        performanceLevel = PERF_LEVELS.LOW;\n      } else if (this.capabilities.gpu.estimatedMemory >= 2048 && \n                !this.capabilities.flags.isMobile &&\n                this.capabilities.cpu.cores >= 4 &&\n                this.benchmarkResults?.scores.overall > 7) {\n        performanceLevel = PERF_LEVELS.HIGH;\n      }\n      \n      // Ajuster en fonction des conditions réseau\n      if (this.capabilities.network.effectiveType === '2g' || \n          this.capabilities.network.effectiveType === 'slow-2g') {\n        performanceLevel = Math.max(PERF_LEVELS.ULTRA_LOW, performanceLevel - 2);\n      } else if (this.capabilities.network.effectiveType === '3g') {\n        performanceLevel = Math.max(PERF_LEVELS.LOW, performanceLevel - 1);\n      }\n      \n      // Ajuster en fonction des préférences d'accessibilité\n      if (this.capabilities.flags.preferReducedMotion) {\n        performanceLevel = Math.min(performanceLevel, PERF_LEVELS.MEDIUM);\n      }\n      \n      // Ajuster en fonction des contraintes de batterie\n      if (this.capabilities.flags.hasBatteryConstraints) {\n        performanceLevel = Math.max(PERF_LEVELS.LOW, performanceLevel - 1);\n      }\n      \n      this.capabilities.performanceLevel = performanceLevel;\n      \n    } catch (error) {\n      console.error('DeviceCapabilityDetector: erreur lors de la finalisation', error);\n      this.capabilities.performanceLevel = PERF_LEVELS.MEDIUM; // Valeur par défaut\n    }\n  }\n  \n  /**\n   * Applique des valeurs par défaut conservatrices en cas d'erreur\n   * @private\n   */\n  applyDefaultValues() {\n    this.capabilities.gpu.estimatedMemory = 512;\n    this.capabilities.flags.isLowEndDevice = true;\n    this.capabilities.performanceLevel = PERF_LEVELS.MEDIUM;\n  }\n  \n  /**\n   * Vérifie si WebGL est supporté\n   * @returns {boolean} true si WebGL est supporté\n   * @private\n   */\n  isWebGLSupported() {\n    try {\n      const canvas = document.createElement('canvas');\n      return !!(window.WebGLRenderingContext && \n        (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));\n    } catch (e) {\n      return false;\n    }\n  }\n  \n  /**\n   * Vérifie si WebGL2 est supporté\n   * @returns {boolean} true si WebGL2 est supporté\n   * @private\n   */\n  isWebGL2Supported() {\n    try {\n      const canvas = document.createElement('canvas');\n      return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));\n    } catch (e) {\n      return false;\n    }\n  }\n  \n  /**\n   * Estime la mémoire GPU disponible\n   * @param {WebGLRenderingContext} gl Contexte WebGL\n   * @param {string} renderer Nom du renderer\n   * @returns {number} Mémoire estimée en MB\n   * @private\n   */\n  estimateGPUMemory(gl, renderer) {\n    // Si l'API WEBGL_debug_renderer_info est disponible, on peut estimer la mémoire\n    // en fonction du nom du renderer\n    if (renderer) {\n      const rendererLower = renderer.toLowerCase();\n      \n      // GPUs mobiles\n      if (rendererLower.includes('adreno')) {\n        if (rendererLower.includes('adreno 6')) return 2048;\n        if (rendererLower.includes('adreno 5')) return 1024;\n        return 512;\n      }\n      \n      if (rendererLower.includes('mali')) {\n        if (rendererLower.includes('mali-g')) return 2048;\n        return 1024;\n      }\n      \n      if (rendererLower.includes('apple')) {\n        if (rendererLower.includes('a14') || rendererLower.includes('a15')) return 4096;\n        if (rendererLower.includes('a12') || rendererLower.includes('a13')) return 3072;\n        if (rendererLower.includes('a10') || rendererLower.includes('a11')) return 2048;\n        return 1536;\n      }\n      \n      // GPUs desktop\n      if (rendererLower.includes('nvidia') || rendererLower.includes('geforce')) {\n        if (rendererLower.includes('rtx')) return 8192;\n        if (rendererLower.includes('gtx 16') || rendererLower.includes('gtx 10')) return 6144;\n        return 4096;\n      }\n      \n      if (rendererLower.includes('amd') || rendererLower.includes('radeon')) {\n        if (rendererLower.includes('rx 6')) return 8192;\n        if (rendererLower.includes('rx 5')) return 6144;\n        return 4096;\n      }\n      \n      if (rendererLower.includes('intel')) {\n        if (rendererLower.includes('iris')) return 2048;\n        if (rendererLower.includes('uhd')) return 1536;\n        return 1024;\n      }\n    }\n    \n    // Estimation basée sur la taille de texture maximale\n    const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    if (maxTextureSize >= 16384) return 4096;\n    if (maxTextureSize >= 8192) return 2048;\n    if (maxTextureSize >= 4096) return 1024;\n    return 512;\n  }\n  \n  /**\n   * Détermine si c'est un GPU mobile\n   * @param {string} renderer Nom du renderer\n   * @returns {boolean} true si c'est un GPU mobile\n   * @private\n   */\n  isMobileGPU(renderer) {\n    if (!renderer) return false;\n    \n    const rendererLower = renderer.toLowerCase();\n    return rendererLower.includes('adreno') || \n           rendererLower.includes('mali') || \n           rendererLower.includes('sgx') ||\n           rendererLower.includes('apple') && (\n             rendererLower.includes('iphone') || \n             rendererLower.includes('ipad')\n           );\n  }\n  \n  /**\n   * Détermine si c'est un appareil de faible puissance\n   * @returns {boolean} true si c'est un appareil de faible puissance\n   * @private\n   */\n  isLowEndDevice() {\n    // Check pour memory\n    if ('deviceMemory' in navigator) {\n      if (navigator.deviceMemory < 2) return true;\n    }\n    \n    // Check pour CPU\n    if (navigator.hardwareConcurrency && navigator.hardwareConcurrency < 4) {\n      return true;\n    }\n    \n    // Check pour GPU\n    if (this.capabilities.gpu.estimatedMemory < 512) {\n      return true;\n    }\n    \n    return false;\n  }\n  \n  /**\n   * Convertit le niveau de performance en nom lisible\n   * @param {number} level Niveau de performance\n   * @returns {string} Nom du niveau de performance\n   * @private\n   */\n  getPerformanceLevelName(level) {\n    switch (level) {\n      case PERF_LEVELS.ULTRA_LOW: return 'Ultra faible';\n      case PERF_LEVELS.LOW: return 'Faible';\n      case PERF_LEVELS.MEDIUM: return 'Moyen';\n      case PERF_LEVELS.HIGH: return 'Élevé';\n      case PERF_LEVELS.ULTRA_HIGH: return 'Ultra élevé';\n      default: return 'Moyen';\n    }\n  }\n}\n\n// Export d'une instance unique\nconst deviceCapabilityDetector = new DeviceCapabilityDetector();\nexport default deviceCapabilityDetector;\n","/**\n * 3DConfigManager.js\n * Gestionnaire de configuration pour les rendus 3D\n * \n * Ce module définit les paramètres optimaux pour les rendus 3D\n * en fonction des capacités de l'appareil détectées.\n */\n\nimport deviceCapabilityDetector from './deviceCapabilityDetector';\nimport { PERF_LEVELS } from './PerformanceDetector';\n\nclass ThreeDConfigManager {\n  constructor() {\n    this.configs = {\n      // Configuration pour ColVisualization3D\n      colVisualization: {\n        // Configuration pour performances ultra faibles\n        [PERF_LEVELS.ULTRA_LOW]: {\n          terrainSegments: 32,\n          textureSize: 256,\n          drawDistance: 2500,\n          textureQuality: 'very-low',\n          shadowsEnabled: false,\n          postProcessingEnabled: false,\n          ambientOcclusionEnabled: false,\n          reflectionsEnabled: false,\n          maxPointsOfInterest: 5,\n          occlusionCullingEnabled: true,\n          modelDetailLevel: 'very-low',\n          interactiveObjects: 'minimal',\n          useSimplifiedGeometry: true,\n          maxParticles: 0,\n          fogEnabled: false,\n          animationLevel: 'none',\n          backgroundDetail: 'none',\n          lightingComplexity: 'basic',\n          maxFrameRate: 30\n        },\n        \n        // Configuration pour performances faibles\n        [PERF_LEVELS.LOW]: {\n          terrainSegments: 64,\n          textureSize: 512,\n          drawDistance: 5000,\n          textureQuality: 'low',\n          shadowsEnabled: false,\n          postProcessingEnabled: false,\n          ambientOcclusionEnabled: false,\n          reflectionsEnabled: false,\n          maxPointsOfInterest: 10,\n          occlusionCullingEnabled: true,\n          modelDetailLevel: 'low',\n          interactiveObjects: 'reduced',\n          useSimplifiedGeometry: true,\n          maxParticles: 100,\n          fogEnabled: true,\n          animationLevel: 'minimal',\n          backgroundDetail: 'low',\n          lightingComplexity: 'basic',\n          maxFrameRate: 45\n        },\n        \n        // Configuration pour performances moyennes\n        [PERF_LEVELS.MEDIUM]: {\n          terrainSegments: 128,\n          textureSize: 1024,\n          drawDistance: 10000,\n          textureQuality: 'medium',\n          shadowsEnabled: true,\n          shadowMapSize: 1024,\n          postProcessingEnabled: false,\n          ambientOcclusionEnabled: false,\n          reflectionsEnabled: false,\n          maxPointsOfInterest: 25,\n          occlusionCullingEnabled: true,\n          modelDetailLevel: 'medium',\n          interactiveObjects: 'standard',\n          useSimplifiedGeometry: false,\n          maxParticles: 500,\n          fogEnabled: true,\n          animationLevel: 'reduced',\n          backgroundDetail: 'medium',\n          lightingComplexity: 'standard',\n          maxFrameRate: 60\n        },\n        \n        // Configuration pour performances élevées\n        [PERF_LEVELS.HIGH]: {\n          terrainSegments: 256,\n          textureSize: 2048,\n          drawDistance: 15000,\n          textureQuality: 'high',\n          shadowsEnabled: true,\n          shadowMapSize: 2048,\n          postProcessingEnabled: true,\n          postProcessingEffects: ['bloom', 'fxaa'],\n          ambientOcclusionEnabled: true,\n          reflectionsEnabled: false,\n          maxPointsOfInterest: 40,\n          occlusionCullingEnabled: true,\n          modelDetailLevel: 'high',\n          interactiveObjects: 'all',\n          useSimplifiedGeometry: false,\n          maxParticles: 1000,\n          fogEnabled: true,\n          animationLevel: 'full',\n          backgroundDetail: 'high',\n          lightingComplexity: 'advanced',\n          maxFrameRate: 90\n        },\n        \n        // Configuration pour performances ultra élevées\n        [PERF_LEVELS.ULTRA_HIGH]: {\n          terrainSegments: 512,\n          textureSize: 4096,\n          drawDistance: 25000,\n          textureQuality: 'ultra',\n          shadowsEnabled: true,\n          shadowMapSize: 4096,\n          postProcessingEnabled: true,\n          postProcessingEffects: ['bloom', 'ssao', 'godrays', 'fxaa'],\n          ambientOcclusionEnabled: true,\n          reflectionsEnabled: true,\n          maxPointsOfInterest: 60,\n          occlusionCullingEnabled: false,\n          modelDetailLevel: 'ultra',\n          interactiveObjects: 'all',\n          useSimplifiedGeometry: false,\n          maxParticles: 5000,\n          fogEnabled: true,\n          animationLevel: 'full',\n          backgroundDetail: 'ultra',\n          lightingComplexity: 'physically-based',\n          maxFrameRate: 144\n        }\n      },\n      \n      // Configuration pour TrainingVisualizer3D\n      trainingVisualization: {\n        // Configuration pour performances ultra faibles\n        [PERF_LEVELS.ULTRA_LOW]: {\n          avatarSegments: 8,\n          environmentDetail: 'very-low',\n          maxCyclists: 2,\n          textureQuality: 'very-low',\n          shadowsEnabled: false,\n          effectsEnabled: false,\n          useSimplifiedPhysics: true,\n          maxFrameRate: 30,\n          drawDistance: 100,\n          animationFrameskip: 3,\n          backgroundEnabled: false,\n          reflectionQuality: 'none',\n          lightingQuality: 'basic',\n          maxTrainingObjects: 5\n        },\n        \n        // Configuration pour performances faibles\n        [PERF_LEVELS.LOW]: {\n          avatarSegments: 12,\n          environmentDetail: 'low',\n          maxCyclists: 3,\n          textureQuality: 'low',\n          shadowsEnabled: false,\n          effectsEnabled: false,\n          useSimplifiedPhysics: true,\n          maxFrameRate: 45,\n          drawDistance: 200,\n          animationFrameskip: 2,\n          backgroundEnabled: true,\n          reflectionQuality: 'none',\n          lightingQuality: 'basic',\n          maxTrainingObjects: 10\n        },\n        \n        // Configuration pour performances moyennes\n        [PERF_LEVELS.MEDIUM]: {\n          avatarSegments: 16,\n          environmentDetail: 'medium',\n          maxCyclists: 5,\n          textureQuality: 'medium',\n          shadowsEnabled: true,\n          effectsEnabled: true,\n          useSimplifiedPhysics: false,\n          maxFrameRate: 60,\n          drawDistance: 500,\n          animationFrameskip: 0,\n          backgroundEnabled: true,\n          reflectionQuality: 'low',\n          lightingQuality: 'standard',\n          maxTrainingObjects: 20\n        },\n        \n        // Configuration pour performances élevées\n        [PERF_LEVELS.HIGH]: {\n          avatarSegments: 24,\n          environmentDetail: 'high',\n          maxCyclists: 8,\n          textureQuality: 'high',\n          shadowsEnabled: true,\n          effectsEnabled: true,\n          useSimplifiedPhysics: false,\n          maxFrameRate: 90,\n          drawDistance: 1000,\n          animationFrameskip: 0,\n          backgroundEnabled: true,\n          reflectionQuality: 'medium',\n          lightingQuality: 'advanced',\n          maxTrainingObjects: 40\n        },\n        \n        // Configuration pour performances ultra élevées\n        [PERF_LEVELS.ULTRA_HIGH]: {\n          avatarSegments: 32,\n          environmentDetail: 'ultra',\n          maxCyclists: 12,\n          textureQuality: 'ultra',\n          shadowsEnabled: true,\n          effectsEnabled: true,\n          useSimplifiedPhysics: false,\n          maxFrameRate: 120,\n          drawDistance: 2000,\n          animationFrameskip: 0,\n          backgroundEnabled: true,\n          reflectionQuality: 'high',\n          lightingQuality: 'physically-based',\n          maxTrainingObjects: 60\n        }\n      }\n    };\n    \n    // Configuration spécifique pour les appareils mobiles\n    this.mobileOverrides = {\n      // Écrase certains paramètres pour optimiser sur mobile\n      shadowsEnabled: false,\n      postProcessingEnabled: false,\n      ambientOcclusionEnabled: false,\n      reflectionsEnabled: false,\n      drawDistance: 0.6, // multiplicateur\n      maxParticles: 0.3, // multiplicateur\n      maxFrameRate: Math.min, // prend le min entre la config standard et 60\n      backgroundDetail: level => Math.max(PERF_LEVELS.LOW, level - 1) // réduit de 1 niveau\n    };\n    \n    // Configuration spécifique pour les appareils en mode économie de batterie\n    this.batterySavingOverrides = {\n      shadowsEnabled: false,\n      postProcessingEnabled: false,\n      maxFrameRate: 30,\n      drawDistance: 0.5, // multiplicateur\n      terrainSegments: 0.5, // multiplicateur\n      textureQuality: level => Math.max(PERF_LEVELS.ULTRA_LOW, level - 2) // réduit de 2 niveaux\n    };\n  }\n  \n  /**\n   * Obtient la configuration optimale pour un composant 3D spécifique\n   * @param {string} componentType Type de composant ('colVisualization' ou 'trainingVisualization')\n   * @param {Object} [overrideFlags={}] Drapeaux pour forcer certaines options\n   * @returns {Object} Configuration optimale\n   */\n  getOptimalConfig(componentType, overrideFlags = {}) {\n    // Récupérer les capacités de l'appareil\n    const capabilities = deviceCapabilityDetector.getCapabilities();\n    let perfLevel = capabilities.performanceLevel;\n    \n    // Vérifier si on a une configuration pour ce composant\n    if (!this.configs[componentType]) {\n      console.warn(`3DConfigManager: configuration non trouvée pour ${componentType}`);\n      componentType = 'colVisualization'; // Fallback sur une config par défaut\n    }\n    \n    // Obtenir la configuration de base\n    let config = { ...this.configs[componentType][perfLevel] };\n    \n    // Appliquer les overrides pour mobile si nécessaire\n    if (capabilities.flags.isMobile || overrideFlags.forceMobileMode) {\n      config = this.applyMobileOverrides(config, perfLevel);\n    }\n    \n    // Appliquer les overrides pour économie de batterie si nécessaire\n    if (capabilities.flags.hasBatteryConstraints || overrideFlags.forceBatterySaving) {\n      config = this.applyBatterySavingOverrides(config, perfLevel);\n    }\n    \n    // Appliquer les overrides utilisateur si fournis\n    if (overrideFlags.userOverrides) {\n      config = { ...config, ...overrideFlags.userOverrides };\n    }\n    \n    // Garantir que les paramètres restent dans des limites raisonnables\n    config = this.sanitizeConfig(config);\n    \n    return config;\n  }\n  \n  /**\n   * Applique les overrides spécifiques aux appareils mobiles\n   * @param {Object} config Configuration de base\n   * @param {number} perfLevel Niveau de performance\n   * @returns {Object} Configuration modifiée\n   * @private\n   */\n  applyMobileOverrides(config, perfLevel) {\n    const result = { ...config };\n    \n    // Appliquer chaque override\n    Object.entries(this.mobileOverrides).forEach(([key, value]) => {\n      if (typeof value === 'function') {\n        // Si c'est une fonction, l'appliquer avec le niveau de performance\n        result[key] = value(perfLevel);\n      } else if (typeof value === 'number' && config[key] !== undefined) {\n        // Si c'est un multiplicateur\n        result[key] = Math.round(config[key] * value);\n      } else {\n        // Sinon remplacer directement\n        result[key] = value;\n      }\n    });\n    \n    return result;\n  }\n  \n  /**\n   * Applique les overrides pour le mode économie de batterie\n   * @param {Object} config Configuration de base\n   * @param {number} perfLevel Niveau de performance\n   * @returns {Object} Configuration modifiée\n   * @private\n   */\n  applyBatterySavingOverrides(config, perfLevel) {\n    const result = { ...config };\n    \n    // Appliquer chaque override\n    Object.entries(this.batterySavingOverrides).forEach(([key, value]) => {\n      if (typeof value === 'function') {\n        // Si c'est une fonction, l'appliquer avec le niveau de performance\n        result[key] = value(perfLevel);\n      } else if (typeof value === 'number' && config[key] !== undefined) {\n        // Si c'est un multiplicateur\n        result[key] = Math.round(config[key] * value);\n      } else {\n        // Sinon remplacer directement\n        result[key] = value;\n      }\n    });\n    \n    return result;\n  }\n  \n  /**\n   * Sanitize la configuration pour éviter des valeurs absurdes\n   * @param {Object} config Configuration à sanitizer\n   * @returns {Object} Configuration sanitizée\n   * @private\n   */\n  sanitizeConfig(config) {\n    const result = { ...config };\n    \n    // Limites minimales\n    if (result.terrainSegments) {\n      result.terrainSegments = Math.max(32, result.terrainSegments);\n    }\n    \n    if (result.textureSize) {\n      result.textureSize = Math.max(256, result.textureSize);\n    }\n    \n    if (result.drawDistance) {\n      result.drawDistance = Math.max(100, result.drawDistance);\n    }\n    \n    if (result.maxFrameRate) {\n      result.maxFrameRate = Math.max(24, result.maxFrameRate);\n    }\n    \n    return result;\n  }\n  \n  /**\n   * Génère un résumé des paramètres de la configuration\n   * @param {Object} config Configuration à résumer\n   * @returns {string} Résumé textuel de la configuration\n   */\n  generateConfigSummary(config) {\n    if (!config) return 'Configuration non disponible';\n    \n    const qualityIndicators = [\n      { prop: 'terrainSegments', high: 256, low: 64 },\n      { prop: 'textureSize', high: 2048, low: 512 },\n      { prop: 'shadowsEnabled', binary: true },\n      { prop: 'postProcessingEnabled', binary: true }\n    ];\n    \n    let qualityScore = 0;\n    let maxScore = 0;\n    \n    // Calculer un score de qualité basé sur les indicateurs\n    qualityIndicators.forEach(indicator => {\n      if (config[indicator.prop] !== undefined) {\n        if (indicator.binary) {\n          qualityScore += config[indicator.prop] ? 1 : 0;\n          maxScore += 1;\n        } else {\n          const normalized = Math.min(\n            1, \n            Math.max(0, (config[indicator.prop] - indicator.low) / (indicator.high - indicator.low))\n          );\n          qualityScore += normalized;\n          maxScore += 1;\n        }\n      }\n    });\n    \n    // Convertir en pourcentage\n    const qualityPercentage = Math.round((qualityScore / Math.max(1, maxScore)) * 100);\n    \n    // Générer le résumé\n    let performanceLevel = 'Moyen';\n    if (qualityPercentage >= 75) performanceLevel = 'Élevé';\n    else if (qualityPercentage <= 30) performanceLevel = 'Faible';\n    \n    return `Qualité visuelle: ${performanceLevel} (${qualityPercentage}%)\nDétail terrain: ${config.terrainSegments || 'N/A'}\nRésolution textures: ${config.textureSize || 'N/A'}\nOmbres: ${config.shadowsEnabled ? 'Activées' : 'Désactivées'}\nEffets visuels: ${config.postProcessingEnabled ? 'Activés' : 'Désactivés'}`;\n  }\n}\n\n// Exporter une instance unique\nconst threeDConfigManager = new ThreeDConfigManager();\nexport default threeDConfigManager;\n","/**\n * mobileOptimizer.js\n * Optimisations spécifiques pour les appareils mobiles\n * \n * Ce module fournit des fonctions d'optimisation pour améliorer\n * les performances sur les appareils mobiles et à faible puissance.\n */\n\nimport deviceCapabilityDetector from './deviceCapabilityDetector';\n\nclass MobileOptimizer {\n  constructor() {\n    // État initial\n    this.isMobile = this.detectMobile();\n    this.isTablet = this.detectTablet();\n    this.initialized = false;\n    \n    // Options d'optimisation par défaut\n    this.optimizations = {\n      reducedResolution: true,      // Réduire la résolution de rendu\n      simplifiedEffects: true,      // Simplifier ou désactiver certains effets\n      batterySaveMode: false,       // Mode économie de batterie\n      optimizedControls: true,      // Contrôles optimisés pour tactile\n      progressiveLoading: true,     // Chargement progressif des ressources\n      optimizedInteraction: true,   // Interactions optimisées\n      reducedAnimations: false,     // Réduire les animations\n      adaptiveQuality: true         // Ajuster la qualité dynamiquement\n    };\n    \n    this.originalPixelRatio = window.devicePixelRatio || 1;\n    this.currentPixelRatio = this.originalPixelRatio;\n    \n    // Performance monitoring\n    this.performanceMetrics = {\n      frameRate: 60,\n      frameHistory: [],\n      dropCount: 0,\n      lastPerformanceCheck: Date.now()\n    };\n    \n    this.adaptiveQualityMetrics = {\n      targetFPS: 45,               // FPS cible pour l'ajustement qualité/performance\n      minFPS: 30,                  // FPS minimum acceptable\n      adjustmentCooldown: 5000,    // Cooldown en ms entre les ajustements\n      lastAdjustment: 0,           // Timestamp du dernier ajustement\n      currentQualityMultiplier: 1.0 // Multiplicateur actuel de qualité\n    };\n    \n    // Initialiser une fois que le DOM est prêt\n    this.initialize();\n  }\n  \n  /**\n   * Initialise l'optimiseur mobile\n   */\n  initialize() {\n    if (document.readyState === 'complete') {\n      this.setupEventListeners();\n    } else {\n      window.addEventListener('load', () => this.setupEventListeners());\n    }\n  }\n  \n  /**\n   * Configure les écouteurs d'événements\n   * @private\n   */\n  setupEventListeners() {\n    // Écouter les changements d'orientation\n    window.addEventListener('orientationchange', () => {\n      this.handleOrientationChange();\n    });\n    \n    // Écouter les changements de visibilité de page\n    document.addEventListener('visibilitychange', () => {\n      this.handleVisibilityChange();\n    });\n    \n    // Batterie\n    if (navigator.getBattery) {\n      navigator.getBattery().then(battery => {\n        battery.addEventListener('levelchange', () => {\n          this.checkBatteryStatus(battery);\n        });\n        \n        battery.addEventListener('chargingchange', () => {\n          this.checkBatteryStatus(battery);\n        });\n        \n        // Vérification initiale\n        this.checkBatteryStatus(battery);\n      });\n    }\n    \n    // Écouter les événements de ralentissement\n    this.setupPerformanceMonitoring();\n    \n    this.initialized = true;\n  }\n  \n  /**\n   * Détecte si l'appareil est un mobile\n   * @returns {boolean} true si l'appareil est un mobile\n   */\n  detectMobile() {\n    const mobileRegex = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i;\n    return mobileRegex.test(navigator.userAgent || navigator.vendor || window.opera);\n  }\n  \n  /**\n   * Détecte si l'appareil est une tablette\n   * @returns {boolean} true si l'appareil est une tablette\n   */\n  detectTablet() {\n    const tabletRegex = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(ad|hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i;\n    const isTablet = tabletRegex.test(navigator.userAgent || navigator.vendor || window.opera) &&\n      !this.detectMobile();\n      \n    return isTablet;\n  }\n  \n  /**\n   * Vérifie si les optimisations mobiles sont nécessaires\n   * @returns {boolean} true si les optimisations mobiles sont nécessaires\n   */\n  needsMobileOptimizations() {\n    const capabilities = deviceCapabilityDetector.getCapabilities();\n    return this.isMobile || \n           this.isTablet || \n           capabilities.flags.isLowEndDevice || \n           capabilities.performanceLevel <= 2;\n  }\n  \n  /**\n   * Optimise un renderer THREE.js pour mobile\n   * @param {THREE.WebGLRenderer} renderer Renderer à optimiser\n   * @returns {THREE.WebGLRenderer} Renderer optimisé\n   */\n  optimizeRenderer(renderer) {\n    if (!this.needsMobileOptimizations()) return renderer;\n    \n    // Réduire la résolution de rendu\n    if (this.optimizations.reducedResolution) {\n      // Calculer un ratio de pixel optimisé en fonction de la résolution de l'écran\n      const capabilities = deviceCapabilityDetector.getCapabilities();\n      \n      // Plus la résolution est élevée, plus on peut réduire\n      let reductionFactor = 1;\n      const { width, height } = capabilities.screen.effectiveResolution;\n      const pixelCount = width * height;\n      \n      if (pixelCount > 4000000) reductionFactor = 0.5;  // 4M pixels+ (2K, 4K)\n      else if (pixelCount > 2000000) reductionFactor = 0.65; // 2M-4M pixels (1080p+)\n      else if (pixelCount > 1000000) reductionFactor = 0.75; // 1M-2M pixels\n      else reductionFactor = 0.85; // moins de 1M pixels\n      \n      // Réduire si mode économie de batterie\n      if (this.optimizations.batterySaveMode) {\n        reductionFactor *= 0.7;\n      }\n      \n      // Appliquer la réduction\n      this.currentPixelRatio = this.originalPixelRatio * reductionFactor;\n      renderer.setPixelRatio(this.currentPixelRatio);\n      \n      console.log(`MobileOptimizer: pixel ratio réduit de ${this.originalPixelRatio} à ${this.currentPixelRatio}`);\n    }\n    \n    // Simplifier les effets\n    if (this.optimizations.simplifiedEffects) {\n      // Désactiver l'antialiasing si ce n'est pas déjà fait\n      if (renderer.antialias) {\n        console.warn('MobileOptimizer: impossible de désactiver l\\'antialiasing après la création du renderer');\n      }\n      \n      // Réduire la précision des shaders\n      if (renderer.capabilities && renderer.capabilities.precision === 'highp') {\n        renderer.capabilities.precision = 'mediump';\n      }\n      \n      // Désactiver les shadow maps si possible\n      if (renderer.shadowMap && renderer.shadowMap.enabled) {\n        renderer.shadowMap.enabled = false;\n      }\n    }\n    \n    return renderer;\n  }\n  \n  /**\n   * Optimise les contrôles tactiles pour un meilleur usage sur mobile\n   * @param {Object} controls Contrôles à optimiser (OrbitControls, etc.)\n   * @returns {Object} Contrôles optimisés\n   */\n  setupOptimizedTouchControls(controls) {\n    if (!this.needsMobileOptimizations() || !this.optimizations.optimizedControls) {\n      return controls;\n    }\n    \n    // Paramètres génériques qui fonctionnent pour la plupart des contrôles THREE.js\n    if (controls.domElement) {\n      // Augmenter la zone de toucher\n      if (controls.domElement.style) {\n        controls.domElement.style.touchAction = 'none';\n      }\n    }\n    \n    // Ajuster la sensibilité pour le tactile\n    // OrbitControls\n    if (controls.rotateSpeed !== undefined) {\n      controls.rotateSpeed = 0.8; // Plus lent pour plus de précision\n    }\n    \n    if (controls.zoomSpeed !== undefined) {\n      controls.zoomSpeed = 1.2; // Plus rapide pour le zoom\n    }\n    \n    if (controls.panSpeed !== undefined) {\n      controls.panSpeed = 0.8; // Plus lent pour plus de précision\n    }\n    \n    // Désactiver l'inertie sur mobile (peut causer des problèmes de performance)\n    if (controls.enableDamping !== undefined) {\n      controls.enableDamping = false;\n    }\n    \n    // Augmenter les distances min/max de zoom pour éviter des problèmes\n    if (controls.minDistance !== undefined) {\n      controls.minDistance *= 1.2; // Éviter de zoomer trop près\n    }\n    \n    // TrackballControls\n    if (controls.noRotate !== undefined) {\n      controls.rotateSpeed = 2.0; // TrackballControls nécessite plus de rapidité\n    }\n    \n    // FlyControls ou équivalent\n    if (controls.movementSpeed !== undefined) {\n      controls.movementSpeed *= 0.7; // Ralentir les mouvements\n    }\n    \n    return controls;\n  }\n  \n  /**\n   * Active le mode économie de batterie\n   * @param {THREE.WebGLRenderer} renderer Renderer à optimiser\n   * @param {Function} animate Fonction d'animation originale\n   * @returns {Function} Nouvelle fonction d'animation optimisée\n   */\n  enableBatterySaveMode(renderer, animate) {\n    if (!this.needsMobileOptimizations()) return animate;\n    \n    this.optimizations.batterySaveMode = true;\n    \n    // Réduire davantage la résolution\n    const batterySavePixelRatio = this.currentPixelRatio * 0.7;\n    renderer.setPixelRatio(batterySavePixelRatio);\n    \n    // Limiter le framerate\n    let lastTime = 0;\n    const targetFPS = 30; // 30 FPS en mode économie de batterie\n    const frameTime = 1000 / targetFPS;\n    \n    const throttledAnimate = (time) => {\n      const currentTime = time || performance.now();\n      const elapsed = currentTime - lastTime;\n      \n      if (elapsed > frameTime) {\n        lastTime = currentTime - (elapsed % frameTime);\n        animate(currentTime);\n      }\n      \n      if (this.optimizations.batterySaveMode) {\n        setTimeout(() => requestAnimationFrame(throttledAnimate), 5);\n      } else {\n        requestAnimationFrame(throttledAnimate);\n      }\n    };\n    \n    console.log('MobileOptimizer: mode économie de batterie activé');\n    return throttledAnimate;\n  }\n  \n  /**\n   * Gère les changements d'orientation sur mobile\n   * @private\n   */\n  handleOrientationChange() {\n    // Attendre que l'orientation soit terminée\n    setTimeout(() => {\n      // Mettre à jour les optimisations si nécessaire\n      this.adjustForCurrentContext();\n      \n      // Déclencher un événement personnalisé pour informer l'application\n      const event = new CustomEvent('optimized-orientation-change', {\n        detail: {\n          orientation: window.orientation,\n          aspectRatio: window.innerWidth / window.innerHeight\n        }\n      });\n      \n      window.dispatchEvent(event);\n    }, 300);\n  }\n  \n  /**\n   * Gère les changements de visibilité de page\n   * @private\n   */\n  handleVisibilityChange() {\n    if (document.hidden) {\n      // La page est cachée, réduire les ressources utilisées\n      this.pauseNonEssentialProcesses();\n    } else {\n      // La page est visible à nouveau\n      this.resumeNonEssentialProcesses();\n    }\n  }\n  \n  /**\n   * Vérifie l'état de la batterie et ajuste les optimisations\n   * @param {BatteryManager} battery Objet batterie\n   * @private\n   */\n  checkBatteryStatus(battery) {\n    const lowBattery = !battery.charging && battery.level < 0.3;\n    \n    if (lowBattery !== this.optimizations.batterySaveMode) {\n      this.optimizations.batterySaveMode = lowBattery;\n      \n      if (lowBattery) {\n        console.log('MobileOptimizer: niveau de batterie bas, optimisations accrues activées');\n      } else {\n        console.log('MobileOptimizer: niveau de batterie normal, optimisations standard');\n      }\n      \n      // Déclencher un événement pour informer l'application\n      window.dispatchEvent(new CustomEvent('battery-status-change', {\n        detail: {\n          low: lowBattery,\n          level: battery.level,\n          charging: battery.charging\n        }\n      }));\n    }\n  }\n  \n  /**\n   * Met en pause les processus non essentiels quand la page est en arrière-plan\n   * @private\n   */\n  pauseNonEssentialProcesses() {\n    // Stocker l'état actuel pour le restaurer plus tard\n    this._pausedState = {\n      adaptiveQuality: this.optimizations.adaptiveQuality,\n      reducedResolution: this.optimizations.reducedResolution\n    };\n    \n    // Optimisation maximale en arrière-plan\n    this.optimizations.adaptiveQuality = false;\n    this.optimizations.reducedResolution = true;\n    \n    console.log('MobileOptimizer: pause des processus non essentiels');\n    \n    // Déclencher un événement\n    window.dispatchEvent(new CustomEvent('optimization-state-change', {\n      detail: {\n        state: 'paused',\n        optimizations: this.optimizations\n      }\n    }));\n  }\n  \n  /**\n   * Reprend les processus non essentiels quand la page revient au premier plan\n   * @private\n   */\n  resumeNonEssentialProcesses() {\n    if (this._pausedState) {\n      // Restaurer l'état précédent\n      this.optimizations.adaptiveQuality = this._pausedState.adaptiveQuality;\n      this.optimizations.reducedResolution = this._pausedState.reducedResolution;\n      \n      console.log('MobileOptimizer: reprise des processus non essentiels');\n      \n      // Déclencher un événement\n      window.dispatchEvent(new CustomEvent('optimization-state-change', {\n        detail: {\n          state: 'resumed',\n          optimizations: this.optimizations\n        }\n      }));\n    }\n  }\n  \n  /**\n   * Configure le monitoring de performance\n   * @private\n   */\n  setupPerformanceMonitoring() {\n    if (!this.optimizations.adaptiveQuality) return;\n    \n    let lastTime = performance.now();\n    let frames = 0;\n    \n    const checkPerformance = () => {\n      const now = performance.now();\n      frames++;\n      \n      // Calculer le FPS toutes les secondes\n      if (now - lastTime >= 1000) {\n        const currentFPS = Math.round(frames * 1000 / (now - lastTime));\n        \n        // Mettre à jour l'historique\n        this.performanceMetrics.frameHistory.push(currentFPS);\n        if (this.performanceMetrics.frameHistory.length > 60) {\n          this.performanceMetrics.frameHistory.shift();\n        }\n        \n        // Calculer la moyenne\n        const averageFPS = this.performanceMetrics.frameHistory.reduce((a, b) => a + b, 0) / \n                          this.performanceMetrics.frameHistory.length;\n                         \n        this.performanceMetrics.frameRate = Math.round(averageFPS);\n        \n        // Détecter les chutes de frames\n        if (currentFPS < this.adaptiveQualityMetrics.minFPS) {\n          this.performanceMetrics.dropCount++;\n          \n          // Si on a plusieurs chutes consécutives, ajuster la qualité\n          if (this.performanceMetrics.dropCount >= 3) {\n            this.adjustQualityBasedOnPerformance();\n            this.performanceMetrics.dropCount = 0;\n          }\n        } else {\n          this.performanceMetrics.dropCount = Math.max(0, this.performanceMetrics.dropCount - 1);\n        }\n        \n        // Vérifier si on peut augmenter la qualité\n        const timeSinceLastAdjustment = now - this.adaptiveQualityMetrics.lastAdjustment;\n        if (timeSinceLastAdjustment > this.adaptiveQualityMetrics.adjustmentCooldown && \n            this.performanceMetrics.frameRate > this.adaptiveQualityMetrics.targetFPS + 10) {\n          this.increaseQuality();\n        }\n        \n        // Reset compteurs\n        lastTime = now;\n        frames = 0;\n      }\n      \n      // Continuer la vérification\n      requestAnimationFrame(checkPerformance);\n    };\n    \n    // Démarrer le monitoring\n    checkPerformance();\n  }\n  \n  /**\n   * Ajuste la qualité visuelle en fonction des performances\n   * @private\n   */\n  adjustQualityBasedOnPerformance() {\n    const now = performance.now();\n    \n    // Vérifier le cooldown\n    if (now - this.adaptiveQualityMetrics.lastAdjustment < this.adaptiveQualityMetrics.adjustmentCooldown) {\n      return;\n    }\n    \n    // Réduire la qualité\n    this.adaptiveQualityMetrics.currentQualityMultiplier *= 0.8;\n    this.adaptiveQualityMetrics.currentQualityMultiplier = Math.max(0.4, this.adaptiveQualityMetrics.currentQualityMultiplier);\n    this.adaptiveQualityMetrics.lastAdjustment = now;\n    \n    console.log(`MobileOptimizer: réduction de la qualité à ${Math.round(this.adaptiveQualityMetrics.currentQualityMultiplier * 100)}% pour maintenir les performances`);\n    \n    // Déclencher un événement pour informer l'application\n    window.dispatchEvent(new CustomEvent('quality-adjustment', {\n      detail: {\n        qualityMultiplier: this.adaptiveQualityMetrics.currentQualityMultiplier,\n        reason: 'performance-drop',\n        frameRate: this.performanceMetrics.frameRate\n      }\n    }));\n  }\n  \n  /**\n   * Augmente la qualité si les performances le permettent\n   * @private\n   */\n  increaseQuality() {\n    const now = performance.now();\n    \n    // Vérifier le cooldown\n    if (now - this.adaptiveQualityMetrics.lastAdjustment < this.adaptiveQualityMetrics.adjustmentCooldown) {\n      return;\n    }\n    \n    // Augmenter la qualité\n    this.adaptiveQualityMetrics.currentQualityMultiplier *= 1.1;\n    this.adaptiveQualityMetrics.currentQualityMultiplier = Math.min(1.0, this.adaptiveQualityMetrics.currentQualityMultiplier);\n    this.adaptiveQualityMetrics.lastAdjustment = now;\n    \n    console.log(`MobileOptimizer: augmentation de la qualité à ${Math.round(this.adaptiveQualityMetrics.currentQualityMultiplier * 100)}% grâce aux bonnes performances`);\n    \n    // Déclencher un événement pour informer l'application\n    window.dispatchEvent(new CustomEvent('quality-adjustment', {\n      detail: {\n        qualityMultiplier: this.adaptiveQualityMetrics.currentQualityMultiplier,\n        reason: 'performance-good',\n        frameRate: this.performanceMetrics.frameRate\n      }\n    }));\n  }\n  \n  /**\n   * Ajuste les optimisations en fonction du contexte actuel\n   */\n  adjustForCurrentContext() {\n    const capabilities = deviceCapabilityDetector.getCapabilities();\n    \n    // Ajuster les optimisations en fonction de l'orientation\n    const isLandscape = window.innerWidth > window.innerHeight;\n    \n    if (isLandscape) {\n      // En mode paysage, on peut être un peu plus généreux\n      this.optimizations.reducedResolution = this.isMobile;\n    } else {\n      // En mode portrait, optimiser davantage\n      this.optimizations.reducedResolution = true;\n    }\n    \n    // Ajuster en fonction du réseau\n    if (capabilities.network.effectiveType === '2g' || \n        capabilities.network.effectiveType === 'slow-2g') {\n      this.optimizations.progressiveLoading = true;\n      this.optimizations.reducedAnimations = true;\n    }\n    \n    console.log('MobileOptimizer: ajustement des optimisations au contexte actuel');\n  }\n  \n  /**\n   * Retourne la configuration d'optimisation actuelle pour les shaders\n   * @returns {Object} Configuration pour les shaders\n   */\n  getShaderOptimizationConfig() {\n    const config = {\n      precision: 'mediump',\n      optimizeLoops: this.needsMobileOptimizations(),\n      simplifyLighting: this.needsMobileOptimizations(),\n      maxLights: this.optimizations.batterySaveMode ? 2 : 4\n    };\n    \n    if (this.optimizations.batterySaveMode) {\n      config.precision = 'lowp';\n    }\n    \n    return config;\n  }\n  \n  /**\n   * Configure un chargeur de textures pour le chargement progressif\n   * @param {THREE.TextureLoader} textureLoader Chargeur de textures THREE.js\n   * @returns {Object} API pour le chargement progressif\n   */\n  setupProgressiveTextureLoading(textureLoader) {\n    if (!textureLoader) return null;\n    \n    const capabilities = deviceCapabilityDetector.getCapabilities();\n    const isLowEnd = capabilities.flags.isLowEndDevice || capabilities.performanceLevel <= 2;\n    \n    // Créer une API pour le chargement progressif\n    return {\n      /**\n       * Charge une texture de manière progressive\n       * @param {string} url URL de la texture\n       * @param {Function} onProgress Callback de progression\n       * @returns {Promise<Object>} Promise avec les textures chargées progressivement\n       */\n      loadTexture: (url, onProgress) => {\n        return new Promise((resolve) => {\n          // Déterminer les résolutions à charger\n          let resolutions = ['low', 'high'];\n          \n          if (isLowEnd || this.optimizations.batterySaveMode) {\n            // Pour les appareils faibles, on charge uniquement la version basse résolution\n            resolutions = ['low'];\n          }\n          \n          // Générer les URLs pour les différentes résolutions\n          const urls = resolutions.map(res => {\n            const urlObj = new URL(url, window.location.href);\n            const urlParts = urlObj.pathname.split('.');\n            const ext = urlParts.pop();\n            \n            if (res === 'low') {\n              return `${urlParts.join('.')}_low.${ext}`;\n            }\n            return url;\n          });\n          \n          // Charger la version basse résolution d'abord\n          textureLoader.load(urls[0], (lowTexture) => {\n            if (resolutions.length === 1 || !this.optimizations.progressiveLoading) {\n              // Si on ne charge qu'une résolution ou que le chargement progressif est désactivé\n              resolve({ texture: lowTexture, quality: 'low' });\n            } else {\n              // Sinon, on charge aussi la haute résolution\n              textureLoader.load(urls[1], (highTexture) => {\n                resolve({ \n                  texture: highTexture, \n                  quality: 'high',\n                  lowQualityTexture: lowTexture \n                });\n              }, onProgress);\n              \n              // Mais on retourne déjà la basse résolution pour l'afficher pendant le chargement\n              resolve({ \n                texture: lowTexture, \n                quality: 'low',\n                pendingHighQuality: true\n              });\n            }\n          }, onProgress);\n        });\n      }\n    };\n  }\n}\n\n// Exporter une instance singleton\nconst mobileOptimizer = new MobileOptimizer();\nexport default mobileOptimizer;\n","/**\n * Service d'optimisation pour la gestion de la batterie dans les applications 3D\n * Ce service surveille l'état de la batterie et fournit des configurations\n * optimisées pour réduire la consommation sur les appareils mobiles.\n */\n\nclass BatteryOptimizer {\n  constructor() {\n    this.batteryData = {\n      isSupported: false,\n      level: 1.0,\n      charging: true,\n      dischargingTime: Infinity\n    };\n    this.listeners = [];\n    this.batteryModeActive = false;\n    this.initialized = false;\n\n    // Configurations d'optimisation pour le mode batterie\n    this.batterySavingConfig = {\n      maxPixelRatio: 1.0,\n      shadowsEnabled: false,\n      useSimplifiedGeometry: true,\n      minimizeObjects: true,\n      maxDistanceMarkers: 5,\n      antialias: false,\n      maxLights: 1,\n      useLowResTextures: true,\n      disablePostProcessing: true,\n      throttleFPS: true,\n      targetFPS: 30,\n      enableFrustumCulling: true\n    };\n\n    // Seuils pour le mode batterie\n    this.thresholds = {\n      lowBatteryLevel: 0.3,      // Niveau sous lequel activer automatiquement le mode batterie\n      criticalBatteryLevel: 0.15, // Niveau critique pour des optimisations maximales\n      dischargingTimeWarning: 30 * 60, // 30 minutes en secondes\n    };\n\n    this.autoEnableBatteryMode = true; // Option à configurer par l'utilisateur\n  }\n\n  /**\n   * Initialise le service et tente d'accéder à l'API Battery\n   * @returns {Promise<boolean>} - True si l'API est supportée\n   */\n  async initialize() {\n    if (this.initialized) return this.batteryData.isSupported;\n\n    // Vérifier si l'API Battery est disponible\n    if ('getBattery' in navigator) {\n      try {\n        const battery = await navigator.getBattery();\n        this.batteryData.isSupported = true;\n        this.updateBatteryInfo(battery);\n        \n        // Ajouter les event listeners\n        battery.addEventListener('levelchange', () => this.updateBatteryInfo(battery));\n        battery.addEventListener('chargingchange', () => this.updateBatteryInfo(battery));\n        battery.addEventListener('dischargingtimechange', () => this.updateBatteryInfo(battery));\n        \n        // Vérifier si nous devons activer le mode d'économie\n        this.checkBatteryStatus();\n        \n        console.log('BatteryOptimizer: API Battery initialisée avec succès');\n      } catch (error) {\n        console.error('BatteryOptimizer: Erreur lors de l\\'initialisation de l\\'API Battery', error);\n        this.batteryData.isSupported = false;\n      }\n    } else {\n      console.log('BatteryOptimizer: API Battery non supportée par ce navigateur');\n      this.batteryData.isSupported = false;\n    }\n    \n    this.initialized = true;\n    return this.batteryData.isSupported;\n  }\n\n  /**\n   * Met à jour les informations de la batterie\n   * @param {BatteryManager} battery - L'objet BatteryManager\n   */\n  updateBatteryInfo(battery) {\n    const previousLevel = this.batteryData.level;\n    const previousCharging = this.batteryData.charging;\n    \n    this.batteryData.level = battery.level;\n    this.batteryData.charging = battery.charging;\n    this.batteryData.dischargingTime = battery.dischargingTime;\n    \n    // Notifier les listeners seulement si des changements importants sont détectés\n    const significantChange = \n      Math.abs(previousLevel - battery.level) > 0.05 || // Changement de 5% ou plus\n      previousCharging !== battery.charging; // Changement d'état de chargement\n      \n    if (significantChange) {\n      this.notifyListeners();\n      this.checkBatteryStatus();\n    }\n  }\n\n  /**\n   * Vérifie l'état de la batterie et active le mode économie si nécessaire\n   */\n  checkBatteryStatus() {\n    if (!this.batteryData.isSupported || !this.autoEnableBatteryMode) return;\n    \n    // Si en charge, on peut désactiver le mode économie\n    if (this.batteryData.charging && this.batteryModeActive) {\n      this.setBatteryMode(false);\n      console.log('BatteryOptimizer: Appareil en charge, désactivation du mode économie de batterie');\n      return;\n    }\n    \n    // Si le niveau est bas et pas en charge, on active le mode économie\n    if (!this.batteryData.charging) {\n      if (this.batteryData.level <= this.thresholds.lowBatteryLevel && !this.batteryModeActive) {\n        this.setBatteryMode(true);\n        console.log(`BatteryOptimizer: Batterie faible (${Math.round(this.batteryData.level * 100)}%), activation du mode économie`);\n      }\n      \n      // Si le niveau est critique, on peut ajouter des optimisations supplémentaires\n      if (this.batteryData.level <= this.thresholds.criticalBatteryLevel) {\n        console.log(`BatteryOptimizer: Niveau de batterie critique (${Math.round(this.batteryData.level * 100)}%), optimisations maximales`);\n        // Ici on pourrait notifier l'utilisateur ou ajouter des optimisations plus agressives\n      }\n    }\n  }\n\n  /**\n   * Active ou désactive le mode économie de batterie\n   * @param {boolean} active - True pour activer, false pour désactiver\n   */\n  setBatteryMode(active) {\n    if (this.batteryModeActive === active) return;\n    \n    this.batteryModeActive = active;\n    \n    // Notification à tous les composants écoutant ce service\n    this.notifyListeners();\n    \n    // Stocker la préférence utilisateur dans localStorage\n    if (typeof localStorage !== 'undefined') {\n      localStorage.setItem('batteryModeEnabled', active ? 'true' : 'false');\n    }\n    \n    console.log(`BatteryOptimizer: Mode économie de batterie ${active ? 'activé' : 'désactivé'}`);\n  }\n\n  /**\n   * Obtient la configuration optimisée pour la visualisation 3D\n   * @returns {Object} Configuration d'optimisation\n   */\n  getBatterySavingConfig() {\n    if (!this.batteryModeActive) return null;\n    \n    // Pour le niveau critique, on peut renforcer les optimisations\n    if (this.batteryData.level <= this.thresholds.criticalBatteryLevel) {\n      return {\n        ...this.batterySavingConfig,\n        maxPixelRatio: 0.75,  // Encore plus faible\n        targetFPS: 20,        // FPS encore plus bas\n        minimizeObjects: true  // Réduire au maximum les objets\n      };\n    }\n    \n    return this.batterySavingConfig;\n  }\n\n  /**\n   * Indique si le mode économie de batterie est actif\n   * @returns {boolean}\n   */\n  isBatteryModeActive() {\n    return this.batteryModeActive;\n  }\n\n  /**\n   * Récupère les données actuelles de la batterie\n   * @returns {Object} Données de la batterie\n   */\n  getBatteryData() {\n    return { ...this.batteryData };\n  }\n\n  /**\n   * Ajoute un écouteur pour les changements d'état de la batterie\n   * @param {Function} listener - Fonction callback à appeler lors des changements\n   */\n  addListener(listener) {\n    if (typeof listener === 'function' && !this.listeners.includes(listener)) {\n      this.listeners.push(listener);\n    }\n  }\n\n  /**\n   * Supprime un écouteur\n   * @param {Function} listener - Écouteur à supprimer\n   */\n  removeListener(listener) {\n    this.listeners = this.listeners.filter(l => l !== listener);\n  }\n\n  /**\n   * Notifie tous les écouteurs d'un changement\n   */\n  notifyListeners() {\n    this.listeners.forEach(listener => {\n      try {\n        listener({\n          batteryData: this.getBatteryData(),\n          batteryModeActive: this.batteryModeActive,\n          config: this.getBatterySavingConfig()\n        });\n      } catch (error) {\n        console.error('BatteryOptimizer: Erreur lors de la notification d\\'un écouteur', error);\n      }\n    });\n  }\n  \n  /**\n   * Configure l'activation automatique du mode batterie\n   * @param {boolean} enabled - True pour activer, false pour désactiver\n   */\n  setAutoMode(enabled) {\n    this.autoEnableBatteryMode = enabled;\n    \n    // Si on active le mode auto, on vérifie immédiatement l'état\n    if (enabled) {\n      this.checkBatteryStatus();\n    }\n    \n    // Stocker la préférence utilisateur\n    if (typeof localStorage !== 'undefined') {\n      localStorage.setItem('batteryAutoMode', enabled ? 'true' : 'false');\n    }\n  }\n  \n  /**\n   * Charge les préférences utilisateur du localStorage\n   */\n  loadUserPreferences() {\n    if (typeof localStorage !== 'undefined') {\n      // Charger le mode batterie\n      const savedBatteryMode = localStorage.getItem('batteryModeEnabled');\n      if (savedBatteryMode === 'true') {\n        this.setBatteryMode(true);\n      }\n      \n      // Charger le mode auto\n      const savedAutoMode = localStorage.getItem('batteryAutoMode');\n      if (savedAutoMode !== null) {\n        this.setAutoMode(savedAutoMode === 'true');\n      }\n    }\n  }\n}\n\n// Créer et exporter l'instance unique\nconst batteryOptimizer = new BatteryOptimizer();\n\n// Initialiser automatiquement\nif (typeof window !== 'undefined') {\n  // Initialiser au chargement pour les navigateurs\n  window.addEventListener('load', () => {\n    batteryOptimizer.initialize().then(() => {\n      batteryOptimizer.loadUserPreferences();\n    });\n  });\n}\n\nexport default batteryOptimizer;\n","import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as THREE from 'three';\nimport { Canvas, useFrame, useThree, useLoader } from '@react-three/fiber';\nimport { OrbitControls, Text, useProgress } from '@react-three/drei';\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\nimport { \n  Box, \n  Paper, \n  Typography, \n  Button, \n  ButtonGroup, \n  FormControl, \n  InputLabel, \n  Select, \n  MenuItem, \n  CircularProgress, \n  Alert,\n  Divider,\n  IconButton,\n  Slider\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { \n  PlayArrow as PlayArrowIcon, \n  Pause as PauseIcon, \n  Speed as SpeedIcon,\n  DirectionsBike as DirectionsBikeIcon \n} from '@mui/icons-material';\nimport progressive3DLoader, { DETAIL_LEVELS } from '../../services/progressive3DLoader';\nimport timeoutConfigService from '../../services/timeoutConfig';\nimport featureFlagsService from '../../services/featureFlags';\nimport apiCacheService, { CACHE_STRATEGIES } from '../../services/apiCache';\nimport deviceCapabilityDetector from '../../utils/deviceCapabilityDetector';\nimport threeDConfigManager from '../../utils/3DConfigManager';\nimport mobileOptimizer from '../../utils/mobileOptimizer';\nimport batteryOptimizer from '../../utils/batteryOptimizer'; // Importer le service batteryOptimizer\n\n// Composant principal\nconst ColVisualization3D = ({ passId, elevationData, surfaceTypes, pointsOfInterest }) => {\n  const canvasRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedPOI, setSelectedPOI] = useState(null);\n  const [filteredPointsOfInterest, setFilteredPointsOfInterest] = useState([]);\n  const [qualityLevel, setQualityLevel] = useState(DETAIL_LEVELS.MEDIUM);\n  const [viewType, setViewType] = useState('free');\n  const [poiFilters, setPoiFilters] = useState({\n    viewpoint: true,\n    restaurant: true,\n    landmark: true,\n    parking: true,\n    danger: true\n  });\n  \n  // Nouvelles variables d'état pour les optimisations\n  const [deviceCapabilities, setDeviceCapabilities] = useState(null);\n  const [renderConfig, setRenderConfig] = useState(null);\n  const [adaptiveQualityEnabled, setAdaptiveQualityEnabled] = useState(true);\n  const [batteryMode, setBatteryMode] = useState(false);\n  \n  // Référence aux contrôleurs et renderers pour l'optimisation\n  const controlsRef = useRef(null);\n  const rendererRef = useRef(null);\n  const textureLoaderRef = useRef(null);\n  \n  // Stats de performance\n  const performanceStatsRef = useRef({\n    frameRate: 0,\n    frameRateHistory: [],\n    lastFrameTime: 0,\n    frameCount: 0,\n    lastPerformanceAdjustment: 0\n  });\n\n  const [trailInfo, setTrailInfo] = useState({\n    difficulty: 'Difficile',\n    length: '12.5 km',\n    elevationGain: '850 m'\n  });\n  \n  // Initialisation de la visualisation\n  useEffect(() => {\n    const initializeVisualization = async () => {\n      try {\n        // Réinitialiser les états\n        setIsLoading(true);\n        setError(null);\n        setSelectedPOI(null);\n        \n        // Charger le pass depuis l'API si nécessaire\n        if (!elevationData || !surfaceTypes) {\n          const passData = await apiCacheService.get(`/api/cols/${passId}`, {\n            strategy: CACHE_STRATEGIES.CACHE_FIRST\n          });\n          \n          if (!passData) {\n            setError('Impossible de charger les données du col');\n            setIsLoading(false);\n            return;\n          }\n          \n          // Mettre à jour les états avec les données chargées\n          // Dans un cas réel, vous adapteriez cette partie à votre structure de données\n        }\n        \n        // Détection des capacités de l'appareil\n        const capabilities = await deviceCapabilityDetector.getCapabilities();\n        setDeviceCapabilities(capabilities);\n        \n        // Obtenir la configuration optimale pour ce composant\n        const config = threeDConfigManager.getOptimalConfig('colVisualization', {\n          forceBatterySaving: batteryMode\n        });\n        setRenderConfig(config);\n        \n        // Mettre à jour le niveau de qualité en fonction de la configuration\n        setQualityLevel(progressive3DLoader.getDetailLevelFromString(config.modelDetailLevel));\n        \n        // Créer et optimiser le loader de textures pour le chargement progressif\n        if (!textureLoaderRef.current) {\n          textureLoaderRef.current = mobileOptimizer.setupProgressiveTextureLoading(new THREE.TextureLoader());\n        }\n        \n        // Initialiser le chemin de fly-through si les données sont disponibles\n        if (elevationData && elevationData.path) {\n          initializeFlyThroughPath();\n        }\n        \n        // Configurer les listeners pour les ajustements de qualité adaptatifs\n        if (adaptiveQualityEnabled) {\n          setupAdaptiveQualityListeners();\n        }\n        \n        // Initialiser le service batteryOptimizer\n        await batteryOptimizer.initialize();\n        setBatteryMode(batteryOptimizer.isBatteryModeActive());\n        \n        setIsLoading(false);\n      } catch (err) {\n        console.error('Erreur lors de l\\'initialisation de la visualisation:', err);\n        setError('Une erreur est survenue lors du chargement de la visualisation 3D');\n        setIsLoading(false);\n      }\n    };\n    \n    initializeVisualization();\n    \n    // Nettoyage lors du démontage du composant\n    return () => {\n      // Arrêter les animations et les workers\n      if (flyThroughAnimationRef.current) {\n        cancelAnimationFrame(flyThroughAnimationRef.current);\n      }\n      \n      // Libérer les ressources\n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n      }\n    };\n  }, [passId, elevationData, pointsOfInterest, batteryMode, adaptiveQualityEnabled]);\n  \n  // Filtrer les points d'intérêt\n  useEffect(() => {\n    if (!pointsOfInterest || !Array.isArray(pointsOfInterest)) {\n      setFilteredPointsOfInterest([]);\n      return;\n    }\n    \n    // Appliquer les filtres sélectionnés\n    const filtered = Object.values(poiFilters).every(v => v === false)\n      ? pointsOfInterest \n      : pointsOfInterest.filter(poi => poi && poi.type && poiFilters[poi.type]);\n    \n    setFilteredPointsOfInterest(filtered);\n  }, [poiFilters, pointsOfInterest]);\n  \n  // Gérer les changements de qualité\n  const handleQualityChange = useCallback((level) => {\n    setQualityLevel(level);\n    \n    // Mettre à jour la configuration 3D\n    const newConfig = { ...renderConfig };\n    newConfig.modelDetailLevel = progressive3DLoader.getStringFromDetailLevel(level);\n    setRenderConfig(newConfig);\n    \n    // Désactiver l'ajustement adaptatif si changement manuel\n    setAdaptiveQualityEnabled(false);\n  }, [renderConfig]);\n  \n  // Nouvelle fonction pour configurer les listeners d'ajustement adaptatif de qualité\n  const setupAdaptiveQualityListeners = useCallback(() => {\n    // Écouter les événements d'ajustement de qualité\n    const handleQualityAdjustment = (event) => {\n      const { qualityMultiplier, reason } = event.detail;\n      \n      if (!renderConfig) return;\n      \n      // Ajuster le niveau de qualité en fonction du multiplicateur\n      let newLevel = qualityLevel;\n      if (qualityMultiplier <= 0.5) {\n        newLevel = DETAIL_LEVELS.LOW;\n      } else if (qualityMultiplier <= 0.8) {\n        newLevel = DETAIL_LEVELS.MEDIUM;\n      } else {\n        newLevel = DETAIL_LEVELS.HIGH;\n      }\n      \n      // Ne mettre à jour que si le niveau change\n      if (newLevel !== qualityLevel) {\n        setQualityLevel(newLevel);\n        \n        // Mettre à jour la configuration\n        const newConfig = { ...renderConfig };\n        newConfig.modelDetailLevel = progressive3DLoader.getStringFromDetailLevel(newLevel);\n        setRenderConfig(newConfig);\n        \n        console.log(`Ajustement automatique de la qualité: ${progressive3DLoader.getStringFromDetailLevel(newLevel)} (${reason})`);\n      }\n    };\n    \n    // Écouter les événements d'optimisation\n    window.addEventListener('quality-adjustment', handleQualityAdjustment);\n    \n    // Nettoyage\n    return () => {\n      window.removeEventListener('quality-adjustment', handleQualityAdjustment);\n    };\n  }, [qualityLevel, renderConfig]);\n  \n  // Nouvelle fonction pour gérer le mode économie de batterie\n  const handleBatteryModeToggle = useCallback(() => {\n    const newBatteryMode = !batteryMode;\n    setBatteryMode(newBatteryMode);\n    \n    // Mettre à jour la configuration\n    const config = threeDConfigManager.getOptimalConfig('colVisualization', {\n      forceBatterySaving: newBatteryMode\n    });\n    setRenderConfig(config);\n    \n    // Mettre à jour le niveau de qualité\n    setQualityLevel(progressive3DLoader.getDetailLevelFromString(config.modelDetailLevel));\n    \n    console.log(`Mode économie de batterie ${newBatteryMode ? 'activé' : 'désactivé'}`);\n    \n    // Initialiser le service batteryOptimizer\n    batteryOptimizer.setBatteryMode(newBatteryMode);\n  }, [batteryMode]);\n\n  // Composant interne pour optimiser le renderer THREE.js\n  const SceneManager = () => {\n    const { gl, camera } = useThree();\n    \n    // Stocker la référence au renderer\n    useEffect(() => {\n      rendererRef.current = gl;\n      \n      // Appliquer les optimisations mobiles\n      if (deviceCapabilities && (deviceCapabilities.flags.isMobile || deviceCapabilities.flags.isLowEndDevice)) {\n        mobileOptimizer.optimizeRenderer(gl);\n      }\n      \n      // Configurer le rendu en fonction de la configuration\n      if (renderConfig) {\n        // Paramètres de shadow map\n        if (renderConfig.shadowsEnabled) {\n          gl.shadowMap.enabled = true;\n          gl.shadowMap.type = THREE.PCFSoftShadowMap;\n          gl.shadowMap.autoUpdate = false;\n          gl.shadowMap.needsUpdate = true;\n        } else {\n          gl.shadowMap.enabled = false;\n        }\n        \n        // Paramètres de clearing\n        gl.setClearColor(new THREE.Color('#87CEEB'), 1); \n        \n        // Limiter le framerate si nécessaire\n        if (renderConfig.maxFrameRate && renderConfig.maxFrameRate < 60) {\n          gl.setAnimationLoop((time) => {\n            const elapsed = time - performanceStatsRef.current.lastFrameTime;\n            const targetElapsed = 1000 / renderConfig.maxFrameRate;\n            \n            if (elapsed >= targetElapsed) {\n              performanceStatsRef.current.lastFrameTime = time;\n              gl.render(gl.scene, camera);\n            }\n          });\n        }\n      }\n      \n      // Nettoyer lors du démontage\n      return () => {\n        if (gl.setAnimationLoop) {\n          gl.setAnimationLoop(null);\n        }\n      };\n    }, [gl, camera, deviceCapabilities, renderConfig]);\n    \n    // Suivre le FPS pour les ajustements adaptatifs\n    useFrame((state, delta) => {\n      if (!adaptiveQualityEnabled) return;\n      \n      // Calculer le FPS\n      performanceStatsRef.current.frameCount++;\n      const now = performance.now();\n      const elapsed = now - performanceStatsRef.current.lastPerformanceCheck;\n      \n      // Mettre à jour les statistiques toutes les secondes\n      if (elapsed > 1000) {\n        const currentFPS = Math.round(performanceStatsRef.current.frameCount * 1000 / elapsed);\n        performanceStatsRef.current.frameRate = currentFPS;\n        \n        // Ajouter à l'historique\n        performanceStatsRef.current.frameRateHistory.push(currentFPS);\n        if (performanceStatsRef.current.frameRateHistory.length > 10) {\n          performanceStatsRef.current.frameRateHistory.shift();\n        }\n        \n        // Réinitialiser les compteurs\n        performanceStatsRef.current.frameCount = 0;\n        performanceStatsRef.current.lastPerformanceCheck = now;\n      }\n    });\n    \n    return null;\n  };\n\n  return (\n    <Paper elevation={3} sx={{ mb: 4, overflow: 'hidden', position: 'relative' }}>\n      <VisualizationContainer>\n        {error ? (\n          <StyledAlert severity=\"error\">{error}</StyledAlert>\n        ) : isLoading ? (\n          <LoadingOverlay>\n            <LoadingIndicator />\n          </LoadingOverlay>\n        ) : (\n          <>\n            <Canvas \n              ref={canvasRef} \n              camera={{ position: [0, 10, 20], fov: 60 }}\n              shadows={renderConfig ? renderConfig.shadowsEnabled : false}\n              dpr={window.devicePixelRatio > 2 ? 2 : window.devicePixelRatio} // Limiter le DPR à 2 pour les performances\n              performance={{ min: 0.5 }} // Réduire la résolution si nécessaire pour maintenir les performances\n            >\n              {/* Ajouter le gestionnaire de scène pour les optimisations */}\n              <SceneManager />\n              \n              {/* Reste du contenu */}\n              <ambientLight intensity={0.5} />\n              <directionalLight \n                position={[10, 20, 10]} \n                intensity={0.8} \n                castShadow={renderConfig ? renderConfig.shadowsEnabled : false}\n                shadow-mapSize-width={renderConfig ? renderConfig.shadowMapSize || 1024 : 1024}\n                shadow-mapSize-height={renderConfig ? renderConfig.shadowMapSize || 1024 : 1024}\n              />\n              \n              {/* Terrain */}\n              <Terrain \n                elevationData={elevationData} \n                surfaceTypes={surfaceTypes} \n                detailLevel={qualityLevel}\n                renderConfig={renderConfig}\n              />\n              \n              {/* Points d'intérêt - limités selon les capacités de l'appareil */}\n              {filteredPointsOfInterest.slice(0, renderConfig ? renderConfig.maxPointsOfInterest : 25).map((poi, index) => (\n                <PointOfInterest \n                  key={`poi-${index}`}\n                  position={[poi.x, (poi.elevation || 0) * 0.1 + 1, poi.z]} \n                  label={poi.name}\n                  type={poi.type}\n                  isSelected={selectedPOI === poi}\n                  onClick={() => handleSelectPOI(poi)}\n                  detailLevel={qualityLevel}\n                />\n              ))}\n              \n              {/* Contrôles optimisés pour différents appareils */}\n              <OrbitControls \n                ref={controlsRef}\n                enableDamping={renderConfig ? !renderConfig.useSimplifiedGeometry : true}\n                dampingFactor={0.1}\n                minDistance={5}\n                maxDistance={100}\n                target={selectedPOI ? [selectedPOI.x, (selectedPOI.elevation || 0) * 0.1, selectedPOI.z] : [0, 0, 0]}\n                // Support tactile amélioré\n                touchAction=\"none\" // Empêcher le comportement de défilement par défaut sur tactile\n                touches={{\n                  ONE: THREE.TOUCH.ROTATE,\n                  TWO: THREE.TOUCH.DOLLY_PAN\n                }}\n                // Optimisations tactiles via mobileOptimizer\n                {...(deviceCapabilities?.flags.isMobile ? {\n                  rotateSpeed: 0.8,\n                  zoomSpeed: 1.2,\n                  panSpeed: 0.8\n                } : {})}\n              />\n              \n              {/* Ajouter la caméra de fly-through lorsqu'elle est active */}\n              {viewType === 'flythrough' && <FlyThroughCamera />}\n            </Canvas>\n            \n            {/* Contrôles de qualité et informations */}\n            <OverlayContainer>\n              <Box sx={{ p: 1.5 }}>\n                <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>Visualisation 3D</Typography>\n                \n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                  <Typography variant=\"body2\" sx={{ mr: 1 }}>Qualité:</Typography>\n                  <ButtonGroup size=\"small\">\n                    <Button \n                      variant={qualityLevel === DETAIL_LEVELS.LOW ? \"contained\" : \"outlined\"}\n                      onClick={() => handleQualityChange(DETAIL_LEVELS.LOW)}\n                    >\n                      Basse\n                    </Button>\n                    <Button \n                      variant={qualityLevel === DETAIL_LEVELS.MEDIUM ? \"contained\" : \"outlined\"}\n                      onClick={() => handleQualityChange(DETAIL_LEVELS.MEDIUM)}\n                    >\n                      Moyenne\n                    </Button>\n                    <Button \n                      variant={qualityLevel === DETAIL_LEVELS.HIGH ? \"contained\" : \"outlined\"}\n                      onClick={() => handleQualityChange(DETAIL_LEVELS.HIGH)}\n                      // Désactiver le niveau élevé sur les appareils faibles\n                      disabled={deviceCapabilities?.flags.isLowEndDevice}\n                    >\n                      Haute\n                    </Button>\n                  </ButtonGroup>\n                </Box>\n                \n                {/* Bouton pour activer/désactiver l'ajustement adaptatif de qualité */}\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                  <AdaptiveQualityFlag active={adaptiveQualityEnabled} onClick={() => setAdaptiveQualityEnabled(!adaptiveQualityEnabled)}>\n                    Auto\n                  </AdaptiveQualityFlag>\n                  \n                  {/* Bouton pour activer/désactiver le mode économie de batterie */}\n                  <AdaptiveQualityFlag active={batteryMode} onClick={handleBatteryModeToggle}>\n                    Éco\n                  </AdaptiveQualityFlag>\n                  \n                  {/* Afficher le FPS pour le débogage */}\n                  {featureFlagsService.isEnabled('showPerformanceMetrics') && (\n                    <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                      {performanceStatsRef.current.frameRate} FPS\n                    </Typography>\n                  )}\n                </Box>\n                \n                <Divider sx={{ my: 1 }} />\n                \n                <Typography variant=\"body2\" sx={{ mb: 1 }}>Caméra:</Typography>\n                <ButtonGroup size=\"small\" sx={{ mb: 1 }}>\n                  <Button \n                    variant={viewType === 'free' ? \"contained\" : \"outlined\"}\n                    onClick={() => handleViewChange('free')}\n                  >\n                    Libre\n                  </Button>\n                  <Button \n                    variant={viewType === 'overview' ? \"contained\" : \"outlined\"}\n                    onClick={() => handleViewChange('overview')}\n                  >\n                    Vue d'ensemble\n                  </Button>\n                  <Button \n                    variant={viewType === 'flythrough' ? \"contained\" : \"outlined\"}\n                    onClick={() => handleViewChange('flythrough')}\n                    startIcon={<DirectionsBikeIcon />}\n                    // Désactiver sur les appareils faibles si la configuration recommande de le faire\n                    disabled={deviceCapabilities?.flags.isLowEndDevice && renderConfig?.useSimplifiedGeometry}\n                  >\n                    Parcours\n                  </Button>\n                </ButtonGroup>\n                \n                <Divider sx={{ my: 1 }} />\n                \n                <Typography variant=\"body2\" sx={{ mb: 1 }}>Filtre des points d'intérêt:</Typography>\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  <PoiFilterChip \n                    active={poiFilters.viewpoint} \n                    onClick={() => handlePOIFilterChange('viewpoint')}\n                  >\n                    Panoramas\n                  </PoiFilterChip>\n                  <PoiFilterChip \n                    active={poiFilters.restaurant} \n                    onClick={() => handlePOIFilterChange('restaurant')}\n                  >\n                    Restaurants\n                  </PoiFilterChip>\n                  <PoiFilterChip \n                    active={poiFilters.landmark} \n                    onClick={() => handlePOIFilterChange('landmark')}\n                  >\n                    Points remarquables\n                  </PoiFilterChip>\n                  <PoiFilterChip \n                    active={poiFilters.parking} \n                    onClick={() => handlePOIFilterChange('parking')}\n                  >\n                    Parkings\n                  </PoiFilterChip>\n                  <PoiFilterChip \n                    active={poiFilters.danger} \n                    onClick={() => handlePOIFilterChange('danger')}\n                  >\n                    Zones dangereuses\n                  </PoiFilterChip>\n                </Box>\n              </Box>\n              \n              {/* Afficher les informations sur l'appareil et la qualité si le flag est activé */}\n              {featureFlagsService.isEnabled('showDeviceCapabilities') && deviceCapabilities && (\n                <Box sx={{ p: 1.5, borderTop: '1px solid rgba(0,0,0,0.1)' }}>\n                  <Typography variant=\"caption\" component=\"div\">\n                    Appareil: {deviceCapabilities.flags.isMobile ? 'Mobile' : deviceCapabilities.flags.isTablet ? 'Tablette' : 'Desktop'}\n                  </Typography>\n                  <Typography variant=\"caption\" component=\"div\">\n                    GPU: {deviceCapabilities.gpu.vendor ? deviceCapabilities.gpu.vendor.split(' ')[0] : 'Non détecté'} ({Math.round(deviceCapabilities.gpu.estimatedMemory)}MB)\n                  </Typography>\n                  <Typography variant=\"caption\" component=\"div\">\n                    CPU: {deviceCapabilities.cpu.cores} cœurs\n                  </Typography>\n                  <Typography variant=\"caption\" component=\"div\">\n                    Réseau: {deviceCapabilities.network.effectiveType}\n                  </Typography>\n                </Box>\n              )}\n            </OverlayContainer>\n            \n            {/* Info trail */}\n            <TrailInfoContainer>\n              <TrailInfoItem>\n                <Typography variant=\"caption\">Difficulté</Typography>\n                <Typography variant=\"body2\" sx={{ fontWeight: 'bold' }}>{trailInfo.difficulty}</Typography>\n              </TrailInfoItem>\n              <TrailInfoItem>\n                <Typography variant=\"caption\">Distance</Typography>\n                <Typography variant=\"body2\" sx={{ fontWeight: 'bold' }}>{trailInfo.length}</Typography>\n              </TrailInfoItem>\n              <TrailInfoItem>\n                <Typography variant=\"caption\">Dénivelé</Typography>\n                <Typography variant=\"body2\" sx={{ fontWeight: 'bold' }}>{trailInfo.elevationGain}</Typography>\n              </TrailInfoItem>\n            </TrailInfoContainer>\n          </>\n        )}\n      </VisualizationContainer>\n    </Paper>\n  );\n};\n\nexport default ColVisualization3D;\n","/**\n * Service de gestion des Feature Flags\n * Permet l'activation/désactivation de fonctionnalités sans redéploiement\n * Supporte plusieurs sources de configuration (local, API, localStorage)\n */\nimport axios from 'axios';\nimport { useEffect, useState, createContext, useContext } from 'react';\n\n// Valeurs par défaut des feature flags (utilisées en fallback)\nconst DEFAULT_FLAGS = {\n  // Fonctionnalités liées à l'interface utilisateur\n  enableDarkMode: false,\n  showBetaFeatures: false,\n  useNewNavigation: false,\n  \n  // Fonctionnalités liées aux défis\n  enableSevenMajorsChallenge: true,\n  enableMonthlyChallenge: true,\n  enableSocialSharing: true,\n  \n  // Fonctionnalités liées à l'API et aux performances\n  enableApiCaching: true,\n  enablePerformanceMonitoring: true,\n  \n  // Fonctionnalités expérimentales\n  enable3DColVisualization: true,\n  enableProgressiveLoading3D: true,  // Nouveau flag pour le chargement progressif des visualisations 3D\n  enableAIRecommendations: false,\n  enableRealTimeWeather: true,\n  \n  // Fonctionnalités liées au cache et à l'optimisation\n  enableAdvancedCaching: true,      // Nouveau flag pour le système de cache avancé\n  enableOfflineMode: false,         // Nouveau flag pour le mode hors ligne\n  enableLazyLoadingImages: true,    // Nouveau flag pour le chargement paresseux des images\n  \n  // Fonctionnalités administratives\n  enableAdvancedMetrics: true,\n  enableBulkOperations: false,\n  \n  // Fonctionnalités liées à la nutrition\n  enableNutritionPlanner: true,     // Nouveau flag pour le planificateur de nutrition\n  enableMealSuggestions: true,      // Nouveau flag pour les suggestions de repas\n  enableColSpecificNutrition: true, // Nouveau flag pour la nutrition spécifique aux cols\n  \n  // Fonctionnalités liées à l'entraînement\n  enableTrainingPrograms: true,     // Nouveau flag pour les programmes d'entraînement\n  enablePerformanceAnalytics: true, // Nouveau flag pour les analyses de performance\n  enableColSpecificTraining: true,  // Nouveau flag pour l'entraînement spécifique aux cols\n  \n  // Fonctionnalités liées à la montagne\n  enableMountainModule: true,       // Nouveau flag pour le module montagne\n  enableRegionalTrainingPlans: true // Nouveau flag pour les plans d'entraînement par région\n};\n\n// Types d'environnement supportés\nconst ENVIRONMENTS = {\n  DEVELOPMENT: 'development',\n  STAGING: 'staging',\n  PRODUCTION: 'production'\n};\n\n// Contexte React pour fournir les flags à travers l'application\nconst FeatureFlagsContext = createContext({\n  flags: DEFAULT_FLAGS,\n  isLoading: true,\n  error: null,\n  updateFlag: () => {},\n  refreshFlags: () => {},\n  isEnabled: () => false,     // Nouvelle méthode pour vérifier plus facilement un flag\n  getVariant: () => null      // Nouvelle méthode pour les tests A/B\n});\n\n/**\n * Classe principale de gestion des feature flags\n */\nclass FeatureFlagsService {\n  constructor() {\n    this.flags = { ...DEFAULT_FLAGS };\n    this.subscribers = [];\n    this.isInitialized = false;\n    this.lastFetchTime = 0;\n    this.cacheDuration = 5 * 60 * 1000; // 5 minutes en ms\n    this.environment = process.env.NODE_ENV || ENVIRONMENTS.DEVELOPMENT;\n    this.userSegment = null;\n    this.flagsHistory = {}; // Historique des changements de flags\n  }\n\n  /**\n   * Initialise le service et charge les flags depuis toutes les sources\n   * @returns {Promise<Object>} Les feature flags\n   */\n  async initialize() {\n    if (this.isInitialized) {\n      return this.flags;\n    }\n\n    try {\n      // Déterminer le segment utilisateur pour les flags ciblés\n      this.determineUserSegment();\n      \n      // Chargement en cascade avec priorité (localStorage > API > defaults)\n      await this.loadFlagsFromLocalStorage();\n      await this.fetchFlagsFromApi();\n      \n      // Vérifier les flags qui doivent être activés/désactivés par environnement\n      this.applyEnvironmentOverrides();\n      \n      // Initialiser l'historique des flags\n      Object.keys(this.flags).forEach(key => {\n        this.flagsHistory[key] = [{\n          value: this.flags[key],\n          timestamp: Date.now(),\n          source: 'initialization'\n        }];\n      });\n      \n      this.isInitialized = true;\n      this.notifySubscribers();\n      \n      return this.flags;\n    } catch (error) {\n      console.error('Erreur lors de l\\'initialisation des feature flags:', error);\n      // En cas d'erreur, utiliser les flags par défaut\n      return this.flags;\n    }\n  }\n\n  /**\n   * Détermine le segment utilisateur pour une expérience personnalisée\n   */\n  determineUserSegment() {\n    try {\n      // Récupérer les informations utilisateur du localStorage\n      const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}');\n      \n      // On peut déterminer un segment basé sur différents critères\n      if (userInfo.role === 'admin') {\n        this.userSegment = 'admin';\n      } else if (userInfo.visits && userInfo.visits > 10) {\n        this.userSegment = 'power_user';\n      } else if (userInfo.registeredAt) {\n        const registrationDate = new Date(userInfo.registeredAt);\n        const oneMonthAgo = new Date();\n        oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\n        \n        if (registrationDate > oneMonthAgo) {\n          this.userSegment = 'new_user';\n        } else {\n          this.userSegment = 'regular_user';\n        }\n      } else {\n        this.userSegment = 'anonymous';\n      }\n    } catch (error) {\n      console.error('Erreur lors de la détermination du segment utilisateur:', error);\n      this.userSegment = 'unknown';\n    }\n  }\n\n  /**\n   * Applique les valeurs par défaut spécifiques à l'environnement\n   */\n  applyEnvironmentOverrides() {\n    // Désactiver certaines fonctionnalités en production pour éviter les problèmes\n    if (this.environment === ENVIRONMENTS.PRODUCTION) {\n      // En production, désactiver les fonctionnalités expérimentales par défaut\n      const productionOverrides = {\n        showBetaFeatures: false,\n        enableAIRecommendations: false\n      };\n      \n      // Mais ne pas écraser si explicitement activé via API ou localStorage\n      Object.keys(productionOverrides).forEach(key => {\n        // Vérifier si la valeur a été définie explicitement par l'API ou localStorage\n        if (!this.flagsHistory[key] || this.flagsHistory[key].length === 0) {\n          this.flags[key] = productionOverrides[key];\n        }\n      });\n    }\n    \n    // Activer plus de fonctionnalités en développement pour les tests\n    if (this.environment === ENVIRONMENTS.DEVELOPMENT) {\n      const devOverrides = {\n        showBetaFeatures: true,\n        enablePerformanceMonitoring: true\n      };\n      \n      Object.assign(this.flags, devOverrides);\n    }\n  }\n\n  /**\n   * Charge les flags depuis le localStorage\n   */\n  async loadFlagsFromLocalStorage() {\n    try {\n      const storedFlags = localStorage.getItem('featureFlags');\n      if (storedFlags) {\n        const parsedFlags = JSON.parse(storedFlags);\n        this.flags = { ...this.flags, ...parsedFlags };\n        \n        // Enregistrer la source dans l'historique\n        Object.keys(parsedFlags).forEach(key => {\n          if (!this.flagsHistory[key]) this.flagsHistory[key] = [];\n          this.flagsHistory[key].push({\n            value: parsedFlags[key],\n            timestamp: Date.now(),\n            source: 'localStorage'\n          });\n        });\n      }\n    } catch (error) {\n      console.error('Erreur lors du chargement des feature flags du localStorage:', error);\n    }\n  }\n\n  /**\n   * Récupère les flags depuis l'API\n   * @param {boolean} force Force le rafraîchissement même si le cache est valide\n   */\n  async fetchFlagsFromApi(force = false) {\n    const now = Date.now();\n    \n    // Vérifier si nous devons rafraîchir le cache\n    if (!force && (now - this.lastFetchTime) < this.cacheDuration) {\n      return this.flags;\n    }\n    \n    try {\n      const response = await axios.get('/api/feature-flags', {\n        params: {\n          segment: this.userSegment,\n          environment: this.environment\n        }\n      });\n      \n      if (response.data && response.data.flags) {\n        // Enregistrer les anciennes valeurs pour le tracking des changements\n        const oldFlags = { ...this.flags };\n        \n        // Mettre à jour les flags\n        this.flags = { ...this.flags, ...response.data.flags };\n        this.lastFetchTime = now;\n        \n        // Stocker dans localStorage pour utilisation offline\n        localStorage.setItem('featureFlags', JSON.stringify(this.flags));\n        \n        // Mettre à jour l'historique des changements\n        Object.keys(response.data.flags).forEach(key => {\n          if (!this.flagsHistory[key]) this.flagsHistory[key] = [];\n          this.flagsHistory[key].push({\n            value: response.data.flags[key],\n            previousValue: oldFlags[key],\n            timestamp: now,\n            source: 'api'\n          });\n        });\n        \n        this.notifySubscribers();\n        this.logFlagChanges(oldFlags, this.flags);\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des feature flags depuis l\\'API:', error);\n      // En cas d'erreur, continuer avec les flags actuels\n    }\n    \n    return this.flags;\n  }\n\n  /**\n   * Journalise les changements de flags pour débogage et analyses\n   * @param {Object} oldFlags Anciens flags\n   * @param {Object} newFlags Nouveaux flags\n   */\n  logFlagChanges(oldFlags, newFlags) {\n    const changes = [];\n    \n    Object.keys(newFlags).forEach(key => {\n      if (oldFlags[key] !== newFlags[key]) {\n        changes.push({\n          flag: key,\n          oldValue: oldFlags[key],\n          newValue: newFlags[key],\n          timestamp: Date.now()\n        });\n      }\n    });\n    \n    if (changes.length > 0) {\n      console.info('Feature Flags mis à jour:', changes);\n      \n      // En développement, afficher une notification visuelle\n      if (this.environment === ENVIRONMENTS.DEVELOPMENT && typeof window !== 'undefined') {\n        // Créer une notification simple pour les développeurs\n        this.showDevNotification(`${changes.length} feature flags mis à jour`);\n      }\n    }\n  }\n\n  /**\n   * Affiche une notification pour les développeurs\n   * @param {string} message Message à afficher\n   */\n  showDevNotification(message) {\n    if (typeof document === 'undefined') return;\n    \n    const notificationId = 'feature-flag-notification';\n    let notification = document.getElementById(notificationId);\n    \n    // Créer l'élément s'il n'existe pas\n    if (!notification) {\n      notification = document.createElement('div');\n      notification.id = notificationId;\n      notification.style.position = 'fixed';\n      notification.style.bottom = '20px';\n      notification.style.right = '20px';\n      notification.style.padding = '10px 15px';\n      notification.style.backgroundColor = '#333';\n      notification.style.color = 'white';\n      notification.style.borderRadius = '4px';\n      notification.style.zIndex = '9999';\n      notification.style.opacity = '0';\n      notification.style.transition = 'opacity 0.3s ease-in-out';\n      document.body.appendChild(notification);\n    }\n    \n    // Mettre à jour le contenu\n    notification.textContent = message;\n    notification.style.opacity = '1';\n    \n    // Faire disparaître après 3 secondes\n    setTimeout(() => {\n      notification.style.opacity = '0';\n      setTimeout(() => {\n        if (notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 300);\n    }, 3000);\n  }\n\n  /**\n   * Met à jour un ou plusieurs feature flags\n   * @param {Object} flagUpdates Objet contenant les flags à mettre à jour\n   * @param {boolean} persistToServer Si vrai, envoie les modifications au serveur\n   * @returns {Promise<Object>} Les feature flags mis à jour\n   */\n  async updateFlags(flagUpdates, persistToServer = true) {\n    // Enregistrer les anciennes valeurs\n    const oldFlags = { ...this.flags };\n    \n    // Mettre à jour les flags localement\n    this.flags = { ...this.flags, ...flagUpdates };\n    \n    // Stocker dans localStorage\n    localStorage.setItem('featureFlags', JSON.stringify(this.flags));\n    \n    // Mettre à jour l'historique\n    Object.keys(flagUpdates).forEach(key => {\n      if (!this.flagsHistory[key]) this.flagsHistory[key] = [];\n      this.flagsHistory[key].push({\n        value: flagUpdates[key],\n        previousValue: oldFlags[key],\n        timestamp: Date.now(),\n        source: 'manual_update'\n      });\n    });\n    \n    // Journaliser les changements\n    this.logFlagChanges(oldFlags, this.flags);\n    \n    // Notifier les abonnés\n    this.notifySubscribers();\n    \n    // Persister sur le serveur si demandé\n    if (persistToServer) {\n      try {\n        await axios.post('/api/feature-flags', { \n          flags: flagUpdates,\n          segment: this.userSegment,\n          environment: this.environment\n        });\n      } catch (error) {\n        console.error('Erreur lors de la mise à jour des feature flags sur le serveur:', error);\n      }\n    }\n    \n    return this.flags;\n  }\n\n  /**\n   * Vérifie si un feature flag est activé\n   * @param {string} flagName Nom du flag à vérifier\n   * @returns {boolean} Statut du flag (true = activé)\n   */\n  isEnabled(flagName) {\n    // Si le flag n'existe pas, retourner false\n    if (!(flagName in this.flags)) {\n      console.warn(`Feature flag \"${flagName}\" non trouvé`);\n      return false;\n    }\n    \n    return this.flags[flagName] === true;\n  }\n\n  /**\n   * Récupère la valeur d'un flag pour les tests A/B ou les flags multi-valeurs\n   * @param {string} flagName Nom du flag\n   * @param {any} defaultValue Valeur par défaut si le flag n'existe pas\n   * @returns {any} Valeur du flag ou valeur par défaut\n   */\n  getVariant(flagName, defaultValue = null) {\n    if (!(flagName in this.flags)) {\n      console.warn(`Feature flag variant \"${flagName}\" non trouvé`);\n      return defaultValue;\n    }\n    \n    return this.flags[flagName];\n  }\n\n  /**\n   * S'abonne aux changements de feature flags\n   * @param {Function} callback Fonction appelée lors d'un changement\n   * @returns {Function} Fonction pour se désabonner\n   */\n  subscribe(callback) {\n    this.subscribers.push(callback);\n    \n    // Retourner une fonction de nettoyage pour le désabonnement\n    return () => {\n      this.subscribers = this.subscribers.filter(sub => sub !== callback);\n    };\n  }\n\n  /**\n   * Notifie tous les abonnés d'un changement de flags\n   */\n  notifySubscribers() {\n    this.subscribers.forEach(callback => {\n      try {\n        callback(this.flags);\n      } catch (error) {\n        console.error('Erreur lors de la notification d\\'un abonné aux feature flags:', error);\n      }\n    });\n  }\n\n  /**\n   * Récupère l'historique des changements pour un flag\n   * @param {string} flagName Nom du flag\n   * @returns {Array} Historique des changements\n   */\n  getFlagHistory(flagName) {\n    return this.flagsHistory[flagName] || [];\n  }\n\n  /**\n   * Définit la durée du cache\n   * @param {number} durationMs Durée en milliseconds\n   */\n  setCacheDuration(durationMs) {\n    this.cacheDuration = durationMs;\n  }\n}\n\n// Créer une instance singleton du service\nconst featureFlagsService = new FeatureFlagsService();\n\n/**\n * Hook React pour utiliser les feature flags dans les composants\n * @returns {Object} Objet contenant les flags et fonctions utilitaires\n */\nexport const useFeatureFlags = () => {\n  const context = useContext(FeatureFlagsContext);\n  \n  if (!context) {\n    throw new Error('useFeatureFlags doit être utilisé à l\\'intérieur d\\'un FeatureFlagsProvider');\n  }\n  \n  return context;\n};\n\n/**\n * Fournisseur de contexte pour les feature flags\n * @param {Object} props Props du composant\n * @param {React.ReactNode} props.children Enfants du composant\n */\nexport const FeatureFlagsProvider = ({ children }) => {\n  const [flags, setFlags] = useState(DEFAULT_FLAGS);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Charger les flags au montage du composant\n  useEffect(() => {\n    const initializeFlags = async () => {\n      try {\n        setIsLoading(true);\n        await featureFlagsService.initialize();\n        setFlags({ ...featureFlagsService.flags });\n        setError(null);\n      } catch (err) {\n        setError(err.message || 'Erreur lors du chargement des feature flags');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializeFlags();\n\n    // S'abonner aux changements\n    const unsubscribe = featureFlagsService.subscribe(updatedFlags => {\n      setFlags({ ...updatedFlags });\n    });\n\n    // Se désabonner lors du démontage\n    return unsubscribe;\n  }, []);\n\n  // Fonction pour mettre à jour un flag\n  const updateFlag = async (flagName, value, persistToServer = true) => {\n    try {\n      await featureFlagsService.updateFlags({ [flagName]: value }, persistToServer);\n    } catch (err) {\n      setError(err.message || 'Erreur lors de la mise à jour du feature flag');\n    }\n  };\n\n  // Fonction pour rafraîchir tous les flags\n  const refreshFlags = async () => {\n    try {\n      setIsLoading(true);\n      await featureFlagsService.fetchFlagsFromApi(true);\n      setFlags({ ...featureFlagsService.flags });\n      setError(null);\n    } catch (err) {\n      setError(err.message || 'Erreur lors du rafraîchissement des feature flags');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fonction pour vérifier si un flag est activé (raccourci)\n  const isEnabled = (flagName) => {\n    return featureFlagsService.isEnabled(flagName);\n  };\n\n  // Fonction pour récupérer la valeur d'un flag variant\n  const getVariant = (flagName, defaultValue = null) => {\n    return featureFlagsService.getVariant(flagName, defaultValue);\n  };\n\n  const value = {\n    flags,\n    isLoading,\n    error,\n    updateFlag,\n    refreshFlags,\n    isEnabled,\n    getVariant\n  };\n\n  return (\n    <FeatureFlagsContext.Provider value={value}>\n      {children}\n    </FeatureFlagsContext.Provider>\n  );\n};\n\n// Exporter le service pour une utilisation directe si nécessaire\nexport default featureFlagsService;\n"],"names":["CACHE_STRATEGIES","CacheItem","constructor","data","params","arguments","length","undefined","this","timestamp","Date","now","expiry","ttl","staleExpiry","staleTime","tags","etag","lastModified","isExpired","isStale","extend","additionalTime","cache","Map","pendingRequests","isInitialized","storageKey","defaultTTL","maxCacheSize","defaultStrategy","networkMonitor","isOnline","lastCheck","statistics","hits","misses","errors","networkCalls","ttlConfigKey","categoryTTLs","axiosInstance","axios","create","timeout","interceptors","request","use","config","cacheKey","generateCacheKey","url","cachedItem","get","headers","response","newHeaders","cacheHeaders","error","status","statusText","fromCache","set","Promise","reject","initialize","loadTTLConfigurations","featureFlagsService","isEnabled","loadCacheFromStorage","setupNetworkMonitoring","setupPeriodicCleanup","console","info","cacheSize","size","formatDuration","window","addEventListener","navigator","onLine","setInterval","cleanupCache","deleteCount","key","item","entries","delete","excess","Array","from","sort","a","b","i","saveCacheToStorage","storedCache","localStorage","getItem","parsedCache","JSON","parse","validEntries","Object","forEach","_ref","value","cacheItem","clear","cacheObject","setItem","stringify","normalizedUrl","toLowerCase","trim","sortedParams","keys","options","strategy","getTTLForUrl","cacheOptions","fetchFromNetwork","Error","cacheResponse","warn","stale","fetchFromNetworkAndUpdateCache","catch","post","then","put","has","requestPromise","_response$headers","_response$headers2","pruneCache","invalidateCache","startsWith","invalidateByTags","isArray","keysToDelete","some","tag","includes","push","clearCache","removeItem","getStatistics","configure","globalTTL","getValue","category","savedConfig","e","urlCategories","pattern","test","ms","Math","round","DETAIL_LEVELS","MEMORY_THRESHOLDS","SIMPLE_GEOMETRIES","tree","THREE","rock","building","progressiveModeEnabled","currentDetailLevel","deviceCapabilities","loadedModels","loadingProgress","worker","frustumCullingEnabled","lastRenderTime","targetFrameRate","renderTimeHistory","adaptiveQualityEnabled","texturePool","activeRenderers","Set","memoryMonitorInterval","contextLossHandled","lowMemoryMode","deviceMemory","isIOS","estimatedMemoryUsage","detectDeviceCapabilities","webWorkerSupport","initializeWebWorker","setupContextLossHandlers","isMobile","setupMemoryMonitoring","detailLevel","adaptiveQuality","webWorker","Worker","webGLVersion","maxTextureSize","anisotropySupport","maxAnisotropy","devicePixelRatio","userAgent","MSStream","canvas","document","createElement","gl","getContext","getParameter","MAX_TEXTURE_SIZE","ext","getExtension","MAX_TEXTURE_MAX_ANISOTROPY_EXT","loseContext","unloadModel","modelId","model","geometry","dispose","material","disposeMaterial","animations","mixer","stopAllAction","uncacheRoot","children","child","disposeObject3D","parent","remove","updateMemoryUsage","propertyName","property","isTexture","uuid","inUse","object","event","preventDefault","renderer","forceContextLoss","dispatchEvent","CustomEvent","resetState","rebuildTextures","clearInterval","checkMemoryUsage","hidden","releaseNonEssentialResources","performance","memoryUsageMB","debug","toFixed","handleCriticalMemory","decreaseQuality","increaseQuality","unloadNonVisibleModels","clearTexturePool","gc","cleanupTexturePool","visibleModelIds","querySelectorAll","el","dataset","add","totalMemoryUsage","attributes","name","attribute","array","byteLength","prop","texture","image","width","height","entry","getTextureFromPool","load","anisotropy","min","lastUsed","texturesToRebuild","registerRenderer","setPixelRatio","shadowMap","enabled","autoUpdate","unregisterRenderer","optimizeGeometryForMobile","optimized","clone","mergeVertices","terminate","DEFAULT_TIMEOUT_CONFIG","api","standard","long","download","upload","ui","toast","autoClose","animation","debounce","throttle","features","nutrition","calculation","synchronization","training","planGeneration","routeCalculation","visualization3D","render","weatherData","forecast","historical","retry","maxAttempts","baseDelay","maxDelay","factor","activeTimeouts","activeIntervals","pendingOperations","customConfig","storedConfig","parsedConfig","mergeConfigs","baseConfig","overrideConfig","result","getTimeout","path","defaultValue","split","setTimeout","persist","target","callback","delay","id","timeoutId","random","toString","substring","handle","created","expires","intervalId","clearTimeout","withTimeout","fn","timeoutPath","defaultTimeout","onTimeout","abortable","operationId","controller","AbortController","signal","started","resolve","abort","withRetry","shouldRetry","onRetry","attempt","execute","async","pow","withParallelTimeout","fns","allOrNothing","promises","map","p","_settled","_result","all","results","allSettled","leading","trailing","maxWait","actualDelay","lastArgs","lastThis","lastCallTime","lastInvokeTime","invokeFunc","args","thisArg","apply","trailingEdge","debounced","time","isInvoking","shouldInvoke","_len","_key","cancel","flush","PERF_LEVELS","ULTRA_LOW","LOW","MEDIUM_LOW","MEDIUM","MEDIUM_HIGH","HIGH","ULTRA_HIGH","QUALITY_PRESETS","terrainSegments","terrainTexture","usePostProcessing","useRealisticLighting","useShadows","drawDistance","useAntialiasing","useBloom","particleDensity","maxPointsOfInterest","maxBackgroundModels","perfLevel","isDetecting","onDetectionComplete","detectionTimeout","testDuration","targetFPS","minimumAcceptableFPS","userOverrides","defaultLevel","detectPerformance","log","detectionPromise","savedSettings","_loadUserSettings","userSelectedLevel","level","preset","_getQualityPreset","source","initialLevel","_detectInitialLevel","fpsResult","_runFPSTest","_determineLevelFromFPS","_adjustForMemoryAndResolution","_saveDetectionResult","fps","message","timeoutPromise","race","getQualitySettings","customLevel","_getLevelPreset","setQualityLevel","save","values","_saveUserSettings","overrideSettings","overrides","resetToDetectedSettings","clearSaved","progressiveLoad","preloadCallback","upgradeCallback","lowQualitySettings","targetSettings","steps","intermediateLevel","intermediateSettings","success","finalSettings","isSafari","memoryScore","max","floor","cpuScore","hardwareConcurrency","pixelCount","screen","resolutionScore","score","style","position","left","body","appendChild","ctx","removeChild","avgFps","framesCount","supported","lastTime","frames","totalFps","testAnimation","clearColor","COLOR_BUFFER_BIT","startTime","requestAnimationFrame","duration","detectedLevel","settings","current","saved","capabilities","gpu","webGLSupport","webGL2Support","vendor","estimatedMemory","maxCubemapSize","glExtensions","isMobileGPU","cpu","cores","estimatedPerformance","resolution","pixelRatio","effectiveResolution","isHighDensity","network","type","effectiveType","downlink","rtt","saveData","flags","isTablet","isLowEndDevice","hasBatteryConstraints","preferReducedMotion","isOffline","performanceLevel","benchmarkResults","detectionComplete","detect","getCapabilities","detectGPUCapabilities","detectNetworkConditions","detectAccessibilityPreferences","detectDeviceType","detectBatteryStatus","loadCachedResults","runLightBenchmark","cacheBenchmarkResults","finalizeDetection","getPerformanceLevelName","gpuMemory","applyDefaultValues","isWebGLSupported","isWebGL2Supported","debugInfo","UNMASKED_RENDERER_WEBGL","UNMASKED_VENDOR_WEBGL","estimateGPUMemory","MAX_CUBE_MAP_TEXTURE_SIZE","getSupportedExtensions","connection","mozConnection","webkitConnection","matchMedia","motionQuery","matches","opera","mobileRegex","tabletRegex","minTabletWidth","maxTabletWidth","screenWidth","getBattery","battery","charging","cachedResults","scores","cpuStartTime","sum","sqrt","sin","cpuEndTime","domStartTime","container","textContent","backgroundColor","scrollTop","domEndTime","dom","runWebGLBenchmark","overall","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","useProgram","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","positionLocation","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","timeLocation","getUniformLocation","maxTime","uniform1f","drawArrays","TRIANGLE_STRIP","elapsedTime","normalizedScore","_this$benchmarkResult","_this$benchmarkResult2","WebGLRenderingContext","WebGL2RenderingContext","rendererLower","configs","colVisualization","textureSize","textureQuality","shadowsEnabled","postProcessingEnabled","ambientOcclusionEnabled","reflectionsEnabled","occlusionCullingEnabled","modelDetailLevel","interactiveObjects","useSimplifiedGeometry","maxParticles","fogEnabled","animationLevel","backgroundDetail","lightingComplexity","maxFrameRate","shadowMapSize","postProcessingEffects","trainingVisualization","avatarSegments","environmentDetail","maxCyclists","effectsEnabled","useSimplifiedPhysics","animationFrameskip","backgroundEnabled","reflectionQuality","lightingQuality","maxTrainingObjects","mobileOverrides","batterySavingOverrides","getOptimalConfig","componentType","overrideFlags","deviceCapabilityDetector","forceMobileMode","applyMobileOverrides","forceBatterySaving","applyBatterySavingOverrides","sanitizeConfig","_ref2","generateConfigSummary","qualityScore","maxScore","high","low","binary","indicator","normalized","qualityPercentage","detectMobile","detectTablet","initialized","optimizations","reducedResolution","simplifiedEffects","batterySaveMode","optimizedControls","progressiveLoading","optimizedInteraction","reducedAnimations","originalPixelRatio","currentPixelRatio","performanceMetrics","frameRate","frameHistory","dropCount","lastPerformanceCheck","adaptiveQualityMetrics","minFPS","adjustmentCooldown","lastAdjustment","currentQualityMultiplier","readyState","setupEventListeners","handleOrientationChange","handleVisibilityChange","checkBatteryStatus","setupPerformanceMonitoring","needsMobileOptimizations","optimizeRenderer","reductionFactor","antialias","precision","setupOptimizedTouchControls","controls","domElement","touchAction","rotateSpeed","zoomSpeed","panSpeed","enableDamping","minDistance","noRotate","movementSpeed","enableBatterySaveMode","animate","batterySavePixelRatio","frameTime","throttledAnimate","currentTime","elapsed","adjustForCurrentContext","detail","orientation","aspectRatio","innerWidth","innerHeight","pauseNonEssentialProcesses","resumeNonEssentialProcesses","lowBattery","_pausedState","state","checkPerformance","currentFPS","shift","averageFPS","reduce","adjustQualityBasedOnPerformance","qualityMultiplier","reason","isLandscape","getShaderOptimizationConfig","optimizeLoops","simplifyLighting","maxLights","setupProgressiveTextureLoading","textureLoader","isLowEnd","loadTexture","onProgress","resolutions","urls","res","urlParts","URL","location","href","pathname","pop","join","lowTexture","highTexture","quality","lowQualityTexture","pendingHighQuality","batteryOptimizer","batteryData","isSupported","dischargingTime","Infinity","listeners","batteryModeActive","batterySavingConfig","maxPixelRatio","minimizeObjects","maxDistanceMarkers","useLowResTextures","disablePostProcessing","throttleFPS","enableFrustumCulling","thresholds","lowBatteryLevel","criticalBatteryLevel","dischargingTimeWarning","autoEnableBatteryMode","updateBatteryInfo","previousLevel","previousCharging","abs","notifyListeners","setBatteryMode","active","getBatterySavingConfig","isBatteryModeActive","getBatteryData","addListener","listener","removeListener","filter","l","setAutoMode","loadUserPreferences","savedAutoMode","passId","elevationData","surfaceTypes","pointsOfInterest","canvasRef","useRef","isLoading","setIsLoading","useState","setError","selectedPOI","setSelectedPOI","filteredPointsOfInterest","setFilteredPointsOfInterest","qualityLevel","viewType","setViewType","poiFilters","setPoiFilters","viewpoint","restaurant","landmark","parking","danger","setDeviceCapabilities","renderConfig","setRenderConfig","setAdaptiveQualityEnabled","batteryMode","controlsRef","rendererRef","textureLoaderRef","performanceStatsRef","frameRateHistory","lastFrameTime","frameCount","lastPerformanceAdjustment","trailInfo","setTrailInfo","difficulty","elevationGain","useEffect","apiCacheService","threeDConfigManager","progressive3DLoader","getDetailLevelFromString","mobileOptimizer","initializeFlyThroughPath","setupAdaptiveQualityListeners","err","initializeVisualization","flyThroughAnimationRef","cancelAnimationFrame","filtered","every","v","poi","handleQualityChange","useCallback","newConfig","getStringFromDetailLevel","handleQualityAdjustment","newLevel","removeEventListener","handleBatteryModeToggle","newBatteryMode","SceneManager","camera","useThree","needsUpdate","setClearColor","setAnimationLoop","scene","useFrame","delta","_jsx","Paper","elevation","sx","mb","overflow","VisualizationContainer","StyledAlert","severity","LoadingOverlay","LoadingIndicator","_jsxs","_Fragment","Canvas","ref","fov","shadows","dpr","intensity","castShadow","Terrain","slice","index","PointOfInterest","x","z","label","isSelected","onClick","handleSelectPOI","OrbitControls","dampingFactor","maxDistance","touches","ONE","ROTATE","TWO","DOLLY_PAN","FlyThroughCamera","OverlayContainer","Box","Typography","variant","display","alignItems","mr","ButtonGroup","Button","disabled","AdaptiveQualityFlag","ml","Divider","my","handleViewChange","startIcon","DirectionsBikeIcon","flexWrap","gap","PoiFilterChip","handlePOIFilterChange","borderTop","component","TrailInfoContainer","TrailInfoItem","fontWeight","DEFAULT_FLAGS","enableDarkMode","showBetaFeatures","useNewNavigation","enableSevenMajorsChallenge","enableMonthlyChallenge","enableSocialSharing","enableApiCaching","enablePerformanceMonitoring","enable3DColVisualization","enableProgressiveLoading3D","enableAIRecommendations","enableRealTimeWeather","enableAdvancedCaching","enableOfflineMode","enableLazyLoadingImages","enableAdvancedMetrics","enableBulkOperations","enableNutritionPlanner","enableMealSuggestions","enableColSpecificNutrition","enableTrainingPrograms","enablePerformanceAnalytics","enableColSpecificTraining","enableMountainModule","enableRegionalTrainingPlans","ENVIRONMENTS","FeatureFlagsContext","createContext","updateFlag","refreshFlags","getVariant","subscribers","lastFetchTime","cacheDuration","environment","process","userSegment","flagsHistory","determineUserSegment","loadFlagsFromLocalStorage","fetchFlagsFromApi","applyEnvironmentOverrides","notifySubscribers","userInfo","role","visits","registeredAt","registrationDate","oneMonthAgo","setMonth","getMonth","productionOverrides","devOverrides","assign","storedFlags","parsedFlags","force","segment","oldFlags","previousValue","logFlagChanges","newFlags","changes","flag","oldValue","newValue","showDevNotification","notificationId","notification","getElementById","bottom","right","padding","color","borderRadius","zIndex","opacity","transition","parentNode","updateFlags","flagUpdates","persistToServer","flagName","subscribe","sub","getFlagHistory","setCacheDuration","durationMs","useFeatureFlags","context","useContext"],"sourceRoot":""}