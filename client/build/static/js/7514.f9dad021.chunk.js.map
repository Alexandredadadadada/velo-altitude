{"version":3,"file":"static/js/7514.f9dad021.chunk.js","mappings":"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","sources":["components/training/HIITTemplates.js","components/training/PerformanceTracker.js","components/training/WorkoutPlanner.js","components/training/TrainingModule.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from 'recharts';\nimport { useNotification } from '../common/NotificationSystem';\nimport FTPService from '../../services/FTPEstimationService';\n\n/**\n * HIITTemplates component displays and allows customization of HIIT workout templates\n */\nconst HIITTemplates = ({ userProfile, onSaveWorkout }) => {\n  const { t } = useTranslation();\n  const { notify } = useNotification();\n  const [templates, setTemplates] = useState([]);\n  const [selectedTemplate, setSelectedTemplate] = useState(null);\n  const [customizedTemplate, setCustomizedTemplate] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // Load HIIT templates based on user profile\n  useEffect(() => {\n    const loadTemplates = async () => {\n      try {\n        setLoading(true);\n        setError(null); // Réinitialiser les erreurs précédentes\n        \n        // Vérification du profil utilisateur\n        if (!userProfile) {\n          throw new Error('Profil utilisateur manquant ou incomplet');\n        }\n        \n        // Mock delay for API call simulation\n        await new Promise(resolve => setTimeout(resolve, 300));\n        \n        // Generate templates based on user level and FTP\n        const mockTemplates = generateHIITTemplates(userProfile);\n        setTemplates(mockTemplates);\n        \n        // Default select the first template\n        if (mockTemplates.length > 0) {\n          setSelectedTemplate(mockTemplates[0]);\n          setCustomizedTemplate(mockTemplates[0]);\n          \n          // Notification de succès\n          notify.success('Templates HIIT chargés avec succès', {\n            title: 'Chargement terminé'\n          });\n        } else {\n          throw new Error('Aucun template HIIT n\\'a pu être généré');\n        }\n      } catch (error) {\n        console.error('Error loading HIIT templates:', error);\n        setError(error.message || 'Erreur lors du chargement des templates HIIT');\n        \n        // Notification d'erreur\n        notify.error('Impossible de charger les templates HIIT', error, {\n          title: 'Erreur de chargement'\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    if (userProfile) {\n      loadTemplates();\n    }\n  }, [userProfile, notify, t]);\n  \n  /**\n   * Generate HIIT templates based on user profile\n   */\n  const generateHIITTemplates = (profile) => {\n    if (!profile) {\n      console.error('Profil utilisateur manquant pour la génération des templates HIIT');\n      return [];\n    }\n    \n    // Vérification et correction des valeurs FTP et niveau\n    let { level = 'intermediate' } = profile;\n    \n    // Utilisation du service FTP pour valider et normaliser la FTP\n    const ftp = FTPService.validateFTP(profile.ftp, profile);\n    \n    // Validation du niveau utilisateur\n    if (!['beginner', 'intermediate', 'advanced', 'elite'].includes(level)) {\n      console.warn(`Niveau utilisateur invalide: ${level}, utilisation du niveau intermédiaire par défaut`);\n      level = 'intermediate';\n    }\n    \n    console.info(`Génération des templates HIIT avec FTP=${ftp}W et level=${level}`);\n    \n    const templates = [];\n    \n    try {\n      // HIIT Templates based on user level and FTP\n      if (level === 'beginner') {\n        // Beginner templates with lower intensity and more rest\n        templates.push({\n          id: 'hiit-beginner-1',\n          name: 'Pyramid de Récupération',\n          description: t('beginnerPyramidDesc', 'Intervalles de durée progressive adaptés aux débutants'),\n          difficulty: 1,\n          duration: 30, // minutes\n          intervals: generatePyramidIntervals(ftp, 0.7, 0.85, 30, 60, 60, [30, 60, 90, 60, 30])\n        });\n        \n        templates.push({\n          id: 'hiit-beginner-2',\n          name: 'Intervalles Débutant',\n          description: t('beginnerIntervalsDesc', 'Intervalles courts à intensité modérée pour débutants'),\n          difficulty: 1,\n          duration: 35,\n          intervals: generateIntervals(ftp, 0.75, 45, 90, 6)\n        });\n      } else if (level === 'intermediate') {\n        // Intermediate templates with moderate intensity\n        templates.push({\n          id: 'hiit-intermediate-1',\n          name: 'Ladder Classique',\n          description: t('intervalLadderDesc', 'Intervalles en échelle pour améliorer l\\'endurance et la puissance'),\n          difficulty: 2,\n          duration: 45,\n          intervals: generateLadderIntervals(ftp, 0.85, 0.95, [30, 60, 90, 120, 120, 90, 60, 30], 60)\n        });\n        \n        templates.push({\n          id: 'hiit-intermediate-2',\n          name: 'Over-Under 90/105',\n          description: t('overUnderDesc', 'Alternance d\\'intensité pour stimuler le seuil lactique'),\n          difficulty: 2,\n          duration: 40,\n          intervals: generateOverUnderIntervals(ftp, 0.9, 1.05, 180, 30, 4)\n        });\n      } else if (level === 'advanced') {\n        // Advanced templates with higher intensity\n        templates.push({\n          id: 'hiit-advanced-1',\n          name: 'VO2max Intense',\n          description: t('vo2maxDesc', 'Stimulation intense de VO2max avec intervalles courts à haute intensité'),\n          difficulty: 3,\n          duration: 50,\n          intervals: generateIntervals(ftp, 1.1, 30, 30, 10, 3)\n        });\n        \n        templates.push({\n          id: 'hiit-advanced-2',\n          name: 'Pyramide Avancée',\n          description: t('advancedPyramidDesc', 'Pyramide difficile pour cyclistes avancés'),\n          difficulty: 3,\n          duration: 60,\n          intervals: generatePyramidIntervals(ftp, 0.9, 1.1, 30, 180, 60, [30, 60, 120, 180, 120, 60, 30])\n        });\n      } else if (level === 'elite') {\n        // Elite templates with very high intensity\n        templates.push({\n          id: 'hiit-elite-1',\n          name: 'Sprints Supramaximaux',\n          description: t('sprintsDesc', 'Sprints courts très intenses pour cyclistes de compétition'),\n          difficulty: 3,\n          duration: 45,\n          intervals: generateIntervals(ftp, 1.3, 15, 45, 12, 3)\n        });\n        \n        templates.push({\n          id: 'hiit-elite-2',\n          name: 'Over-Under Elite',\n          description: t('eliteOverUnderDesc', 'Over-under de compétition pour cyclistes d\\'élite'),\n          difficulty: 3,\n          duration: 65,\n          intervals: generateOverUnderIntervals(ftp, 0.95, 1.2, 240, 30, 5)\n        });\n      }\n      \n      // Ajouter des templates communs à tous les niveaux\n      templates.push({\n        id: 'hiit-common-1',\n        name: '30/30 Classique',\n        description: t('thirtyThirtyDesc', 'Intervalles 30/30 classiques pour tous niveaux'),\n        difficulty: level === 'beginner' ? 2 : (level === 'intermediate' ? 1 : 1),\n        duration: 40,\n        intervals: generateIntervals(\n          ftp, \n          level === 'beginner' ? 0.9 : (level === 'intermediate' ? 1.0 : 1.05), \n          30, \n          30, \n          10,\n          2\n        )\n      });\n      \n    } catch (error) {\n      console.error('Erreur lors de la génération des templates HIIT', error);\n      notify.error('Erreur lors de la génération des templates', error, {\n        details: 'Un template par défaut a été fourni à la place'\n      });\n      \n      // Ajouter un template de secours en cas d'erreur\n      templates.push({\n        id: 'hiit-fallback',\n        name: 'Entraînement par Défaut',\n        description: 'Entraînement par intervalles standard',\n        difficulty: 1,\n        duration: 30,\n        intervals: generateIntervals(ftp || 200, 0.8, 60, 60, 5)\n      });\n    }\n    \n    // Filtrer les templates qui n'ont pas d'intervalles valides\n    const validTemplates = templates.filter(template => \n      template.intervals && \n      Array.isArray(template.intervals) && \n      template.intervals.length > 0\n    );\n    \n    if (validTemplates.length === 0) {\n      console.error('Aucun template valide n\\'a pu être généré');\n      notify.warning('Aucun template valide n\\'a pu être généré, utilisation d\\'un template de secours');\n      \n      // Ajouter un template minimal de dernier recours\n      validTemplates.push({\n        id: 'hiit-emergency',\n        name: 'Intervalles Simples',\n        description: 'Entraînement par intervalles de base',\n        difficulty: 1,\n        duration: 20,\n        intervals: [\n          { type: 'work', power: Math.round((ftp || 200) * 0.75), duration: 60, restDuration: 60 },\n          { type: 'work', power: Math.round((ftp || 200) * 0.75), duration: 60, restDuration: 60 },\n          { type: 'work', power: Math.round((ftp || 200) * 0.75), duration: 60, restDuration: 60 },\n          { type: 'work', power: Math.round((ftp || 200) * 0.75), duration: 60, restDuration: 0 }\n        ]\n      });\n    }\n    \n    return validTemplates;\n  };\n\n  /**\n   * Generate standard intervals with same power and duration\n   */\n  const generateIntervals = (ftp, intensityFactor, workDuration, restDuration, count, sets = 1) => {\n    // Validation des paramètres\n    if (!ftp || ftp <= 0) {\n      console.error('FTP invalide pour la génération d\\'intervalles');\n      ftp = 200; // Valeur par défaut\n    }\n    \n    if (intensityFactor <= 0 || intensityFactor > 2) {\n      console.warn(`Facteur d'intensité invalide (${intensityFactor}), utilisation d'une valeur par défaut (0.8)`);\n      intensityFactor = 0.8;\n    }\n    \n    if (workDuration <= 0) workDuration = 30;\n    if (restDuration < 0) restDuration = 30;\n    if (count <= 0) count = 5;\n    if (sets <= 0) sets = 1;\n    \n    const intervals = [];\n    \n    // Arrondir la puissance au watt près pour éviter les valeurs décimales\n    const power = Math.round(ftp * intensityFactor);\n    \n    for (let set = 0; set < sets; set++) {\n      // Ajouter repos entre les séries (sauf première série)\n      if (set > 0) {\n        intervals.push({\n          power: Math.round(ftp * 0.4), // 40% FTP pour récupération entre séries\n          duration: 120, // 2 minutes de récupération entre séries\n          type: 'rest',\n          setRest: true\n        });\n      }\n      \n      for (let i = 0; i < count; i++) {\n        // Interval d'effort\n        intervals.push({\n          power: power,\n          duration: workDuration,\n          type: 'work'\n        });\n        \n        // Interval de récupération (sauf après le dernier de la série)\n        if (i < count - 1 || set < sets - 1) {\n          intervals.push({\n            power: Math.round(ftp * 0.4), // 40% FTP pour récupération\n            duration: restDuration,\n            type: 'rest'\n          });\n        }\n      }\n    }\n    \n    return intervals;\n  };\n  \n  /**\n   * Generate pyramid intervals with increasing then decreasing durations\n   */\n  const generatePyramidIntervals = (ftp, minIntensity, maxIntensity, minDuration, maxDuration, restDuration, durations) => {\n    // Validation des paramètres\n    if (!ftp || ftp <= 0) ftp = 200;\n    if (minIntensity <= 0 || minIntensity > 2) minIntensity = 0.7;\n    if (maxIntensity <= 0 || maxIntensity > 2 || maxIntensity < minIntensity) maxIntensity = minIntensity + 0.2;\n    if (minDuration <= 0) minDuration = 30;\n    if (maxDuration <= 0 || maxDuration < minDuration) maxDuration = minDuration * 2;\n    if (restDuration < 0) restDuration = 30;\n    \n    const intervals = [];\n    \n    // Si durations est spécifié, l'utiliser\n    if (Array.isArray(durations) && durations.length > 0) {\n      const stepCount = durations.length;\n      durations.forEach((duration, index) => {\n        // Calculer l'intensité progressive\n        const progressFactor = index / (stepCount - 1);\n        const intensity = minIntensity + progressFactor * (maxIntensity - minIntensity);\n        \n        intervals.push({\n          power: Math.round(ftp * intensity),\n          duration: duration,\n          type: 'work'\n        });\n        \n        if (index < durations.length - 1) {\n          intervals.push({\n            power: Math.round(ftp * 0.4), // 40% FTP pour récupération\n            duration: restDuration,\n            type: 'rest'\n          });\n        }\n      });\n    } else {\n      // Générer une pyramide automatique\n      // Code pour créer une pyramide par défaut\n      // (non implémenté ici car durations est toujours fourni dans ce composant)\n    }\n    \n    return intervals;\n  };\n  \n  /**\n   * Generate ladder intervals with varying durations\n   */\n  const generateLadderIntervals = (ftp, minIntensity, maxIntensity, durations, restDuration) => {\n    // Validation des paramètres d'entrée\n    if (!ftp || typeof ftp !== 'number' || ftp <= 0) {\n      console.error('FTP invalide dans generateLadderIntervals', { ftp });\n      ftp = 200; // Valeur par défaut sécurisée\n    }\n    \n    if (typeof minIntensity !== 'number' || minIntensity <= 0 || minIntensity > 1.5) {\n      console.error('Intensité minimale invalide dans generateLadderIntervals', { minIntensity });\n      minIntensity = 0.75; // Valeur par défaut sécurisée\n    }\n    \n    if (typeof maxIntensity !== 'number' || maxIntensity <= 0 || \n        maxIntensity > 1.5 || maxIntensity < minIntensity) {\n      console.error('Intensité maximale invalide dans generateLadderIntervals', { maxIntensity });\n      maxIntensity = minIntensity + 0.1; // Valeur par défaut sécurisée basée sur minIntensity\n    }\n    \n    if (!Array.isArray(durations) || durations.length === 0) {\n      console.error('Durées invalides dans generateLadderIntervals', { durations });\n      durations = [30, 60, 90]; // Valeurs par défaut sécurisées\n    }\n    \n    // S'assurer que restDuration est un nombre valide\n    if (typeof restDuration !== 'number' || restDuration < 0) {\n      console.error('Durée de repos invalide dans generateLadderIntervals', { restDuration });\n      restDuration = 60; // Valeur par défaut sécurisée\n    }\n    \n    const intervals = [];\n    const steps = durations.length;\n    \n    // Calculer l'incrément d'intensité pour chaque échelon\n    const intensityIncrement = (maxIntensity - minIntensity) / (steps - 1 || 1);\n    \n    durations.forEach((duration, index) => {\n      // Validation de la durée\n      if (typeof duration !== 'number' || duration <= 0) {\n        console.warn(`Durée invalide à l'index ${index}`, { duration });\n        duration = 30; // Valeur par défaut sécurisée\n      }\n      \n      // Calculer l'intensité pour cet échelon\n      const intensity = minIntensity + (intensityIncrement * index);\n      \n      // Calculer la puissance basée sur l'intensité et la FTP\n      const power = Math.round(ftp * intensity);\n      \n      // Ajouter l'intervalle d'effort\n      intervals.push({\n        type: 'work',\n        power,\n        intensity: intensity,\n        duration: duration,\n        restDuration: index < durations.length - 1 ? restDuration : 0\n      });\n    });\n    \n    return intervals;\n  };\n\n  /**\n   * Generate over-under intervals with alternating intensity\n   */\n  const generateOverUnderIntervals = (ftp, lowerIntensity, higherIntensity, totalDuration, switchTime, count) => {\n    // Validation des paramètres d'entrée\n    if (!ftp || typeof ftp !== 'number' || ftp <= 0) {\n      console.error('FTP invalide dans generateOverUnderIntervals', { ftp });\n      ftp = 200; // Valeur par défaut sécurisée\n    }\n    \n    if (typeof lowerIntensity !== 'number' || lowerIntensity <= 0 || lowerIntensity > 1.2) {\n      console.error('Intensité basse invalide dans generateOverUnderIntervals', { lowerIntensity });\n      lowerIntensity = 0.85; // Valeur par défaut sécurisée\n    }\n    \n    if (typeof higherIntensity !== 'number' || higherIntensity <= 0 || \n        higherIntensity > 1.5 || higherIntensity <= lowerIntensity) {\n      console.error('Intensité haute invalide dans generateOverUnderIntervals', { higherIntensity });\n      higherIntensity = lowerIntensity + 0.1; // Valeur par défaut sécurisée basée sur lowerIntensity\n    }\n    \n    if (typeof totalDuration !== 'number' || totalDuration <= 0) {\n      console.error('Durée totale invalide dans generateOverUnderIntervals', { totalDuration });\n      totalDuration = 300; // Valeur par défaut sécurisée (5 minutes)\n    }\n    \n    if (typeof switchTime !== 'number' || switchTime <= 0 || switchTime >= totalDuration) {\n      console.error('Temps de changement invalide dans generateOverUnderIntervals', { switchTime });\n      switchTime = 30; // Valeur par défaut sécurisée\n    }\n    \n    if (typeof count !== 'number' || count <= 0) {\n      console.error('Nombre d\\'intervalles invalide dans generateOverUnderIntervals', { count });\n      count = 4; // Valeur par défaut sécurisée\n    }\n    \n    const intervals = [];\n    \n    // Calculer la puissance pour les intensités haute et basse\n    const lowerPower = Math.round(ftp * lowerIntensity);\n    const higherPower = Math.round(ftp * higherIntensity);\n    \n    // Calculer le temps de récupération entre les répétitions (1:1 ou rapport personnalisé)\n    const restDuration = Math.round(totalDuration / 2);\n    \n    for (let i = 0; i < count; i++) {\n      // Interval principal avec alternance over/under\n      intervals.push({\n        type: 'over-under',\n        power: lowerPower, // Puissance de base\n        secondaryPower: higherPower, // Puissance des pics\n        intensity: lowerIntensity,\n        secondaryIntensity: higherIntensity,\n        duration: totalDuration,\n        switchTime: switchTime,\n        restDuration: i < count - 1 ? restDuration : 0\n      });\n    }\n    \n    return intervals;\n  };\n  \n  /**\n   * Handle template selection\n   */\n  const handleSelectTemplate = (template) => {\n    try {\n      if (!template) {\n        throw new Error('Template invalide');\n      }\n      \n      setSelectedTemplate(template);\n      // Créer une copie profonde pour éviter de modifier l'original\n      setCustomizedTemplate(JSON.parse(JSON.stringify(template)));\n    } catch (error) {\n      console.error('Erreur lors de la sélection du template:', error);\n      setError(`Erreur lors de la sélection du template: ${error.message}`);\n    }\n  };\n  \n  /**\n   * Handle interval adjustment\n   */\n  const handleAdjustInterval = (index, field, value) => {\n    if (index < 0 || !customizedTemplate || !customizedTemplate.intervals) {\n      console.error('Index invalide ou template non disponible', { index, customizedTemplate });\n      notify.error('Impossible de modifier l\\'intervalle', { \n        details: 'Données d\\'intervalle non disponibles' \n      });\n      return;\n    }\n    \n    if (!customizedTemplate.intervals[index]) {\n      console.error('Intervalle non trouvé à l\\'index spécifié', { index, intervals: customizedTemplate.intervals });\n      notify.error('Intervalle non trouvé');\n      return;\n    }\n    \n    // Créer une copie profonde pour éviter les modifications par référence\n    const updatedTemplate = JSON.parse(JSON.stringify(customizedTemplate));\n    \n    // Valider et convertir la valeur entrée\n    let numericValue = parseFloat(value);\n    \n    // Gérer les valeurs non numériques\n    if (isNaN(numericValue)) {\n      console.warn(`Valeur non numérique entrée pour ${field}:`, value);\n      notify.warning(`Valeur invalide pour ${field === 'power' ? 'la puissance' : 'la durée'}`);\n      \n      // Utiliser la valeur actuelle en cas d'entrée non valide\n      if (field === 'power') {\n        numericValue = updatedTemplate.intervals[index].power || 0;\n      } else if (field === 'duration' || field === 'restDuration') {\n        numericValue = updatedTemplate.intervals[index][field] || 0;\n      } else {\n        // Pour tout autre champ, conserver la valeur existante\n        return;\n      }\n    }\n    \n    // Appliquer des limites spécifiques selon le champ\n    if (field === 'power') {\n      // Limiter la puissance entre 50% et 150% de la FTP\n      const ftp = userProfile?.ftp || 200;\n      const validatedFtp = FTPService.validateFTP(ftp, userProfile);\n      const minPower = Math.round(validatedFtp * 0.5);\n      const maxPower = Math.round(validatedFtp * 1.5);\n      \n      if (numericValue < minPower) {\n        console.warn(`Puissance trop basse (${numericValue}W), limitée à ${minPower}W`);\n        notify.info(`Puissance ajustée au minimum (${minPower}W)`);\n        numericValue = minPower;\n      } else if (numericValue > maxPower) {\n        console.warn(`Puissance trop élevée (${numericValue}W), limitée à ${maxPower}W`);\n        notify.info(`Puissance ajustée au maximum (${maxPower}W)`);\n        numericValue = maxPower;\n      }\n      \n      // Mettre à jour l'intensité correspondante\n      updatedTemplate.intervals[index].intensity = parseFloat((numericValue / validatedFtp).toFixed(2));\n    } else if (field === 'duration' || field === 'restDuration') {\n      // Limiter la durée entre 5 et 600 secondes (10 minutes)\n      if (numericValue < 5) {\n        console.warn(`Durée trop courte (${numericValue}s), limitée à 5s`);\n        notify.info(`Durée ajustée au minimum (5s)`);\n        numericValue = 5;\n      } else if (numericValue > 600) {\n        console.warn(`Durée trop longue (${numericValue}s), limitée à 600s`);\n        notify.info(`Durée ajustée au maximum (10 minutes)`);\n        numericValue = 600;\n      }\n    }\n    \n    // Mettre à jour l'intervalle\n    updatedTemplate.intervals[index][field] = numericValue;\n    \n    // Mettre à jour la durée totale de l'entraînement\n    updatedTemplate.duration = calculateWorkoutDuration(updatedTemplate.intervals);\n    \n    // Mettre à jour le state\n    setCustomizedTemplate(updatedTemplate);\n  };\n\n  /**\n   * Calculate total workout duration in minutes\n   */\n  const calculateWorkoutDuration = (intervals) => {\n    if (!intervals || !Array.isArray(intervals)) {\n      console.error('Intervalles invalides pour le calcul de durée', { intervals });\n      notify.error('Erreur lors du calcul de la durée');\n      return 0;\n    }\n    \n    try {\n      // Calculer la durée totale en secondes\n      const totalSeconds = intervals.reduce((total, interval) => {\n        // Vérification des valeurs pour éviter NaN\n        const workDuration = typeof interval.duration === 'number' ? interval.duration : 0;\n        const restDuration = typeof interval.restDuration === 'number' ? interval.restDuration : 0;\n        \n        return total + workDuration + restDuration;\n      }, 0);\n      \n      // Ajouter 5 minutes pour l'échauffement et la récupération\n      const warmupCooldownSeconds = 5 * 60;\n      const totalWorkoutSeconds = totalSeconds + warmupCooldownSeconds;\n      \n      // Convertir en minutes et arrondir\n      return Math.ceil(totalWorkoutSeconds / 60);\n    } catch (error) {\n      console.error('Erreur lors du calcul de la durée de l\\'entraînement', error);\n      notify.error('Erreur lors du calcul de la durée', error);\n      return 0;\n    }\n  };\n\n  /**\n   * Handle saving the workout\n   */\n  const handleSaveWorkout = () => {\n    try {\n      if (!customizedTemplate) {\n        throw new Error('Aucun template n\\'est sélectionné');\n      }\n      \n      const zoneMap = {\n        0.6: 1, // zone 1 - récupération\n        0.75: 2, // zone 2 - endurance\n        0.85: 3, // zone 3 - tempo\n        0.95: 4, // zone 4 - seuil\n        1.05: 5, // zone 5 - VO2max\n        1.2: 6,  // zone 6 - anaérobie\n        1.5: 7   // zone 7 - neuromuscular\n      };\n      \n      // Déterminer la zone cible principale en fonction des intervalles\n      let totalIntensity = 0;\n      let totalDuration = 0;\n      \n      customizedTemplate.intervals.forEach(interval => {\n        if (interval.type === 'work' || !interval.type) {\n          const intensityValue = interval.intensity || interval.power / (userProfile?.ftp || 200);\n          const duration = interval.duration || 0;\n          \n          totalIntensity += intensityValue * duration;\n          totalDuration += duration;\n        }\n      });\n      \n      const avgIntensity = totalIntensity / (totalDuration || 1);\n      \n      // Déterminer la zone cible\n      let targetZone = 3; // Default to zone 3\n      for (const [intensity, zone] of Object.entries(zoneMap)) {\n        if (avgIntensity <= parseFloat(intensity)) {\n          targetZone = zone;\n          break;\n        }\n      }\n      \n      const workout = {\n        ...customizedTemplate,\n        targetZone,\n        date: new Date().toISOString(),\n        userId: userProfile?.id\n      };\n      \n      // Appeler la fonction de sauvegarde parentale\n      const savedWorkout = onSaveWorkout(workout);\n      \n      if (savedWorkout) {\n        notify.success('L\\'entraînement a été enregistré avec succès', {\n          title: 'Sauvegarde réussie'\n        });\n      }\n    } catch (error) {\n      console.error('Erreur lors de la sauvegarde de l\\'entraînement', error);\n      notify.error('Impossible de sauvegarder l\\'entraînement', error);\n    }\n  };\n\n  /**\n   * Render interval visualization\n   */\n  const renderIntervalVisualization = (intervals) => {\n    try {\n      if (!intervals || !Array.isArray(intervals) || intervals.length === 0) {\n        return <div className=\"visualization-error\">Intervalles non disponibles</div>;\n      }\n      \n      // Préparer les données pour le graphique\n      const chartData = intervals.map((interval, index) => ({\n        name: `${index + 1}`,\n        power: interval.power || 0,\n        type: interval.type || 'work'\n      }));\n      \n      // Déterminer la couleur en fonction du type d'intervalle\n      const getBarColor = (entry) => {\n        return entry.type === 'work' ? '#ff4757' : \n              (entry.type === 'rest' ? '#2ed573' : \n              (entry.setRest ? '#1e90ff' : '#ffa502'));\n      };\n      \n      return (\n        <div className=\"interval-visualization\">\n          <h4>{t('powerProfile', 'Profil de puissance')}</h4>\n          <ResponsiveContainer width=\"100%\" height={200}>\n            <BarChart data={chartData} margin={{ top: 5, right: 5, bottom: 5, left: 5 }}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis domain={[0, 'dataMax + 20']} />\n              <Tooltip \n                formatter={(value) => [`${value}W`, 'Puissance']}\n                labelFormatter={(value) => `Intervalle ${value}`}\n              />\n              <Bar \n                dataKey=\"power\" \n                name=\"Puissance\"\n                fill=\"#8884d8\" \n                stroke=\"#8884d8\"\n                fillOpacity={0.8}\n                barSize={20}\n                isAnimationActive={false}\n                data={chartData}\n              >\n                {\n                  chartData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={getBarColor(entry)} />\n                  ))\n                }\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      );\n    } catch (error) {\n      console.error('Erreur lors de la génération de la visualisation:', error);\n      return <div className=\"visualization-error\">Erreur d'affichage: {error.message}</div>;\n    }\n  };\n  \n  // Affichage des erreurs\n  if (error) {\n    return (\n      <div className=\"hiit-templates-error\">\n        <div className=\"alert alert-danger\">\n          <h4>Erreur :</h4>\n          <p>{error}</p>\n          <button \n            className=\"btn btn-primary mt-3\"\n            onClick={() => setError(null)}\n          >\n            Réessayer\n          </button>\n        </div>\n      </div>\n    );\n  }\n  \n  // Loading state\n  if (loading) {\n    return <div className=\"hiit-templates-loading\">{t('loadingTemplates', 'Chargement des templates...')}</div>;\n  }\n  \n  return (\n    <div className=\"hiit-templates\">\n      <div className=\"templates-list\">\n        <h3>{t('availableTemplates', 'Templates disponibles')}</h3>\n        <div className=\"templates-grid\">\n          {templates.map(template => (\n            <div \n              key={template.id}\n              className={`template-card ${selectedTemplate?.id === template.id ? 'selected' : ''}`}\n              onClick={() => handleSelectTemplate(template)}\n            >\n              <h4>{template.name}</h4>\n              <div className=\"template-difficulty\">\n                {Array(template.difficulty).fill().map((_, i) => (\n                  <span key={i} className=\"difficulty-star\">★</span>\n                ))}\n                {Array(3 - template.difficulty).fill().map((_, i) => (\n                  <span key={i} className=\"difficulty-star empty\">☆</span>\n                ))}\n              </div>\n              <div className=\"template-duration\">{template.duration} {t('min', 'min')}</div>\n              <div className=\"template-description\">{template.description}</div>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {customizedTemplate && (\n        <div className=\"template-customization\">\n          <h3>{t('customizeWorkout', 'Personnaliser l\\'entraînement')}</h3>\n          \n          {renderIntervalVisualization(customizedTemplate.intervals)}\n          \n          <div className=\"intervals-table\">\n            <h4>{t('intervals', 'Intervalles')}</h4>\n            <table>\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>{t('power', 'Puissance')}</th>\n                  <th>{t('duration', 'Durée')}</th>\n                  <th>{t('rest', 'Récupération')}</th>\n                </tr>\n              </thead>\n              <tbody>\n                {customizedTemplate.intervals.map((interval, index) => (\n                  <tr key={index}>\n                    <td>{index + 1}</td>\n                    <td>\n                      <input \n                        type=\"number\" \n                        value={interval.power}\n                        onChange={(e) => handleAdjustInterval(index, 'power', e.target.value)}\n                        min={Math.round(userProfile?.ftp * 0.5) || 100}\n                        max={Math.round(userProfile?.ftp * 1.5) || 400}\n                      />\n                      <span>W</span>\n                    </td>\n                    <td>\n                      <input \n                        type=\"number\" \n                        value={interval.duration}\n                        onChange={(e) => handleAdjustInterval(index, 'duration', e.target.value)}\n                        min={10}\n                        max={600}\n                      />\n                      <span>{t('sec', 'sec')}</span>\n                    </td>\n                    <td>\n                      <input \n                        type=\"number\" \n                        value={interval.restDuration || 0}\n                        onChange={(e) => handleAdjustInterval(index, 'restDuration', e.target.value)}\n                        min={0}\n                        max={600}\n                      />\n                      <span>{t('sec', 'sec')}</span>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          \n          <div className=\"template-actions\">\n            <button \n              className=\"template-save-button\"\n              onClick={handleSaveWorkout}\n            >\n              {t('saveWorkout', 'Enregistrer')}\n            </button>\n            <button \n              className=\"template-reset-button\"\n              onClick={() => setCustomizedTemplate({...selectedTemplate})}\n            >\n              {t('resetChanges', 'Réinitialiser')}\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nHIITTemplates.propTypes = {\n  userProfile: PropTypes.shape({\n    id: PropTypes.string,\n    level: PropTypes.string,\n    ftp: PropTypes.number\n  }),\n  onSaveWorkout: PropTypes.func.isRequired\n};\n\nexport default HIITTemplates;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  RadarChart,\n  Radar,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n} from 'recharts';\n\n/**\n * PerformanceTracker component for visualizing training progress\n */\nconst PerformanceTracker = ({ userProfile, workouts }) => {\n  const { t } = useTranslation();\n  const [timeframe, setTimeframe] = useState('month');\n  const [metricType, setMetricType] = useState('power');\n  const [filteredWorkouts, setFilteredWorkouts] = useState([]);\n  \n  // Filter workouts based on selected timeframe\n  useEffect(() => {\n    if (!workouts || workouts.length === 0) {\n      setFilteredWorkouts([]);\n      return;\n    }\n    \n    const now = new Date();\n    let cutoffDate = new Date();\n    \n    switch (timeframe) {\n      case 'week':\n        cutoffDate.setDate(now.getDate() - 7);\n        break;\n      case 'month':\n        cutoffDate.setMonth(now.getMonth() - 1);\n        break;\n      case 'quarter':\n        cutoffDate.setMonth(now.getMonth() - 3);\n        break;\n      case 'year':\n        cutoffDate.setFullYear(now.getFullYear() - 1);\n        break;\n      default:\n        cutoffDate.setMonth(now.getMonth() - 1); // Default to month\n    }\n    \n    const filtered = workouts.filter(workout => {\n      const workoutDate = new Date(workout.date);\n      return workoutDate >= cutoffDate;\n    });\n    \n    // Sort by date\n    filtered.sort((a, b) => new Date(a.date) - new Date(b.date));\n    \n    setFilteredWorkouts(filtered);\n  }, [workouts, timeframe]);\n  \n  /**\n   * Calculate stats for the filtered workouts\n   */\n  const calculateStats = () => {\n    if (filteredWorkouts.length === 0) {\n      return {\n        totalWorkouts: 0,\n        totalDuration: 0,\n        avgPower: 0,\n        maxPower: 0,\n        totalTSS: 0,\n        workoutTypes: []\n      };\n    }\n    \n    const totalWorkouts = filteredWorkouts.length;\n    const totalDuration = filteredWorkouts.reduce((sum, w) => sum + w.duration, 0);\n    \n    // Calculate power metrics\n    const powerWorkouts = filteredWorkouts.filter(w => w.metrics?.averagePower);\n    const avgPower = powerWorkouts.length \n      ? Math.round(powerWorkouts.reduce((sum, w) => sum + w.metrics.averagePower, 0) / powerWorkouts.length)\n      : 0;\n    \n    const maxPower = powerWorkouts.length\n      ? Math.max(...powerWorkouts.map(w => w.metrics.normalizedPower || w.metrics.averagePower))\n      : 0;\n    \n    // Calculate TSS\n    const totalTSS = filteredWorkouts.reduce((sum, w) => sum + (w.tss || 0), 0);\n    \n    // Calculate workout type distribution\n    const typeCount = {};\n    filteredWorkouts.forEach(w => {\n      typeCount[w.type] = (typeCount[w.type] || 0) + 1;\n    });\n    \n    const workoutTypes = Object.entries(typeCount).map(([name, value]) => ({ name, value }));\n    \n    return {\n      totalWorkouts,\n      totalDuration,\n      avgPower,\n      maxPower,\n      totalTSS,\n      workoutTypes\n    };\n  };\n  \n  const stats = calculateStats();\n  \n  /**\n   * Prepare data for the time series chart\n   */\n  const prepareTimeSeriesData = () => {\n    if (filteredWorkouts.length === 0) return [];\n    \n    // Map workouts to chart data based on selected metric\n    return filteredWorkouts.map(workout => {\n      let metricValue = 0;\n      \n      switch (metricType) {\n        case 'power':\n          metricValue = workout.metrics?.normalizedPower || workout.metrics?.averagePower || 0;\n          break;\n        case 'tss':\n          metricValue = workout.tss || 0;\n          break;\n        case 'duration':\n          metricValue = workout.duration || 0;\n          break;\n        case 'heartrate':\n          metricValue = workout.metrics?.averageHr || 0;\n          break;\n        default:\n          metricValue = workout.metrics?.averagePower || 0;\n      }\n      \n      // Format date for display\n      const date = new Date(workout.date);\n      const formattedDate = `${date.getDate()}/${date.getMonth() + 1}`;\n      \n      return {\n        date: formattedDate,\n        value: metricValue,\n        type: workout.type\n      };\n    });\n  };\n  \n  /**\n   * Prepare data for the workout type distribution chart\n   */\n  const prepareWorkoutTypeData = () => {\n    if (filteredWorkouts.length === 0) return [];\n    \n    const typeCount = {};\n    filteredWorkouts.forEach(w => {\n      typeCount[w.type] = (typeCount[w.type] || 0) + 1;\n    });\n    \n    return Object.entries(typeCount).map(([name, value]) => ({ name, value }));\n  };\n  \n  /**\n   * Prepare data for the TSS distribution chart\n   */\n  const prepareTssDistributionData = () => {\n    if (filteredWorkouts.length === 0) return [];\n    \n    // Group TSS by week\n    const tssByWeek = {};\n    \n    filteredWorkouts.forEach(workout => {\n      const date = new Date(workout.date);\n      const weekNum = getWeekNumber(date);\n      const weekKey = `W${weekNum}`;\n      \n      if (!tssByWeek[weekKey]) {\n        tssByWeek[weekKey] = 0;\n      }\n      \n      tssByWeek[weekKey] += workout.tss || 0;\n    });\n    \n    // Convert to array for chart\n    return Object.entries(tssByWeek).map(([name, value]) => ({ name, value }));\n  };\n  \n  /**\n   * Get ISO week number for a date\n   */\n  const getWeekNumber = (date) => {\n    const d = new Date(date);\n    d.setHours(0, 0, 0, 0);\n    d.setDate(d.getDate() + 3 - ((d.getDay() + 6) % 7));\n    const week1 = new Date(d.getFullYear(), 0, 4);\n    return 1 + Math.round(((d - week1) / 86400000 - 3 + ((week1.getDay() + 6) % 7)) / 7);\n  };\n  \n  /**\n   * Prepare data for performance profile radar chart\n   */\n  const preparePerformanceProfileData = () => {\n    if (!userProfile || filteredWorkouts.length === 0) return [];\n    \n    // Calculate metrics for different performance aspects\n    const enduranceWorkouts = filteredWorkouts.filter(w => \n      w.type === 'endurance' || w.duration >= 90\n    );\n    \n    const endurance = enduranceWorkouts.length \n      ? Math.min(100, (enduranceWorkouts.reduce((sum, w) => sum + w.duration, 0) / 10))\n      : 20;\n    \n    const hiitWorkouts = filteredWorkouts.filter(w => w.type === 'hiit');\n    const intensity = hiitWorkouts.length\n      ? Math.min(100, (hiitWorkouts.reduce((sum, w) => sum + (w.tss || 50), 0) / 5))\n      : 20;\n    \n    const consistency = Math.min(100, (filteredWorkouts.length * 10));\n    \n    const powerWorkouts = filteredWorkouts.filter(w => w.metrics?.normalizedPower);\n    const power = powerWorkouts.length && userProfile.ftp\n      ? Math.min(100, ((Math.max(...powerWorkouts.map(w => w.metrics.normalizedPower)) / userProfile.ftp) * 80))\n      : 20;\n    \n    const recovery = 100 - Math.min(100, (stats.totalTSS / 10));\n    \n    return [\n      { subject: t('endurance'), A: endurance, fullMark: 100 },\n      { subject: t('intensity'), A: intensity, fullMark: 100 },\n      { subject: t('consistency'), A: consistency, fullMark: 100 },\n      { subject: t('power'), A: power, fullMark: 100 },\n      { subject: t('recovery'), A: recovery, fullMark: 100 }\n    ];\n  };\n  \n  // Chart data\n  const timeSeriesData = prepareTimeSeriesData();\n  const workoutTypeData = prepareWorkoutTypeData();\n  const tssDistributionData = prepareTssDistributionData();\n  const performanceProfileData = preparePerformanceProfileData();\n  \n  // Type colors for charts\n  const typeColors = {\n    hiit: '#f44336',\n    endurance: '#4caf50',\n    strength: '#2196f3',\n    recovery: '#ff9800',\n    default: '#9c27b0'\n  };\n  \n  // Get color based on workout type\n  const getWorkoutTypeColor = (type) => {\n    return typeColors[type] || typeColors.default;\n  };\n  \n  // No workouts message\n  if (filteredWorkouts.length === 0) {\n    return (\n      <div className=\"performance-tracker\">\n        <div className=\"tracker-controls\">\n          <div className=\"timeframe-selector\">\n            <label>{t('timeframe')}:</label>\n            <select value={timeframe} onChange={(e) => setTimeframe(e.target.value)}>\n              <option value=\"week\">{t('lastWeek')}</option>\n              <option value=\"month\">{t('lastMonth')}</option>\n              <option value=\"quarter\">{t('lastQuarter')}</option>\n              <option value=\"year\">{t('lastYear')}</option>\n            </select>\n          </div>\n        </div>\n        \n        <div className=\"no-workouts-message\">\n          {t('noWorkoutsInTimeframe')}\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"performance-tracker\">\n      <div className=\"tracker-controls\">\n        <div className=\"timeframe-selector\">\n          <label>{t('timeframe')}:</label>\n          <select value={timeframe} onChange={(e) => setTimeframe(e.target.value)}>\n            <option value=\"week\">{t('lastWeek')}</option>\n            <option value=\"month\">{t('lastMonth')}</option>\n            <option value=\"quarter\">{t('lastQuarter')}</option>\n            <option value=\"year\">{t('lastYear')}</option>\n          </select>\n        </div>\n        \n        <div className=\"metric-selector\">\n          <label>{t('metric')}:</label>\n          <select value={metricType} onChange={(e) => setMetricType(e.target.value)}>\n            <option value=\"power\">{t('power')}</option>\n            <option value=\"tss\">{t('tss')}</option>\n            <option value=\"duration\">{t('duration')}</option>\n            <option value=\"heartrate\">{t('heartRate')}</option>\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"performance-stats\">\n        <div className=\"stat-card\">\n          <div className=\"stat-value\">{stats.totalWorkouts}</div>\n          <div className=\"stat-label\">{t('workouts')}</div>\n        </div>\n        <div className=\"stat-card\">\n          <div className=\"stat-value\">{stats.totalDuration}</div>\n          <div className=\"stat-label\">{t('minutes')}</div>\n        </div>\n        <div className=\"stat-card\">\n          <div className=\"stat-value\">{stats.avgPower}W</div>\n          <div className=\"stat-label\">{t('avgPower')}</div>\n        </div>\n        <div className=\"stat-card\">\n          <div className=\"stat-value\">{stats.totalTSS}</div>\n          <div className=\"stat-label\">{t('totalTSS')}</div>\n        </div>\n      </div>\n      \n      <div className=\"charts-grid\">\n        <div className=\"chart-container\">\n          <h3>{`${t(metricType)} ${t('overTime')}`}</h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <LineChart data={timeSeriesData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis />\n              <Tooltip formatter={(value) => [`${value} ${metricType === 'duration' ? t('min') : metricType === 'tss' ? '' : 'W'}`, t(metricType)]} />\n              <Legend />\n              <Line \n                type=\"monotone\" \n                dataKey=\"value\" \n                stroke=\"#8884d8\" \n                strokeWidth={2}\n                dot={{ fill: '#8884d8', strokeWidth: 2 }}\n                activeDot={{ r: 8 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n        \n        <div className=\"chart-container\">\n          <h3>{t('workoutTypes')}</h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <PieChart>\n              <Pie\n                data={workoutTypeData}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={false}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n                nameKey=\"name\"\n                label={({ name, percent }) => `${t(name)} ${(percent * 100).toFixed(0)}%`}\n              >\n                {workoutTypeData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={getWorkoutTypeColor(entry.name)} />\n                ))}\n              </Pie>\n              <Tooltip formatter={(value, name) => [value, t(name)]} />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n        \n        <div className=\"chart-container\">\n          <h3>{t('weeklyTrainingLoad')}</h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <BarChart data={tssDistributionData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip formatter={(value) => [value, t('tss')]} />\n              <Bar dataKey=\"value\" fill=\"#ff7043\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n        \n        <div className=\"chart-container\">\n          <h3>{t('performanceProfile')}</h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <RadarChart cx=\"50%\" cy=\"50%\" outerRadius=\"80%\" data={performanceProfileData}>\n              <PolarGrid />\n              <PolarAngleAxis dataKey=\"subject\" />\n              <PolarRadiusAxis angle={30} domain={[0, 100]} />\n              <Radar\n                name={t('currentPerformance')}\n                dataKey=\"A\"\n                stroke=\"#8884d8\"\n                fill=\"#8884d8\"\n                fillOpacity={0.6}\n              />\n              <Tooltip formatter={(value) => [value, t('score')]} />\n            </RadarChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n      \n      <div className=\"workout-history\">\n        <h3>{t('recentWorkouts')}</h3>\n        <table className=\"workout-table\">\n          <thead>\n            <tr>\n              <th>{t('date')}</th>\n              <th>{t('type')}</th>\n              <th>{t('duration')}</th>\n              <th>{t('power')}</th>\n              <th>{t('tss')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filteredWorkouts.slice(-5).reverse().map((workout, index) => (\n              <tr key={index}>\n                <td>{workout.date}</td>\n                <td>{t(workout.type)}</td>\n                <td>{workout.duration} {t('min')}</td>\n                <td>{workout.metrics?.averagePower || '-'} W</td>\n                <td>{workout.tss || '-'}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nPerformanceTracker.propTypes = {\n  userProfile: PropTypes.object,\n  workouts: PropTypes.array\n};\n\nexport default PerformanceTracker;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\n\n/**\n * WorkoutPlanner component for scheduling and planning cycling workouts\n */\nconst WorkoutPlanner = ({ userProfile, workouts, onSaveWorkout }) => {\n  const { t } = useTranslation();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [plannedWorkouts, setPlannedWorkouts] = useState([]);\n  const [workoutTemplates, setWorkoutTemplates] = useState([]);\n  const [selectedTemplate, setSelectedTemplate] = useState(null);\n  const [isAddingWorkout, setIsAddingWorkout] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Load workout templates and planned workouts\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      \n      try {\n        // Mock delay for API call simulation\n        await new Promise(resolve => setTimeout(resolve, 300));\n        \n        // Generate templates based on user profile\n        const mockTemplates = generateWorkoutTemplates(userProfile);\n        setWorkoutTemplates(mockTemplates);\n        \n        // Generate mock planned workouts\n        const mockPlannedWorkouts = generateMockPlannedWorkouts();\n        setPlannedWorkouts(mockPlannedWorkouts);\n        \n        if (mockTemplates.length > 0) {\n          setSelectedTemplate(mockTemplates[0]);\n        }\n      } catch (error) {\n        console.error('Error loading workout plans:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchData();\n  }, [userProfile]);\n  \n  /**\n   * Generate workout templates based on user profile\n   */\n  const generateWorkoutTemplates = (profile) => {\n    if (!profile) return [];\n    \n    const { level, ftp, preferences } = profile;\n    const focusAreas = preferences?.focusAreas || ['endurance'];\n    \n    const templates = [\n      {\n        id: 'recovery-ride',\n        name: t('recoveryRide'),\n        type: 'recovery',\n        description: t('recoveryRideDesc'),\n        duration: 30,\n        intensity: 'low',\n        metrics: {\n          targetPower: Math.round(ftp * 0.6),\n          targetHr: level === 'beginner' ? 120 : 130\n        }\n      },\n      {\n        id: 'endurance-ride',\n        name: t('enduranceRide'),\n        type: 'endurance',\n        description: t('enduranceRideDesc'),\n        duration: 90,\n        intensity: 'medium-low',\n        metrics: {\n          targetPower: Math.round(ftp * 0.75),\n          targetHr: level === 'beginner' ? 130 : 140\n        }\n      },\n      {\n        id: 'tempo-ride',\n        name: t('tempoRide'),\n        type: 'endurance',\n        description: t('tempoRideDesc'),\n        duration: 60,\n        intensity: 'medium',\n        metrics: {\n          targetPower: Math.round(ftp * 0.85),\n          targetHr: level === 'beginner' ? 140 : 150\n        }\n      },\n      {\n        id: 'sweet-spot',\n        name: t('sweetSpot'),\n        type: 'hiit',\n        description: t('sweetSpotDesc'),\n        duration: 75,\n        intensity: 'medium-high',\n        metrics: {\n          targetPower: Math.round(ftp * 0.9),\n          targetHr: level === 'beginner' ? 150 : 160\n        }\n      },\n      {\n        id: 'threshold',\n        name: t('threshold'),\n        type: 'hiit',\n        description: t('thresholdDesc'),\n        duration: 60,\n        intensity: 'high',\n        metrics: {\n          targetPower: Math.round(ftp * 0.95),\n          targetHr: level === 'beginner' ? 160 : 170\n        }\n      },\n      {\n        id: 'vo2max',\n        name: t('vo2max'),\n        type: 'hiit',\n        description: t('vo2maxDesc'),\n        duration: 45,\n        intensity: 'very-high',\n        metrics: {\n          targetPower: Math.round(ftp * 1.1),\n          targetHr: level === 'beginner' ? 170 : 180\n        }\n      }\n    ];\n    \n    // Add specific focus area workouts\n    if (focusAreas.includes('climbing')) {\n      templates.push({\n        id: 'climbing',\n        name: t('climbingWorkout'),\n        type: 'hiit',\n        description: t('climbingWorkoutDesc'),\n        duration: 60,\n        intensity: 'high',\n        metrics: {\n          targetPower: Math.round(ftp * 0.93),\n          targetHr: level === 'beginner' ? 160 : 170\n        }\n      });\n    }\n    \n    if (focusAreas.includes('sprinting')) {\n      templates.push({\n        id: 'sprint',\n        name: t('sprintWorkout'),\n        type: 'hiit',\n        description: t('sprintWorkoutDesc'),\n        duration: 45,\n        intensity: 'very-high',\n        metrics: {\n          targetPower: Math.round(ftp * 1.3),\n          targetHr: level === 'beginner' ? 170 : 180\n        }\n      });\n    }\n    \n    return templates;\n  };\n  \n  /**\n   * Generate mock planned workouts\n   */\n  const generateMockPlannedWorkouts = () => {\n    const today = new Date();\n    const mockPlanned = [];\n    \n    // Add a few planned workouts in the future\n    for (let i = 1; i <= 10; i++) {\n      // Skip some days to make it look realistic\n      if (i % 3 === 0) continue;\n      \n      const futureDate = new Date();\n      futureDate.setDate(today.getDate() + i);\n      \n      mockPlanned.push({\n        id: `planned-${i}`,\n        date: futureDate.toISOString().split('T')[0],\n        templateId: i % 5 === 0 ? 'recovery-ride' : \n                  i % 4 === 0 ? 'threshold' : \n                  i % 3 === 0 ? 'endurance-ride' : \n                  i % 2 === 0 ? 'sweet-spot' : 'tempo-ride',\n        name: i % 5 === 0 ? t('recoveryRide') : \n              i % 4 === 0 ? t('threshold') : \n              i % 3 === 0 ? t('enduranceRide') : \n              i % 2 === 0 ? t('sweetSpot') : t('tempoRide'),\n        type: i % 4 === 0 || i % 2 === 0 ? 'hiit' : 'endurance',\n        duration: i % 5 === 0 ? 30 : \n                 i % 3 === 0 ? 90 : 60,\n        notes: ''\n      });\n    }\n    \n    return mockPlanned;\n  };\n  \n  /**\n   * Handle date selection from calendar\n   */\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n    setIsAddingWorkout(false);\n  };\n  \n  /**\n   * Handle template selection\n   */\n  const handleTemplateSelect = (template) => {\n    setSelectedTemplate(template);\n  };\n  \n  /**\n   * Start adding a new workout\n   */\n  const handleAddWorkout = () => {\n    setIsAddingWorkout(true);\n  };\n  \n  /**\n   * Save a planned workout for the selected date\n   */\n  const handleSavePlannedWorkout = () => {\n    if (!selectedTemplate) return;\n    \n    const dateStr = selectedDate.toISOString().split('T')[0];\n    \n    const newPlannedWorkout = {\n      id: `planned-${Date.now()}`,\n      date: dateStr,\n      templateId: selectedTemplate.id,\n      name: selectedTemplate.name,\n      type: selectedTemplate.type,\n      duration: selectedTemplate.duration,\n      notes: document.getElementById('workout-notes').value || ''\n    };\n    \n    setPlannedWorkouts([...plannedWorkouts, newPlannedWorkout]);\n    setIsAddingWorkout(false);\n  };\n  \n  /**\n   * Remove a planned workout\n   */\n  const handleRemoveWorkout = (workoutId) => {\n    setPlannedWorkouts(plannedWorkouts.filter(w => w.id !== workoutId));\n  };\n  \n  /**\n   * Start a workout now (convert planned to actual)\n   */\n  const handleStartWorkout = (workout) => {\n    const template = workoutTemplates.find(t => t.id === workout.templateId);\n    \n    if (!template) return;\n    \n    // Create an actual workout from the planned one\n    const actualWorkout = {\n      type: workout.type,\n      templateId: workout.templateId,\n      name: workout.name,\n      duration: workout.duration,\n      tss: Math.round(workout.duration * (template.metrics?.targetPower / (userProfile?.ftp || 200)) * 100 / 60),\n      metrics: {\n        averagePower: template.metrics?.targetPower || 200,\n        normalizedPower: Math.round((template.metrics?.targetPower || 200) * 1.05),\n        averageHr: template.metrics?.targetHr || 150,\n        maxHr: Math.round((template.metrics?.targetHr || 150) * 1.1),\n        calories: Math.round(workout.duration * 10),\n        elevation: 0\n      },\n      intervals: []\n    };\n    \n    // Add intervals if it's a HIIT workout\n    if (workout.type === 'hiit') {\n      actualWorkout.intervals = [\n        { power: Math.round(template.metrics?.targetPower * 1.1), duration: 180, rest: 120 },\n        { power: Math.round(template.metrics?.targetPower * 1.15), duration: 180, rest: 120 },\n        { power: Math.round(template.metrics?.targetPower * 1.2), duration: 180, rest: 120 }\n      ];\n    }\n    \n    onSaveWorkout(actualWorkout);\n    \n    // Remove from planned workouts\n    handleRemoveWorkout(workout.id);\n    \n    alert(t('workoutStarted'));\n  };\n  \n  /**\n   * Get workouts for the selected date\n   */\n  const getWorkoutsForDate = (date) => {\n    const dateStr = date.toISOString().split('T')[0];\n    return plannedWorkouts.filter(w => w.date === dateStr);\n  };\n  \n  /**\n   * Render calendar tile contents\n   */\n  const tileContent = ({ date, view }) => {\n    if (view !== 'month') return null;\n    \n    const dateWorkouts = getWorkoutsForDate(date);\n    \n    if (dateWorkouts.length === 0) return null;\n    \n    return (\n      <div className=\"workout-date-indicator\">\n        {dateWorkouts.map((workout, index) => (\n          <div \n            key={index} \n            className={`workout-indicator ${workout.type}`}\n            title={workout.name}\n          />\n        ))}\n      </div>\n    );\n  };\n  \n  /**\n   * Get class for intensity level\n   */\n  const getIntensityClass = (intensity) => {\n    switch (intensity) {\n      case 'low': return 'intensity-low';\n      case 'medium-low': return 'intensity-medium-low';\n      case 'medium': return 'intensity-medium';\n      case 'medium-high': return 'intensity-medium-high';\n      case 'high': return 'intensity-high';\n      case 'very-high': return 'intensity-very-high';\n      default: return 'intensity-medium';\n    }\n  };\n  \n  // Loading state\n  if (loading) {\n    return <div className=\"workout-planner-loading\">{t('loadingWorkoutPlanner')}</div>;\n  }\n  \n  // Selected date in ISO format for comparison\n  const selectedDateStr = selectedDate.toISOString().split('T')[0];\n  \n  // Workouts for the selected date\n  const dateWorkouts = plannedWorkouts.filter(w => w.date === selectedDateStr);\n  \n  return (\n    <div className=\"workout-planner\">\n      <div className=\"planner-main\">\n        <div className=\"planner-calendar\">\n          <Calendar\n            onChange={handleDateChange}\n            value={selectedDate}\n            tileContent={tileContent}\n            minDate={new Date()}\n          />\n        </div>\n        \n        <div className=\"planner-details\">\n          <h3>{t('selectedDate')}: {selectedDateStr}</h3>\n          \n          {dateWorkouts.length === 0 ? (\n            <div className=\"no-workouts\">\n              <p>{t('noWorkoutsPlanned')}</p>\n              <button \n                className=\"add-workout-button\"\n                onClick={handleAddWorkout}\n              >\n                <i className=\"fas fa-plus\"></i> {t('addWorkout')}\n              </button>\n            </div>\n          ) : (\n            <div className=\"date-workouts\">\n              <h4>{t('plannedWorkouts')}</h4>\n              {dateWorkouts.map((workout, index) => (\n                <div key={index} className=\"planned-workout-card\">\n                  <div className=\"workout-header\">\n                    <h5>{workout.name}</h5>\n                    <div className=\"workout-actions\">\n                      <button \n                        className=\"start-workout-button\"\n                        onClick={() => handleStartWorkout(workout)}\n                      >\n                        <i className=\"fas fa-play\"></i>\n                      </button>\n                      <button \n                        className=\"remove-workout-button\"\n                        onClick={() => handleRemoveWorkout(workout.id)}\n                      >\n                        <i className=\"fas fa-trash\"></i>\n                      </button>\n                    </div>\n                  </div>\n                  <div className=\"workout-type\">{t(workout.type)}</div>\n                  <div className=\"workout-duration\">{workout.duration} {t('min')}</div>\n                  {workout.notes && <div className=\"workout-notes\">{workout.notes}</div>}\n                </div>\n              ))}\n              \n              <button \n                className=\"add-workout-button\"\n                onClick={handleAddWorkout}\n              >\n                <i className=\"fas fa-plus\"></i> {t('addAnotherWorkout')}\n              </button>\n            </div>\n          )}\n          \n          {isAddingWorkout && (\n            <div className=\"add-workout-form\">\n              <h4>{t('addWorkoutTo')} {selectedDateStr}</h4>\n              \n              <div className=\"template-selector\">\n                <h5>{t('selectWorkoutTemplate')}</h5>\n                <div className=\"templates-grid\">\n                  {workoutTemplates.map((template, index) => (\n                    <div \n                      key={index}\n                      className={`template-card ${selectedTemplate?.id === template.id ? 'selected' : ''} ${template.type}`}\n                      onClick={() => handleTemplateSelect(template)}\n                    >\n                      <h5>{template.name}</h5>\n                      <div className={`template-intensity ${getIntensityClass(template.intensity)}`}>\n                        {t(template.intensity)}\n                      </div>\n                      <div className=\"template-duration\">{template.duration} {t('min')}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"workout-notes-input\">\n                <label htmlFor=\"workout-notes\">{t('workoutNotes')}:</label>\n                <textarea \n                  id=\"workout-notes\" \n                  rows=\"3\" \n                  placeholder={t('enterNotesPlaceholder')}\n                ></textarea>\n              </div>\n              \n              <div className=\"form-actions\">\n                <button \n                  className=\"save-workout-button\"\n                  onClick={handleSavePlannedWorkout}\n                  disabled={!selectedTemplate}\n                >\n                  {t('savePlannedWorkout')}\n                </button>\n                <button \n                  className=\"cancel-button\"\n                  onClick={() => setIsAddingWorkout(false)}\n                >\n                  {t('cancel')}\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"training-recommendations\">\n        <h3>{t('trainingRecommendations')}</h3>\n        <div className=\"recommendation-cards\">\n          <div className=\"recommendation-card\">\n            <h4>{t('weeklyTraining')}</h4>\n            <p>{t('weeklyTrainingRecommendation')}</p>\n            <ul>\n              <li>{t('hiitSessions')}: 2-3</li>\n              <li>{t('enduranceSessions')}: 1-2</li>\n              <li>{t('recoverySessions')}: 1</li>\n              <li>{t('restDays')}: 2</li>\n            </ul>\n          </div>\n          \n          <div className=\"recommendation-card\">\n            <h4>{t('monthlyCycle')}</h4>\n            <p>{t('monthlyCycleRecommendation')}</p>\n            <ul>\n              <li>{t('week1')}: {t('buildPhase')}</li>\n              <li>{t('week2')}: {t('intensityPhase')}</li>\n              <li>{t('week3')}: {t('peakPhase')}</li>\n              <li>{t('week4')}: {t('recoveryPhase')}</li>\n            </ul>\n          </div>\n          \n          <div className=\"recommendation-card\">\n            <h4>{t('focusAreas')}</h4>\n            <p>{t('basedOnProfile')}</p>\n            <ul>\n              {userProfile?.preferences?.focusAreas.map((area, index) => (\n                <li key={index}>{t(area)}: {t(`${area}Recommendation`)}</li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nWorkoutPlanner.propTypes = {\n  userProfile: PropTypes.object,\n  workouts: PropTypes.array,\n  onSaveWorkout: PropTypes.func.isRequired\n};\n\nexport default WorkoutPlanner;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport HIITTemplates from './HIITTemplates';\nimport PerformanceTracker from './PerformanceTracker';\nimport WorkoutPlanner from './WorkoutPlanner';\nimport './TrainingModule.css';\n\n/**\n * TrainingModule component provides cycling training functionalities including HIIT templates\n * and performance tracking visualizations\n */\nconst TrainingModule = ({ userId, initialView = 'templates' }) => {\n  const { t } = useTranslation();\n  const [activeView, setActiveView] = useState(initialView);\n  const [userProfile, setUserProfile] = useState(null);\n  const [userWorkouts, setUserWorkouts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  \n  // Load user profile and workout data\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        setLoading(true);\n        \n        // Mock data - would be replaced with actual API calls\n        // Simulate API delay\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n        // Mock user profile\n        const mockProfile = {\n          id: userId || 'user-1',\n          name: 'Jean Cycliste',\n          level: 'intermediate', // beginner, intermediate, advanced, elite\n          ftp: 260, // Functional Threshold Power\n          maxHr: 185, // Max heart rate\n          restingHr: 52, // Resting heart rate\n          weight: 72, // kg\n          preferences: {\n            workoutDuration: 60, // preferred workout duration in minutes\n            focusAreas: ['endurance', 'climbing'], // focus areas for training\n            outdoorRiding: true // preference for indoor vs outdoor\n          }\n        };\n        \n        // Mock workout history\n        const mockWorkouts = [\n          {\n            id: 'workout-1',\n            date: '2025-03-28',\n            type: 'hiit',\n            templateId: 'hiit-1',\n            duration: 45, // minutes\n            tss: 65, // Training Stress Score\n            metrics: {\n              averagePower: 230,\n              normalizedPower: 245,\n              averageHr: 152,\n              maxHr: 178,\n              calories: 540,\n              elevation: 320\n            },\n            intervals: [\n              { power: 240, duration: 180, rest: 120 },\n              { power: 250, duration: 180, rest: 120 },\n              { power: 255, duration: 180, rest: 120 },\n              { power: 260, duration: 180, rest: 120 },\n              { power: 265, duration: 180, rest: 120 }\n            ]\n          },\n          {\n            id: 'workout-2',\n            date: '2025-03-30',\n            type: 'endurance',\n            templateId: 'endurance-1',\n            duration: 120,\n            tss: 85,\n            metrics: {\n              averagePower: 195,\n              normalizedPower: 210,\n              averageHr: 142,\n              maxHr: 158,\n              calories: 1240,\n              elevation: 850\n            }\n          },\n          {\n            id: 'workout-3',\n            date: '2025-04-01',\n            type: 'hiit',\n            templateId: 'hiit-2',\n            duration: 60,\n            tss: 75,\n            metrics: {\n              averagePower: 235,\n              normalizedPower: 255,\n              averageHr: 155,\n              maxHr: 182,\n              calories: 680,\n              elevation: 420\n            },\n            intervals: [\n              { power: 250, duration: 60, rest: 60 },\n              { power: 255, duration: 60, rest: 60 },\n              { power: 260, duration: 60, rest: 60 },\n              { power: 270, duration: 60, rest: 60 },\n              { power: 275, duration: 60, rest: 60 },\n              { power: 280, duration: 60, rest: 60 },\n              { power: 285, duration: 60, rest: 60 },\n              { power: 290, duration: 60, rest: 60 }\n            ]\n          }\n        ];\n        \n        setUserProfile(mockProfile);\n        setUserWorkouts(mockWorkouts);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchUserData();\n  }, [userId]);\n  \n  // Handle saving a new workout\n  const handleSaveWorkout = (newWorkout) => {\n    // In a real app, this would make an API call to save the workout\n    const workoutWithId = {\n      ...newWorkout,\n      id: `workout-${Date.now()}`,\n      date: new Date().toISOString().split('T')[0]\n    };\n    \n    setUserWorkouts(prevWorkouts => [...prevWorkouts, workoutWithId]);\n    return workoutWithId;\n  };\n  \n  // Handle updating user profile\n  const handleUpdateProfile = (updatedProfile) => {\n    // In a real app, this would make an API call to update the profile\n    setUserProfile(prevProfile => ({\n      ...prevProfile,\n      ...updatedProfile\n    }));\n  };\n  \n  // Generate views for the training module\n  const renderContent = () => {\n    if (loading) {\n      return <div className=\"training-module-loading\">{t('loadingTrainingData')}</div>;\n    }\n    \n    switch (activeView) {\n      case 'templates':\n        return (\n          <HIITTemplates \n            userProfile={userProfile}\n            onSaveWorkout={handleSaveWorkout}\n          />\n        );\n      case 'performance':\n        return (\n          <PerformanceTracker \n            userProfile={userProfile}\n            workouts={userWorkouts}\n          />\n        );\n      case 'planner':\n        return (\n          <WorkoutPlanner \n            userProfile={userProfile}\n            workouts={userWorkouts}\n            onSaveWorkout={handleSaveWorkout}\n          />\n        );\n      default:\n        return <div>{t('selectTrainingView')}</div>;\n    }\n  };\n  \n  return (\n    <div className=\"training-module\">\n      <div className=\"training-header\">\n        <h2>{t('trainingModule')}</h2>\n        \n        {userProfile && (\n          <div className=\"user-profile-summary\">\n            <span className=\"user-name\">{userProfile.name}</span>\n            <span className=\"user-level\">{t(userProfile.level)}</span>\n            <span className=\"user-ftp\">FTP: {userProfile.ftp}w</span>\n          </div>\n        )}\n      </div>\n      \n      <div className=\"training-navigation\">\n        <button \n          className={`training-nav-button ${activeView === 'templates' ? 'active' : ''}`}\n          onClick={() => setActiveView('templates')}\n        >\n          <i className=\"fas fa-th-large\"></i>\n          {t('hiitTemplates')}\n        </button>\n        <button \n          className={`training-nav-button ${activeView === 'performance' ? 'active' : ''}`}\n          onClick={() => setActiveView('performance')}\n        >\n          <i className=\"fas fa-chart-line\"></i>\n          {t('performanceTracker')}\n        </button>\n        <button \n          className={`training-nav-button ${activeView === 'planner' ? 'active' : ''}`}\n          onClick={() => setActiveView('planner')}\n        >\n          <i className=\"fas fa-calendar-alt\"></i>\n          {t('workoutPlanner')}\n        </button>\n      </div>\n      \n      <div className=\"training-content\">\n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nTrainingModule.propTypes = {\n  userId: PropTypes.string,\n  initialView: PropTypes.oneOf(['templates', 'performance', 'planner'])\n};\n\nexport default TrainingModule;\n"],"names":["_ref","userProfile","onSaveWorkout","t","useTranslation","notify","useNotification","templates","setTemplates","useState","selectedTemplate","setSelectedTemplate","customizedTemplate","setCustomizedTemplate","loading","setLoading","error","setError","useEffect","async","Error","Promise","resolve","setTimeout","mockTemplates","generateHIITTemplates","length","success","title","console","message","loadTemplates","profile","level","ftp","FTPService","includes","warn","info","push","id","name","description","difficulty","duration","intervals","generatePyramidIntervals","generateIntervals","generateLadderIntervals","generateOverUnderIntervals","details","validTemplates","filter","template","Array","isArray","warning","type","power","Math","round","restDuration","intensityFactor","workDuration","count","sets","arguments","undefined","set","setRest","i","minIntensity","maxIntensity","minDuration","maxDuration","durations","stepCount","forEach","index","intensity","steps","intensityIncrement","lowerIntensity","higherIntensity","totalDuration","switchTime","lowerPower","higherPower","secondaryPower","secondaryIntensity","handleAdjustInterval","field","value","updatedTemplate","JSON","parse","stringify","numericValue","parseFloat","isNaN","validatedFtp","minPower","maxPower","toFixed","calculateWorkoutDuration","totalSeconds","reduce","total","interval","totalWorkoutSeconds","ceil","_jsx","className","children","_jsxs","onClick","map","handleSelectTemplate","fill","_","chartData","getBarColor","entry","ResponsiveContainer","width","height","BarChart","data","margin","top","right","bottom","left","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","domain","Tooltip","formatter","labelFormatter","Bar","stroke","fillOpacity","barSize","isAnimationActive","Cell","renderIntervalVisualization","onChange","e","target","min","max","handleSaveWorkout","zoneMap","totalIntensity","intensityValue","avgIntensity","targetZone","zone","Object","entries","workout","date","Date","toISOString","userId","workouts","timeframe","setTimeframe","metricType","setMetricType","filteredWorkouts","setFilteredWorkouts","now","cutoffDate","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","filtered","sort","a","b","stats","calculateStats","totalWorkouts","avgPower","totalTSS","workoutTypes","sum","w","powerWorkouts","_w$metrics","metrics","averagePower","normalizedPower","tss","typeCount","_ref2","getWeekNumber","d","setHours","getDay","week1","timeSeriesData","_workout$metrics","_workout$metrics2","_workout$metrics3","_workout$metrics4","metricValue","averageHr","workoutTypeData","prepareWorkoutTypeData","_ref3","tssDistributionData","prepareTssDistributionData","tssByWeek","weekKey","_ref4","performanceProfileData","preparePerformanceProfileData","enduranceWorkouts","endurance","hiitWorkouts","consistency","_w$metrics2","recovery","subject","A","fullMark","typeColors","hiit","strength","default","LineChart","Legend","Line","strokeWidth","dot","activeDot","r","PieChart","Pie","cx","cy","labelLine","outerRadius","nameKey","label","_ref5","percent","RadarChart","PolarGrid","PolarAngleAxis","PolarRadiusAxis","angle","Radar","slice","reverse","_workout$metrics5","_userProfile$preferen","selectedDate","setSelectedDate","plannedWorkouts","setPlannedWorkouts","workoutTemplates","setWorkoutTemplates","isAddingWorkout","setIsAddingWorkout","generateWorkoutTemplates","mockPlannedWorkouts","generateMockPlannedWorkouts","fetchData","preferences","focusAreas","targetPower","targetHr","today","mockPlanned","futureDate","split","templateId","notes","handleAddWorkout","handleRemoveWorkout","workoutId","getIntensityClass","selectedDateStr","dateWorkouts","Calendar","tileContent","view","dateStr","getWorkoutsForDate","minDate","_template$metrics","_template$metrics2","_template$metrics3","_template$metrics4","_template$metrics5","find","actualWorkout","maxHr","calories","elevation","_template$metrics6","_template$metrics7","_template$metrics8","rest","alert","handleStartWorkout","handleTemplateSelect","htmlFor","rows","placeholder","handleSavePlannedWorkout","newPlannedWorkout","document","getElementById","disabled","area","initialView","activeView","setActiveView","setUserProfile","userWorkouts","setUserWorkouts","mockWorkouts","restingHr","weight","workoutDuration","outdoorRiding","fetchUserData","newWorkout","workoutWithId","prevWorkouts","renderContent","HIITTemplates","PerformanceTracker","WorkoutPlanner"],"sourceRoot":""}