{"ast":null,"code":"/**\n * Utilitaire de pr√©chargement des donn√©es m√©t√©o pour les cols et itin√©raires populaires\n * Optimise les performances en chargeant en arri√®re-plan les donn√©es m√©t√©o pour les destinations fr√©quentes\n */import axios from'axios';import weatherCache from'./weatherCache';import{popular_locations}from'../data/popular-locations';class WeatherPreloader{constructor(){this.isInitialized=false;this.isPreloading=false;this.preloadQueue=[];this.preloadInterval=null;this.syncInProgress=false;this.stats={totalPreloaded:0,lastPreloadTime:null,successCount:0,errorCount:0};}/**\n   * Initialise le pr√©chargeur de donn√©es m√©t√©o\n   * @param {Object} options Options de configuration\n   */initialize(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(this.isInitialized)return;const defaultOptions={preloadPopularOnStart:true,preloadInterval:30*60*1000,// 30 minutes\nconcurrentPreloads:2,enableSync:true};this.options={...defaultOptions,...options};this.isInitialized=true;console.log('[WeatherPreloader] ‚ö° Pr√©chargeur de donn√©es m√©t√©o initialis√©');// Pr√©charger les donn√©es m√©t√©o pour les cols populaires au d√©marrage\nif(this.options.preloadPopularOnStart){this.preloadPopularLocations();}// Configurer la synchronisation p√©riodique\nif(this.options.enableSync&&this.options.preloadInterval>0){this.preloadInterval=setInterval(()=>{this.preloadPopularLocations();},this.options.preloadInterval);console.log(`[WeatherPreloader] üîÑ Synchronisation planifi√©e toutes les ${this.options.preloadInterval/60000} minutes`);}}/**\n   * Pr√©charge les donn√©es m√©t√©o pour les cols et itin√©raires populaires\n   */async preloadPopularLocations(){if(this.syncInProgress){console.log('[WeatherPreloader] ‚è≥ Synchronisation d√©j√† en cours');return;}this.syncInProgress=true;console.log('[WeatherPreloader] üîÑ D√©marrage de la synchronisation des donn√©es m√©t√©o');try{// Ajouter les cols populaires √† la file d'attente de pr√©chargement\nthis.preloadQueue=[...popular_locations];// M√©langer la file pour √©viter de toujours pr√©charger les m√™mes donn√©es en premier\nthis.shuffleQueue();// D√©marrer le pr√©chargement\nawait this.startPreloading();this.stats.lastPreloadTime=new Date();console.log(`[WeatherPreloader] ‚úÖ Synchronisation termin√©e avec ${this.stats.successCount} succ√®s et ${this.stats.errorCount} erreurs`);}catch(error){console.error('[WeatherPreloader] ‚ùå Erreur lors de la synchronisation:',error);}finally{this.syncInProgress=false;}}/**\n   * Pr√©charge les donn√©es m√©t√©o pour une location sp√©cifique\n   * @param {Object} location Objet contenant latitude, longitude et nom\n   */async preloadLocation(location){if(!location||!location.lat||!location.lng){console.error('[WeatherPreloader] ‚ùå Donn√©es de localisation invalides');return;}try{console.log(`[WeatherPreloader] üîç Pr√©chargement des donn√©es m√©t√©o pour ${location.name||'lieu inconnu'}`);// R√©cup√©rer les donn√©es m√©t√©o actuelles\nconst currentWeather=await axios.get(`/api/weather/current?lat=${location.lat}&lon=${location.lng}`);// Stocker dans le cache\nweatherCache.getWeatherData(location.lat.toString(),location.lng.toString(),async()=>currentWeather.data);// R√©cup√©rer √©galement les pr√©visions\nconst forecast=await axios.get(`/api/weather/forecast?lat=${location.lat}&lon=${location.lng}`);// Stocker dans le cache avec une cl√© diff√©rente pour les pr√©visions\nweatherCache.getWeatherData(`forecast_${location.lat}`,`forecast_${location.lng}`,async()=>forecast.data);this.stats.successCount++;this.stats.totalPreloaded++;return true;}catch(error){console.error(`[WeatherPreloader] ‚ùå Erreur lors du pr√©chargement pour ${location.name||'lieu inconnu'}:`,error);this.stats.errorCount++;return false;}}/**\n   * D√©marre le processus de pr√©chargement en parall√®le\n   * @returns {Promise<void>}\n   */async startPreloading(){this.isPreloading=true;// R√©initialiser les compteurs\nthis.stats.successCount=0;this.stats.errorCount=0;// Pr√©charger en parall√®le avec une limite de concurrence\nconst concurrentPreloads=this.options.concurrentPreloads||2;const tasks=[];for(let i=0;i<concurrentPreloads&&this.preloadQueue.length>0;i++){tasks.push(this.processPreloadQueue());}await Promise.all(tasks);this.isPreloading=false;}/**\n   * Traite la file d'attente de pr√©chargement, un √©l√©ment √† la fois\n   * @returns {Promise<void>}\n   */async processPreloadQueue(){while(this.preloadQueue.length>0){const location=this.preloadQueue.shift();await this.preloadLocation(location);// Petite pause entre les requ√™tes pour √©viter les limitations d'API\nawait new Promise(resolve=>setTimeout(resolve,500));}}/**\n   * M√©lange la file d'attente de pr√©chargement\n   */shuffleQueue(){for(let i=this.preloadQueue.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[this.preloadQueue[i],this.preloadQueue[j]]=[this.preloadQueue[j],this.preloadQueue[i]];}}/**\n   * Ajoute une location √† la file de pr√©chargement\n   * @param {Object} location Objet contenant latitude, longitude et nom\n   */addToPreloadQueue(location){if(!location||!location.lat||!location.lng)return;this.preloadQueue.push(location);// Si le pr√©chargement n'est pas en cours, le d√©marrer\nif(!this.isPreloading&&!this.syncInProgress){this.startPreloading();}}/**\n   * Arr√™te le pr√©chargeur et nettoie les ressources\n   */shutdown(){if(this.preloadInterval){clearInterval(this.preloadInterval);}this.isInitialized=false;this.preloadQueue=[];console.log('[WeatherPreloader] üõë Pr√©chargeur de donn√©es m√©t√©o arr√™t√©');}/**\n   * Obtient les statistiques du pr√©chargeur\n   * @returns {Object} Statistiques\n   */getStats(){return{...this.stats,queueLength:this.preloadQueue.length,isPreloading:this.isPreloading,isSyncing:this.syncInProgress};}}// Cr√©er une instance singleton\nconst weatherPreloader=new WeatherPreloader();export default weatherPreloader;","map":{"version":3,"names":["axios","weatherCache","popular_locations","WeatherPreloader","constructor","isInitialized","isPreloading","preloadQueue","preloadInterval","syncInProgress","stats","totalPreloaded","lastPreloadTime","successCount","errorCount","initialize","options","arguments","length","undefined","defaultOptions","preloadPopularOnStart","concurrentPreloads","enableSync","console","log","preloadPopularLocations","setInterval","shuffleQueue","startPreloading","Date","error","preloadLocation","location","lat","lng","name","currentWeather","get","getWeatherData","toString","data","forecast","tasks","i","push","processPreloadQueue","Promise","all","shift","resolve","setTimeout","j","Math","floor","random","addToPreloadQueue","shutdown","clearInterval","getStats","queueLength","isSyncing","weatherPreloader"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/utils/weatherPreloader.js"],"sourcesContent":["/**\n * Utilitaire de pr√©chargement des donn√©es m√©t√©o pour les cols et itin√©raires populaires\n * Optimise les performances en chargeant en arri√®re-plan les donn√©es m√©t√©o pour les destinations fr√©quentes\n */\nimport axios from 'axios';\nimport weatherCache from './weatherCache';\nimport { popular_locations } from '../data/popular-locations';\n\nclass WeatherPreloader {\n  constructor() {\n    this.isInitialized = false;\n    this.isPreloading = false;\n    this.preloadQueue = [];\n    this.preloadInterval = null;\n    this.syncInProgress = false;\n    this.stats = {\n      totalPreloaded: 0,\n      lastPreloadTime: null,\n      successCount: 0,\n      errorCount: 0\n    };\n  }\n\n  /**\n   * Initialise le pr√©chargeur de donn√©es m√©t√©o\n   * @param {Object} options Options de configuration\n   */\n  initialize(options = {}) {\n    if (this.isInitialized) return;\n    \n    const defaultOptions = {\n      preloadPopularOnStart: true,\n      preloadInterval: 30 * 60 * 1000, // 30 minutes\n      concurrentPreloads: 2,\n      enableSync: true\n    };\n    \n    this.options = { ...defaultOptions, ...options };\n    this.isInitialized = true;\n    \n    console.log('[WeatherPreloader] ‚ö° Pr√©chargeur de donn√©es m√©t√©o initialis√©');\n    \n    // Pr√©charger les donn√©es m√©t√©o pour les cols populaires au d√©marrage\n    if (this.options.preloadPopularOnStart) {\n      this.preloadPopularLocations();\n    }\n    \n    // Configurer la synchronisation p√©riodique\n    if (this.options.enableSync && this.options.preloadInterval > 0) {\n      this.preloadInterval = setInterval(() => {\n        this.preloadPopularLocations();\n      }, this.options.preloadInterval);\n      \n      console.log(`[WeatherPreloader] üîÑ Synchronisation planifi√©e toutes les ${this.options.preloadInterval / 60000} minutes`);\n    }\n  }\n\n  /**\n   * Pr√©charge les donn√©es m√©t√©o pour les cols et itin√©raires populaires\n   */\n  async preloadPopularLocations() {\n    if (this.syncInProgress) {\n      console.log('[WeatherPreloader] ‚è≥ Synchronisation d√©j√† en cours');\n      return;\n    }\n    \n    this.syncInProgress = true;\n    console.log('[WeatherPreloader] üîÑ D√©marrage de la synchronisation des donn√©es m√©t√©o');\n    \n    try {\n      // Ajouter les cols populaires √† la file d'attente de pr√©chargement\n      this.preloadQueue = [...popular_locations];\n      \n      // M√©langer la file pour √©viter de toujours pr√©charger les m√™mes donn√©es en premier\n      this.shuffleQueue();\n      \n      // D√©marrer le pr√©chargement\n      await this.startPreloading();\n      \n      this.stats.lastPreloadTime = new Date();\n      console.log(`[WeatherPreloader] ‚úÖ Synchronisation termin√©e avec ${this.stats.successCount} succ√®s et ${this.stats.errorCount} erreurs`);\n    } catch (error) {\n      console.error('[WeatherPreloader] ‚ùå Erreur lors de la synchronisation:', error);\n    } finally {\n      this.syncInProgress = false;\n    }\n  }\n\n  /**\n   * Pr√©charge les donn√©es m√©t√©o pour une location sp√©cifique\n   * @param {Object} location Objet contenant latitude, longitude et nom\n   */\n  async preloadLocation(location) {\n    if (!location || !location.lat || !location.lng) {\n      console.error('[WeatherPreloader] ‚ùå Donn√©es de localisation invalides');\n      return;\n    }\n    \n    try {\n      console.log(`[WeatherPreloader] üîç Pr√©chargement des donn√©es m√©t√©o pour ${location.name || 'lieu inconnu'}`);\n      \n      // R√©cup√©rer les donn√©es m√©t√©o actuelles\n      const currentWeather = await axios.get(`/api/weather/current?lat=${location.lat}&lon=${location.lng}`);\n      \n      // Stocker dans le cache\n      weatherCache.getWeatherData(\n        location.lat.toString(),\n        location.lng.toString(),\n        async () => currentWeather.data\n      );\n      \n      // R√©cup√©rer √©galement les pr√©visions\n      const forecast = await axios.get(`/api/weather/forecast?lat=${location.lat}&lon=${location.lng}`);\n      \n      // Stocker dans le cache avec une cl√© diff√©rente pour les pr√©visions\n      weatherCache.getWeatherData(\n        `forecast_${location.lat}`,\n        `forecast_${location.lng}`,\n        async () => forecast.data\n      );\n      \n      this.stats.successCount++;\n      this.stats.totalPreloaded++;\n      \n      return true;\n    } catch (error) {\n      console.error(`[WeatherPreloader] ‚ùå Erreur lors du pr√©chargement pour ${location.name || 'lieu inconnu'}:`, error);\n      this.stats.errorCount++;\n      return false;\n    }\n  }\n\n  /**\n   * D√©marre le processus de pr√©chargement en parall√®le\n   * @returns {Promise<void>}\n   */\n  async startPreloading() {\n    this.isPreloading = true;\n    \n    // R√©initialiser les compteurs\n    this.stats.successCount = 0;\n    this.stats.errorCount = 0;\n    \n    // Pr√©charger en parall√®le avec une limite de concurrence\n    const concurrentPreloads = this.options.concurrentPreloads || 2;\n    const tasks = [];\n    \n    for (let i = 0; i < concurrentPreloads && this.preloadQueue.length > 0; i++) {\n      tasks.push(this.processPreloadQueue());\n    }\n    \n    await Promise.all(tasks);\n    this.isPreloading = false;\n  }\n\n  /**\n   * Traite la file d'attente de pr√©chargement, un √©l√©ment √† la fois\n   * @returns {Promise<void>}\n   */\n  async processPreloadQueue() {\n    while (this.preloadQueue.length > 0) {\n      const location = this.preloadQueue.shift();\n      await this.preloadLocation(location);\n      \n      // Petite pause entre les requ√™tes pour √©viter les limitations d'API\n      await new Promise(resolve => setTimeout(resolve, 500));\n    }\n  }\n\n  /**\n   * M√©lange la file d'attente de pr√©chargement\n   */\n  shuffleQueue() {\n    for (let i = this.preloadQueue.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [this.preloadQueue[i], this.preloadQueue[j]] = [this.preloadQueue[j], this.preloadQueue[i]];\n    }\n  }\n\n  /**\n   * Ajoute une location √† la file de pr√©chargement\n   * @param {Object} location Objet contenant latitude, longitude et nom\n   */\n  addToPreloadQueue(location) {\n    if (!location || !location.lat || !location.lng) return;\n    \n    this.preloadQueue.push(location);\n    \n    // Si le pr√©chargement n'est pas en cours, le d√©marrer\n    if (!this.isPreloading && !this.syncInProgress) {\n      this.startPreloading();\n    }\n  }\n\n  /**\n   * Arr√™te le pr√©chargeur et nettoie les ressources\n   */\n  shutdown() {\n    if (this.preloadInterval) {\n      clearInterval(this.preloadInterval);\n    }\n    \n    this.isInitialized = false;\n    this.preloadQueue = [];\n    console.log('[WeatherPreloader] üõë Pr√©chargeur de donn√©es m√©t√©o arr√™t√©');\n  }\n\n  /**\n   * Obtient les statistiques du pr√©chargeur\n   * @returns {Object} Statistiques\n   */\n  getStats() {\n    return {\n      ...this.stats,\n      queueLength: this.preloadQueue.length,\n      isPreloading: this.isPreloading,\n      isSyncing: this.syncInProgress\n    };\n  }\n}\n\n// Cr√©er une instance singleton\nconst weatherPreloader = new WeatherPreloader();\n\nexport default weatherPreloader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}