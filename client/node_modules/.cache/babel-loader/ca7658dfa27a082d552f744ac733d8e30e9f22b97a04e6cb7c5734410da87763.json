{"ast":null,"code":"/**\n * Index centralisé de toutes les recettes disponibles sur Dashboard-Velo\n * Organise et catégorise les recettes pour permettre une navigation et recherche efficace\n */import nutritionRecipes from'./nutritionRecipes';// Importer d'autres ensembles de recettes ici\n// import additionalRecipes from './additionalRecipes';\n// import seasonalRecipes from './seasonalRecipes';\n/**\n * Catégories principales de recettes\n */const categories={preRide:{id:'preRide',name:'Avant l\\'effort',description:'Recettes idéales pour préparer votre organisme à l\\'effort, avec un focus sur les glucides complexes et une bonne digestibilité',icon:'breakfast',recipes:nutritionRecipes.preRide||[]},duringRide:{id:'duringRide',name:'Pendant l\\'effort',description:'Aliments et en-cas pratiques pour vous ravitailler pendant vos sorties vélo',icon:'energy',recipes:nutritionRecipes.duringRide||[]},postRide:{id:'postRide',name:'Récupération',description:'Recettes riches en protéines et nutriments pour optimiser votre récupération après l\\'effort',icon:'recovery',recipes:nutritionRecipes.postRide||[]},colSpecific:{id:'colSpecific',name:'Spécial cols',description:'Recettes spécialement conçues pour la préparation et le ravitaillement lors des ascensions de cols',icon:'mountain',recipes:nutritionRecipes.colSpecific||[]}};/**\n * Objectifs nutritionnels et leurs recettes associées\n */const objectives={endurance:{id:'endurance',name:'Endurance',description:'Recettes riches en glucides complexes pour les efforts de longue durée',icon:'timer',recipes:[]// Sera rempli ci-dessous\n},performance:{id:'performance',name:'Performance',description:'Nutrition optimisée pour les efforts intenses et la compétition',icon:'speed',recipes:[]// Sera rempli ci-dessous\n},weightLoss:{id:'weightLoss',name:'Perte de poids',description:'Recettes équilibrées pour perdre du poids sans compromettre vos performances',icon:'scale',recipes:[]// Sera rempli ci-dessous\n},recovery:{id:'recovery',name:'Récupération optimale',description:'Focus sur les protéines et antioxydants pour accélérer la récupération',icon:'healing',recipes:[]// Sera rempli ci-dessous\n}};/**\n * Propriétés diététiques spéciales\n */const dietaryProperties={glutenFree:{id:'glutenFree',name:'Sans gluten',description:'Recettes sans gluten adaptées aux cyclistes sensibles ou intolérants',icon:'glutenFree',recipes:[]// Sera rempli ci-dessous\n},vegetarian:{id:'vegetarian',name:'Végétarien',description:'Recettes végétariennes complètes pour les cyclistes',icon:'vegetarian',recipes:[]// Sera rempli ci-dessous\n},vegan:{id:'vegan',name:'Végétalien',description:'Recettes 100% végétales adaptées aux besoins des cyclistes',icon:'vegan',recipes:[]// Sera rempli ci-dessous\n},dairyFree:{id:'dairyFree',name:'Sans lactose',description:'Recettes sans produits laitiers pour les cyclistes intolérants',icon:'dairyFree',recipes:[]// Sera rempli ci-dessous\n},highProtein:{id:'highProtein',name:'Riche en protéines',description:'Recettes concentrées en protéines pour la récupération et le développement musculaire',icon:'protein',recipes:[]// Sera rempli ci-dessous\n}};/**\n * Toutes les recettes disponibles dans l'application\n */const allRecipes=[...(nutritionRecipes.preRide||[]),...(nutritionRecipes.duringRide||[]),...(nutritionRecipes.postRide||[]),...(nutritionRecipes.colSpecific||[])// Ajouter d'autres collections ici au besoin\n];// Classification des recettes par objectif\nallRecipes.forEach(recipe=>{// Cette classification est simplifiée, dans un système réel\n// elle pourrait être basée sur des métadonnées explicites dans chaque recette\n// Classification par objectif\nif(recipe.nutritionalInfo&&recipe.nutritionalInfo.macros){const macros=recipe.nutritionalInfo.macros;// Recettes pour l'endurance (riches en glucides)\nif(macros.carbs>60||macros.carbs/(macros.protein+macros.fat)>2){objectives.endurance.recipes.push(recipe);}// Recettes pour la performance (équilibrées)\nif(macros.protein>=20&&macros.carbs>=40){objectives.performance.recipes.push(recipe);}// Recettes pour la perte de poids (pauvres en calories, riches en protéines)\nif(recipe.nutritionalInfo.calories<400&&macros.protein/macros.carbs>0.5){objectives.weightLoss.recipes.push(recipe);}// Recettes pour la récupération (riches en protéines)\nif(macros.protein>25||macros.protein/recipe.nutritionalInfo.calories>0.15){objectives.recovery.recipes.push(recipe);}// Recettes riches en protéines\nif(macros.protein>20){dietaryProperties.highProtein.recipes.push(recipe);}}// Classification par propriétés diététiques\nif(recipe.ingredients){const ingredients=recipe.ingredients.join(' ').toLowerCase();// Recettes sans gluten (détection simplifiée)\nif(!ingredients.includes('blé')&&!ingredients.includes('gluten')&&!ingredients.includes('orge')&&!ingredients.includes('seigle')&&!(ingredients.includes('avoine')&&!ingredients.includes('sans gluten'))){dietaryProperties.glutenFree.recipes.push(recipe);}// Recettes végétariennes\nif(!ingredients.includes('viande')&&!ingredients.includes('poulet')&&!ingredients.includes('bœuf')&&!ingredients.includes('porc')&&!ingredients.includes('jambon')&&!ingredients.includes('bacon')&&!ingredients.includes('saucisse')){dietaryProperties.vegetarian.recipes.push(recipe);// Vérification supplémentaire pour les recettes végétaliennes\nif(!ingredients.includes('œuf')&&!ingredients.includes('lait')&&!ingredients.includes('fromage')&&!ingredients.includes('yaourt')&&!ingredients.includes('beurre')&&!ingredients.includes('crème')){dietaryProperties.vegan.recipes.push(recipe);}}// Recettes sans lactose\nif(!ingredients.includes('lait')&&!ingredients.includes('fromage')&&!ingredients.includes('yaourt')&&!ingredients.includes('crème')&&!ingredients.includes('beurre')){dietaryProperties.dairyFree.recipes.push(recipe);}}});/**\n * Moteur de recherche pour trouver des recettes par mots-clés\n * @param {string} query - Termes de recherche\n * @param {number} limit - Nombre maximum de résultats\n * @returns {Array} - Recettes correspondantes\n */const search=function(query){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;if(!query||query.trim()==='')return allRecipes.slice(0,limit);const searchTerms=query.toLowerCase().split(' ');const results=allRecipes.filter(recipe=>{var _recipe$category,_recipe$ingredients;const searchString=`${recipe.name.toLowerCase()} ${((_recipe$category=recipe.category)===null||_recipe$category===void 0?void 0:_recipe$category.toLowerCase())||''} ${((_recipe$ingredients=recipe.ingredients)===null||_recipe$ingredients===void 0?void 0:_recipe$ingredients.join(' ').toLowerCase())||''}`;return searchTerms.some(term=>searchString.includes(term));});return results.slice(0,limit);};/**\n * Système de recommandation de recettes basé sur le profil utilisateur\n * @param {Object} userProfile - Profil de l'utilisateur\n * @param {number} limit - Nombre maximum de recettes à recommander\n * @returns {Array} - Recettes recommandées\n */const recommend=function(userProfile){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;if(!userProfile)return allRecipes.slice(0,limit);// Algorithme simplifié de recommandation\nlet recommendedRecipes=[];// Recommandations basées sur l'objectif principal\nif(userProfile.goal==='endurance'){recommendedRecipes=[...objectives.endurance.recipes];}else if(userProfile.goal==='weightLoss'){recommendedRecipes=[...objectives.weightLoss.recipes];}else if(userProfile.goal==='performance'){recommendedRecipes=[...objectives.performance.recipes];}else if(userProfile.goal==='recovery'){recommendedRecipes=[...objectives.recovery.recipes];}// Recommandations basées sur les restrictions alimentaires\nif(userProfile.dietaryRestrictions){if(userProfile.dietaryRestrictions.includes('glutenFree')){recommendedRecipes=recommendedRecipes.filter(recipe=>dietaryProperties.glutenFree.recipes.some(r=>r.id===recipe.id));}if(userProfile.dietaryRestrictions.includes('vegetarian')){recommendedRecipes=recommendedRecipes.filter(recipe=>dietaryProperties.vegetarian.recipes.some(r=>r.id===recipe.id));}if(userProfile.dietaryRestrictions.includes('vegan')){recommendedRecipes=recommendedRecipes.filter(recipe=>dietaryProperties.vegan.recipes.some(r=>r.id===recipe.id));}if(userProfile.dietaryRestrictions.includes('dairyFree')){recommendedRecipes=recommendedRecipes.filter(recipe=>dietaryProperties.dairyFree.recipes.some(r=>r.id===recipe.id));}}// Si le nombre de recettes recommandées est insuffisant,\n// compléter avec d'autres recettes populaires\nif(recommendedRecipes.length<limit){const additionalRecipes=allRecipes.filter(recipe=>!recommendedRecipes.some(r=>r.id===recipe.id)).slice(0,limit-recommendedRecipes.length);recommendedRecipes=[...recommendedRecipes,...additionalRecipes];}return recommendedRecipes.slice(0,limit);};/**\n * Récupération de recettes par catégorie\n * @param {string} categoryId - Identifiant de la catégorie\n * @param {number} limit - Nombre maximum de recettes à retourner\n * @returns {Array} - Recettes de la catégorie\n */const getRecipesByCategory=function(categoryId){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;if(categories[categoryId]){return categories[categoryId].recipes.slice(0,limit);}return[];};/**\n * Récupération de recettes par objectif\n * @param {string} objectiveId - Identifiant de l'objectif\n * @param {number} limit - Nombre maximum de recettes à retourner\n * @returns {Array} - Recettes pour l'objectif spécifié\n */const getRecipesByObjective=function(objectiveId){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;if(objectives[objectiveId]){return objectives[objectiveId].recipes.slice(0,limit);}return[];};/**\n * Récupération de recettes par propriété diététique\n * @param {string} propertyId - Identifiant de la propriété\n * @param {number} limit - Nombre maximum de recettes à retourner\n * @returns {Array} - Recettes correspondant à la propriété\n */const getRecipesByDietaryProperty=function(propertyId){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;if(dietaryProperties[propertyId]){return dietaryProperties[propertyId].recipes.slice(0,limit);}return[];};export default{allRecipes,categories,objectives,dietaryProperties,search,recommend,getRecipesByCategory,getRecipesByObjective,getRecipesByDietaryProperty};","map":{"version":3,"names":["nutritionRecipes","categories","preRide","id","name","description","icon","recipes","duringRide","postRide","colSpecific","objectives","endurance","performance","weightLoss","recovery","dietaryProperties","glutenFree","vegetarian","vegan","dairyFree","highProtein","allRecipes","forEach","recipe","nutritionalInfo","macros","carbs","protein","fat","push","calories","ingredients","join","toLowerCase","includes","search","query","limit","arguments","length","undefined","trim","slice","searchTerms","split","results","filter","_recipe$category","_recipe$ingredients","searchString","category","some","term","recommend","userProfile","recommendedRecipes","goal","dietaryRestrictions","r","additionalRecipes","getRecipesByCategory","categoryId","getRecipesByObjective","objectiveId","getRecipesByDietaryProperty","propertyId"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/data/recipesIndex.js"],"sourcesContent":["/**\n * Index centralisé de toutes les recettes disponibles sur Dashboard-Velo\n * Organise et catégorise les recettes pour permettre une navigation et recherche efficace\n */\n\nimport nutritionRecipes from './nutritionRecipes';\n\n// Importer d'autres ensembles de recettes ici\n// import additionalRecipes from './additionalRecipes';\n// import seasonalRecipes from './seasonalRecipes';\n\n/**\n * Catégories principales de recettes\n */\nconst categories = {\n  preRide: {\n    id: 'preRide',\n    name: 'Avant l\\'effort',\n    description: 'Recettes idéales pour préparer votre organisme à l\\'effort, avec un focus sur les glucides complexes et une bonne digestibilité',\n    icon: 'breakfast',\n    recipes: nutritionRecipes.preRide || []\n  },\n  duringRide: {\n    id: 'duringRide',\n    name: 'Pendant l\\'effort',\n    description: 'Aliments et en-cas pratiques pour vous ravitailler pendant vos sorties vélo',\n    icon: 'energy',\n    recipes: nutritionRecipes.duringRide || []\n  },\n  postRide: {\n    id: 'postRide',\n    name: 'Récupération',\n    description: 'Recettes riches en protéines et nutriments pour optimiser votre récupération après l\\'effort',\n    icon: 'recovery',\n    recipes: nutritionRecipes.postRide || []\n  },\n  colSpecific: {\n    id: 'colSpecific',\n    name: 'Spécial cols',\n    description: 'Recettes spécialement conçues pour la préparation et le ravitaillement lors des ascensions de cols',\n    icon: 'mountain',\n    recipes: nutritionRecipes.colSpecific || []\n  }\n};\n\n/**\n * Objectifs nutritionnels et leurs recettes associées\n */\nconst objectives = {\n  endurance: {\n    id: 'endurance',\n    name: 'Endurance',\n    description: 'Recettes riches en glucides complexes pour les efforts de longue durée',\n    icon: 'timer',\n    recipes: [] // Sera rempli ci-dessous\n  },\n  performance: {\n    id: 'performance',\n    name: 'Performance',\n    description: 'Nutrition optimisée pour les efforts intenses et la compétition',\n    icon: 'speed',\n    recipes: [] // Sera rempli ci-dessous\n  },\n  weightLoss: {\n    id: 'weightLoss',\n    name: 'Perte de poids',\n    description: 'Recettes équilibrées pour perdre du poids sans compromettre vos performances',\n    icon: 'scale',\n    recipes: [] // Sera rempli ci-dessous\n  },\n  recovery: {\n    id: 'recovery',\n    name: 'Récupération optimale',\n    description: 'Focus sur les protéines et antioxydants pour accélérer la récupération',\n    icon: 'healing',\n    recipes: [] // Sera rempli ci-dessous\n  }\n};\n\n/**\n * Propriétés diététiques spéciales\n */\nconst dietaryProperties = {\n  glutenFree: {\n    id: 'glutenFree',\n    name: 'Sans gluten',\n    description: 'Recettes sans gluten adaptées aux cyclistes sensibles ou intolérants',\n    icon: 'glutenFree',\n    recipes: [] // Sera rempli ci-dessous\n  },\n  vegetarian: {\n    id: 'vegetarian',\n    name: 'Végétarien',\n    description: 'Recettes végétariennes complètes pour les cyclistes',\n    icon: 'vegetarian',\n    recipes: [] // Sera rempli ci-dessous\n  },\n  vegan: {\n    id: 'vegan',\n    name: 'Végétalien',\n    description: 'Recettes 100% végétales adaptées aux besoins des cyclistes',\n    icon: 'vegan',\n    recipes: [] // Sera rempli ci-dessous\n  },\n  dairyFree: {\n    id: 'dairyFree',\n    name: 'Sans lactose',\n    description: 'Recettes sans produits laitiers pour les cyclistes intolérants',\n    icon: 'dairyFree',\n    recipes: [] // Sera rempli ci-dessous\n  },\n  highProtein: {\n    id: 'highProtein',\n    name: 'Riche en protéines',\n    description: 'Recettes concentrées en protéines pour la récupération et le développement musculaire',\n    icon: 'protein',\n    recipes: [] // Sera rempli ci-dessous\n  }\n};\n\n/**\n * Toutes les recettes disponibles dans l'application\n */\nconst allRecipes = [\n  ...nutritionRecipes.preRide || [],\n  ...nutritionRecipes.duringRide || [],\n  ...nutritionRecipes.postRide || [],\n  ...nutritionRecipes.colSpecific || []\n  // Ajouter d'autres collections ici au besoin\n];\n\n// Classification des recettes par objectif\nallRecipes.forEach(recipe => {\n  // Cette classification est simplifiée, dans un système réel\n  // elle pourrait être basée sur des métadonnées explicites dans chaque recette\n  \n  // Classification par objectif\n  if (recipe.nutritionalInfo && recipe.nutritionalInfo.macros) {\n    const macros = recipe.nutritionalInfo.macros;\n    \n    // Recettes pour l'endurance (riches en glucides)\n    if (macros.carbs > 60 || (macros.carbs / (macros.protein + macros.fat) > 2)) {\n      objectives.endurance.recipes.push(recipe);\n    }\n    \n    // Recettes pour la performance (équilibrées)\n    if (macros.protein >= 20 && macros.carbs >= 40) {\n      objectives.performance.recipes.push(recipe);\n    }\n    \n    // Recettes pour la perte de poids (pauvres en calories, riches en protéines)\n    if (recipe.nutritionalInfo.calories < 400 && macros.protein / macros.carbs > 0.5) {\n      objectives.weightLoss.recipes.push(recipe);\n    }\n    \n    // Recettes pour la récupération (riches en protéines)\n    if (macros.protein > 25 || macros.protein / recipe.nutritionalInfo.calories > 0.15) {\n      objectives.recovery.recipes.push(recipe);\n    }\n    \n    // Recettes riches en protéines\n    if (macros.protein > 20) {\n      dietaryProperties.highProtein.recipes.push(recipe);\n    }\n  }\n  \n  // Classification par propriétés diététiques\n  if (recipe.ingredients) {\n    const ingredients = recipe.ingredients.join(' ').toLowerCase();\n    \n    // Recettes sans gluten (détection simplifiée)\n    if (!ingredients.includes('blé') && \n        !ingredients.includes('gluten') && \n        !ingredients.includes('orge') && \n        !ingredients.includes('seigle') &&\n        !(ingredients.includes('avoine') && !ingredients.includes('sans gluten'))) {\n      dietaryProperties.glutenFree.recipes.push(recipe);\n    }\n    \n    // Recettes végétariennes\n    if (!ingredients.includes('viande') && \n        !ingredients.includes('poulet') && \n        !ingredients.includes('bœuf') && \n        !ingredients.includes('porc') &&\n        !ingredients.includes('jambon') &&\n        !ingredients.includes('bacon') &&\n        !ingredients.includes('saucisse')) {\n      dietaryProperties.vegetarian.recipes.push(recipe);\n      \n      // Vérification supplémentaire pour les recettes végétaliennes\n      if (!ingredients.includes('œuf') && \n          !ingredients.includes('lait') && \n          !ingredients.includes('fromage') && \n          !ingredients.includes('yaourt') &&\n          !ingredients.includes('beurre') &&\n          !ingredients.includes('crème')) {\n        dietaryProperties.vegan.recipes.push(recipe);\n      }\n    }\n    \n    // Recettes sans lactose\n    if (!ingredients.includes('lait') && \n        !ingredients.includes('fromage') && \n        !ingredients.includes('yaourt') && \n        !ingredients.includes('crème') &&\n        !ingredients.includes('beurre')) {\n      dietaryProperties.dairyFree.recipes.push(recipe);\n    }\n  }\n});\n\n/**\n * Moteur de recherche pour trouver des recettes par mots-clés\n * @param {string} query - Termes de recherche\n * @param {number} limit - Nombre maximum de résultats\n * @returns {Array} - Recettes correspondantes\n */\nconst search = (query, limit = 20) => {\n  if (!query || query.trim() === '') return allRecipes.slice(0, limit);\n  \n  const searchTerms = query.toLowerCase().split(' ');\n  const results = allRecipes.filter(recipe => {\n    const searchString = `${recipe.name.toLowerCase()} ${recipe.category?.toLowerCase() || ''} ${recipe.ingredients?.join(' ').toLowerCase() || ''}`;\n    \n    return searchTerms.some(term => searchString.includes(term));\n  });\n  \n  return results.slice(0, limit);\n};\n\n/**\n * Système de recommandation de recettes basé sur le profil utilisateur\n * @param {Object} userProfile - Profil de l'utilisateur\n * @param {number} limit - Nombre maximum de recettes à recommander\n * @returns {Array} - Recettes recommandées\n */\nconst recommend = (userProfile, limit = 10) => {\n  if (!userProfile) return allRecipes.slice(0, limit);\n  \n  // Algorithme simplifié de recommandation\n  let recommendedRecipes = [];\n  \n  // Recommandations basées sur l'objectif principal\n  if (userProfile.goal === 'endurance') {\n    recommendedRecipes = [...objectives.endurance.recipes];\n  } else if (userProfile.goal === 'weightLoss') {\n    recommendedRecipes = [...objectives.weightLoss.recipes];\n  } else if (userProfile.goal === 'performance') {\n    recommendedRecipes = [...objectives.performance.recipes];\n  } else if (userProfile.goal === 'recovery') {\n    recommendedRecipes = [...objectives.recovery.recipes];\n  }\n  \n  // Recommandations basées sur les restrictions alimentaires\n  if (userProfile.dietaryRestrictions) {\n    if (userProfile.dietaryRestrictions.includes('glutenFree')) {\n      recommendedRecipes = recommendedRecipes.filter(recipe => \n        dietaryProperties.glutenFree.recipes.some(r => r.id === recipe.id)\n      );\n    }\n    \n    if (userProfile.dietaryRestrictions.includes('vegetarian')) {\n      recommendedRecipes = recommendedRecipes.filter(recipe => \n        dietaryProperties.vegetarian.recipes.some(r => r.id === recipe.id)\n      );\n    }\n    \n    if (userProfile.dietaryRestrictions.includes('vegan')) {\n      recommendedRecipes = recommendedRecipes.filter(recipe => \n        dietaryProperties.vegan.recipes.some(r => r.id === recipe.id)\n      );\n    }\n    \n    if (userProfile.dietaryRestrictions.includes('dairyFree')) {\n      recommendedRecipes = recommendedRecipes.filter(recipe => \n        dietaryProperties.dairyFree.recipes.some(r => r.id === recipe.id)\n      );\n    }\n  }\n  \n  // Si le nombre de recettes recommandées est insuffisant,\n  // compléter avec d'autres recettes populaires\n  if (recommendedRecipes.length < limit) {\n    const additionalRecipes = allRecipes\n      .filter(recipe => !recommendedRecipes.some(r => r.id === recipe.id))\n      .slice(0, limit - recommendedRecipes.length);\n    \n    recommendedRecipes = [...recommendedRecipes, ...additionalRecipes];\n  }\n  \n  return recommendedRecipes.slice(0, limit);\n};\n\n/**\n * Récupération de recettes par catégorie\n * @param {string} categoryId - Identifiant de la catégorie\n * @param {number} limit - Nombre maximum de recettes à retourner\n * @returns {Array} - Recettes de la catégorie\n */\nconst getRecipesByCategory = (categoryId, limit = 50) => {\n  if (categories[categoryId]) {\n    return categories[categoryId].recipes.slice(0, limit);\n  }\n  return [];\n};\n\n/**\n * Récupération de recettes par objectif\n * @param {string} objectiveId - Identifiant de l'objectif\n * @param {number} limit - Nombre maximum de recettes à retourner\n * @returns {Array} - Recettes pour l'objectif spécifié\n */\nconst getRecipesByObjective = (objectiveId, limit = 50) => {\n  if (objectives[objectiveId]) {\n    return objectives[objectiveId].recipes.slice(0, limit);\n  }\n  return [];\n};\n\n/**\n * Récupération de recettes par propriété diététique\n * @param {string} propertyId - Identifiant de la propriété\n * @param {number} limit - Nombre maximum de recettes à retourner\n * @returns {Array} - Recettes correspondant à la propriété\n */\nconst getRecipesByDietaryProperty = (propertyId, limit = 50) => {\n  if (dietaryProperties[propertyId]) {\n    return dietaryProperties[propertyId].recipes.slice(0, limit);\n  }\n  return [];\n};\n\nexport default {\n  allRecipes,\n  categories,\n  objectives,\n  dietaryProperties,\n  search,\n  recommend,\n  getRecipesByCategory,\n  getRecipesByObjective,\n  getRecipesByDietaryProperty\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}