{"ast":null,"code":"/**\n * Utilitaire de mise en cache des donn√©es m√©t√©o\n * Optimise les performances en √©vitant les requ√™tes r√©p√©t√©es pour les m√™mes donn√©es\n * Utilise localStorage pour la persistance entre les sessions\n */// Dur√©e de validit√© du cache en millisecondes (1 heure)\nconst CACHE_DURATION=60*60*1000;// Dur√©e maximale avant purge forc√©e (24 heures)\nconst CACHE_MAX_AGE=24*60*60*1000;// Cl√© utilis√©e dans localStorage\nconst STORAGE_KEY='grand-est-cyclisme:weather-cache';// Structure de cache\nconst weatherCache={data:new Map(),/**\n   * Initialise le cache au d√©marrage, charge les donn√©es depuis localStorage\n   */init(){try{const storedCache=localStorage.getItem(STORAGE_KEY);if(storedCache){const parsedCache=JSON.parse(storedCache);// Convertir l'objet en Map\nthis.data=new Map();Object.keys(parsedCache).forEach(key=>{this.data.set(key,parsedCache[key]);});console.log(`[WeatherCache] Chargement du cache depuis localStorage: ${this.data.size} entr√©es`);// Purger les entr√©es trop anciennes\nthis.purgeExpiredEntries();}}catch(error){console.error('[WeatherCache] Erreur lors du chargement du cache:',error);this.data=new Map();}// Planifier une purge automatique toutes les heures\nsetInterval(()=>this.purgeExpiredEntries(),60*60*1000);},/**\n   * Sauvegarde le cache dans localStorage\n   */saveToLocalStorage(){try{// Convertir Map en objet pour stockage\nconst cacheObject={};this.data.forEach((value,key)=>{cacheObject[key]=value;});localStorage.setItem(STORAGE_KEY,JSON.stringify(cacheObject));console.log(`[WeatherCache] Cache sauvegard√© dans localStorage: ${this.data.size} entr√©es`);}catch(error){console.error('[WeatherCache] Erreur lors de la sauvegarde du cache:',error);}},/**\n   * Supprime les entr√©es expir√©es du cache\n   */purgeExpiredEntries(){const now=Date.now();let purgedCount=0;this.data.forEach((value,key)=>{if(now-value.timestamp>CACHE_MAX_AGE){this.data.delete(key);purgedCount++;}});if(purgedCount>0){console.log(`[WeatherCache] Purge automatique: ${purgedCount} entr√©es supprim√©es`);this.saveToLocalStorage();}return purgedCount;},/**\n   * R√©cup√®re les donn√©es m√©t√©o depuis le cache ou via l'API\n   * @param {string} latitude - Latitude de la position\n   * @param {string} longitude - Longitude de la position\n   * @param {Function} fetchFunction - Fonction de r√©cup√©ration des donn√©es depuis l'API\n   * @returns {Promise<Object>} Donn√©es m√©t√©o\n   */async getWeatherData(latitude,longitude,fetchFunction){const cacheKey=`${latitude},${longitude}`;const cachedData=this.data.get(cacheKey);// V√©rifier si les donn√©es sont dans le cache et toujours valides\nif(cachedData&&Date.now()-cachedData.timestamp<CACHE_DURATION){console.log(`[WeatherCache] ‚úÖ Utilisation des donn√©es m√©t√©o en cache pour ${cacheKey}`);return cachedData.data;}try{// R√©cup√©rer de nouvelles donn√©es\nconsole.log(`[WeatherCache] üîÑ R√©cup√©ration de nouvelles donn√©es m√©t√©o pour ${cacheKey}`);const weatherData=await fetchFunction(latitude,longitude);// Stocker dans le cache\nthis.data.set(cacheKey,{data:weatherData,timestamp:Date.now()});// Sauvegarder dans localStorage\nthis.saveToLocalStorage();return weatherData;}catch(error){console.error(`[WeatherCache] ‚ùå Erreur lors de la r√©cup√©ration des donn√©es m√©t√©o pour ${cacheKey}:`,error);// En cas d'erreur, utiliser les donn√©es en cache m√™me si elles sont expir√©es\nif(cachedData){console.log(`[WeatherCache] ‚ö†Ô∏è Utilisation des donn√©es en cache expir√©es pour ${cacheKey}`);return cachedData.data;}// Si pas de donn√©es en cache, renvoyer des donn√©es par d√©faut\nconsole.log(`[WeatherCache] ‚ö†Ô∏è Utilisation des donn√©es m√©t√©o par d√©faut pour ${cacheKey}`);return this.getDefaultWeatherData();}},/**\n   * Fournit des donn√©es m√©t√©o par d√©faut en cas d'√©chec de r√©cup√©ration\n   * @returns {Object} Donn√©es m√©t√©o par d√©faut\n   */getDefaultWeatherData(){return{current:{temp:15,weather:[{main:'Clouds',description:'Information m√©t√©o non disponible',icon:'unknown'}],humidity:50,wind_speed:10,visibility:10000,pressure:1013},daily:Array(5).fill().map((_,i)=>({dt:Date.now()/1000+i*86400,temp:{min:10,max:20},weather:[{main:'Clouds',description:'Information pr√©vision non disponible',icon:'unknown'}]}))};},/**\n   * Vide le cache complet\n   */clearCache(){this.data.clear();localStorage.removeItem(STORAGE_KEY);console.log('[WeatherCache] üßπ Cache enti√®rement vid√©');},/**\n   * Obtient des statistiques sur l'√©tat du cache\n   * @returns {Object} Statistiques du cache\n   */getStats(){const now=Date.now();let validEntries=0;let expiredEntries=0;this.data.forEach(value=>{if(now-value.timestamp<CACHE_DURATION){validEntries++;}else{expiredEntries++;}});return{totalEntries:this.data.size,validEntries,expiredEntries,oldestEntryAge:this.getOldestEntryAge()};},/**\n   * Obtient l'√¢ge de l'entr√©e la plus ancienne en minutes\n   * @returns {number} √Çge en minutes\n   */getOldestEntryAge(){let oldestTimestamp=Date.now();this.data.forEach(value=>{if(value.timestamp<oldestTimestamp){oldestTimestamp=value.timestamp;}});return Math.round((Date.now()-oldestTimestamp)/(60*1000));}};// Initialiser le cache au chargement du module\nweatherCache.init();export default weatherCache;","map":{"version":3,"names":["CACHE_DURATION","CACHE_MAX_AGE","STORAGE_KEY","weatherCache","data","Map","init","storedCache","localStorage","getItem","parsedCache","JSON","parse","Object","keys","forEach","key","set","console","log","size","purgeExpiredEntries","error","setInterval","saveToLocalStorage","cacheObject","value","setItem","stringify","now","Date","purgedCount","timestamp","delete","getWeatherData","latitude","longitude","fetchFunction","cacheKey","cachedData","get","weatherData","getDefaultWeatherData","current","temp","weather","main","description","icon","humidity","wind_speed","visibility","pressure","daily","Array","fill","map","_","i","dt","min","max","clearCache","clear","removeItem","getStats","validEntries","expiredEntries","totalEntries","oldestEntryAge","getOldestEntryAge","oldestTimestamp","Math","round"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/utils/weatherCache.js"],"sourcesContent":["/**\n * Utilitaire de mise en cache des donn√©es m√©t√©o\n * Optimise les performances en √©vitant les requ√™tes r√©p√©t√©es pour les m√™mes donn√©es\n * Utilise localStorage pour la persistance entre les sessions\n */\n\n// Dur√©e de validit√© du cache en millisecondes (1 heure)\nconst CACHE_DURATION = 60 * 60 * 1000;\n\n// Dur√©e maximale avant purge forc√©e (24 heures)\nconst CACHE_MAX_AGE = 24 * 60 * 60 * 1000;\n\n// Cl√© utilis√©e dans localStorage\nconst STORAGE_KEY = 'grand-est-cyclisme:weather-cache';\n\n// Structure de cache\nconst weatherCache = {\n  data: new Map(),\n  \n  /**\n   * Initialise le cache au d√©marrage, charge les donn√©es depuis localStorage\n   */\n  init() {\n    try {\n      const storedCache = localStorage.getItem(STORAGE_KEY);\n      if (storedCache) {\n        const parsedCache = JSON.parse(storedCache);\n        \n        // Convertir l'objet en Map\n        this.data = new Map();\n        Object.keys(parsedCache).forEach(key => {\n          this.data.set(key, parsedCache[key]);\n        });\n        \n        console.log(`[WeatherCache] Chargement du cache depuis localStorage: ${this.data.size} entr√©es`);\n        \n        // Purger les entr√©es trop anciennes\n        this.purgeExpiredEntries();\n      }\n    } catch (error) {\n      console.error('[WeatherCache] Erreur lors du chargement du cache:', error);\n      this.data = new Map();\n    }\n    \n    // Planifier une purge automatique toutes les heures\n    setInterval(() => this.purgeExpiredEntries(), 60 * 60 * 1000);\n  },\n  \n  /**\n   * Sauvegarde le cache dans localStorage\n   */\n  saveToLocalStorage() {\n    try {\n      // Convertir Map en objet pour stockage\n      const cacheObject = {};\n      this.data.forEach((value, key) => {\n        cacheObject[key] = value;\n      });\n      \n      localStorage.setItem(STORAGE_KEY, JSON.stringify(cacheObject));\n      console.log(`[WeatherCache] Cache sauvegard√© dans localStorage: ${this.data.size} entr√©es`);\n    } catch (error) {\n      console.error('[WeatherCache] Erreur lors de la sauvegarde du cache:', error);\n    }\n  },\n  \n  /**\n   * Supprime les entr√©es expir√©es du cache\n   */\n  purgeExpiredEntries() {\n    const now = Date.now();\n    let purgedCount = 0;\n    \n    this.data.forEach((value, key) => {\n      if (now - value.timestamp > CACHE_MAX_AGE) {\n        this.data.delete(key);\n        purgedCount++;\n      }\n    });\n    \n    if (purgedCount > 0) {\n      console.log(`[WeatherCache] Purge automatique: ${purgedCount} entr√©es supprim√©es`);\n      this.saveToLocalStorage();\n    }\n    \n    return purgedCount;\n  },\n  \n  /**\n   * R√©cup√®re les donn√©es m√©t√©o depuis le cache ou via l'API\n   * @param {string} latitude - Latitude de la position\n   * @param {string} longitude - Longitude de la position\n   * @param {Function} fetchFunction - Fonction de r√©cup√©ration des donn√©es depuis l'API\n   * @returns {Promise<Object>} Donn√©es m√©t√©o\n   */\n  async getWeatherData(latitude, longitude, fetchFunction) {\n    const cacheKey = `${latitude},${longitude}`;\n    const cachedData = this.data.get(cacheKey);\n    \n    // V√©rifier si les donn√©es sont dans le cache et toujours valides\n    if (cachedData && (Date.now() - cachedData.timestamp < CACHE_DURATION)) {\n      console.log(`[WeatherCache] ‚úÖ Utilisation des donn√©es m√©t√©o en cache pour ${cacheKey}`);\n      return cachedData.data;\n    }\n    \n    try {\n      // R√©cup√©rer de nouvelles donn√©es\n      console.log(`[WeatherCache] üîÑ R√©cup√©ration de nouvelles donn√©es m√©t√©o pour ${cacheKey}`);\n      const weatherData = await fetchFunction(latitude, longitude);\n      \n      // Stocker dans le cache\n      this.data.set(cacheKey, {\n        data: weatherData,\n        timestamp: Date.now()\n      });\n      \n      // Sauvegarder dans localStorage\n      this.saveToLocalStorage();\n      \n      return weatherData;\n    } catch (error) {\n      console.error(`[WeatherCache] ‚ùå Erreur lors de la r√©cup√©ration des donn√©es m√©t√©o pour ${cacheKey}:`, error);\n      \n      // En cas d'erreur, utiliser les donn√©es en cache m√™me si elles sont expir√©es\n      if (cachedData) {\n        console.log(`[WeatherCache] ‚ö†Ô∏è Utilisation des donn√©es en cache expir√©es pour ${cacheKey}`);\n        return cachedData.data;\n      }\n      \n      // Si pas de donn√©es en cache, renvoyer des donn√©es par d√©faut\n      console.log(`[WeatherCache] ‚ö†Ô∏è Utilisation des donn√©es m√©t√©o par d√©faut pour ${cacheKey}`);\n      return this.getDefaultWeatherData();\n    }\n  },\n  \n  /**\n   * Fournit des donn√©es m√©t√©o par d√©faut en cas d'√©chec de r√©cup√©ration\n   * @returns {Object} Donn√©es m√©t√©o par d√©faut\n   */\n  getDefaultWeatherData() {\n    return {\n      current: {\n        temp: 15,\n        weather: [\n          {\n            main: 'Clouds',\n            description: 'Information m√©t√©o non disponible',\n            icon: 'unknown'\n          }\n        ],\n        humidity: 50,\n        wind_speed: 10,\n        visibility: 10000,\n        pressure: 1013\n      },\n      daily: Array(5).fill().map((_, i) => ({\n        dt: Date.now() / 1000 + i * 86400,\n        temp: {\n          min: 10,\n          max: 20\n        },\n        weather: [\n          {\n            main: 'Clouds',\n            description: 'Information pr√©vision non disponible',\n            icon: 'unknown'\n          }\n        ]\n      }))\n    };\n  },\n  \n  /**\n   * Vide le cache complet\n   */\n  clearCache() {\n    this.data.clear();\n    localStorage.removeItem(STORAGE_KEY);\n    console.log('[WeatherCache] üßπ Cache enti√®rement vid√©');\n  },\n  \n  /**\n   * Obtient des statistiques sur l'√©tat du cache\n   * @returns {Object} Statistiques du cache\n   */\n  getStats() {\n    const now = Date.now();\n    let validEntries = 0;\n    let expiredEntries = 0;\n    \n    this.data.forEach((value) => {\n      if (now - value.timestamp < CACHE_DURATION) {\n        validEntries++;\n      } else {\n        expiredEntries++;\n      }\n    });\n    \n    return {\n      totalEntries: this.data.size,\n      validEntries,\n      expiredEntries,\n      oldestEntryAge: this.getOldestEntryAge()\n    };\n  },\n  \n  /**\n   * Obtient l'√¢ge de l'entr√©e la plus ancienne en minutes\n   * @returns {number} √Çge en minutes\n   */\n  getOldestEntryAge() {\n    let oldestTimestamp = Date.now();\n    \n    this.data.forEach((value) => {\n      if (value.timestamp < oldestTimestamp) {\n        oldestTimestamp = value.timestamp;\n      }\n    });\n    \n    return Math.round((Date.now() - oldestTimestamp) / (60 * 1000));\n  }\n};\n\n// Initialiser le cache au chargement du module\nweatherCache.init();\n\nexport default weatherCache;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}