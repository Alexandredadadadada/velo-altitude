{"ast":null,"code":"/**\n * Service de gestion des utilisateurs\n * Fournit des méthodes pour récupérer et mettre à jour les profils utilisateurs\n */class UserService{/**\n   * Récupère le profil de l'utilisateur connecté\n   * @returns {Promise<Object>} Profil utilisateur\n   */async getCurrentUserProfile(){try{// Dans une application réelle, ceci serait un appel API\n// Simulation d'un délai réseau\nawait new Promise(resolve=>setTimeout(resolve,500));// Profil utilisateur mocké\nconst mockProfile={id:'u123',name:'Jean Dupont',email:'jean.dupont@example.com',age:35,weight:75,height:182,ftp:240,level:'intermediate',cyclist_type:'all-rounder',preferred_terrain:'mixed',weekly_hours:8,hrmax:185,hrrest:52,region:'Grand Est',following:24,followers:18,achievementCount:12,created_at:'2024-07-15',avatar:'/assets/avatars/default.jpg'};return mockProfile;}catch(error){console.error('Erreur lors de la récupération du profil utilisateur:',error);throw new Error('Impossible de récupérer le profil utilisateur');}}/**\n   * Récupère le profil d'un utilisateur spécifique par son ID\n   * @param {string} userId - Identifiant de l'utilisateur\n   * @returns {Promise<Object>} Profil utilisateur\n   */async getUserProfile(userId){try{// Simulation d'un délai réseau\nawait new Promise(resolve=>setTimeout(resolve,500));// Profils utilisateurs mockés\nconst mockProfiles={'u123':{id:'u123',name:'Jean Dupont',age:35,weight:75,height:182,ftp:240,level:'intermediate',cyclist_type:'all-rounder',preferred_terrain:'mixed',weekly_hours:8,hrmax:185,hrrest:52,region:'Grand Est',following:24,followers:18,achievementCount:12,created_at:'2024-07-15',avatar:'/assets/avatars/default.jpg'},'u456':{id:'u456',name:'Marie Martin',age:29,weight:62,height:168,ftp:205,level:'beginner',cyclist_type:'climber',preferred_terrain:'hills',weekly_hours:5,hrmax:192,hrrest:56,region:'Grand Est',following:32,followers:15,achievementCount:8,created_at:'2024-09-10',avatar:'/assets/avatars/default2.jpg'},'u789':{id:'u789',name:'Pierre Lambert',age:42,weight:82,height:188,ftp:280,level:'advanced',cyclist_type:'sprinter',preferred_terrain:'flat',weekly_hours:12,hrmax:178,hrrest:48,region:'Grand Est',following:56,followers:124,achievementCount:28,created_at:'2024-05-22',avatar:'/assets/avatars/default3.jpg'}};const profile=mockProfiles[userId];if(!profile){throw new Error('Utilisateur non trouvé');}return profile;}catch(error){console.error(`Erreur lors de la récupération du profil utilisateur (ID: ${userId}):`,error);throw new Error('Impossible de récupérer le profil utilisateur');}}/**\n   * Met à jour le profil utilisateur\n   * @param {Object} profileData - Données du profil à mettre à jour\n   * @returns {Promise<Object>} Profil utilisateur mis à jour\n   */async updateUserProfile(profileData){try{// Simulation d'un délai réseau\nawait new Promise(resolve=>setTimeout(resolve,700));// Validation des données\nif(!profileData.id){throw new Error('ID utilisateur manquant');}// Dans une application réelle, ceci serait un appel API PUT\nconsole.log('Mise à jour du profil utilisateur:',profileData);// Simuler une réponse de succès avec les données mises à jour\nreturn{...profileData,updated_at:new Date().toISOString()};}catch(error){console.error('Erreur lors de la mise à jour du profil utilisateur:',error);throw new Error('Impossible de mettre à jour le profil utilisateur');}}/**\n   * Récupère l'historique d'entraînement de l'utilisateur\n   * @param {string} userId - Identifiant de l'utilisateur\n   * @param {number} limit - Nombre maximum d'entrées à récupérer\n   * @returns {Promise<Array>} Historique d'entraînement\n   */async getUserWorkoutHistory(userId){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;try{// Simulation d'un délai réseau\nawait new Promise(resolve=>setTimeout(resolve,600));// Dans une application réelle, ceci serait un appel API\n// Historique d'entraînement mocké\nconst mockHistory=[{id:'h1',workoutId:'threshold-classic',workoutName:'Seuil Classique',date:'2025-03-20',completed:true,duration:60,avgPower:210,normalizedPower:230,tss:85,ifactor:0.92,heartRate:{avg:145,max:172},zones:{z1:12,// % du temps passé en zone 1\nz2:18,z3:10,z4:52,z5:8,z6:0,z7:0}},{id:'h2',workoutId:'threshold-classic',workoutName:'Seuil Classique',date:'2025-02-25',completed:true,duration:62,avgPower:205,normalizedPower:225,tss:83,ifactor:0.90,heartRate:{avg:148,max:175},zones:{z1:14,z2:20,z3:12,z4:47,z5:7,z6:0,z7:0}},{id:'h3',workoutId:'hiit-vo2max',workoutName:'HIIT VO2max',date:'2025-02-18',completed:true,duration:60,avgPower:228,normalizedPower:251,tss:92,ifactor:0.98,heartRate:{avg:158,max:182},zones:{z1:10,z2:14,z3:12,z4:25,z5:35,z6:4,z7:0}},{id:'h4',workoutId:'endurance-foundation',workoutName:'Fondation d\\'Endurance',date:'2025-02-12',completed:true,duration:90,avgPower:172,normalizedPower:178,tss:78,ifactor:0.70,heartRate:{avg:132,max:145},zones:{z1:5,z2:85,z3:10,z4:0,z5:0,z6:0,z7:0}},{id:'h5',workoutId:'threshold-classic',workoutName:'Seuil Classique',date:'2025-01-30',completed:false,// Entraînement non terminé\nduration:45,// Sur 60 prévus\navgPower:208,normalizedPower:220,tss:62,ifactor:0.88,heartRate:{avg:146,max:168},zones:{z1:15,z2:22,z3:15,z4:42,z5:6,z6:0,z7:0}}];return mockHistory.slice(0,limit);}catch(error){console.error(`Erreur lors de la récupération de l'historique d'entraînement (ID: ${userId}):`,error);throw new Error('Impossible de récupérer l\\'historique d\\'entraînement');}}/**\n   * Récupère les statistiques d'entraînement de l'utilisateur\n   * @param {string} userId - Identifiant de l'utilisateur\n   * @param {string} period - Période pour les statistiques (week, month, year, all)\n   * @returns {Promise<Object>} Statistiques d'entraînement\n   */async getUserTrainingStats(userId){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'month';try{// Simulation d'un délai réseau\nawait new Promise(resolve=>setTimeout(resolve,600));// Dans une application réelle, ceci serait un appel API\n// Statistiques d'entraînement mockées\nconst mockStats={workoutCount:14,totalDuration:842,// minutes\ntotalTSS:1248,avgWeeklyTSS:312,completionRate:0.89,// 89% des entraînements terminés\nftpHistory:[{date:'2025-01-05',value:225},{date:'2025-02-10',value:232},{date:'2025-03-15',value:240}],powerDistribution:{z1:12,// % du temps passé en zone 1\nz2:35,z3:18,z4:25,z5:8,z6:2,z7:0},workoutTypes:{RECOVERY:2,ENDURANCE:5,THRESHOLD:4,HIIT:3}};return mockStats;}catch(error){console.error(`Erreur lors de la récupération des statistiques d'entraînement (ID: ${userId}):`,error);throw new Error('Impossible de récupérer les statistiques d\\'entraînement');}}}// Export une instance singleton du service\nexport default new UserService();","map":{"version":3,"names":["UserService","getCurrentUserProfile","Promise","resolve","setTimeout","mockProfile","id","name","email","age","weight","height","ftp","level","cyclist_type","preferred_terrain","weekly_hours","hrmax","hrrest","region","following","followers","achievementCount","created_at","avatar","error","console","Error","getUserProfile","userId","mockProfiles","profile","updateUserProfile","profileData","log","updated_at","Date","toISOString","getUserWorkoutHistory","limit","arguments","length","undefined","mockHistory","workoutId","workoutName","date","completed","duration","avgPower","normalizedPower","tss","ifactor","heartRate","avg","max","zones","z1","z2","z3","z4","z5","z6","z7","slice","getUserTrainingStats","period","mockStats","workoutCount","totalDuration","totalTSS","avgWeeklyTSS","completionRate","ftpHistory","value","powerDistribution","workoutTypes","RECOVERY","ENDURANCE","THRESHOLD","HIIT"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/services/UserService.js"],"sourcesContent":["/**\n * Service de gestion des utilisateurs\n * Fournit des méthodes pour récupérer et mettre à jour les profils utilisateurs\n */\nclass UserService {\n  /**\n   * Récupère le profil de l'utilisateur connecté\n   * @returns {Promise<Object>} Profil utilisateur\n   */\n  async getCurrentUserProfile() {\n    try {\n      // Dans une application réelle, ceci serait un appel API\n      // Simulation d'un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Profil utilisateur mocké\n      const mockProfile = {\n        id: 'u123',\n        name: 'Jean Dupont',\n        email: 'jean.dupont@example.com',\n        age: 35,\n        weight: 75,\n        height: 182,\n        ftp: 240,\n        level: 'intermediate',\n        cyclist_type: 'all-rounder',\n        preferred_terrain: 'mixed',\n        weekly_hours: 8,\n        hrmax: 185,\n        hrrest: 52,\n        region: 'Grand Est',\n        following: 24,\n        followers: 18,\n        achievementCount: 12,\n        created_at: '2024-07-15',\n        avatar: '/assets/avatars/default.jpg'\n      };\n      \n      return mockProfile;\n    } catch (error) {\n      console.error('Erreur lors de la récupération du profil utilisateur:', error);\n      throw new Error('Impossible de récupérer le profil utilisateur');\n    }\n  }\n  \n  /**\n   * Récupère le profil d'un utilisateur spécifique par son ID\n   * @param {string} userId - Identifiant de l'utilisateur\n   * @returns {Promise<Object>} Profil utilisateur\n   */\n  async getUserProfile(userId) {\n    try {\n      // Simulation d'un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Profils utilisateurs mockés\n      const mockProfiles = {\n        'u123': {\n          id: 'u123',\n          name: 'Jean Dupont',\n          age: 35,\n          weight: 75,\n          height: 182,\n          ftp: 240,\n          level: 'intermediate',\n          cyclist_type: 'all-rounder',\n          preferred_terrain: 'mixed',\n          weekly_hours: 8,\n          hrmax: 185,\n          hrrest: 52,\n          region: 'Grand Est',\n          following: 24,\n          followers: 18,\n          achievementCount: 12,\n          created_at: '2024-07-15',\n          avatar: '/assets/avatars/default.jpg'\n        },\n        'u456': {\n          id: 'u456',\n          name: 'Marie Martin',\n          age: 29,\n          weight: 62,\n          height: 168,\n          ftp: 205,\n          level: 'beginner',\n          cyclist_type: 'climber',\n          preferred_terrain: 'hills',\n          weekly_hours: 5,\n          hrmax: 192,\n          hrrest: 56,\n          region: 'Grand Est',\n          following: 32,\n          followers: 15,\n          achievementCount: 8,\n          created_at: '2024-09-10',\n          avatar: '/assets/avatars/default2.jpg'\n        },\n        'u789': {\n          id: 'u789',\n          name: 'Pierre Lambert',\n          age: 42,\n          weight: 82,\n          height: 188,\n          ftp: 280,\n          level: 'advanced',\n          cyclist_type: 'sprinter',\n          preferred_terrain: 'flat',\n          weekly_hours: 12,\n          hrmax: 178,\n          hrrest: 48,\n          region: 'Grand Est',\n          following: 56,\n          followers: 124,\n          achievementCount: 28,\n          created_at: '2024-05-22',\n          avatar: '/assets/avatars/default3.jpg'\n        }\n      };\n      \n      const profile = mockProfiles[userId];\n      \n      if (!profile) {\n        throw new Error('Utilisateur non trouvé');\n      }\n      \n      return profile;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération du profil utilisateur (ID: ${userId}):`, error);\n      throw new Error('Impossible de récupérer le profil utilisateur');\n    }\n  }\n  \n  /**\n   * Met à jour le profil utilisateur\n   * @param {Object} profileData - Données du profil à mettre à jour\n   * @returns {Promise<Object>} Profil utilisateur mis à jour\n   */\n  async updateUserProfile(profileData) {\n    try {\n      // Simulation d'un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 700));\n      \n      // Validation des données\n      if (!profileData.id) {\n        throw new Error('ID utilisateur manquant');\n      }\n      \n      // Dans une application réelle, ceci serait un appel API PUT\n      console.log('Mise à jour du profil utilisateur:', profileData);\n      \n      // Simuler une réponse de succès avec les données mises à jour\n      return {\n        ...profileData,\n        updated_at: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du profil utilisateur:', error);\n      throw new Error('Impossible de mettre à jour le profil utilisateur');\n    }\n  }\n  \n  /**\n   * Récupère l'historique d'entraînement de l'utilisateur\n   * @param {string} userId - Identifiant de l'utilisateur\n   * @param {number} limit - Nombre maximum d'entrées à récupérer\n   * @returns {Promise<Array>} Historique d'entraînement\n   */\n  async getUserWorkoutHistory(userId, limit = 10) {\n    try {\n      // Simulation d'un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 600));\n      \n      // Dans une application réelle, ceci serait un appel API\n      // Historique d'entraînement mocké\n      const mockHistory = [\n        {\n          id: 'h1',\n          workoutId: 'threshold-classic',\n          workoutName: 'Seuil Classique',\n          date: '2025-03-20',\n          completed: true,\n          duration: 60,\n          avgPower: 210,\n          normalizedPower: 230,\n          tss: 85,\n          ifactor: 0.92,\n          heartRate: {\n            avg: 145,\n            max: 172\n          },\n          zones: {\n            z1: 12, // % du temps passé en zone 1\n            z2: 18,\n            z3: 10,\n            z4: 52,\n            z5: 8,\n            z6: 0,\n            z7: 0\n          }\n        },\n        {\n          id: 'h2',\n          workoutId: 'threshold-classic',\n          workoutName: 'Seuil Classique',\n          date: '2025-02-25',\n          completed: true,\n          duration: 62,\n          avgPower: 205,\n          normalizedPower: 225,\n          tss: 83,\n          ifactor: 0.90,\n          heartRate: {\n            avg: 148,\n            max: 175\n          },\n          zones: {\n            z1: 14,\n            z2: 20,\n            z3: 12,\n            z4: 47,\n            z5: 7,\n            z6: 0,\n            z7: 0\n          }\n        },\n        {\n          id: 'h3',\n          workoutId: 'hiit-vo2max',\n          workoutName: 'HIIT VO2max',\n          date: '2025-02-18',\n          completed: true,\n          duration: 60,\n          avgPower: 228,\n          normalizedPower: 251,\n          tss: 92,\n          ifactor: 0.98,\n          heartRate: {\n            avg: 158,\n            max: 182\n          },\n          zones: {\n            z1: 10,\n            z2: 14,\n            z3: 12,\n            z4: 25,\n            z5: 35,\n            z6: 4,\n            z7: 0\n          }\n        },\n        {\n          id: 'h4',\n          workoutId: 'endurance-foundation',\n          workoutName: 'Fondation d\\'Endurance',\n          date: '2025-02-12',\n          completed: true,\n          duration: 90,\n          avgPower: 172,\n          normalizedPower: 178,\n          tss: 78,\n          ifactor: 0.70,\n          heartRate: {\n            avg: 132,\n            max: 145\n          },\n          zones: {\n            z1: 5,\n            z2: 85,\n            z3: 10,\n            z4: 0,\n            z5: 0,\n            z6: 0,\n            z7: 0\n          }\n        },\n        {\n          id: 'h5',\n          workoutId: 'threshold-classic',\n          workoutName: 'Seuil Classique',\n          date: '2025-01-30',\n          completed: false, // Entraînement non terminé\n          duration: 45, // Sur 60 prévus\n          avgPower: 208,\n          normalizedPower: 220,\n          tss: 62,\n          ifactor: 0.88,\n          heartRate: {\n            avg: 146,\n            max: 168\n          },\n          zones: {\n            z1: 15,\n            z2: 22,\n            z3: 15,\n            z4: 42,\n            z5: 6,\n            z6: 0,\n            z7: 0\n          }\n        }\n      ];\n      \n      return mockHistory.slice(0, limit);\n    } catch (error) {\n      console.error(`Erreur lors de la récupération de l'historique d'entraînement (ID: ${userId}):`, error);\n      throw new Error('Impossible de récupérer l\\'historique d\\'entraînement');\n    }\n  }\n  \n  /**\n   * Récupère les statistiques d'entraînement de l'utilisateur\n   * @param {string} userId - Identifiant de l'utilisateur\n   * @param {string} period - Période pour les statistiques (week, month, year, all)\n   * @returns {Promise<Object>} Statistiques d'entraînement\n   */\n  async getUserTrainingStats(userId, period = 'month') {\n    try {\n      // Simulation d'un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 600));\n      \n      // Dans une application réelle, ceci serait un appel API\n      // Statistiques d'entraînement mockées\n      const mockStats = {\n        workoutCount: 14,\n        totalDuration: 842, // minutes\n        totalTSS: 1248,\n        avgWeeklyTSS: 312,\n        completionRate: 0.89, // 89% des entraînements terminés\n        ftpHistory: [\n          { date: '2025-01-05', value: 225 },\n          { date: '2025-02-10', value: 232 },\n          { date: '2025-03-15', value: 240 }\n        ],\n        powerDistribution: {\n          z1: 12, // % du temps passé en zone 1\n          z2: 35,\n          z3: 18,\n          z4: 25,\n          z5: 8,\n          z6: 2,\n          z7: 0\n        },\n        workoutTypes: {\n          RECOVERY: 2,\n          ENDURANCE: 5,\n          THRESHOLD: 4,\n          HIIT: 3\n        }\n      };\n      \n      return mockStats;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération des statistiques d'entraînement (ID: ${userId}):`, error);\n      throw new Error('Impossible de récupérer les statistiques d\\'entraînement');\n    }\n  }\n}\n\n// Export une instance singleton du service\nexport default new UserService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}