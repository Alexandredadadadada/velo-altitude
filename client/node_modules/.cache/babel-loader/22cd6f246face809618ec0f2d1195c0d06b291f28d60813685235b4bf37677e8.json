{"ast":null,"code":"import React,{useRef,useEffect,useState}from'react';import{Canvas,useFrame,useThree}from'@react-three/fiber';import{OrbitControls,PerspectiveCamera,Text}from'@react-three/drei';import*as THREE from'three';import{Box,Typography,CircularProgress,Paper}from'@mui/material';// Composant pour la route du col\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const ColRoad=_ref=>{let{data,color=\"#444444\"}=_ref;const meshRef=useRef();const points=data.map(point=>new THREE.Vector3(point.x,point.y,point.z));const curve=new THREE.CatmullRomCurve3(points);// Créer la géométrie du tube (route)\nconst tubeGeometry=new THREE.TubeGeometry(curve,100,// Segments tubulaires\n0.2,// Rayon\n8,// Segments radiaux\nfalse// Fermé\n);return/*#__PURE__*/_jsxs(\"mesh\",{ref:meshRef,children:[/*#__PURE__*/_jsx(\"primitive\",{object:tubeGeometry,attach:\"geometry\"}),/*#__PURE__*/_jsx(\"meshStandardMaterial\",{color:color,roughness:0.6})]});};// Composant pour le terrain environnant\nconst Terrain=_ref2=>{let{data}=_ref2;const meshRef=useRef();// Déterminer les dimensions du terrain\nconst maxX=Math.max(...data.map(p=>p.x))+2;const maxY=Math.max(...data.map(p=>p.y))+1;const minY=Math.min(...data.map(p=>p.y))-0.5;// Créer une simple géométrie de plan pour le terrain\nreturn/*#__PURE__*/_jsxs(\"mesh\",{ref:meshRef,rotation:[-Math.PI/2,0,0],position:[maxX/2,minY-0.1,0],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[maxX*1.5,10]}),/*#__PURE__*/_jsx(\"meshStandardMaterial\",{color:\"#4b7f52\",wireframe:false})]});};// Composant pour les points d'intérêt\nconst PointOfInterest=_ref3=>{let{position,name,type}=_ref3;const[hovered,setHovered]=useState(false);// Choisir la couleur en fonction du type\nlet color;switch(type){case'viewpoint':color=\"#1E88E5\";// Bleu\nbreak;case'rest':color=\"#43A047\";// Vert\nbreak;case'summit':color=\"#E53935\";// Rouge\nbreak;default:color=\"#FFC107\";// Jaune\n}return/*#__PURE__*/_jsxs(\"group\",{position:position,children:[/*#__PURE__*/_jsxs(\"mesh\",{onPointerOver:()=>setHovered(true),onPointerOut:()=>setHovered(false),children:[/*#__PURE__*/_jsx(\"sphereGeometry\",{args:[0.15,16,16]}),/*#__PURE__*/_jsx(\"meshStandardMaterial\",{color:color})]}),hovered&&/*#__PURE__*/_jsx(Text,{position:[0,0.3,0],color:\"white\",fontSize:0.15,maxWidth:2,textAlign:\"center\",anchorX:\"center\",anchorY:\"middle\",outlineWidth:0.01,outlineColor:\"#000000\",children:name})]});};// Composant pour la caméra et les contrôles\nconst SceneSetup=_ref4=>{let{data}=_ref4;const{camera}=useThree();// Calcul du centre et de la taille de la scène pour cadrage\nconst maxX=Math.max(...data.map(p=>p.x));const maxY=Math.max(...data.map(p=>p.y));// Position initiale de la caméra\nuseEffect(()=>{camera.position.set(maxX/2,maxY*2,5);camera.lookAt(maxX/2,0,0);},[camera,maxX,maxY]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(OrbitControls,{enablePan:true,enableZoom:true,enableRotate:true,target:[maxX/2,maxY/2,0]}),/*#__PURE__*/_jsx(\"ambientLight\",{intensity:0.5}),/*#__PURE__*/_jsx(\"directionalLight\",{position:[10,10,5],intensity:0.7}),/*#__PURE__*/_jsx(\"directionalLight\",{position:[-10,10,5],intensity:0.3})]});};// Animation de la caméra pour \"parcourir\" le col\nconst CameraAnimation=_ref5=>{let{data,isPlaying}=_ref5;const{camera}=useThree();const points=data.map(point=>new THREE.Vector3(point.x,point.y+0.5,point.z));const curve=new THREE.CatmullRomCurve3(points);// Points pour la \"preview\" du chemin\nconst[progress,setProgress]=useState(0);useFrame(()=>{if(isPlaying){setProgress(prev=>(prev+0.001)%1);const position=curve.getPoint(progress);const lookAtPos=curve.getPoint(Math.min(progress+0.01,1));camera.position.set(position.x,position.y,position.z);camera.lookAt(lookAtPos.x,lookAtPos.y,lookAtPos.z);}});return null;};// Composant principal de visualisation 3D\nconst ColVisualization3D=_ref6=>{let{colId,colData,pointsOfInterest}=_ref6;const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[terrainData,setTerrainData]=useState(null);const[isAnimating,setIsAnimating]=useState(false);useEffect(()=>{// Les données sont déjà fournies en props\nif(colData){setTerrainData(colData);setLoading(false);}else{setError(\"Données du col non disponibles\");setLoading(false);}},[colData]);if(loading){return/*#__PURE__*/_jsx(Box,{display:\"flex\",justifyContent:\"center\",alignItems:\"center\",height:\"400px\",children:/*#__PURE__*/_jsx(CircularProgress,{})});}if(error){return/*#__PURE__*/_jsx(Box,{display:\"flex\",justifyContent:\"center\",alignItems:\"center\",height:\"400px\",children:/*#__PURE__*/_jsx(Typography,{color:\"error\",children:error})});}if(!terrainData)return null;return/*#__PURE__*/_jsxs(Paper,{elevation:2,sx:{height:'400px',width:'100%',overflow:'hidden',position:'relative'},children:[/*#__PURE__*/_jsx(Typography,{variant:\"button\",sx:{position:'absolute',top:10,left:10,zIndex:1,backgroundColor:'rgba(0,0,0,0.6)',color:'white',padding:'5px 10px',borderRadius:'4px',cursor:'pointer'},onClick:()=>setIsAnimating(!isAnimating),children:isAnimating?'Arrêter l\\'animation':'Parcourir le col'}),/*#__PURE__*/_jsxs(Canvas,{shadows:true,children:[/*#__PURE__*/_jsx(SceneSetup,{data:terrainData}),/*#__PURE__*/_jsx(CameraAnimation,{data:terrainData,isPlaying:isAnimating}),/*#__PURE__*/_jsx(Terrain,{data:terrainData}),/*#__PURE__*/_jsx(ColRoad,{data:terrainData}),pointsOfInterest&&pointsOfInterest.map((poi,index)=>{// Trouver le point correspondant à la distance du POI\nconst distanceRatio=poi.distance/Math.max(...terrainData.map(p=>p.x));const nearestIndex=Math.floor(distanceRatio*terrainData.length);const point=terrainData[Math.min(nearestIndex,terrainData.length-1)];return/*#__PURE__*/_jsx(PointOfInterest,{position:[point.x,point.y+0.3,point.z],name:poi.name,type:poi.type},index);})]})]});};export default ColVisualization3D;","map":{"version":3,"names":["React","useRef","useEffect","useState","Canvas","useFrame","useThree","OrbitControls","PerspectiveCamera","Text","THREE","Box","Typography","CircularProgress","Paper","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ColRoad","_ref","data","color","meshRef","points","map","point","Vector3","x","y","z","curve","CatmullRomCurve3","tubeGeometry","TubeGeometry","ref","children","object","attach","roughness","Terrain","_ref2","maxX","Math","max","p","maxY","minY","min","rotation","PI","position","args","wireframe","PointOfInterest","_ref3","name","type","hovered","setHovered","onPointerOver","onPointerOut","fontSize","maxWidth","textAlign","anchorX","anchorY","outlineWidth","outlineColor","SceneSetup","_ref4","camera","set","lookAt","enablePan","enableZoom","enableRotate","target","intensity","CameraAnimation","_ref5","isPlaying","progress","setProgress","prev","getPoint","lookAtPos","ColVisualization3D","_ref6","colId","colData","pointsOfInterest","loading","setLoading","error","setError","terrainData","setTerrainData","isAnimating","setIsAnimating","display","justifyContent","alignItems","height","elevation","sx","width","overflow","variant","top","left","zIndex","backgroundColor","padding","borderRadius","cursor","onClick","shadows","poi","index","distanceRatio","distance","nearestIndex","floor","length"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/components/cols/ColVisualization3D.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { Canvas, useFrame, useThree } from '@react-three/fiber';\nimport { OrbitControls, PerspectiveCamera, Text } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { Box, Typography, CircularProgress, Paper } from '@mui/material';\n\n// Composant pour la route du col\nconst ColRoad = ({ data, color = \"#444444\" }) => {\n  const meshRef = useRef();\n  const points = data.map(point => new THREE.Vector3(point.x, point.y, point.z));\n  const curve = new THREE.CatmullRomCurve3(points);\n  \n  // Créer la géométrie du tube (route)\n  const tubeGeometry = new THREE.TubeGeometry(\n    curve,\n    100,  // Segments tubulaires\n    0.2,  // Rayon\n    8,    // Segments radiaux\n    false // Fermé\n  );\n\n  return (\n    <mesh ref={meshRef}>\n      <primitive object={tubeGeometry} attach=\"geometry\" />\n      <meshStandardMaterial color={color} roughness={0.6} />\n    </mesh>\n  );\n};\n\n// Composant pour le terrain environnant\nconst Terrain = ({ data }) => {\n  const meshRef = useRef();\n  \n  // Déterminer les dimensions du terrain\n  const maxX = Math.max(...data.map(p => p.x)) + 2;\n  const maxY = Math.max(...data.map(p => p.y)) + 1;\n  const minY = Math.min(...data.map(p => p.y)) - 0.5;\n  \n  // Créer une simple géométrie de plan pour le terrain\n  return (\n    <mesh ref={meshRef} rotation={[-Math.PI / 2, 0, 0]} position={[maxX / 2, minY - 0.1, 0]}>\n      <planeGeometry args={[maxX * 1.5, 10]} />\n      <meshStandardMaterial color=\"#4b7f52\" wireframe={false} />\n    </mesh>\n  );\n};\n\n// Composant pour les points d'intérêt\nconst PointOfInterest = ({ position, name, type }) => {\n  const [hovered, setHovered] = useState(false);\n  \n  // Choisir la couleur en fonction du type\n  let color;\n  switch (type) {\n    case 'viewpoint':\n      color = \"#1E88E5\"; // Bleu\n      break;\n    case 'rest':\n      color = \"#43A047\"; // Vert\n      break;\n    case 'summit':\n      color = \"#E53935\"; // Rouge\n      break;\n    default:\n      color = \"#FFC107\"; // Jaune\n  }\n  \n  return (\n    <group position={position}>\n      <mesh \n        onPointerOver={() => setHovered(true)}\n        onPointerOut={() => setHovered(false)}\n      >\n        <sphereGeometry args={[0.15, 16, 16]} />\n        <meshStandardMaterial color={color} />\n      </mesh>\n      \n      {hovered && (\n        <Text\n          position={[0, 0.3, 0]}\n          color=\"white\"\n          fontSize={0.15}\n          maxWidth={2}\n          textAlign=\"center\"\n          anchorX=\"center\"\n          anchorY=\"middle\"\n          outlineWidth={0.01}\n          outlineColor=\"#000000\"\n        >\n          {name}\n        </Text>\n      )}\n    </group>\n  );\n};\n\n// Composant pour la caméra et les contrôles\nconst SceneSetup = ({ data }) => {\n  const { camera } = useThree();\n  \n  // Calcul du centre et de la taille de la scène pour cadrage\n  const maxX = Math.max(...data.map(p => p.x));\n  const maxY = Math.max(...data.map(p => p.y));\n  \n  // Position initiale de la caméra\n  useEffect(() => {\n    camera.position.set(maxX / 2, maxY * 2, 5);\n    camera.lookAt(maxX / 2, 0, 0);\n  }, [camera, maxX, maxY]);\n  \n  return (\n    <>\n      <OrbitControls \n        enablePan={true}\n        enableZoom={true}\n        enableRotate={true}\n        target={[maxX / 2, maxY / 2, 0]}\n      />\n      <ambientLight intensity={0.5} />\n      <directionalLight position={[10, 10, 5]} intensity={0.7} />\n      <directionalLight position={[-10, 10, 5]} intensity={0.3} />\n    </>\n  );\n};\n\n// Animation de la caméra pour \"parcourir\" le col\nconst CameraAnimation = ({ data, isPlaying }) => {\n  const { camera } = useThree();\n  const points = data.map(point => new THREE.Vector3(point.x, point.y + 0.5, point.z));\n  const curve = new THREE.CatmullRomCurve3(points);\n  \n  // Points pour la \"preview\" du chemin\n  const [progress, setProgress] = useState(0);\n  \n  useFrame(() => {\n    if (isPlaying) {\n      setProgress((prev) => (prev + 0.001) % 1);\n      const position = curve.getPoint(progress);\n      const lookAtPos = curve.getPoint(Math.min(progress + 0.01, 1));\n      \n      camera.position.set(position.x, position.y, position.z);\n      camera.lookAt(lookAtPos.x, lookAtPos.y, lookAtPos.z);\n    }\n  });\n  \n  return null;\n};\n\n// Composant principal de visualisation 3D\nconst ColVisualization3D = ({ colId, colData, pointsOfInterest }) => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [terrainData, setTerrainData] = useState(null);\n  const [isAnimating, setIsAnimating] = useState(false);\n  \n  useEffect(() => {\n    // Les données sont déjà fournies en props\n    if (colData) {\n      setTerrainData(colData);\n      setLoading(false);\n    } else {\n      setError(\"Données du col non disponibles\");\n      setLoading(false);\n    }\n  }, [colData]);\n  \n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n  \n  if (error) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"400px\">\n        <Typography color=\"error\">{error}</Typography>\n      </Box>\n    );\n  }\n  \n  if (!terrainData) return null;\n  \n  return (\n    <Paper elevation={2} sx={{ height: '400px', width: '100%', overflow: 'hidden', position: 'relative' }}>\n      <Typography\n        variant=\"button\"\n        sx={{\n          position: 'absolute',\n          top: 10,\n          left: 10,\n          zIndex: 1,\n          backgroundColor: 'rgba(0,0,0,0.6)',\n          color: 'white',\n          padding: '5px 10px',\n          borderRadius: '4px',\n          cursor: 'pointer',\n        }}\n        onClick={() => setIsAnimating(!isAnimating)}\n      >\n        {isAnimating ? 'Arrêter l\\'animation' : 'Parcourir le col'}\n      </Typography>\n      \n      <Canvas shadows>\n        <SceneSetup data={terrainData} />\n        <CameraAnimation data={terrainData} isPlaying={isAnimating} />\n        <Terrain data={terrainData} />\n        <ColRoad data={terrainData} />\n        \n        {pointsOfInterest && pointsOfInterest.map((poi, index) => {\n          // Trouver le point correspondant à la distance du POI\n          const distanceRatio = poi.distance / Math.max(...terrainData.map(p => p.x));\n          const nearestIndex = Math.floor(distanceRatio * terrainData.length);\n          const point = terrainData[Math.min(nearestIndex, terrainData.length - 1)];\n          \n          return (\n            <PointOfInterest \n              key={index}\n              position={[point.x, point.y + 0.3, point.z]}\n              name={poi.name}\n              type={poi.type}\n            />\n          );\n        })}\n      </Canvas>\n    </Paper>\n  );\n};\n\nexport default ColVisualization3D;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}