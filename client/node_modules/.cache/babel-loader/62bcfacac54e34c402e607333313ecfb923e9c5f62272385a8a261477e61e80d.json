{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useTranslation}from'react-i18next';import{LineChart,Line,BarChart,Bar,XAxis,YAxis,CartesianGrid,Tooltip,Legend,ResponsiveContainer,PieChart,Pie,Cell,RadarChart,Radar,PolarGrid,PolarAngleAxis,PolarRadiusAxis}from'recharts';/**\n * PerformanceTracker component for visualizing training progress\n */import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const PerformanceTracker=_ref=>{let{userProfile,workouts}=_ref;const{t}=useTranslation();const[timeframe,setTimeframe]=useState('month');const[metricType,setMetricType]=useState('power');const[filteredWorkouts,setFilteredWorkouts]=useState([]);// Filter workouts based on selected timeframe\nuseEffect(()=>{if(!workouts||workouts.length===0){setFilteredWorkouts([]);return;}const now=new Date();let cutoffDate=new Date();switch(timeframe){case'week':cutoffDate.setDate(now.getDate()-7);break;case'month':cutoffDate.setMonth(now.getMonth()-1);break;case'quarter':cutoffDate.setMonth(now.getMonth()-3);break;case'year':cutoffDate.setFullYear(now.getFullYear()-1);break;default:cutoffDate.setMonth(now.getMonth()-1);// Default to month\n}const filtered=workouts.filter(workout=>{const workoutDate=new Date(workout.date);return workoutDate>=cutoffDate;});// Sort by date\nfiltered.sort((a,b)=>new Date(a.date)-new Date(b.date));setFilteredWorkouts(filtered);},[workouts,timeframe]);/**\n   * Calculate stats for the filtered workouts\n   */const calculateStats=()=>{if(filteredWorkouts.length===0){return{totalWorkouts:0,totalDuration:0,avgPower:0,maxPower:0,totalTSS:0,workoutTypes:[]};}const totalWorkouts=filteredWorkouts.length;const totalDuration=filteredWorkouts.reduce((sum,w)=>sum+w.duration,0);// Calculate power metrics\nconst powerWorkouts=filteredWorkouts.filter(w=>{var _w$metrics;return(_w$metrics=w.metrics)===null||_w$metrics===void 0?void 0:_w$metrics.averagePower;});const avgPower=powerWorkouts.length?Math.round(powerWorkouts.reduce((sum,w)=>sum+w.metrics.averagePower,0)/powerWorkouts.length):0;const maxPower=powerWorkouts.length?Math.max(...powerWorkouts.map(w=>w.metrics.normalizedPower||w.metrics.averagePower)):0;// Calculate TSS\nconst totalTSS=filteredWorkouts.reduce((sum,w)=>sum+(w.tss||0),0);// Calculate workout type distribution\nconst typeCount={};filteredWorkouts.forEach(w=>{typeCount[w.type]=(typeCount[w.type]||0)+1;});const workoutTypes=Object.entries(typeCount).map(_ref2=>{let[name,value]=_ref2;return{name,value};});return{totalWorkouts,totalDuration,avgPower,maxPower,totalTSS,workoutTypes};};const stats=calculateStats();/**\n   * Prepare data for the time series chart\n   */const prepareTimeSeriesData=()=>{if(filteredWorkouts.length===0)return[];// Map workouts to chart data based on selected metric\nreturn filteredWorkouts.map(workout=>{var _workout$metrics,_workout$metrics2,_workout$metrics3,_workout$metrics4;let metricValue=0;switch(metricType){case'power':metricValue=((_workout$metrics=workout.metrics)===null||_workout$metrics===void 0?void 0:_workout$metrics.normalizedPower)||((_workout$metrics2=workout.metrics)===null||_workout$metrics2===void 0?void 0:_workout$metrics2.averagePower)||0;break;case'tss':metricValue=workout.tss||0;break;case'duration':metricValue=workout.duration||0;break;case'heartrate':metricValue=((_workout$metrics3=workout.metrics)===null||_workout$metrics3===void 0?void 0:_workout$metrics3.averageHr)||0;break;default:metricValue=((_workout$metrics4=workout.metrics)===null||_workout$metrics4===void 0?void 0:_workout$metrics4.averagePower)||0;}// Format date for display\nconst date=new Date(workout.date);const formattedDate=`${date.getDate()}/${date.getMonth()+1}`;return{date:formattedDate,value:metricValue,type:workout.type};});};/**\n   * Prepare data for the workout type distribution chart\n   */const prepareWorkoutTypeData=()=>{if(filteredWorkouts.length===0)return[];const typeCount={};filteredWorkouts.forEach(w=>{typeCount[w.type]=(typeCount[w.type]||0)+1;});return Object.entries(typeCount).map(_ref3=>{let[name,value]=_ref3;return{name,value};});};/**\n   * Prepare data for the TSS distribution chart\n   */const prepareTssDistributionData=()=>{if(filteredWorkouts.length===0)return[];// Group TSS by week\nconst tssByWeek={};filteredWorkouts.forEach(workout=>{const date=new Date(workout.date);const weekNum=getWeekNumber(date);const weekKey=`W${weekNum}`;if(!tssByWeek[weekKey]){tssByWeek[weekKey]=0;}tssByWeek[weekKey]+=workout.tss||0;});// Convert to array for chart\nreturn Object.entries(tssByWeek).map(_ref4=>{let[name,value]=_ref4;return{name,value};});};/**\n   * Get ISO week number for a date\n   */const getWeekNumber=date=>{const d=new Date(date);d.setHours(0,0,0,0);d.setDate(d.getDate()+3-(d.getDay()+6)%7);const week1=new Date(d.getFullYear(),0,4);return 1+Math.round(((d-week1)/86400000-3+(week1.getDay()+6)%7)/7);};/**\n   * Prepare data for performance profile radar chart\n   */const preparePerformanceProfileData=()=>{if(!userProfile||filteredWorkouts.length===0)return[];// Calculate metrics for different performance aspects\nconst enduranceWorkouts=filteredWorkouts.filter(w=>w.type==='endurance'||w.duration>=90);const endurance=enduranceWorkouts.length?Math.min(100,enduranceWorkouts.reduce((sum,w)=>sum+w.duration,0)/10):20;const hiitWorkouts=filteredWorkouts.filter(w=>w.type==='hiit');const intensity=hiitWorkouts.length?Math.min(100,hiitWorkouts.reduce((sum,w)=>sum+(w.tss||50),0)/5):20;const consistency=Math.min(100,filteredWorkouts.length*10);const powerWorkouts=filteredWorkouts.filter(w=>{var _w$metrics2;return(_w$metrics2=w.metrics)===null||_w$metrics2===void 0?void 0:_w$metrics2.normalizedPower;});const power=powerWorkouts.length&&userProfile.ftp?Math.min(100,Math.max(...powerWorkouts.map(w=>w.metrics.normalizedPower))/userProfile.ftp*80):20;const recovery=100-Math.min(100,stats.totalTSS/10);return[{subject:t('endurance'),A:endurance,fullMark:100},{subject:t('intensity'),A:intensity,fullMark:100},{subject:t('consistency'),A:consistency,fullMark:100},{subject:t('power'),A:power,fullMark:100},{subject:t('recovery'),A:recovery,fullMark:100}];};// Chart data\nconst timeSeriesData=prepareTimeSeriesData();const workoutTypeData=prepareWorkoutTypeData();const tssDistributionData=prepareTssDistributionData();const performanceProfileData=preparePerformanceProfileData();// Type colors for charts\nconst typeColors={hiit:'#f44336',endurance:'#4caf50',strength:'#2196f3',recovery:'#ff9800',default:'#9c27b0'};// Get color based on workout type\nconst getWorkoutTypeColor=type=>{return typeColors[type]||typeColors.default;};// No workouts message\nif(filteredWorkouts.length===0){return/*#__PURE__*/_jsxs(\"div\",{className:\"performance-tracker\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"tracker-controls\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"timeframe-selector\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[t('timeframe'),\":\"]}),/*#__PURE__*/_jsxs(\"select\",{value:timeframe,onChange:e=>setTimeframe(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"week\",children:t('lastWeek')}),/*#__PURE__*/_jsx(\"option\",{value:\"month\",children:t('lastMonth')}),/*#__PURE__*/_jsx(\"option\",{value:\"quarter\",children:t('lastQuarter')}),/*#__PURE__*/_jsx(\"option\",{value:\"year\",children:t('lastYear')})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"no-workouts-message\",children:t('noWorkoutsInTimeframe')})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"performance-tracker\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"tracker-controls\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"timeframe-selector\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[t('timeframe'),\":\"]}),/*#__PURE__*/_jsxs(\"select\",{value:timeframe,onChange:e=>setTimeframe(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"week\",children:t('lastWeek')}),/*#__PURE__*/_jsx(\"option\",{value:\"month\",children:t('lastMonth')}),/*#__PURE__*/_jsx(\"option\",{value:\"quarter\",children:t('lastQuarter')}),/*#__PURE__*/_jsx(\"option\",{value:\"year\",children:t('lastYear')})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"metric-selector\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[t('metric'),\":\"]}),/*#__PURE__*/_jsxs(\"select\",{value:metricType,onChange:e=>setMetricType(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"power\",children:t('power')}),/*#__PURE__*/_jsx(\"option\",{value:\"tss\",children:t('tss')}),/*#__PURE__*/_jsx(\"option\",{value:\"duration\",children:t('duration')}),/*#__PURE__*/_jsx(\"option\",{value:\"heartrate\",children:t('heartRate')})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"performance-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-value\",children:stats.totalWorkouts}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:t('workouts')})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-value\",children:stats.totalDuration}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:t('minutes')})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-value\",children:[stats.avgPower,\"W\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:t('avgPower')})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-value\",children:stats.totalTSS}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:t('totalTSS')})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"charts-grid\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chart-container\",children:[/*#__PURE__*/_jsx(\"h3\",{children:`${t(metricType)} ${t('overTime')}`}),/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:250,children:/*#__PURE__*/_jsxs(LineChart,{data:timeSeriesData,children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"date\"}),/*#__PURE__*/_jsx(YAxis,{}),/*#__PURE__*/_jsx(Tooltip,{formatter:value=>[`${value} ${metricType==='duration'?t('min'):metricType==='tss'?'':'W'}`,t(metricType)]}),/*#__PURE__*/_jsx(Legend,{}),/*#__PURE__*/_jsx(Line,{type:\"monotone\",dataKey:\"value\",stroke:\"#8884d8\",strokeWidth:2,dot:{fill:'#8884d8',strokeWidth:2},activeDot:{r:8}})]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chart-container\",children:[/*#__PURE__*/_jsx(\"h3\",{children:t('workoutTypes')}),/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:250,children:/*#__PURE__*/_jsxs(PieChart,{children:[/*#__PURE__*/_jsx(Pie,{data:workoutTypeData,cx:\"50%\",cy:\"50%\",labelLine:false,outerRadius:80,fill:\"#8884d8\",dataKey:\"value\",nameKey:\"name\",label:_ref5=>{let{name,percent}=_ref5;return`${t(name)} ${(percent*100).toFixed(0)}%`;},children:workoutTypeData.map((entry,index)=>/*#__PURE__*/_jsx(Cell,{fill:getWorkoutTypeColor(entry.name)},`cell-${index}`))}),/*#__PURE__*/_jsx(Tooltip,{formatter:(value,name)=>[value,t(name)]})]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chart-container\",children:[/*#__PURE__*/_jsx(\"h3\",{children:t('weeklyTrainingLoad')}),/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:250,children:/*#__PURE__*/_jsxs(BarChart,{data:tssDistributionData,children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"name\"}),/*#__PURE__*/_jsx(YAxis,{}),/*#__PURE__*/_jsx(Tooltip,{formatter:value=>[value,t('tss')]}),/*#__PURE__*/_jsx(Bar,{dataKey:\"value\",fill:\"#ff7043\"})]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chart-container\",children:[/*#__PURE__*/_jsx(\"h3\",{children:t('performanceProfile')}),/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:250,children:/*#__PURE__*/_jsxs(RadarChart,{cx:\"50%\",cy:\"50%\",outerRadius:\"80%\",data:performanceProfileData,children:[/*#__PURE__*/_jsx(PolarGrid,{}),/*#__PURE__*/_jsx(PolarAngleAxis,{dataKey:\"subject\"}),/*#__PURE__*/_jsx(PolarRadiusAxis,{angle:30,domain:[0,100]}),/*#__PURE__*/_jsx(Radar,{name:t('currentPerformance'),dataKey:\"A\",stroke:\"#8884d8\",fill:\"#8884d8\",fillOpacity:0.6}),/*#__PURE__*/_jsx(Tooltip,{formatter:value=>[value,t('score')]})]})})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"workout-history\",children:[/*#__PURE__*/_jsx(\"h3\",{children:t('recentWorkouts')}),/*#__PURE__*/_jsxs(\"table\",{className:\"workout-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:t('date')}),/*#__PURE__*/_jsx(\"th\",{children:t('type')}),/*#__PURE__*/_jsx(\"th\",{children:t('duration')}),/*#__PURE__*/_jsx(\"th\",{children:t('power')}),/*#__PURE__*/_jsx(\"th\",{children:t('tss')})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:filteredWorkouts.slice(-5).reverse().map((workout,index)=>{var _workout$metrics5;return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:workout.date}),/*#__PURE__*/_jsx(\"td\",{children:t(workout.type)}),/*#__PURE__*/_jsxs(\"td\",{children:[workout.duration,\" \",t('min')]}),/*#__PURE__*/_jsxs(\"td\",{children:[((_workout$metrics5=workout.metrics)===null||_workout$metrics5===void 0?void 0:_workout$metrics5.averagePower)||'-',\" W\"]}),/*#__PURE__*/_jsx(\"td\",{children:workout.tss||'-'})]},index);})})]})]})]});};export default PerformanceTracker;","map":{"version":3,"names":["React","useState","useEffect","useTranslation","LineChart","Line","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","PieChart","Pie","Cell","RadarChart","Radar","PolarGrid","PolarAngleAxis","PolarRadiusAxis","jsxs","_jsxs","jsx","_jsx","PerformanceTracker","_ref","userProfile","workouts","t","timeframe","setTimeframe","metricType","setMetricType","filteredWorkouts","setFilteredWorkouts","length","now","Date","cutoffDate","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","filtered","filter","workout","workoutDate","date","sort","a","b","calculateStats","totalWorkouts","totalDuration","avgPower","maxPower","totalTSS","workoutTypes","reduce","sum","w","duration","powerWorkouts","_w$metrics","metrics","averagePower","Math","round","max","map","normalizedPower","tss","typeCount","forEach","type","Object","entries","_ref2","name","value","stats","prepareTimeSeriesData","_workout$metrics","_workout$metrics2","_workout$metrics3","_workout$metrics4","metricValue","averageHr","formattedDate","prepareWorkoutTypeData","_ref3","prepareTssDistributionData","tssByWeek","weekNum","getWeekNumber","weekKey","_ref4","d","setHours","getDay","week1","preparePerformanceProfileData","enduranceWorkouts","endurance","min","hiitWorkouts","intensity","consistency","_w$metrics2","power","ftp","recovery","subject","A","fullMark","timeSeriesData","workoutTypeData","tssDistributionData","performanceProfileData","typeColors","hiit","strength","default","getWorkoutTypeColor","className","children","onChange","e","target","width","height","data","strokeDasharray","dataKey","formatter","stroke","strokeWidth","dot","fill","activeDot","r","cx","cy","labelLine","outerRadius","nameKey","label","_ref5","percent","toFixed","entry","index","angle","domain","fillOpacity","slice","reverse","_workout$metrics5"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/components/training/PerformanceTracker.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  RadarChart,\n  Radar,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n} from 'recharts';\n\n/**\n * PerformanceTracker component for visualizing training progress\n */\nconst PerformanceTracker = ({ userProfile, workouts }) => {\n  const { t } = useTranslation();\n  const [timeframe, setTimeframe] = useState('month');\n  const [metricType, setMetricType] = useState('power');\n  const [filteredWorkouts, setFilteredWorkouts] = useState([]);\n  \n  // Filter workouts based on selected timeframe\n  useEffect(() => {\n    if (!workouts || workouts.length === 0) {\n      setFilteredWorkouts([]);\n      return;\n    }\n    \n    const now = new Date();\n    let cutoffDate = new Date();\n    \n    switch (timeframe) {\n      case 'week':\n        cutoffDate.setDate(now.getDate() - 7);\n        break;\n      case 'month':\n        cutoffDate.setMonth(now.getMonth() - 1);\n        break;\n      case 'quarter':\n        cutoffDate.setMonth(now.getMonth() - 3);\n        break;\n      case 'year':\n        cutoffDate.setFullYear(now.getFullYear() - 1);\n        break;\n      default:\n        cutoffDate.setMonth(now.getMonth() - 1); // Default to month\n    }\n    \n    const filtered = workouts.filter(workout => {\n      const workoutDate = new Date(workout.date);\n      return workoutDate >= cutoffDate;\n    });\n    \n    // Sort by date\n    filtered.sort((a, b) => new Date(a.date) - new Date(b.date));\n    \n    setFilteredWorkouts(filtered);\n  }, [workouts, timeframe]);\n  \n  /**\n   * Calculate stats for the filtered workouts\n   */\n  const calculateStats = () => {\n    if (filteredWorkouts.length === 0) {\n      return {\n        totalWorkouts: 0,\n        totalDuration: 0,\n        avgPower: 0,\n        maxPower: 0,\n        totalTSS: 0,\n        workoutTypes: []\n      };\n    }\n    \n    const totalWorkouts = filteredWorkouts.length;\n    const totalDuration = filteredWorkouts.reduce((sum, w) => sum + w.duration, 0);\n    \n    // Calculate power metrics\n    const powerWorkouts = filteredWorkouts.filter(w => w.metrics?.averagePower);\n    const avgPower = powerWorkouts.length \n      ? Math.round(powerWorkouts.reduce((sum, w) => sum + w.metrics.averagePower, 0) / powerWorkouts.length)\n      : 0;\n    \n    const maxPower = powerWorkouts.length\n      ? Math.max(...powerWorkouts.map(w => w.metrics.normalizedPower || w.metrics.averagePower))\n      : 0;\n    \n    // Calculate TSS\n    const totalTSS = filteredWorkouts.reduce((sum, w) => sum + (w.tss || 0), 0);\n    \n    // Calculate workout type distribution\n    const typeCount = {};\n    filteredWorkouts.forEach(w => {\n      typeCount[w.type] = (typeCount[w.type] || 0) + 1;\n    });\n    \n    const workoutTypes = Object.entries(typeCount).map(([name, value]) => ({ name, value }));\n    \n    return {\n      totalWorkouts,\n      totalDuration,\n      avgPower,\n      maxPower,\n      totalTSS,\n      workoutTypes\n    };\n  };\n  \n  const stats = calculateStats();\n  \n  /**\n   * Prepare data for the time series chart\n   */\n  const prepareTimeSeriesData = () => {\n    if (filteredWorkouts.length === 0) return [];\n    \n    // Map workouts to chart data based on selected metric\n    return filteredWorkouts.map(workout => {\n      let metricValue = 0;\n      \n      switch (metricType) {\n        case 'power':\n          metricValue = workout.metrics?.normalizedPower || workout.metrics?.averagePower || 0;\n          break;\n        case 'tss':\n          metricValue = workout.tss || 0;\n          break;\n        case 'duration':\n          metricValue = workout.duration || 0;\n          break;\n        case 'heartrate':\n          metricValue = workout.metrics?.averageHr || 0;\n          break;\n        default:\n          metricValue = workout.metrics?.averagePower || 0;\n      }\n      \n      // Format date for display\n      const date = new Date(workout.date);\n      const formattedDate = `${date.getDate()}/${date.getMonth() + 1}`;\n      \n      return {\n        date: formattedDate,\n        value: metricValue,\n        type: workout.type\n      };\n    });\n  };\n  \n  /**\n   * Prepare data for the workout type distribution chart\n   */\n  const prepareWorkoutTypeData = () => {\n    if (filteredWorkouts.length === 0) return [];\n    \n    const typeCount = {};\n    filteredWorkouts.forEach(w => {\n      typeCount[w.type] = (typeCount[w.type] || 0) + 1;\n    });\n    \n    return Object.entries(typeCount).map(([name, value]) => ({ name, value }));\n  };\n  \n  /**\n   * Prepare data for the TSS distribution chart\n   */\n  const prepareTssDistributionData = () => {\n    if (filteredWorkouts.length === 0) return [];\n    \n    // Group TSS by week\n    const tssByWeek = {};\n    \n    filteredWorkouts.forEach(workout => {\n      const date = new Date(workout.date);\n      const weekNum = getWeekNumber(date);\n      const weekKey = `W${weekNum}`;\n      \n      if (!tssByWeek[weekKey]) {\n        tssByWeek[weekKey] = 0;\n      }\n      \n      tssByWeek[weekKey] += workout.tss || 0;\n    });\n    \n    // Convert to array for chart\n    return Object.entries(tssByWeek).map(([name, value]) => ({ name, value }));\n  };\n  \n  /**\n   * Get ISO week number for a date\n   */\n  const getWeekNumber = (date) => {\n    const d = new Date(date);\n    d.setHours(0, 0, 0, 0);\n    d.setDate(d.getDate() + 3 - ((d.getDay() + 6) % 7));\n    const week1 = new Date(d.getFullYear(), 0, 4);\n    return 1 + Math.round(((d - week1) / 86400000 - 3 + ((week1.getDay() + 6) % 7)) / 7);\n  };\n  \n  /**\n   * Prepare data for performance profile radar chart\n   */\n  const preparePerformanceProfileData = () => {\n    if (!userProfile || filteredWorkouts.length === 0) return [];\n    \n    // Calculate metrics for different performance aspects\n    const enduranceWorkouts = filteredWorkouts.filter(w => \n      w.type === 'endurance' || w.duration >= 90\n    );\n    \n    const endurance = enduranceWorkouts.length \n      ? Math.min(100, (enduranceWorkouts.reduce((sum, w) => sum + w.duration, 0) / 10))\n      : 20;\n    \n    const hiitWorkouts = filteredWorkouts.filter(w => w.type === 'hiit');\n    const intensity = hiitWorkouts.length\n      ? Math.min(100, (hiitWorkouts.reduce((sum, w) => sum + (w.tss || 50), 0) / 5))\n      : 20;\n    \n    const consistency = Math.min(100, (filteredWorkouts.length * 10));\n    \n    const powerWorkouts = filteredWorkouts.filter(w => w.metrics?.normalizedPower);\n    const power = powerWorkouts.length && userProfile.ftp\n      ? Math.min(100, ((Math.max(...powerWorkouts.map(w => w.metrics.normalizedPower)) / userProfile.ftp) * 80))\n      : 20;\n    \n    const recovery = 100 - Math.min(100, (stats.totalTSS / 10));\n    \n    return [\n      { subject: t('endurance'), A: endurance, fullMark: 100 },\n      { subject: t('intensity'), A: intensity, fullMark: 100 },\n      { subject: t('consistency'), A: consistency, fullMark: 100 },\n      { subject: t('power'), A: power, fullMark: 100 },\n      { subject: t('recovery'), A: recovery, fullMark: 100 }\n    ];\n  };\n  \n  // Chart data\n  const timeSeriesData = prepareTimeSeriesData();\n  const workoutTypeData = prepareWorkoutTypeData();\n  const tssDistributionData = prepareTssDistributionData();\n  const performanceProfileData = preparePerformanceProfileData();\n  \n  // Type colors for charts\n  const typeColors = {\n    hiit: '#f44336',\n    endurance: '#4caf50',\n    strength: '#2196f3',\n    recovery: '#ff9800',\n    default: '#9c27b0'\n  };\n  \n  // Get color based on workout type\n  const getWorkoutTypeColor = (type) => {\n    return typeColors[type] || typeColors.default;\n  };\n  \n  // No workouts message\n  if (filteredWorkouts.length === 0) {\n    return (\n      <div className=\"performance-tracker\">\n        <div className=\"tracker-controls\">\n          <div className=\"timeframe-selector\">\n            <label>{t('timeframe')}:</label>\n            <select value={timeframe} onChange={(e) => setTimeframe(e.target.value)}>\n              <option value=\"week\">{t('lastWeek')}</option>\n              <option value=\"month\">{t('lastMonth')}</option>\n              <option value=\"quarter\">{t('lastQuarter')}</option>\n              <option value=\"year\">{t('lastYear')}</option>\n            </select>\n          </div>\n        </div>\n        \n        <div className=\"no-workouts-message\">\n          {t('noWorkoutsInTimeframe')}\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"performance-tracker\">\n      <div className=\"tracker-controls\">\n        <div className=\"timeframe-selector\">\n          <label>{t('timeframe')}:</label>\n          <select value={timeframe} onChange={(e) => setTimeframe(e.target.value)}>\n            <option value=\"week\">{t('lastWeek')}</option>\n            <option value=\"month\">{t('lastMonth')}</option>\n            <option value=\"quarter\">{t('lastQuarter')}</option>\n            <option value=\"year\">{t('lastYear')}</option>\n          </select>\n        </div>\n        \n        <div className=\"metric-selector\">\n          <label>{t('metric')}:</label>\n          <select value={metricType} onChange={(e) => setMetricType(e.target.value)}>\n            <option value=\"power\">{t('power')}</option>\n            <option value=\"tss\">{t('tss')}</option>\n            <option value=\"duration\">{t('duration')}</option>\n            <option value=\"heartrate\">{t('heartRate')}</option>\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"performance-stats\">\n        <div className=\"stat-card\">\n          <div className=\"stat-value\">{stats.totalWorkouts}</div>\n          <div className=\"stat-label\">{t('workouts')}</div>\n        </div>\n        <div className=\"stat-card\">\n          <div className=\"stat-value\">{stats.totalDuration}</div>\n          <div className=\"stat-label\">{t('minutes')}</div>\n        </div>\n        <div className=\"stat-card\">\n          <div className=\"stat-value\">{stats.avgPower}W</div>\n          <div className=\"stat-label\">{t('avgPower')}</div>\n        </div>\n        <div className=\"stat-card\">\n          <div className=\"stat-value\">{stats.totalTSS}</div>\n          <div className=\"stat-label\">{t('totalTSS')}</div>\n        </div>\n      </div>\n      \n      <div className=\"charts-grid\">\n        <div className=\"chart-container\">\n          <h3>{`${t(metricType)} ${t('overTime')}`}</h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <LineChart data={timeSeriesData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis />\n              <Tooltip formatter={(value) => [`${value} ${metricType === 'duration' ? t('min') : metricType === 'tss' ? '' : 'W'}`, t(metricType)]} />\n              <Legend />\n              <Line \n                type=\"monotone\" \n                dataKey=\"value\" \n                stroke=\"#8884d8\" \n                strokeWidth={2}\n                dot={{ fill: '#8884d8', strokeWidth: 2 }}\n                activeDot={{ r: 8 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n        \n        <div className=\"chart-container\">\n          <h3>{t('workoutTypes')}</h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <PieChart>\n              <Pie\n                data={workoutTypeData}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={false}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n                nameKey=\"name\"\n                label={({ name, percent }) => `${t(name)} ${(percent * 100).toFixed(0)}%`}\n              >\n                {workoutTypeData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={getWorkoutTypeColor(entry.name)} />\n                ))}\n              </Pie>\n              <Tooltip formatter={(value, name) => [value, t(name)]} />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n        \n        <div className=\"chart-container\">\n          <h3>{t('weeklyTrainingLoad')}</h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <BarChart data={tssDistributionData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip formatter={(value) => [value, t('tss')]} />\n              <Bar dataKey=\"value\" fill=\"#ff7043\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n        \n        <div className=\"chart-container\">\n          <h3>{t('performanceProfile')}</h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <RadarChart cx=\"50%\" cy=\"50%\" outerRadius=\"80%\" data={performanceProfileData}>\n              <PolarGrid />\n              <PolarAngleAxis dataKey=\"subject\" />\n              <PolarRadiusAxis angle={30} domain={[0, 100]} />\n              <Radar\n                name={t('currentPerformance')}\n                dataKey=\"A\"\n                stroke=\"#8884d8\"\n                fill=\"#8884d8\"\n                fillOpacity={0.6}\n              />\n              <Tooltip formatter={(value) => [value, t('score')]} />\n            </RadarChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n      \n      <div className=\"workout-history\">\n        <h3>{t('recentWorkouts')}</h3>\n        <table className=\"workout-table\">\n          <thead>\n            <tr>\n              <th>{t('date')}</th>\n              <th>{t('type')}</th>\n              <th>{t('duration')}</th>\n              <th>{t('power')}</th>\n              <th>{t('tss')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filteredWorkouts.slice(-5).reverse().map((workout, index) => (\n              <tr key={index}>\n                <td>{workout.date}</td>\n                <td>{t(workout.type)}</td>\n                <td>{workout.duration} {t('min')}</td>\n                <td>{workout.metrics?.averagePower || '-'} W</td>\n                <td>{workout.tss || '-'}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nPerformanceTracker.propTypes = {\n  userProfile: PropTypes.object,\n  workouts: PropTypes.array\n};\n\nexport default PerformanceTracker;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}