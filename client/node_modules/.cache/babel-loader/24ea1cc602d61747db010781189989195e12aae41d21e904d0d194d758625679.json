{"ast":null,"code":"/**\n * Utilitaires de formatage pour l'application\n *//**\n * Formate une distance en km avec l'unité appropriée\n * @param {number} distance - Distance en kilomètres\n * @param {boolean} [includeUnit=true] - Inclure l'unité dans le résultat\n * @returns {string} - Distance formatée\n */export const formatDistance=function(distance){let includeUnit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;if(distance===undefined||distance===null)return'-';if(distance<1){// Convertir en mètres pour les petites distances\nreturn`${Math.round(distance*1000)}${includeUnit?' m':''}`;}else if(distance>=1000){// Pour les très grandes distances (plus de 1000 km)\nreturn`${(distance/1000).toFixed(1)}${includeUnit?' Mm':''}`;}else{// Format standard pour la plupart des distances cyclistes\nreturn`${distance.toFixed(1)}${includeUnit?' km':''}`;}};/**\n * Formate une durée en secondes en format lisible\n * @param {number} seconds - Durée en secondes\n * @param {string} [format='long'] - Format d'affichage ('long' ou 'short')\n * @returns {string} - Durée formatée\n */export const formatDuration=function(seconds){let format=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'long';if(seconds===undefined||seconds===null)return'-';const hours=Math.floor(seconds/3600);const minutes=Math.floor(seconds%3600/60);const remainingSeconds=Math.floor(seconds%60);if(format==='short'){// Format court (ex: 2h 30m)\nif(hours>0){return`${hours}h ${minutes.toString().padStart(2,'0')}m`;}else{return`${minutes}m ${remainingSeconds.toString().padStart(2,'0')}s`;}}else{// Format long (ex: 2 heures 30 minutes)\nlet result=[];if(hours>0){result.push(`${hours} ${hours===1?'heure':'heures'}`);}if(minutes>0||hours===0){result.push(`${minutes} ${minutes===1?'minute':'minutes'}`);}if(hours===0&&minutes===0){result.push(`${remainingSeconds} ${remainingSeconds===1?'seconde':'secondes'}`);}return result.join(' ');}};/**\n * Formate une date en format lisible\n * @param {string|Date} date - Date à formater\n * @param {string} [format='medium'] - Format d'affichage ('short', 'medium', 'long')\n * @returns {string} - Date formatée\n */export const formatDate=function(date){let format=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'medium';if(!date)return'-';const dateObj=new Date(date);const now=new Date();const isToday=dateObj.setHours(0,0,0,0)===now.setHours(0,0,0,0);const options={day:'numeric',month:format==='short'?'numeric':'long',year:format==='long'||dateObj.getFullYear()!==now.getFullYear()?'numeric':undefined};let formattedDate;if(format==='short'){// Format court (ex: 01/02/2023)\nformattedDate=dateObj.toLocaleDateString('fr-FR',{day:'2-digit',month:'2-digit',year:'2-digit'});}else{// Format medium ou long\nformattedDate=dateObj.toLocaleDateString('fr-FR',options);}if(isToday&&format!=='short'){return'Aujourd\\'hui';}return formattedDate;};/**\n * Formate un pourcentage\n * @param {number} value - Valeur (0-1)\n * @param {number} [decimals=0] - Nombre de décimales\n * @returns {string} - Pourcentage formaté\n */export const formatPercentage=function(value){let decimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;if(value===undefined||value===null)return'-';const percentage=value*100;return`${percentage.toFixed(decimals)}%`;};/**\n * Calcule l'intensité moyenne d'un ensemble d'activités\n * @param {Array} activities - Liste des activités\n * @returns {number} - Score d'intensité (0-5)\n */export const calculateIntensity=activities=>{if(!activities||activities.length===0)return 0;// Calculer un score d'intensité basé sur plusieurs facteurs\nlet totalIntensity=0;activities.forEach(activity=>{// Facteurs influençant l'intensité\nconst speedFactor=activity.average_speed/25;// Normalisé à 25 km/h\nconst heartRateFactor=activity.average_heart_rate?activity.average_heart_rate/180:0.5;// Normalisé à 180 bpm\nconst elevationFactor=activity.elevation_gain?activity.elevation_gain/activity.distance/20:0;// m/km, normalisé à 20m/km\n// Calcul du score pour cette activité\nconst activityIntensity=speedFactor*0.3+heartRateFactor*0.5+elevationFactor*0.2;totalIntensity+=activityIntensity;});// Moyenne d'intensité (0-5)\nreturn Math.min(5,Math.max(0,totalIntensity/activities.length*5));};/**\n * Formate un score d'intensité en texte descriptif\n * @param {number} intensity - Score d'intensité (0-5)\n * @returns {string} - Description de l'intensité\n */export const formatIntensity=intensity=>{if(intensity<1)return'Très faible';if(intensity<2)return'Faible';if(intensity<3)return'Modérée';if(intensity<4)return'Élevée';return'Très élevée';};","map":{"version":3,"names":["formatDistance","distance","includeUnit","arguments","length","undefined","Math","round","toFixed","formatDuration","seconds","format","hours","floor","minutes","remainingSeconds","toString","padStart","result","push","join","formatDate","date","dateObj","Date","now","isToday","setHours","options","day","month","year","getFullYear","formattedDate","toLocaleDateString","formatPercentage","value","decimals","percentage","calculateIntensity","activities","totalIntensity","forEach","activity","speedFactor","average_speed","heartRateFactor","average_heart_rate","elevationFactor","elevation_gain","activityIntensity","min","max","formatIntensity","intensity"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/utils/formatters.js"],"sourcesContent":["/**\n * Utilitaires de formatage pour l'application\n */\n\n/**\n * Formate une distance en km avec l'unité appropriée\n * @param {number} distance - Distance en kilomètres\n * @param {boolean} [includeUnit=true] - Inclure l'unité dans le résultat\n * @returns {string} - Distance formatée\n */\nexport const formatDistance = (distance, includeUnit = true) => {\n  if (distance === undefined || distance === null) return '-';\n  \n  if (distance < 1) {\n    // Convertir en mètres pour les petites distances\n    return `${Math.round(distance * 1000)}${includeUnit ? ' m' : ''}`;\n  } else if (distance >= 1000) {\n    // Pour les très grandes distances (plus de 1000 km)\n    return `${(distance / 1000).toFixed(1)}${includeUnit ? ' Mm' : ''}`;\n  } else {\n    // Format standard pour la plupart des distances cyclistes\n    return `${distance.toFixed(1)}${includeUnit ? ' km' : ''}`;\n  }\n};\n\n/**\n * Formate une durée en secondes en format lisible\n * @param {number} seconds - Durée en secondes\n * @param {string} [format='long'] - Format d'affichage ('long' ou 'short')\n * @returns {string} - Durée formatée\n */\nexport const formatDuration = (seconds, format = 'long') => {\n  if (seconds === undefined || seconds === null) return '-';\n  \n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const remainingSeconds = Math.floor(seconds % 60);\n  \n  if (format === 'short') {\n    // Format court (ex: 2h 30m)\n    if (hours > 0) {\n      return `${hours}h ${minutes.toString().padStart(2, '0')}m`;\n    } else {\n      return `${minutes}m ${remainingSeconds.toString().padStart(2, '0')}s`;\n    }\n  } else {\n    // Format long (ex: 2 heures 30 minutes)\n    let result = [];\n    \n    if (hours > 0) {\n      result.push(`${hours} ${hours === 1 ? 'heure' : 'heures'}`);\n    }\n    \n    if (minutes > 0 || hours === 0) {\n      result.push(`${minutes} ${minutes === 1 ? 'minute' : 'minutes'}`);\n    }\n    \n    if (hours === 0 && minutes === 0) {\n      result.push(`${remainingSeconds} ${remainingSeconds === 1 ? 'seconde' : 'secondes'}`);\n    }\n    \n    return result.join(' ');\n  }\n};\n\n/**\n * Formate une date en format lisible\n * @param {string|Date} date - Date à formater\n * @param {string} [format='medium'] - Format d'affichage ('short', 'medium', 'long')\n * @returns {string} - Date formatée\n */\nexport const formatDate = (date, format = 'medium') => {\n  if (!date) return '-';\n  \n  const dateObj = new Date(date);\n  const now = new Date();\n  const isToday = dateObj.setHours(0, 0, 0, 0) === now.setHours(0, 0, 0, 0);\n  \n  const options = { \n    day: 'numeric', \n    month: format === 'short' ? 'numeric' : 'long', \n    year: format === 'long' || dateObj.getFullYear() !== now.getFullYear() ? 'numeric' : undefined\n  };\n  \n  let formattedDate;\n  \n  if (format === 'short') {\n    // Format court (ex: 01/02/2023)\n    formattedDate = dateObj.toLocaleDateString('fr-FR', { day: '2-digit', month: '2-digit', year: '2-digit' });\n  } else {\n    // Format medium ou long\n    formattedDate = dateObj.toLocaleDateString('fr-FR', options);\n  }\n  \n  if (isToday && format !== 'short') {\n    return 'Aujourd\\'hui';\n  }\n  \n  return formattedDate;\n};\n\n/**\n * Formate un pourcentage\n * @param {number} value - Valeur (0-1)\n * @param {number} [decimals=0] - Nombre de décimales\n * @returns {string} - Pourcentage formaté\n */\nexport const formatPercentage = (value, decimals = 0) => {\n  if (value === undefined || value === null) return '-';\n  \n  const percentage = value * 100;\n  return `${percentage.toFixed(decimals)}%`;\n};\n\n/**\n * Calcule l'intensité moyenne d'un ensemble d'activités\n * @param {Array} activities - Liste des activités\n * @returns {number} - Score d'intensité (0-5)\n */\nexport const calculateIntensity = (activities) => {\n  if (!activities || activities.length === 0) return 0;\n  \n  // Calculer un score d'intensité basé sur plusieurs facteurs\n  let totalIntensity = 0;\n  \n  activities.forEach(activity => {\n    // Facteurs influençant l'intensité\n    const speedFactor = activity.average_speed / 25; // Normalisé à 25 km/h\n    const heartRateFactor = activity.average_heart_rate ? activity.average_heart_rate / 180 : 0.5; // Normalisé à 180 bpm\n    const elevationFactor = activity.elevation_gain ? (activity.elevation_gain / activity.distance) / 20 : 0; // m/km, normalisé à 20m/km\n    \n    // Calcul du score pour cette activité\n    const activityIntensity = (speedFactor * 0.3) + (heartRateFactor * 0.5) + (elevationFactor * 0.2);\n    totalIntensity += activityIntensity;\n  });\n  \n  // Moyenne d'intensité (0-5)\n  return Math.min(5, Math.max(0, (totalIntensity / activities.length) * 5));\n};\n\n/**\n * Formate un score d'intensité en texte descriptif\n * @param {number} intensity - Score d'intensité (0-5)\n * @returns {string} - Description de l'intensité\n */\nexport const formatIntensity = (intensity) => {\n  if (intensity < 1) return 'Très faible';\n  if (intensity < 2) return 'Faible';\n  if (intensity < 3) return 'Modérée';\n  if (intensity < 4) return 'Élevée';\n  return 'Très élevée';\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}