{"ast":null,"code":"/**\n * Service de gestion des erreurs côté client\n * Ce service fait le pont entre le système de notification et la gestion des erreurs API\n * Il assure une gestion cohérente des erreurs à travers l'application\n */import{api}from'./api';// Mapping des types d'erreurs du backend vers les types de notifications frontend\nconst ERROR_TYPE_MAPPING={// Erreurs d'authentification\n'auth_token_expired':{type:'error',title:'Session expirée',severity:'warning'},'auth_token_invalid':{type:'error',title:'Authentification invalide',severity:'warning'},'auth_token_missing':{type:'error',title:'Authentification requise',severity:'warning'},'auth_token_revoked':{type:'error',title:'Session révoquée',severity:'warning'},'auth_credentials_invalid':{type:'error',title:'Identifiants invalides',severity:'warning'},// Erreurs de validation\n'validation_error':{type:'warning',title:'Données invalides',severity:'warning'},'invalid_input':{type:'warning',title:'Saisie invalide',severity:'warning'},'missing_required_field':{type:'warning',title:'Champ requis manquant',severity:'warning'},// Erreurs de ressources\n'resource_not_found':{type:'error',title:'Ressource introuvable',severity:'warning'},'route_not_found':{type:'error',title:'Page introuvable',severity:'warning'},'resource_conflict':{type:'error',title:'Conflit de ressources',severity:'warning'},'resource_exists':{type:'warning',title:'Ressource existante',severity:'info'},// Erreurs de permissions\n'permission_denied':{type:'error',title:'Accès refusé',severity:'warning'},'insufficient_permissions':{type:'error',title:'Permissions insuffisantes',severity:'warning'},// Erreurs de serveur\n'server_error':{type:'error',title:'Erreur serveur',severity:'critical'},'database_error':{type:'error',title:'Erreur de base de données',severity:'critical'},'service_unavailable':{type:'error',title:'Service indisponible',severity:'critical'},// Erreurs de performance\n'timeout_error':{type:'error',title:'Délai d\\'attente dépassé',severity:'warning'},'rate_limit_exceeded':{type:'warning',title:'Limite de requêtes dépassée',severity:'warning'},'performance_issue':{type:'warning',title:'Problème de performance',severity:'info'},// Erreurs de réseau\n'network_error':{type:'error',title:'Erreur réseau',severity:'warning'},'api_error':{type:'error',title:'Erreur API',severity:'warning'},// Erreur par défaut\n'default':{type:'error',title:'Erreur',severity:'warning'}};// Configuration des notifications par type d'erreur et sévérité\nconst NOTIFICATION_CONFIG={critical:{position:'top-center',autoClose:false,type:'toast',closeButton:true,pauseOnHover:true},warning:{position:'top-right',autoClose:8000,type:'toast',closeButton:true,pauseOnHover:true},info:{position:'bottom-right',autoClose:5000,type:'toast',closeButton:true,pauseOnHover:true}};/**\n * Classe de service de gestion des erreurs\n */class ErrorService{constructor(){this.notifyFn=null;this.errorStats={count:0,byType:{},byEndpoint:{}};// Configurer l'intercepteur de réponse pour capturer les erreurs API\nthis.setupApiInterceptor();}/**\n   * Initialiser le service avec la fonction de notification\n   * @param {Function} notifyFn - Fonction de notification du contexte NotificationContext\n   */init(notifyFn){this.notifyFn=notifyFn;console.log('Service d\\'erreur initialisé avec le système de notification');}/**\n   * Configurer l'intercepteur API pour capturer et traiter les erreurs\n   */setupApiInterceptor(){api.interceptors.response.use(response=>response,error=>{this.handleApiError(error);return Promise.reject(error);});}/**\n   * Gérer une erreur API\n   * @param {Error} error - L'erreur Axios\n   */handleApiError(error){// Extraire les informations d'erreur de la réponse\nlet errorData={type:'network_error',message:'Erreur de connexion au serveur',severity:'warning',details:error.message};// Récupérer les détails d'erreur si disponibles dans la réponse\nif(error.response&&error.response.data){const{data}=error.response;if(data.error){errorData={type:data.error.type||errorData.type,message:data.error.message||errorData.message,severity:data.error.severity||errorData.severity,details:data.error.details||errorData.details,notification:data.error.notification||null};}}// Mettre à jour les statistiques d'erreur\nthis.trackError(errorData,error);// Notifier l'utilisateur si la fonction de notification est disponible\nthis.notifyError(errorData);return errorData;}/**\n   * Suivre les statistiques d'erreur\n   * @param {Object} errorData - Données d'erreur\n   * @param {Error} originalError - Erreur originale\n   */trackError(errorData,originalError){this.errorStats.count++;// Suivre par type\nif(!this.errorStats.byType[errorData.type]){this.errorStats.byType[errorData.type]=0;}this.errorStats.byType[errorData.type]++;// Suivre par endpoint si disponible\nif(originalError.config&&originalError.config.url){const endpoint=originalError.config.url;if(!this.errorStats.byEndpoint[endpoint]){this.errorStats.byEndpoint[endpoint]=0;}this.errorStats.byEndpoint[endpoint]++;}// Envoyer les statistiques au serveur périodiquement (à implémenter)\n}/**\n   * Notifier l'utilisateur d'une erreur\n   * @param {Object} errorData - Données d'erreur\n   */notifyError(errorData){if(!this.notifyFn){console.warn('Système de notification non initialisé, impossible d\\'afficher l\\'erreur');return;}// Obtenir la configuration de notification en fonction du type d'erreur\nconst errorTypeConfig=ERROR_TYPE_MAPPING[errorData.type]||ERROR_TYPE_MAPPING.default;const severityConfig=NOTIFICATION_CONFIG[errorData.severity]||NOTIFICATION_CONFIG.warning;// Utiliser la configuration de notification personnalisée si fournie par le backend\nconst notificationConfig=errorData.notification||{};// Créer la notification\nthis.notifyFn.error(errorData.message,null,{title:errorTypeConfig.title,details:process.env.NODE_ENV!=='production'?errorData.details:undefined,duration:notificationConfig.autoClose||severityConfig.autoClose,...notificationConfig});}/**\n   * Gérer une erreur manuelle (non liée à une requête API)\n   * @param {string} message - Message d'erreur\n   * @param {string} type - Type d'erreur\n   * @param {Object} options - Options supplémentaires\n   */handleError(message){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'default';let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const errorData={type,message,severity:options.severity||'warning',details:options.details||'',notification:options.notification||null};this.trackError(errorData,new Error(message));this.notifyError(errorData);return errorData;}/**\n   * Obtenir les statistiques d'erreur\n   * @returns {Object} Statistiques d'erreur\n   */getErrorStats(){return{...this.errorStats};}/**\n   * Réinitialiser les statistiques d'erreur\n   */resetErrorStats(){this.errorStats={count:0,byType:{},byEndpoint:{}};}}// Créer et exporter une instance singleton\nconst errorService=new ErrorService();export default errorService;","map":{"version":3,"names":["api","ERROR_TYPE_MAPPING","type","title","severity","NOTIFICATION_CONFIG","critical","position","autoClose","closeButton","pauseOnHover","warning","info","ErrorService","constructor","notifyFn","errorStats","count","byType","byEndpoint","setupApiInterceptor","init","console","log","interceptors","response","use","error","handleApiError","Promise","reject","errorData","message","details","data","notification","trackError","notifyError","originalError","config","url","endpoint","warn","errorTypeConfig","default","severityConfig","notificationConfig","process","env","NODE_ENV","undefined","duration","handleError","arguments","length","options","Error","getErrorStats","resetErrorStats","errorService"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/services/errorService.js"],"sourcesContent":["/**\n * Service de gestion des erreurs côté client\n * Ce service fait le pont entre le système de notification et la gestion des erreurs API\n * Il assure une gestion cohérente des erreurs à travers l'application\n */\n\nimport { api } from './api';\n\n// Mapping des types d'erreurs du backend vers les types de notifications frontend\nconst ERROR_TYPE_MAPPING = {\n  // Erreurs d'authentification\n  'auth_token_expired': { type: 'error', title: 'Session expirée', severity: 'warning' },\n  'auth_token_invalid': { type: 'error', title: 'Authentification invalide', severity: 'warning' },\n  'auth_token_missing': { type: 'error', title: 'Authentification requise', severity: 'warning' },\n  'auth_token_revoked': { type: 'error', title: 'Session révoquée', severity: 'warning' },\n  'auth_credentials_invalid': { type: 'error', title: 'Identifiants invalides', severity: 'warning' },\n  \n  // Erreurs de validation\n  'validation_error': { type: 'warning', title: 'Données invalides', severity: 'warning' },\n  'invalid_input': { type: 'warning', title: 'Saisie invalide', severity: 'warning' },\n  'missing_required_field': { type: 'warning', title: 'Champ requis manquant', severity: 'warning' },\n  \n  // Erreurs de ressources\n  'resource_not_found': { type: 'error', title: 'Ressource introuvable', severity: 'warning' },\n  'route_not_found': { type: 'error', title: 'Page introuvable', severity: 'warning' },\n  'resource_conflict': { type: 'error', title: 'Conflit de ressources', severity: 'warning' },\n  'resource_exists': { type: 'warning', title: 'Ressource existante', severity: 'info' },\n  \n  // Erreurs de permissions\n  'permission_denied': { type: 'error', title: 'Accès refusé', severity: 'warning' },\n  'insufficient_permissions': { type: 'error', title: 'Permissions insuffisantes', severity: 'warning' },\n  \n  // Erreurs de serveur\n  'server_error': { type: 'error', title: 'Erreur serveur', severity: 'critical' },\n  'database_error': { type: 'error', title: 'Erreur de base de données', severity: 'critical' },\n  'service_unavailable': { type: 'error', title: 'Service indisponible', severity: 'critical' },\n  \n  // Erreurs de performance\n  'timeout_error': { type: 'error', title: 'Délai d\\'attente dépassé', severity: 'warning' },\n  'rate_limit_exceeded': { type: 'warning', title: 'Limite de requêtes dépassée', severity: 'warning' },\n  'performance_issue': { type: 'warning', title: 'Problème de performance', severity: 'info' },\n  \n  // Erreurs de réseau\n  'network_error': { type: 'error', title: 'Erreur réseau', severity: 'warning' },\n  'api_error': { type: 'error', title: 'Erreur API', severity: 'warning' },\n  \n  // Erreur par défaut\n  'default': { type: 'error', title: 'Erreur', severity: 'warning' }\n};\n\n// Configuration des notifications par type d'erreur et sévérité\nconst NOTIFICATION_CONFIG = {\n  critical: {\n    position: 'top-center',\n    autoClose: false,\n    type: 'toast',\n    closeButton: true,\n    pauseOnHover: true\n  },\n  warning: {\n    position: 'top-right',\n    autoClose: 8000,\n    type: 'toast',\n    closeButton: true,\n    pauseOnHover: true\n  },\n  info: {\n    position: 'bottom-right',\n    autoClose: 5000,\n    type: 'toast',\n    closeButton: true,\n    pauseOnHover: true\n  }\n};\n\n/**\n * Classe de service de gestion des erreurs\n */\nclass ErrorService {\n  constructor() {\n    this.notifyFn = null;\n    this.errorStats = {\n      count: 0,\n      byType: {},\n      byEndpoint: {}\n    };\n    \n    // Configurer l'intercepteur de réponse pour capturer les erreurs API\n    this.setupApiInterceptor();\n  }\n  \n  /**\n   * Initialiser le service avec la fonction de notification\n   * @param {Function} notifyFn - Fonction de notification du contexte NotificationContext\n   */\n  init(notifyFn) {\n    this.notifyFn = notifyFn;\n    console.log('Service d\\'erreur initialisé avec le système de notification');\n  }\n  \n  /**\n   * Configurer l'intercepteur API pour capturer et traiter les erreurs\n   */\n  setupApiInterceptor() {\n    api.interceptors.response.use(\n      response => response,\n      error => {\n        this.handleApiError(error);\n        return Promise.reject(error);\n      }\n    );\n  }\n  \n  /**\n   * Gérer une erreur API\n   * @param {Error} error - L'erreur Axios\n   */\n  handleApiError(error) {\n    // Extraire les informations d'erreur de la réponse\n    let errorData = {\n      type: 'network_error',\n      message: 'Erreur de connexion au serveur',\n      severity: 'warning',\n      details: error.message\n    };\n    \n    // Récupérer les détails d'erreur si disponibles dans la réponse\n    if (error.response && error.response.data) {\n      const { data } = error.response;\n      \n      if (data.error) {\n        errorData = {\n          type: data.error.type || errorData.type,\n          message: data.error.message || errorData.message,\n          severity: data.error.severity || errorData.severity,\n          details: data.error.details || errorData.details,\n          notification: data.error.notification || null\n        };\n      }\n    }\n    \n    // Mettre à jour les statistiques d'erreur\n    this.trackError(errorData, error);\n    \n    // Notifier l'utilisateur si la fonction de notification est disponible\n    this.notifyError(errorData);\n    \n    return errorData;\n  }\n  \n  /**\n   * Suivre les statistiques d'erreur\n   * @param {Object} errorData - Données d'erreur\n   * @param {Error} originalError - Erreur originale\n   */\n  trackError(errorData, originalError) {\n    this.errorStats.count++;\n    \n    // Suivre par type\n    if (!this.errorStats.byType[errorData.type]) {\n      this.errorStats.byType[errorData.type] = 0;\n    }\n    this.errorStats.byType[errorData.type]++;\n    \n    // Suivre par endpoint si disponible\n    if (originalError.config && originalError.config.url) {\n      const endpoint = originalError.config.url;\n      if (!this.errorStats.byEndpoint[endpoint]) {\n        this.errorStats.byEndpoint[endpoint] = 0;\n      }\n      this.errorStats.byEndpoint[endpoint]++;\n    }\n    \n    // Envoyer les statistiques au serveur périodiquement (à implémenter)\n  }\n  \n  /**\n   * Notifier l'utilisateur d'une erreur\n   * @param {Object} errorData - Données d'erreur\n   */\n  notifyError(errorData) {\n    if (!this.notifyFn) {\n      console.warn('Système de notification non initialisé, impossible d\\'afficher l\\'erreur');\n      return;\n    }\n    \n    // Obtenir la configuration de notification en fonction du type d'erreur\n    const errorTypeConfig = ERROR_TYPE_MAPPING[errorData.type] || ERROR_TYPE_MAPPING.default;\n    const severityConfig = NOTIFICATION_CONFIG[errorData.severity] || NOTIFICATION_CONFIG.warning;\n    \n    // Utiliser la configuration de notification personnalisée si fournie par le backend\n    const notificationConfig = errorData.notification || {};\n    \n    // Créer la notification\n    this.notifyFn.error(\n      errorData.message,\n      null,\n      {\n        title: errorTypeConfig.title,\n        details: process.env.NODE_ENV !== 'production' ? errorData.details : undefined,\n        duration: notificationConfig.autoClose || severityConfig.autoClose,\n        ...notificationConfig\n      }\n    );\n  }\n  \n  /**\n   * Gérer une erreur manuelle (non liée à une requête API)\n   * @param {string} message - Message d'erreur\n   * @param {string} type - Type d'erreur\n   * @param {Object} options - Options supplémentaires\n   */\n  handleError(message, type = 'default', options = {}) {\n    const errorData = {\n      type,\n      message,\n      severity: options.severity || 'warning',\n      details: options.details || '',\n      notification: options.notification || null\n    };\n    \n    this.trackError(errorData, new Error(message));\n    this.notifyError(errorData);\n    \n    return errorData;\n  }\n  \n  /**\n   * Obtenir les statistiques d'erreur\n   * @returns {Object} Statistiques d'erreur\n   */\n  getErrorStats() {\n    return { ...this.errorStats };\n  }\n  \n  /**\n   * Réinitialiser les statistiques d'erreur\n   */\n  resetErrorStats() {\n    this.errorStats = {\n      count: 0,\n      byType: {},\n      byEndpoint: {}\n    };\n  }\n}\n\n// Créer et exporter une instance singleton\nconst errorService = new ErrorService();\n\nexport default errorService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}