{"ast":null,"code":"/**\n * Hook personnalisé pour la gestion des erreurs\n * Ce hook combine le service d'erreur et le système de notification\n * pour fournir une gestion cohérente des erreurs dans les composants\n */import{useEffect,useCallback}from'react';import{useNotification}from'../components/common/NotificationSystem';import errorService from'../services/errorService';/**\n * Hook pour la gestion des erreurs\n * @returns {Object} Fonctions et utilitaires pour la gestion des erreurs\n */const useErrorHandler=()=>{const{notify}=useNotification();// Initialiser le service d'erreur avec le système de notification\nuseEffect(()=>{errorService.init(notify);},[notify]);/**\n   * Fonction pour gérer les erreurs d'API de manière asynchrone\n   * @param {Promise} promise - La promesse à exécuter\n   * @param {Object} options - Options de gestion d'erreur\n   * @returns {Promise} La promesse avec gestion d'erreur\n   */const handleApiRequest=useCallback(async function(promise){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const{successMessage,loadingMessage,errorMessage='Une erreur est survenue',showSuccess=false,showLoading=false,onSuccess,onError}=options;let loadingId;try{// Afficher un message de chargement si demandé\nif(showLoading&&loadingMessage){loadingId=notify.info(loadingMessage,{title:'Chargement',duration:0// Pas de fermeture automatique\n});}// Exécuter la promesse\nconst result=await promise;// Supprimer le message de chargement\nif(loadingId){errorService.notifyFn.removeNotification(loadingId);}// Afficher un message de succès si demandé\nif(showSuccess&&successMessage){notify.success(successMessage);}// Exécuter le callback de succès si fourni\nif(onSuccess){onSuccess(result);}return result;}catch(error){// Supprimer le message de chargement\nif(loadingId){errorService.notifyFn.removeNotification(loadingId);}// Utiliser le message d'erreur personnalisé si fourni\nif(errorMessage){var _error$response,_error$response$data,_error$response$data$;errorService.handleError(errorMessage,((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:(_error$response$data$=_error$response$data.error)===null||_error$response$data$===void 0?void 0:_error$response$data$.type)||'default',{details:error.message});}// Exécuter le callback d'erreur si fourni\nif(onError){onError(error);}throw error;}},[notify]);/**\n   * Fonction pour gérer les erreurs de manière synchrone (try/catch)\n   * @param {Function} fn - La fonction à exécuter\n   * @param {Object} options - Options de gestion d'erreur\n   * @returns {any} Le résultat de la fonction ou null en cas d'erreur\n   */const tryCatch=useCallback(function(fn){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const{errorMessage='Une erreur est survenue',showError=true,fallbackValue=null,onError}=options;try{return fn();}catch(error){if(showError){errorService.handleError(errorMessage,'default',{details:error.message});}if(onError){onError(error);}return fallbackValue;}},[]);/**\n   * Fonction pour gérer les erreurs de formulaire\n   * @param {Object} error - L'erreur de validation du formulaire\n   * @param {Function} setError - Fonction pour définir les erreurs dans le formulaire\n   */const handleFormError=useCallback((error,setError)=>{var _error$response2,_error$response2$data,_error$response2$data2;// Gérer les erreurs de validation du backend\nif((_error$response2=error.response)!==null&&_error$response2!==void 0&&(_error$response2$data=_error$response2.data)!==null&&_error$response2$data!==void 0&&(_error$response2$data2=_error$response2$data.error)!==null&&_error$response2$data2!==void 0&&_error$response2$data2.validationErrors){const{validationErrors}=error.response.data.error;// Définir les erreurs dans le formulaire\nObject.entries(validationErrors).forEach(_ref=>{let[field,message]=_ref;setError(field,{type:'manual',message});});// Afficher un message d'erreur général\nerrorService.handleError('Veuillez corriger les erreurs dans le formulaire','validation_error');}else{// Gérer les autres types d'erreurs\nerrorService.handleApiError(error);}},[]);return{handleApiRequest,tryCatch,handleFormError,handleError:errorService.handleError.bind(errorService),getErrorStats:errorService.getErrorStats.bind(errorService)};};export default useErrorHandler;","map":{"version":3,"names":["useEffect","useCallback","useNotification","errorService","useErrorHandler","notify","init","handleApiRequest","promise","options","arguments","length","undefined","successMessage","loadingMessage","errorMessage","showSuccess","showLoading","onSuccess","onError","loadingId","info","title","duration","result","notifyFn","removeNotification","success","error","_error$response","_error$response$data","_error$response$data$","handleError","response","data","type","details","message","tryCatch","fn","showError","fallbackValue","handleFormError","setError","_error$response2","_error$response2$data","_error$response2$data2","validationErrors","Object","entries","forEach","_ref","field","handleApiError","bind","getErrorStats"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/hooks/useErrorHandler.js"],"sourcesContent":["/**\n * Hook personnalisé pour la gestion des erreurs\n * Ce hook combine le service d'erreur et le système de notification\n * pour fournir une gestion cohérente des erreurs dans les composants\n */\n\nimport { useEffect, useCallback } from 'react';\nimport { useNotification } from '../components/common/NotificationSystem';\nimport errorService from '../services/errorService';\n\n/**\n * Hook pour la gestion des erreurs\n * @returns {Object} Fonctions et utilitaires pour la gestion des erreurs\n */\nconst useErrorHandler = () => {\n  const { notify } = useNotification();\n  \n  // Initialiser le service d'erreur avec le système de notification\n  useEffect(() => {\n    errorService.init(notify);\n  }, [notify]);\n  \n  /**\n   * Fonction pour gérer les erreurs d'API de manière asynchrone\n   * @param {Promise} promise - La promesse à exécuter\n   * @param {Object} options - Options de gestion d'erreur\n   * @returns {Promise} La promesse avec gestion d'erreur\n   */\n  const handleApiRequest = useCallback(async (promise, options = {}) => {\n    const {\n      successMessage,\n      loadingMessage,\n      errorMessage = 'Une erreur est survenue',\n      showSuccess = false,\n      showLoading = false,\n      onSuccess,\n      onError\n    } = options;\n    \n    let loadingId;\n    \n    try {\n      // Afficher un message de chargement si demandé\n      if (showLoading && loadingMessage) {\n        loadingId = notify.info(loadingMessage, { \n          title: 'Chargement', \n          duration: 0 // Pas de fermeture automatique\n        });\n      }\n      \n      // Exécuter la promesse\n      const result = await promise;\n      \n      // Supprimer le message de chargement\n      if (loadingId) {\n        errorService.notifyFn.removeNotification(loadingId);\n      }\n      \n      // Afficher un message de succès si demandé\n      if (showSuccess && successMessage) {\n        notify.success(successMessage);\n      }\n      \n      // Exécuter le callback de succès si fourni\n      if (onSuccess) {\n        onSuccess(result);\n      }\n      \n      return result;\n    } catch (error) {\n      // Supprimer le message de chargement\n      if (loadingId) {\n        errorService.notifyFn.removeNotification(loadingId);\n      }\n      \n      // Utiliser le message d'erreur personnalisé si fourni\n      if (errorMessage) {\n        errorService.handleError(\n          errorMessage, \n          error.response?.data?.error?.type || 'default',\n          { details: error.message }\n        );\n      }\n      \n      // Exécuter le callback d'erreur si fourni\n      if (onError) {\n        onError(error);\n      }\n      \n      throw error;\n    }\n  }, [notify]);\n  \n  /**\n   * Fonction pour gérer les erreurs de manière synchrone (try/catch)\n   * @param {Function} fn - La fonction à exécuter\n   * @param {Object} options - Options de gestion d'erreur\n   * @returns {any} Le résultat de la fonction ou null en cas d'erreur\n   */\n  const tryCatch = useCallback((fn, options = {}) => {\n    const {\n      errorMessage = 'Une erreur est survenue',\n      showError = true,\n      fallbackValue = null,\n      onError\n    } = options;\n    \n    try {\n      return fn();\n    } catch (error) {\n      if (showError) {\n        errorService.handleError(\n          errorMessage, \n          'default',\n          { details: error.message }\n        );\n      }\n      \n      if (onError) {\n        onError(error);\n      }\n      \n      return fallbackValue;\n    }\n  }, []);\n  \n  /**\n   * Fonction pour gérer les erreurs de formulaire\n   * @param {Object} error - L'erreur de validation du formulaire\n   * @param {Function} setError - Fonction pour définir les erreurs dans le formulaire\n   */\n  const handleFormError = useCallback((error, setError) => {\n    // Gérer les erreurs de validation du backend\n    if (error.response?.data?.error?.validationErrors) {\n      const { validationErrors } = error.response.data.error;\n      \n      // Définir les erreurs dans le formulaire\n      Object.entries(validationErrors).forEach(([field, message]) => {\n        setError(field, {\n          type: 'manual',\n          message\n        });\n      });\n      \n      // Afficher un message d'erreur général\n      errorService.handleError(\n        'Veuillez corriger les erreurs dans le formulaire',\n        'validation_error'\n      );\n    } else {\n      // Gérer les autres types d'erreurs\n      errorService.handleApiError(error);\n    }\n  }, []);\n  \n  return {\n    handleApiRequest,\n    tryCatch,\n    handleFormError,\n    handleError: errorService.handleError.bind(errorService),\n    getErrorStats: errorService.getErrorStats.bind(errorService)\n  };\n};\n\nexport default useErrorHandler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}