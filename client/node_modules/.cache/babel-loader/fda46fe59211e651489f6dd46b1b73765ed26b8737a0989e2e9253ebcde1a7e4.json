{"ast":null,"code":"/**\n * Utilitaire de détection de performance pour optimiser les visualisations 3D\n * Détecte automatiquement les capacités de l'appareil et ajuste la qualité du rendu\n */// Exporter les niveaux de performance pour pouvoir les utiliser dans d'autres fichiers\nexport const PERF_LEVELS={ULTRA_LOW:0,// Appareils très anciens ou très contraints\nLOW:1,// Appareils d'entrée de gamme ou anciens\nMEDIUM_LOW:2,// Appareils intermédiaires faibles\nMEDIUM:3,// Appareils moyens\nMEDIUM_HIGH:4,// Appareils intermédiaires puissants\nHIGH:5,// Appareils haut de gamme\nULTRA_HIGH:6// Appareils haut de gamme\n};class PerformanceDetector{constructor(){// Niveaux de performance\nthis.PERF_LEVELS=PERF_LEVELS;// Niveaux de qualité correspondants\nthis.QUALITY_PRESETS={ULTRA_LOW:{terrainSegments:32,terrainTexture:512,usePostProcessing:false,useRealisticLighting:false,useShadows:false,drawDistance:5000,useAntialiasing:false,useBloom:false,particleDensity:0.2,maxPointsOfInterest:5,maxBackgroundModels:0},LOW:{terrainSegments:64,terrainTexture:1024,usePostProcessing:false,useRealisticLighting:false,useShadows:false,drawDistance:8000,useAntialiasing:false,useBloom:false,particleDensity:0.4,maxPointsOfInterest:10,maxBackgroundModels:2},MEDIUM_LOW:{terrainSegments:96,terrainTexture:1024,usePostProcessing:false,useRealisticLighting:true,useShadows:false,drawDistance:10000,useAntialiasing:true,useBloom:false,particleDensity:0.6,maxPointsOfInterest:15,maxBackgroundModels:5},MEDIUM:{terrainSegments:128,terrainTexture:2048,usePostProcessing:true,useRealisticLighting:true,useShadows:true,drawDistance:12000,useAntialiasing:true,useBloom:false,particleDensity:0.7,maxPointsOfInterest:20,maxBackgroundModels:8},MEDIUM_HIGH:{terrainSegments:160,terrainTexture:2048,usePostProcessing:true,useRealisticLighting:true,useShadows:true,drawDistance:15000,useAntialiasing:true,useBloom:true,particleDensity:0.8,maxPointsOfInterest:30,maxBackgroundModels:12},HIGH:{terrainSegments:192,terrainTexture:4096,usePostProcessing:true,useRealisticLighting:true,useShadows:true,drawDistance:20000,useAntialiasing:true,useBloom:true,particleDensity:0.9,maxPointsOfInterest:50,maxBackgroundModels:20},ULTRA_HIGH:{terrainSegments:256,terrainTexture:4096,usePostProcessing:true,useRealisticLighting:true,useShadows:true,drawDistance:30000,useAntialiasing:true,useBloom:true,particleDensity:1.0,maxPointsOfInterest:100,maxBackgroundModels:30}};// État de détection\nthis.perfLevel=null;// Niveau de performance détecté\nthis.isDetecting=false;this.onDetectionComplete=null;this.detectionTimeout=10000;// 10 secondes max pour la détection\n// Paramètres du test\nthis.testDuration=3000;// 3 secondes\nthis.targetFPS=60;this.minimumAcceptableFPS=30;// Cache pour les réglages utilisateur\nthis.userOverrides={};this.storageKey='gec_performance_settings';// Niveau par défaut en attendant la détection\nthis.defaultLevel=PERF_LEVELS.MEDIUM;}/**\n   * Détecte le niveau de performance de l'appareil\n   * @param {Function} callback - Fonction appelée une fois la détection terminée\n   * @returns {Promise} Résultat de la détection avec niveau de performance\n   */async detectPerformance(){let callback=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(this.isDetecting){console.log('Détection de performance déjà en cours');return;}// Configurer la promesse et le timeout\nthis.isDetecting=true;this.onDetectionComplete=callback;const detectionPromise=new Promise(async resolve=>{console.log('Démarrage de la détection de performance...');// Essayer de charger les préférences utilisateur\nconst savedSettings=this._loadUserSettings();if(savedSettings&&savedSettings.userSelectedLevel!==undefined){console.log('Utilisation des réglages utilisateur sauvegardés');this.perfLevel=savedSettings.userSelectedLevel;this.isDetecting=false;if(this.onDetectionComplete)this.onDetectionComplete(this.perfLevel);resolve({level:this.perfLevel,preset:this._getQualityPreset(),source:'user_preference'});return;}// Détection multi-facteurs\ntry{// 1. Niveau initial basé sur l'appareil et le navigateur\nconst initialLevel=this._detectInitialLevel();// 2. Test de FPS pour validation\nconst fpsResult=await this._runFPSTest();// 3. Déterminer le niveau final basé sur une combinaison de facteurs\nthis.perfLevel=this._determineLevelFromFPS(fpsResult,initialLevel);// 4. Ajustements additionnels basés sur la mémoire disponible et la résolution\nthis.perfLevel=this._adjustForMemoryAndResolution(this.perfLevel);console.log(`Détection terminée: niveau de performance ${this.perfLevel}`);// Sauvegarder le résultat pour les futures visites\nthis._saveDetectionResult();// Appeler le callback si fourni\nif(this.onDetectionComplete)this.onDetectionComplete(this.perfLevel);this.isDetecting=false;resolve({level:this.perfLevel,preset:this._getQualityPreset(),source:'detection',fps:fpsResult});}catch(error){console.error('Erreur lors de la détection de performance:',error);// En cas d'erreur, utiliser un niveau par défaut sécurisé\nthis.perfLevel=PERF_LEVELS.MEDIUM_LOW;this.isDetecting=false;if(this.onDetectionComplete)this.onDetectionComplete(this.perfLevel);resolve({level:this.perfLevel,preset:this._getQualityPreset(),source:'error_fallback',error:error.message});}});// Ajouter un timeout de sécurité\nconst timeoutPromise=new Promise(resolve=>{setTimeout(()=>{if(this.isDetecting){console.warn('Timeout de détection de performance');this.isDetecting=false;this.perfLevel=this.defaultLevel;if(this.onDetectionComplete)this.onDetectionComplete(this.perfLevel);resolve({level:this.perfLevel,preset:this._getQualityPreset(),source:'timeout'});}},this.detectionTimeout);});// Retourne le premier qui termine: la détection ou le timeout\nreturn Promise.race([detectionPromise,timeoutPromise]);}/**\n   * Obtient les réglages de qualité correspondant au niveau détecté\n   * @param {number} customLevel - Niveau personnalisé (optionnel)\n   * @returns {Object} Réglages de qualité\n   */getQualitySettings(){let customLevel=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;// Si pas encore détecté, utiliser le niveau par défaut\nif(this.perfLevel===null&&customLevel===null){console.warn('Niveau de performance non détecté, utilisation du niveau par défaut');return this._getLevelPreset(this.defaultLevel);}const level=customLevel!==null?customLevel:this.perfLevel;const preset=this._getLevelPreset(level);// Appliquer les overrides utilisateur\nreturn{...preset,...this.userOverrides};}/**\n   * Définit manuellement le niveau de qualité\n   * @param {number} level - Niveau de qualité\n   * @param {boolean} save - Sauvegarder le réglage pour les visites futures\n   * @returns {Object} Nouveaux réglages\n   */setQualityLevel(level){let save=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;if(!Object.values(PERF_LEVELS).includes(level)){console.error('Niveau de qualité invalide');return this.getQualitySettings();}this.perfLevel=level;if(save){this._saveUserSettings({userSelectedLevel:level});}return this.getQualitySettings();}/**\n   * Remplace certains paramètres de qualité\n   * @param {Object} overrides - Paramètres à remplacer\n   * @param {boolean} save - Sauvegarder les overrides\n   * @returns {Object} Réglages mis à jour\n   */overrideSettings(overrides){let save=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;this.userOverrides={...this.userOverrides,...overrides};if(save){this._saveUserSettings({overrides:this.userOverrides});}return this.getQualitySettings();}/**\n   * Réinitialise tous les paramètres à leur valeur détectée\n   * @param {boolean} clearSaved - Effacer les préférences sauvegardées\n   * @returns {Object} Réglages réinitialisés\n   */resetToDetectedSettings(){let clearSaved=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;this.userOverrides={};if(clearSaved){localStorage.removeItem(this.storageKey);}// Re-détecter si nécessaire\nif(this.perfLevel===null){this.detectPerformance();return this._getLevelPreset(this.defaultLevel);}return this.getQualitySettings();}/**\n   * Précharge les ressources à basse résolution puis améliore progressivement\n   * @param {Function} preloadCallback - Fonction appelée pour précharger à basse résolution\n   * @param {Function} upgradeCallback - Fonction appelée pour améliorer la qualité\n   * @returns {Promise} Résultat du préchargement\n   */async progressiveLoad(preloadCallback,upgradeCallback){// Assurer que la détection est terminée\nif(this.perfLevel===null){await this.detectPerformance();}// Démarrer avec les paramètres de qualité basse, quelle que soit la détection\nconst lowQualitySettings=this._getLevelPreset(PERF_LEVELS.LOW);// Précharger avec la qualité basse\ntry{await preloadCallback(lowQualitySettings);// Passer aux réglages détectés (amélioration progressive)\nconst targetSettings=this.getQualitySettings();// Si le niveau cible est supérieur au niveau bas\nif(this.perfLevel>PERF_LEVELS.LOW){// Calculer les paliers intermédiaires pour une transition fluide\nconst steps=this.perfLevel-PERF_LEVELS.LOW;for(let i=1;i<=steps;i++){// Niveau intermédiaire\nconst intermediateLevel=PERF_LEVELS.LOW+i;const intermediateSettings=this._getLevelPreset(intermediateLevel);// Pause pour permettre au rendu de se stabiliser\nawait new Promise(resolve=>setTimeout(resolve,300));// Appliquer le niveau intermédiaire\nawait upgradeCallback(intermediateSettings,i,steps);}}return{success:true,finalSettings:targetSettings};}catch(error){console.error('Erreur lors du chargement progressif:',error);return{success:false,error:error.message,// Rester avec les paramètres basse qualité en cas d'échec\nfinalSettings:lowQualitySettings};}}// ---------- Méthodes privées ----------\n/**\n   * Détecte le niveau initial basé sur l'appareil et le navigateur\n   * @returns {number} Niveau initial estimé\n   * @private\n   */_detectInitialLevel(){// Vérifier si on est sur mobile\nconst isMobile=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);// Vérifier si c'est Safari (peut avoir des problèmes avec WebGL)\nconst isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);// Vérifier la mémoire disponible (si l'API est disponible)\nlet memoryScore=3;// Score moyen par défaut\nif(navigator.deviceMemory){// deviceMemory donne la RAM en GB (0.25, 0.5, 1, 2, 4, 8)\nmemoryScore=Math.min(6,Math.max(1,Math.floor(navigator.deviceMemory)));}// Vérifier le nombre de cœurs CPU (si disponible)\nlet cpuScore=3;// Score moyen par défaut\nif(navigator.hardwareConcurrency){// Échelle proportionnelle jusqu'à 16 cœurs\ncpuScore=Math.min(6,Math.max(1,Math.floor(navigator.hardwareConcurrency/2)));}// Vérifier la résolution de l'écran\nconst pixelCount=window.screen.width*window.screen.height;const resolutionScore=Math.min(6,Math.max(1,Math.floor(pixelCount/(1280*720))));// Calculer le score initial\nlet score=Math.round((memoryScore+cpuScore+resolutionScore)/3);// Ajustements particuliers\nif(isMobile)score=Math.min(score,4);// Plafonner les mobiles à HIGH (pas ULTRA)\nif(isSafari)score=Math.min(score,3);// Safari peut avoir des problèmes avec les visualisations 3D avancées\nconsole.log(`Détection initiale: mobile=${isMobile}, safari=${isSafari}, mémoire=${memoryScore}, CPU=${cpuScore}, résolution=${resolutionScore}, score=${score}`);return score;}/**\n   * Exécute un test de FPS pour mesurer les performances réelles\n   * @returns {Promise<Object>} Résultats du test avec FPS moyen\n   * @private\n   */async _runFPSTest(){return new Promise(resolve=>{// Créer un élément canvas temporaire pour le test\nconst canvas=document.createElement('canvas');canvas.width=512;canvas.height=512;canvas.style.position='absolute';canvas.style.left='-9999px';// Hors écran\ndocument.body.appendChild(canvas);const ctx=canvas.getContext('webgl')||canvas.getContext('experimental-webgl');if(!ctx){document.body.removeChild(canvas);// Si WebGL n'est pas disponible, supposer des performances basses\nresolve({avgFps:15,framesCount:0,supported:false});return;}let lastTime=performance.now();let frames=0;let totalFps=0;// Animation de test\nconst testAnimation=()=>{// Effacer le canvas\nctx.clearColor(0.0,0.0,0.0,1.0);ctx.clear(ctx.COLOR_BUFFER_BIT);// Dessiner un triangle (contenu simple pour le test)\n// (Code simplifié pour l'exemple)\n// Calculer le FPS\nconst now=performance.now();const delta=now-lastTime;const fps=1000/delta;frames++;totalFps+=fps;lastTime=now;// Continuer le test jusqu'à la durée spécifiée\nif(performance.now()-startTime<this.testDuration){requestAnimationFrame(testAnimation);}else{// Test terminé\ndocument.body.removeChild(canvas);const avgFps=totalFps/frames;console.log(`Test FPS terminé: ${avgFps.toFixed(2)} FPS moyen sur ${frames} frames`);resolve({avgFps,framesCount:frames,duration:this.testDuration,supported:true});}};// Démarrer le test\nconst startTime=performance.now();requestAnimationFrame(testAnimation);});}/**\n   * Détermine le niveau de performance à partir des résultats du test FPS\n   * @param {Object} fpsResult - Résultats du test FPS\n   * @param {number} initialLevel - Niveau initial estimé\n   * @returns {number} Niveau final déterminé\n   * @private\n   */_determineLevelFromFPS(fpsResult,initialLevel){if(!fpsResult.supported){// WebGL non supporté, utiliser le niveau minimum\nreturn PERF_LEVELS.ULTRA_LOW;}const{avgFps}=fpsResult;// Échelle progressive des FPS pour les différents niveaux\nif(avgFps<20)return PERF_LEVELS.ULTRA_LOW;if(avgFps<30)return PERF_LEVELS.LOW;if(avgFps<40)return PERF_LEVELS.MEDIUM_LOW;if(avgFps<50)return PERF_LEVELS.MEDIUM;if(avgFps<55)return PERF_LEVELS.MEDIUM_HIGH;if(avgFps<59)return PERF_LEVELS.HIGH;// Si les FPS sont excellents, considérer le niveau initial pour décider ULTRA_HIGH\nreturn avgFps>=59&&initialLevel>=PERF_LEVELS.HIGH?PERF_LEVELS.ULTRA_HIGH:PERF_LEVELS.HIGH;}/**\n   * Ajuste le niveau en fonction de la mémoire et de la résolution\n   * @param {number} level - Niveau à ajuster\n   * @returns {number} Niveau ajusté\n   * @private\n   */_adjustForMemoryAndResolution(level){// Ajustements supplémentaires basés sur la mémoire\nif(navigator.deviceMemory){if(navigator.deviceMemory<=2&&level>PERF_LEVELS.MEDIUM){level=PERF_LEVELS.MEDIUM;}if(navigator.deviceMemory<=1&&level>PERF_LEVELS.LOW){level=PERF_LEVELS.LOW;}}// Ajustements basés sur la résolution d'écran\nconst pixelCount=window.screen.width*window.screen.height;if(pixelCount>2560*1440&&level<PERF_LEVELS.MEDIUM_HIGH){// Écrans haute résolution ont besoin d'au moins MEDIUM_HIGH pour un bon rendu\nlevel=PERF_LEVELS.MEDIUM_HIGH;}// Protection contre les appareils à très haute résolution mais faibles performances\nif(pixelCount>3840*2160&&navigator.deviceMemory&&navigator.deviceMemory<=4){level=Math.min(level,PERF_LEVELS.MEDIUM_HIGH);}return level;}/**\n   * Obtient le preset de qualité pour un niveau donné\n   * @param {number} level - Niveau de performance\n   * @returns {Object} Preset de qualité\n   * @private\n   */_getLevelPreset(level){switch(level){case PERF_LEVELS.ULTRA_LOW:return this.QUALITY_PRESETS.ULTRA_LOW;case PERF_LEVELS.LOW:return this.QUALITY_PRESETS.LOW;case PERF_LEVELS.MEDIUM_LOW:return this.QUALITY_PRESETS.MEDIUM_LOW;case PERF_LEVELS.MEDIUM:return this.QUALITY_PRESETS.MEDIUM;case PERF_LEVELS.MEDIUM_HIGH:return this.QUALITY_PRESETS.MEDIUM_HIGH;case PERF_LEVELS.HIGH:return this.QUALITY_PRESETS.HIGH;case PERF_LEVELS.ULTRA_HIGH:return this.QUALITY_PRESETS.ULTRA_HIGH;default:return this.QUALITY_PRESETS.MEDIUM;}}/**\n   * Obtient le preset de qualité pour le niveau détecté actuel\n   * @returns {Object} Preset de qualité\n   * @private\n   */_getQualityPreset(){return this._getLevelPreset(this.perfLevel||this.defaultLevel);}/**\n   * Sauvegarde le résultat de la détection\n   * @private\n   */_saveDetectionResult(){localStorage.setItem(this.storageKey,JSON.stringify({detectedLevel:this.perfLevel,timestamp:Date.now(),userAgent:navigator.userAgent}));}/**\n   * Sauvegarde les préférences utilisateur\n   * @param {Object} settings - Paramètres à sauvegarder\n   * @private\n   */_saveUserSettings(settings){const current=this._loadUserSettings()||{};localStorage.setItem(this.storageKey,JSON.stringify({...current,...settings,timestamp:Date.now()}));}/**\n   * Charge les préférences utilisateur\n   * @returns {Object|null} Paramètres sauvegardés ou null\n   * @private\n   */_loadUserSettings(){try{const saved=localStorage.getItem(this.storageKey);return saved?JSON.parse(saved):null;}catch(e){console.error('Erreur lors du chargement des préférences:',e);return null;}}}// Exporter une instance unique\nconst performanceDetector=new PerformanceDetector();export default performanceDetector;","map":{"version":3,"names":["PERF_LEVELS","ULTRA_LOW","LOW","MEDIUM_LOW","MEDIUM","MEDIUM_HIGH","HIGH","ULTRA_HIGH","PerformanceDetector","constructor","QUALITY_PRESETS","terrainSegments","terrainTexture","usePostProcessing","useRealisticLighting","useShadows","drawDistance","useAntialiasing","useBloom","particleDensity","maxPointsOfInterest","maxBackgroundModels","perfLevel","isDetecting","onDetectionComplete","detectionTimeout","testDuration","targetFPS","minimumAcceptableFPS","userOverrides","storageKey","defaultLevel","detectPerformance","callback","arguments","length","undefined","console","log","detectionPromise","Promise","resolve","savedSettings","_loadUserSettings","userSelectedLevel","level","preset","_getQualityPreset","source","initialLevel","_detectInitialLevel","fpsResult","_runFPSTest","_determineLevelFromFPS","_adjustForMemoryAndResolution","_saveDetectionResult","fps","error","message","timeoutPromise","setTimeout","warn","race","getQualitySettings","customLevel","_getLevelPreset","setQualityLevel","save","Object","values","includes","_saveUserSettings","overrideSettings","overrides","resetToDetectedSettings","clearSaved","localStorage","removeItem","progressiveLoad","preloadCallback","upgradeCallback","lowQualitySettings","targetSettings","steps","i","intermediateLevel","intermediateSettings","success","finalSettings","isMobile","test","navigator","userAgent","isSafari","memoryScore","deviceMemory","Math","min","max","floor","cpuScore","hardwareConcurrency","pixelCount","window","screen","width","height","resolutionScore","score","round","canvas","document","createElement","style","position","left","body","appendChild","ctx","getContext","removeChild","avgFps","framesCount","supported","lastTime","performance","now","frames","totalFps","testAnimation","clearColor","clear","COLOR_BUFFER_BIT","delta","startTime","requestAnimationFrame","toFixed","duration","setItem","JSON","stringify","detectedLevel","timestamp","Date","settings","current","saved","getItem","parse","e","performanceDetector"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/utils/PerformanceDetector.js"],"sourcesContent":["/**\n * Utilitaire de détection de performance pour optimiser les visualisations 3D\n * Détecte automatiquement les capacités de l'appareil et ajuste la qualité du rendu\n */\n\n// Exporter les niveaux de performance pour pouvoir les utiliser dans d'autres fichiers\nexport const PERF_LEVELS = {\n  ULTRA_LOW: 0,   // Appareils très anciens ou très contraints\n  LOW: 1,         // Appareils d'entrée de gamme ou anciens\n  MEDIUM_LOW: 2,  // Appareils intermédiaires faibles\n  MEDIUM: 3,      // Appareils moyens\n  MEDIUM_HIGH: 4, // Appareils intermédiaires puissants\n  HIGH: 5,        // Appareils haut de gamme\n  ULTRA_HIGH: 6   // Appareils haut de gamme\n};\n\nclass PerformanceDetector {\n  constructor() {\n    // Niveaux de performance\n    this.PERF_LEVELS = PERF_LEVELS;\n    \n    // Niveaux de qualité correspondants\n    this.QUALITY_PRESETS = {\n      ULTRA_LOW: {\n        terrainSegments: 32,\n        terrainTexture: 512,\n        usePostProcessing: false,\n        useRealisticLighting: false,\n        useShadows: false,\n        drawDistance: 5000,\n        useAntialiasing: false,\n        useBloom: false,\n        particleDensity: 0.2,\n        maxPointsOfInterest: 5,\n        maxBackgroundModels: 0\n      },\n      LOW: {\n        terrainSegments: 64,\n        terrainTexture: 1024,\n        usePostProcessing: false,\n        useRealisticLighting: false,\n        useShadows: false,\n        drawDistance: 8000,\n        useAntialiasing: false,\n        useBloom: false,\n        particleDensity: 0.4,\n        maxPointsOfInterest: 10,\n        maxBackgroundModels: 2\n      },\n      MEDIUM_LOW: {\n        terrainSegments: 96,\n        terrainTexture: 1024,\n        usePostProcessing: false,\n        useRealisticLighting: true,\n        useShadows: false,\n        drawDistance: 10000,\n        useAntialiasing: true,\n        useBloom: false,\n        particleDensity: 0.6,\n        maxPointsOfInterest: 15,\n        maxBackgroundModels: 5\n      },\n      MEDIUM: {\n        terrainSegments: 128,\n        terrainTexture: 2048,\n        usePostProcessing: true,\n        useRealisticLighting: true,\n        useShadows: true,\n        drawDistance: 12000,\n        useAntialiasing: true,\n        useBloom: false,\n        particleDensity: 0.7,\n        maxPointsOfInterest: 20,\n        maxBackgroundModels: 8\n      },\n      MEDIUM_HIGH: {\n        terrainSegments: 160,\n        terrainTexture: 2048,\n        usePostProcessing: true,\n        useRealisticLighting: true,\n        useShadows: true,\n        drawDistance: 15000,\n        useAntialiasing: true,\n        useBloom: true,\n        particleDensity: 0.8,\n        maxPointsOfInterest: 30,\n        maxBackgroundModels: 12\n      },\n      HIGH: {\n        terrainSegments: 192,\n        terrainTexture: 4096,\n        usePostProcessing: true,\n        useRealisticLighting: true,\n        useShadows: true,\n        drawDistance: 20000,\n        useAntialiasing: true,\n        useBloom: true,\n        particleDensity: 0.9,\n        maxPointsOfInterest: 50,\n        maxBackgroundModels: 20\n      },\n      ULTRA_HIGH: {\n        terrainSegments: 256,\n        terrainTexture: 4096,\n        usePostProcessing: true,\n        useRealisticLighting: true,\n        useShadows: true,\n        drawDistance: 30000,\n        useAntialiasing: true,\n        useBloom: true,\n        particleDensity: 1.0,\n        maxPointsOfInterest: 100,\n        maxBackgroundModels: 30\n      }\n    };\n    \n    // État de détection\n    this.perfLevel = null; // Niveau de performance détecté\n    this.isDetecting = false;\n    this.onDetectionComplete = null;\n    this.detectionTimeout = 10000; // 10 secondes max pour la détection\n    \n    // Paramètres du test\n    this.testDuration = 3000; // 3 secondes\n    this.targetFPS = 60;\n    this.minimumAcceptableFPS = 30;\n    \n    // Cache pour les réglages utilisateur\n    this.userOverrides = {};\n    this.storageKey = 'gec_performance_settings';\n    \n    // Niveau par défaut en attendant la détection\n    this.defaultLevel = PERF_LEVELS.MEDIUM;\n  }\n  \n  /**\n   * Détecte le niveau de performance de l'appareil\n   * @param {Function} callback - Fonction appelée une fois la détection terminée\n   * @returns {Promise} Résultat de la détection avec niveau de performance\n   */\n  async detectPerformance(callback = null) {\n    if (this.isDetecting) {\n      console.log('Détection de performance déjà en cours');\n      return;\n    }\n    \n    // Configurer la promesse et le timeout\n    this.isDetecting = true;\n    this.onDetectionComplete = callback;\n    \n    const detectionPromise = new Promise(async (resolve) => {\n      console.log('Démarrage de la détection de performance...');\n      \n      // Essayer de charger les préférences utilisateur\n      const savedSettings = this._loadUserSettings();\n      if (savedSettings && savedSettings.userSelectedLevel !== undefined) {\n        console.log('Utilisation des réglages utilisateur sauvegardés');\n        this.perfLevel = savedSettings.userSelectedLevel;\n        this.isDetecting = false;\n        if (this.onDetectionComplete) this.onDetectionComplete(this.perfLevel);\n        resolve({\n          level: this.perfLevel,\n          preset: this._getQualityPreset(),\n          source: 'user_preference'\n        });\n        return;\n      }\n      \n      // Détection multi-facteurs\n      try {\n        // 1. Niveau initial basé sur l'appareil et le navigateur\n        const initialLevel = this._detectInitialLevel();\n        \n        // 2. Test de FPS pour validation\n        const fpsResult = await this._runFPSTest();\n        \n        // 3. Déterminer le niveau final basé sur une combinaison de facteurs\n        this.perfLevel = this._determineLevelFromFPS(fpsResult, initialLevel);\n        \n        // 4. Ajustements additionnels basés sur la mémoire disponible et la résolution\n        this.perfLevel = this._adjustForMemoryAndResolution(this.perfLevel);\n        \n        console.log(`Détection terminée: niveau de performance ${this.perfLevel}`);\n        \n        // Sauvegarder le résultat pour les futures visites\n        this._saveDetectionResult();\n        \n        // Appeler le callback si fourni\n        if (this.onDetectionComplete) this.onDetectionComplete(this.perfLevel);\n        \n        this.isDetecting = false;\n        resolve({\n          level: this.perfLevel,\n          preset: this._getQualityPreset(),\n          source: 'detection',\n          fps: fpsResult\n        });\n      } catch (error) {\n        console.error('Erreur lors de la détection de performance:', error);\n        // En cas d'erreur, utiliser un niveau par défaut sécurisé\n        this.perfLevel = PERF_LEVELS.MEDIUM_LOW;\n        this.isDetecting = false;\n        \n        if (this.onDetectionComplete) this.onDetectionComplete(this.perfLevel);\n        \n        resolve({\n          level: this.perfLevel,\n          preset: this._getQualityPreset(),\n          source: 'error_fallback',\n          error: error.message\n        });\n      }\n    });\n    \n    // Ajouter un timeout de sécurité\n    const timeoutPromise = new Promise((resolve) => {\n      setTimeout(() => {\n        if (this.isDetecting) {\n          console.warn('Timeout de détection de performance');\n          this.isDetecting = false;\n          this.perfLevel = this.defaultLevel;\n          \n          if (this.onDetectionComplete) this.onDetectionComplete(this.perfLevel);\n          \n          resolve({\n            level: this.perfLevel,\n            preset: this._getQualityPreset(),\n            source: 'timeout'\n          });\n        }\n      }, this.detectionTimeout);\n    });\n    \n    // Retourne le premier qui termine: la détection ou le timeout\n    return Promise.race([detectionPromise, timeoutPromise]);\n  }\n  \n  /**\n   * Obtient les réglages de qualité correspondant au niveau détecté\n   * @param {number} customLevel - Niveau personnalisé (optionnel)\n   * @returns {Object} Réglages de qualité\n   */\n  getQualitySettings(customLevel = null) {\n    // Si pas encore détecté, utiliser le niveau par défaut\n    if (this.perfLevel === null && customLevel === null) {\n      console.warn('Niveau de performance non détecté, utilisation du niveau par défaut');\n      return this._getLevelPreset(this.defaultLevel);\n    }\n    \n    const level = customLevel !== null ? customLevel : this.perfLevel;\n    const preset = this._getLevelPreset(level);\n    \n    // Appliquer les overrides utilisateur\n    return { ...preset, ...this.userOverrides };\n  }\n  \n  /**\n   * Définit manuellement le niveau de qualité\n   * @param {number} level - Niveau de qualité\n   * @param {boolean} save - Sauvegarder le réglage pour les visites futures\n   * @returns {Object} Nouveaux réglages\n   */\n  setQualityLevel(level, save = true) {\n    if (!Object.values(PERF_LEVELS).includes(level)) {\n      console.error('Niveau de qualité invalide');\n      return this.getQualitySettings();\n    }\n    \n    this.perfLevel = level;\n    \n    if (save) {\n      this._saveUserSettings({ userSelectedLevel: level });\n    }\n    \n    return this.getQualitySettings();\n  }\n  \n  /**\n   * Remplace certains paramètres de qualité\n   * @param {Object} overrides - Paramètres à remplacer\n   * @param {boolean} save - Sauvegarder les overrides\n   * @returns {Object} Réglages mis à jour\n   */\n  overrideSettings(overrides, save = true) {\n    this.userOverrides = { ...this.userOverrides, ...overrides };\n    \n    if (save) {\n      this._saveUserSettings({ overrides: this.userOverrides });\n    }\n    \n    return this.getQualitySettings();\n  }\n  \n  /**\n   * Réinitialise tous les paramètres à leur valeur détectée\n   * @param {boolean} clearSaved - Effacer les préférences sauvegardées\n   * @returns {Object} Réglages réinitialisés\n   */\n  resetToDetectedSettings(clearSaved = true) {\n    this.userOverrides = {};\n    \n    if (clearSaved) {\n      localStorage.removeItem(this.storageKey);\n    }\n    \n    // Re-détecter si nécessaire\n    if (this.perfLevel === null) {\n      this.detectPerformance();\n      return this._getLevelPreset(this.defaultLevel);\n    }\n    \n    return this.getQualitySettings();\n  }\n  \n  /**\n   * Précharge les ressources à basse résolution puis améliore progressivement\n   * @param {Function} preloadCallback - Fonction appelée pour précharger à basse résolution\n   * @param {Function} upgradeCallback - Fonction appelée pour améliorer la qualité\n   * @returns {Promise} Résultat du préchargement\n   */\n  async progressiveLoad(preloadCallback, upgradeCallback) {\n    // Assurer que la détection est terminée\n    if (this.perfLevel === null) {\n      await this.detectPerformance();\n    }\n    \n    // Démarrer avec les paramètres de qualité basse, quelle que soit la détection\n    const lowQualitySettings = this._getLevelPreset(PERF_LEVELS.LOW);\n    \n    // Précharger avec la qualité basse\n    try {\n      await preloadCallback(lowQualitySettings);\n      \n      // Passer aux réglages détectés (amélioration progressive)\n      const targetSettings = this.getQualitySettings();\n      \n      // Si le niveau cible est supérieur au niveau bas\n      if (this.perfLevel > PERF_LEVELS.LOW) {\n        // Calculer les paliers intermédiaires pour une transition fluide\n        const steps = this.perfLevel - PERF_LEVELS.LOW;\n        \n        for (let i = 1; i <= steps; i++) {\n          // Niveau intermédiaire\n          const intermediateLevel = PERF_LEVELS.LOW + i;\n          const intermediateSettings = this._getLevelPreset(intermediateLevel);\n          \n          // Pause pour permettre au rendu de se stabiliser\n          await new Promise(resolve => setTimeout(resolve, 300));\n          \n          // Appliquer le niveau intermédiaire\n          await upgradeCallback(intermediateSettings, i, steps);\n        }\n      }\n      \n      return { success: true, finalSettings: targetSettings };\n    } catch (error) {\n      console.error('Erreur lors du chargement progressif:', error);\n      return { \n        success: false, \n        error: error.message,\n        // Rester avec les paramètres basse qualité en cas d'échec\n        finalSettings: lowQualitySettings \n      };\n    }\n  }\n  \n  // ---------- Méthodes privées ----------\n  \n  /**\n   * Détecte le niveau initial basé sur l'appareil et le navigateur\n   * @returns {number} Niveau initial estimé\n   * @private\n   */\n  _detectInitialLevel() {\n    // Vérifier si on est sur mobile\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    \n    // Vérifier si c'est Safari (peut avoir des problèmes avec WebGL)\n    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    \n    // Vérifier la mémoire disponible (si l'API est disponible)\n    let memoryScore = 3; // Score moyen par défaut\n    if (navigator.deviceMemory) {\n      // deviceMemory donne la RAM en GB (0.25, 0.5, 1, 2, 4, 8)\n      memoryScore = Math.min(6, Math.max(1, Math.floor(navigator.deviceMemory)));\n    }\n    \n    // Vérifier le nombre de cœurs CPU (si disponible)\n    let cpuScore = 3; // Score moyen par défaut\n    if (navigator.hardwareConcurrency) {\n      // Échelle proportionnelle jusqu'à 16 cœurs\n      cpuScore = Math.min(6, Math.max(1, Math.floor(navigator.hardwareConcurrency / 2)));\n    }\n    \n    // Vérifier la résolution de l'écran\n    const pixelCount = window.screen.width * window.screen.height;\n    const resolutionScore = Math.min(6, Math.max(1, Math.floor(pixelCount / (1280 * 720))));\n    \n    // Calculer le score initial\n    let score = Math.round((memoryScore + cpuScore + resolutionScore) / 3);\n    \n    // Ajustements particuliers\n    if (isMobile) score = Math.min(score, 4); // Plafonner les mobiles à HIGH (pas ULTRA)\n    if (isSafari) score = Math.min(score, 3); // Safari peut avoir des problèmes avec les visualisations 3D avancées\n    \n    console.log(`Détection initiale: mobile=${isMobile}, safari=${isSafari}, mémoire=${memoryScore}, CPU=${cpuScore}, résolution=${resolutionScore}, score=${score}`);\n    \n    return score;\n  }\n  \n  /**\n   * Exécute un test de FPS pour mesurer les performances réelles\n   * @returns {Promise<Object>} Résultats du test avec FPS moyen\n   * @private\n   */\n  async _runFPSTest() {\n    return new Promise((resolve) => {\n      // Créer un élément canvas temporaire pour le test\n      const canvas = document.createElement('canvas');\n      canvas.width = 512;\n      canvas.height = 512;\n      canvas.style.position = 'absolute';\n      canvas.style.left = '-9999px';  // Hors écran\n      document.body.appendChild(canvas);\n      \n      const ctx = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n      if (!ctx) {\n        document.body.removeChild(canvas);\n        // Si WebGL n'est pas disponible, supposer des performances basses\n        resolve({ avgFps: 15, framesCount: 0, supported: false });\n        return;\n      }\n      \n      let lastTime = performance.now();\n      let frames = 0;\n      let totalFps = 0;\n      \n      // Animation de test\n      const testAnimation = () => {\n        // Effacer le canvas\n        ctx.clearColor(0.0, 0.0, 0.0, 1.0);\n        ctx.clear(ctx.COLOR_BUFFER_BIT);\n        \n        // Dessiner un triangle (contenu simple pour le test)\n        // (Code simplifié pour l'exemple)\n        \n        // Calculer le FPS\n        const now = performance.now();\n        const delta = now - lastTime;\n        const fps = 1000 / delta;\n        \n        frames++;\n        totalFps += fps;\n        lastTime = now;\n        \n        // Continuer le test jusqu'à la durée spécifiée\n        if (performance.now() - startTime < this.testDuration) {\n          requestAnimationFrame(testAnimation);\n        } else {\n          // Test terminé\n          document.body.removeChild(canvas);\n          \n          const avgFps = totalFps / frames;\n          console.log(`Test FPS terminé: ${avgFps.toFixed(2)} FPS moyen sur ${frames} frames`);\n          \n          resolve({\n            avgFps,\n            framesCount: frames,\n            duration: this.testDuration,\n            supported: true\n          });\n        }\n      };\n      \n      // Démarrer le test\n      const startTime = performance.now();\n      requestAnimationFrame(testAnimation);\n    });\n  }\n  \n  /**\n   * Détermine le niveau de performance à partir des résultats du test FPS\n   * @param {Object} fpsResult - Résultats du test FPS\n   * @param {number} initialLevel - Niveau initial estimé\n   * @returns {number} Niveau final déterminé\n   * @private\n   */\n  _determineLevelFromFPS(fpsResult, initialLevel) {\n    if (!fpsResult.supported) {\n      // WebGL non supporté, utiliser le niveau minimum\n      return PERF_LEVELS.ULTRA_LOW;\n    }\n    \n    const { avgFps } = fpsResult;\n    \n    // Échelle progressive des FPS pour les différents niveaux\n    if (avgFps < 20) return PERF_LEVELS.ULTRA_LOW;\n    if (avgFps < 30) return PERF_LEVELS.LOW;\n    if (avgFps < 40) return PERF_LEVELS.MEDIUM_LOW;\n    if (avgFps < 50) return PERF_LEVELS.MEDIUM;\n    if (avgFps < 55) return PERF_LEVELS.MEDIUM_HIGH;\n    if (avgFps < 59) return PERF_LEVELS.HIGH;\n    \n    // Si les FPS sont excellents, considérer le niveau initial pour décider ULTRA_HIGH\n    return avgFps >= 59 && initialLevel >= PERF_LEVELS.HIGH \n      ? PERF_LEVELS.ULTRA_HIGH \n      : PERF_LEVELS.HIGH;\n  }\n  \n  /**\n   * Ajuste le niveau en fonction de la mémoire et de la résolution\n   * @param {number} level - Niveau à ajuster\n   * @returns {number} Niveau ajusté\n   * @private\n   */\n  _adjustForMemoryAndResolution(level) {\n    // Ajustements supplémentaires basés sur la mémoire\n    if (navigator.deviceMemory) {\n      if (navigator.deviceMemory <= 2 && level > PERF_LEVELS.MEDIUM) {\n        level = PERF_LEVELS.MEDIUM;\n      }\n      if (navigator.deviceMemory <= 1 && level > PERF_LEVELS.LOW) {\n        level = PERF_LEVELS.LOW;\n      }\n    }\n    \n    // Ajustements basés sur la résolution d'écran\n    const pixelCount = window.screen.width * window.screen.height;\n    if (pixelCount > 2560 * 1440 && level < PERF_LEVELS.MEDIUM_HIGH) {\n      // Écrans haute résolution ont besoin d'au moins MEDIUM_HIGH pour un bon rendu\n      level = PERF_LEVELS.MEDIUM_HIGH;\n    }\n    \n    // Protection contre les appareils à très haute résolution mais faibles performances\n    if (pixelCount > 3840 * 2160 && navigator.deviceMemory && navigator.deviceMemory <= 4) {\n      level = Math.min(level, PERF_LEVELS.MEDIUM_HIGH);\n    }\n    \n    return level;\n  }\n  \n  /**\n   * Obtient le preset de qualité pour un niveau donné\n   * @param {number} level - Niveau de performance\n   * @returns {Object} Preset de qualité\n   * @private\n   */\n  _getLevelPreset(level) {\n    switch (level) {\n      case PERF_LEVELS.ULTRA_LOW:\n        return this.QUALITY_PRESETS.ULTRA_LOW;\n      case PERF_LEVELS.LOW:\n        return this.QUALITY_PRESETS.LOW;\n      case PERF_LEVELS.MEDIUM_LOW:\n        return this.QUALITY_PRESETS.MEDIUM_LOW;\n      case PERF_LEVELS.MEDIUM:\n        return this.QUALITY_PRESETS.MEDIUM;\n      case PERF_LEVELS.MEDIUM_HIGH:\n        return this.QUALITY_PRESETS.MEDIUM_HIGH;\n      case PERF_LEVELS.HIGH:\n        return this.QUALITY_PRESETS.HIGH;\n      case PERF_LEVELS.ULTRA_HIGH:\n        return this.QUALITY_PRESETS.ULTRA_HIGH;\n      default:\n        return this.QUALITY_PRESETS.MEDIUM;\n    }\n  }\n  \n  /**\n   * Obtient le preset de qualité pour le niveau détecté actuel\n   * @returns {Object} Preset de qualité\n   * @private\n   */\n  _getQualityPreset() {\n    return this._getLevelPreset(this.perfLevel || this.defaultLevel);\n  }\n  \n  /**\n   * Sauvegarde le résultat de la détection\n   * @private\n   */\n  _saveDetectionResult() {\n    localStorage.setItem(this.storageKey, JSON.stringify({\n      detectedLevel: this.perfLevel,\n      timestamp: Date.now(),\n      userAgent: navigator.userAgent\n    }));\n  }\n  \n  /**\n   * Sauvegarde les préférences utilisateur\n   * @param {Object} settings - Paramètres à sauvegarder\n   * @private\n   */\n  _saveUserSettings(settings) {\n    const current = this._loadUserSettings() || {};\n    localStorage.setItem(this.storageKey, JSON.stringify({\n      ...current,\n      ...settings,\n      timestamp: Date.now()\n    }));\n  }\n  \n  /**\n   * Charge les préférences utilisateur\n   * @returns {Object|null} Paramètres sauvegardés ou null\n   * @private\n   */\n  _loadUserSettings() {\n    try {\n      const saved = localStorage.getItem(this.storageKey);\n      return saved ? JSON.parse(saved) : null;\n    } catch (e) {\n      console.error('Erreur lors du chargement des préférences:', e);\n      return null;\n    }\n  }\n}\n\n// Exporter une instance unique\nconst performanceDetector = new PerformanceDetector();\nexport default performanceDetector;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}