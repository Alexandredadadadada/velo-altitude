{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Grid,Paper,Typography,Box,Button,Card,CardContent,CardActions,Divider,TextField,Select,MenuItem,FormControl,InputLabel,Chip,IconButton,CircularProgress,Alert,Dialog,DialogTitle,DialogContent,DialogActions,List,ListItem,ListItemText,ListItemSecondaryAction,TableContainer,Table,TableHead,TableRow,TableCell,TableBody,Stack}from'@mui/material';import{Add,Delete,Edit,Favorite,FavoriteBorder,DirectionsBike,Restaurant,LocalDining,Coffee,FilterList,CheckCircle,Print,Share}from'@mui/icons-material';import nutritionService from'../../services/nutritionService';import{useAuth}from'../../contexts/AuthContext';/**\n * Composant de planification des repas pour les cyclistes\n * Permet de créer, modifier et gérer des plans de repas adaptés aux besoins nutritionnels\n */import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const MealPlanner=_ref=>{var _plannerData$mealPlan;let{nutritionData,userId}=_ref;const{user}=useAuth();const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const[plannerData,setPlannerData]=useState(null);const[selectedPlan,setSelectedPlan]=useState(null);const[planType,setPlanType]=useState('ride-day');const[openMealDialog,setOpenMealDialog]=useState(false);const[currentMeal,setCurrentMeal]=useState(null);const[searchTerm,setSearchTerm]=useState('');const[autoGenerateDialog,setAutoGenerateDialog]=useState(false);const[generationOptions,setGenerationOptions]=useState({goalType:'performance',mealCount:5,allergies:[],preferences:'balanced'});const[mealTypes]=useState([{id:'breakfast',label:'Petit-déjeuner',icon:/*#__PURE__*/_jsx(Coffee,{})},{id:'pre-ride',label:'Avant-effort',icon:/*#__PURE__*/_jsx(DirectionsBike,{})},{id:'during-ride',label:'Pendant l\\'effort',icon:/*#__PURE__*/_jsx(DirectionsBike,{})},{id:'post-ride',label:'Après-effort',icon:/*#__PURE__*/_jsx(DirectionsBike,{})},{id:'lunch',label:'Déjeuner',icon:/*#__PURE__*/_jsx(Restaurant,{})},{id:'dinner',label:'Dîner',icon:/*#__PURE__*/_jsx(LocalDining,{})},{id:'snack',label:'Collation',icon:/*#__PURE__*/_jsx(Restaurant,{})}]);// Utiliser les données passées en props ou les récupérer si non disponibles\nuseEffect(()=>{if(nutritionData){setPlannerData(nutritionData);}else{fetchMealPlans();}},[nutritionData,userId]);// Récupérer les plans de repas\nconst fetchMealPlans=async()=>{if(!userId)return;try{setLoading(true);setError(null);const data=await nutritionService.getUserNutritionData(userId);if(!data||!data.mealPlans){throw new Error('Données de plans de repas invalides');}setPlannerData(data);// Sélectionner le premier plan par défaut s'il existe et correspond au type sélectionné\nconst filteredPlans=data.mealPlans.filter(plan=>plan.type===planType);if(filteredPlans.length>0){setSelectedPlan(filteredPlans[0]);}}catch(err){console.error('Erreur lors de la récupération des plans de repas:',err);setError('Impossible de charger les plans de repas.');}finally{setLoading(false);}};// Filtrer les plans par type\nconst filteredPlans=(plannerData===null||plannerData===void 0?void 0:(_plannerData$mealPlan=plannerData.mealPlans)===null||_plannerData$mealPlan===void 0?void 0:_plannerData$mealPlan.filter(plan=>plan.type===planType))||[];// Changer le type de plan sélectionné\nconst handlePlanTypeChange=type=>{setPlanType(type);setSelectedPlan(null);};// Sélectionner un plan\nconst handleSelectPlan=plan=>{setSelectedPlan(plan);};// Ouvrir le dialogue pour ajouter/modifier un repas\nconst handleOpenMealDialog=function(){let meal=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;setCurrentMeal(meal);setOpenMealDialog(true);};// Fermer le dialogue de repas\nconst handleCloseMealDialog=()=>{setOpenMealDialog(false);setCurrentMeal(null);};// Calculer les totaux nutritionnels pour un repas\nconst calculateMealTotals=items=>{if(!items||!items.length)return{calories:0,carbs:0,protein:0,fat:0};return items.reduce((totals,item)=>{return{calories:totals.calories+(item.calories||0),carbs:totals.carbs+(item.carbs||0),protein:totals.protein+(item.protein||0),fat:totals.fat+(item.fat||0)};},{calories:0,carbs:0,protein:0,fat:0});};// Calculer les totaux nutritionnels pour un plan\nconst calculatePlanTotals=meals=>{if(!meals||!meals.length)return{calories:0,carbs:0,protein:0,fat:0};return meals.reduce((totals,meal)=>{const mealTotals=calculateMealTotals(meal.items);return{calories:totals.calories+mealTotals.calories,carbs:totals.carbs+mealTotals.carbs,protein:totals.protein+mealTotals.protein,fat:totals.fat+mealTotals.fat};},{calories:0,carbs:0,protein:0,fat:0});};// Ouvrir le dialogue pour la génération automatique de plan\nconst handleOpenAutoGenerateDialog=()=>{setAutoGenerateDialog(true);};// Fermer le dialogue de génération automatique\nconst handleCloseAutoGenerateDialog=()=>{setAutoGenerateDialog(false);};// Mettre à jour les options de génération\nconst handleGenerationOptionChange=(option,value)=>{setGenerationOptions(prev=>({...prev,[option]:value}));};// Générer automatiquement un plan de repas basé sur les objectifs\nconst handleGenerateMealPlan=async()=>{try{setLoading(true);// Récupérer les données nutritionnelles de base de l'utilisateur si nécessaire\nlet userData=plannerData;if(!userData||!userData.metrics||!userData.goals){userData=await nutritionService.getUserNutritionData(userId);}// Vérifier que les données nécessaires sont disponibles\nif(!userData||!userData.metrics||!userData.goals){throw new Error('Données du profil incomplètes pour générer un plan');}// Calculer les besoins nutritionnels\nconst nutritionNeeds=await nutritionService.calculateNutrition({weight:userData.metrics.weight,height:userData.metrics.height,age:userData.metrics.age||30,gender:userData.metrics.gender||'male',activityLevel:userData.metrics.activityLevel||'moderate',goals:generationOptions.goalType||userData.goals.type});// Générer un nom de plan unique\nconst planName=`Plan ${generationOptions.goalType} (${new Date().toLocaleDateString()})`;// Créer la structure de plan de base\nconst newPlan={id:`plan-${Date.now()}`,name:planName,type:planType,totalCalories:nutritionNeeds.calories,macronutrients:nutritionNeeds.macronutrients,meals:[]};// Répartition des calories par repas selon le nombre de repas souhaité\nconst mealCalorieDistribution={breakfast:0.25,lunch:0.3,dinner:0.25,snack:0.1,'pre-ride':0.15,'during-ride':0.1,'post-ride':0.15};// Adapter la distribution selon le type de jour\nif(planType==='ride-day'){// Jour d'entraînement: inclure repas pré/pendant/post-effort\nconst meals=[];// Petit-déjeuner\nmeals.push({id:`meal-${Date.now()}-1`,type:'breakfast',name:'Petit-déjeuner',time:'07:00',calories:Math.round(nutritionNeeds.calories*mealCalorieDistribution.breakfast),carbs:Math.round(nutritionNeeds.macronutrients.carbs.grams*mealCalorieDistribution.breakfast),protein:Math.round(nutritionNeeds.macronutrients.protein.grams*mealCalorieDistribution.breakfast),fat:Math.round(nutritionNeeds.macronutrients.fat.grams*mealCalorieDistribution.breakfast),items:generateMealItems('breakfast',Math.round(nutritionNeeds.calories*mealCalorieDistribution.breakfast),generationOptions)});// Collation pré-entraînement\nmeals.push({id:`meal-${Date.now()}-2`,type:'pre-ride',name:'Collation pré-entraînement',time:'09:30',calories:Math.round(nutritionNeeds.calories*mealCalorieDistribution['pre-ride']),carbs:Math.round(nutritionNeeds.macronutrients.carbs.grams*mealCalorieDistribution['pre-ride']),protein:Math.round(nutritionNeeds.macronutrients.protein.grams*mealCalorieDistribution['pre-ride']),fat:Math.round(nutritionNeeds.macronutrients.fat.grams*mealCalorieDistribution['pre-ride']),items:generateMealItems('pre-ride',Math.round(nutritionNeeds.calories*mealCalorieDistribution['pre-ride']),generationOptions)});// Nutrition pendant l'effort\nmeals.push({id:`meal-${Date.now()}-3`,type:'during-ride',name:'Nutrition pendant l\\'effort',time:'11:00',calories:Math.round(nutritionNeeds.calories*mealCalorieDistribution['during-ride']),carbs:Math.round(nutritionNeeds.macronutrients.carbs.grams*mealCalorieDistribution['during-ride']),protein:Math.round(nutritionNeeds.macronutrients.protein.grams*mealCalorieDistribution['during-ride']),fat:Math.round(nutritionNeeds.macronutrients.fat.grams*mealCalorieDistribution['during-ride']),items:generateMealItems('during-ride',Math.round(nutritionNeeds.calories*mealCalorieDistribution['during-ride']),generationOptions)});// Récupération post-entraînement\nmeals.push({id:`meal-${Date.now()}-4`,type:'post-ride',name:'Récupération post-entraînement',time:'13:00',calories:Math.round(nutritionNeeds.calories*mealCalorieDistribution['post-ride']),carbs:Math.round(nutritionNeeds.macronutrients.carbs.grams*mealCalorieDistribution['post-ride']),protein:Math.round(nutritionNeeds.macronutrients.protein.grams*mealCalorieDistribution['post-ride']),fat:Math.round(nutritionNeeds.macronutrients.fat.grams*mealCalorieDistribution['post-ride']),items:generateMealItems('post-ride',Math.round(nutritionNeeds.calories*mealCalorieDistribution['post-ride']),generationOptions)});// Déjeuner\nmeals.push({id:`meal-${Date.now()}-5`,type:'lunch',name:'Déjeuner',time:'14:00',calories:Math.round(nutritionNeeds.calories*mealCalorieDistribution.lunch),carbs:Math.round(nutritionNeeds.macronutrients.carbs.grams*mealCalorieDistribution.lunch),protein:Math.round(nutritionNeeds.macronutrients.protein.grams*mealCalorieDistribution.lunch),fat:Math.round(nutritionNeeds.macronutrients.fat.grams*mealCalorieDistribution.lunch),items:generateMealItems('lunch',Math.round(nutritionNeeds.calories*mealCalorieDistribution.lunch),generationOptions)});// Dîner\nmeals.push({id:`meal-${Date.now()}-6`,type:'dinner',name:'Dîner',time:'19:30',calories:Math.round(nutritionNeeds.calories*mealCalorieDistribution.dinner),carbs:Math.round(nutritionNeeds.macronutrients.carbs.grams*mealCalorieDistribution.dinner),protein:Math.round(nutritionNeeds.macronutrients.protein.grams*mealCalorieDistribution.dinner),fat:Math.round(nutritionNeeds.macronutrients.fat.grams*mealCalorieDistribution.dinner),items:generateMealItems('dinner',Math.round(nutritionNeeds.calories*mealCalorieDistribution.dinner),generationOptions)});newPlan.meals=meals;}else{// Jour de récupération: repas standards sans collations spécifiques à l'effort\nconst meals=[];// Petit-déjeuner\nmeals.push({id:`meal-${Date.now()}-1`,type:'breakfast',name:'Petit-déjeuner',time:'08:00',calories:Math.round(nutritionNeeds.calories*mealCalorieDistribution.breakfast),carbs:Math.round(nutritionNeeds.macronutrients.carbs.grams*mealCalorieDistribution.breakfast),protein:Math.round(nutritionNeeds.macronutrients.protein.grams*mealCalorieDistribution.breakfast),fat:Math.round(nutritionNeeds.macronutrients.fat.grams*mealCalorieDistribution.breakfast),items:generateMealItems('breakfast',Math.round(nutritionNeeds.calories*mealCalorieDistribution.breakfast),generationOptions)});// Collation matinale\nmeals.push({id:`meal-${Date.now()}-2`,type:'snack',name:'Collation matinale',time:'10:30',calories:Math.round(nutritionNeeds.calories*mealCalorieDistribution.snack),carbs:Math.round(nutritionNeeds.macronutrients.carbs.grams*mealCalorieDistribution.snack),protein:Math.round(nutritionNeeds.macronutrients.protein.grams*mealCalorieDistribution.snack),fat:Math.round(nutritionNeeds.macronutrients.fat.grams*mealCalorieDistribution.snack),items:generateMealItems('snack',Math.round(nutritionNeeds.calories*mealCalorieDistribution.snack),generationOptions)});// Déjeuner\nmeals.push({id:`meal-${Date.now()}-3`,type:'lunch',name:'Déjeuner',time:'13:00',calories:Math.round(nutritionNeeds.calories*mealCalorieDistribution.lunch),carbs:Math.round(nutritionNeeds.macronutrients.carbs.grams*mealCalorieDistribution.lunch),protein:Math.round(nutritionNeeds.macronutrients.protein.grams*mealCalorieDistribution.lunch),fat:Math.round(nutritionNeeds.macronutrients.fat.grams*mealCalorieDistribution.lunch),items:generateMealItems('lunch',Math.round(nutritionNeeds.calories*mealCalorieDistribution.lunch),generationOptions)});// Collation après-midi\nmeals.push({id:`meal-${Date.now()}-4`,type:'snack',name:'Collation après-midi',time:'16:30',calories:Math.round(nutritionNeeds.calories*mealCalorieDistribution.snack),carbs:Math.round(nutritionNeeds.macronutrients.carbs.grams*mealCalorieDistribution.snack),protein:Math.round(nutritionNeeds.macronutrients.protein.grams*mealCalorieDistribution.snack),fat:Math.round(nutritionNeeds.macronutrients.fat.grams*mealCalorieDistribution.snack),items:generateMealItems('snack',Math.round(nutritionNeeds.calories*mealCalorieDistribution.snack),generationOptions)});// Dîner\nmeals.push({id:`meal-${Date.now()}-5`,type:'dinner',name:'Dîner',time:'19:30',calories:Math.round(nutritionNeeds.calories*mealCalorieDistribution.dinner),carbs:Math.round(nutritionNeeds.macronutrients.carbs.grams*mealCalorieDistribution.dinner),protein:Math.round(nutritionNeeds.macronutrients.protein.grams*mealCalorieDistribution.dinner),fat:Math.round(nutritionNeeds.macronutrients.fat.grams*mealCalorieDistribution.dinner),items:generateMealItems('dinner',Math.round(nutritionNeeds.calories*mealCalorieDistribution.dinner),generationOptions)});newPlan.meals=meals;}// Mettre à jour les données avec le nouveau plan\nconst updatedData={...plannerData,mealPlans:[...(plannerData.mealPlans||[]),newPlan]};setPlannerData(updatedData);setSelectedPlan(newPlan);setAutoGenerateDialog(false);// Simuler la sauvegarde en backend (à implémenter avec un vrai service)\nconsole.log('Nouveau plan de repas généré:',newPlan);}catch(err){console.error('Erreur lors de la génération du plan de repas:',err);setError('Impossible de générer le plan de repas. Vérifiez que votre profil est complet.');}finally{setLoading(false);}};// Générer des éléments de repas en fonction du type et de l'objectif calorique\nconst generateMealItems=(mealType,targetCalories,options)=>{// Base de données simplifiée d'aliments par type de repas\nconst foodDatabase={breakfast:[{name:'Flocons d\\'avoine',quantity:'60g',calories:240,carbs:40,protein:8,fat:5},{name:'Pain complet',quantity:'2 tranches',calories:180,carbs:30,protein:8,fat:2},{name:'Œufs brouillés',quantity:'2 œufs',calories:160,carbs:2,protein:14,fat:10},{name:'Yaourt grec',quantity:'200g',calories:150,carbs:6,protein:15,fat:8},{name:'Banane',quantity:'1 moyenne',calories:100,carbs:25,protein:1,fat:0},{name:'Lait d\\'amande',quantity:'250ml',calories:80,carbs:3,protein:1,fat:5}],'pre-ride':[{name:'Banane',quantity:'1 moyenne',calories:100,carbs:25,protein:1,fat:0},{name:'Barre de céréales',quantity:'1 barre',calories:150,carbs:25,protein:5,fat:3},{name:'Pain aux raisins',quantity:'2 tranches',calories:180,carbs:35,protein:6,fat:2},{name:'Compote de pommes',quantity:'1 pot',calories:80,carbs:20,protein:0,fat:0}],'during-ride':[{name:'Gel énergétique',quantity:'1 sachet',calories:100,carbs:25,protein:0,fat:0},{name:'Boisson isotonique',quantity:'500ml',calories:120,carbs:30,protein:0,fat:0},{name:'Barre énergétique',quantity:'1 barre',calories:180,carbs:40,protein:2,fat:1},{name:'Banane',quantity:'1 moyenne',calories:100,carbs:25,protein:1,fat:0},{name:'Abricots secs',quantity:'30g',calories:80,carbs:18,protein:1,fat:0}],'post-ride':[{name:'Shake protéiné',quantity:'1 portion',calories:180,carbs:15,protein:25,fat:2},{name:'Yaourt grec avec miel',quantity:'200g + 15g',calories:200,carbs:25,protein:15,fat:5},{name:'Sandwich jambon fromage',quantity:'1 petit',calories:300,carbs:30,protein:20,fat:10},{name:'Lait chocolaté',quantity:'250ml',calories:180,carbs:26,protein:8,fat:5}],lunch:[{name:'Pâtes au poulet et légumes',quantity:'300g',calories:450,carbs:60,protein:30,fat:10},{name:'Salade de quinoa au saumon',quantity:'250g',calories:400,carbs:40,protein:25,fat:15},{name:'Bowl de riz, légumineuses et légumes',quantity:'350g',calories:500,carbs:70,protein:20,fat:12},{name:'Wrap au poulet et crudités',quantity:'1 grand',calories:350,carbs:40,protein:25,fat:10}],dinner:[{name:'Poisson et légumes vapeur',quantity:'300g',calories:350,carbs:20,protein:30,fat:15},{name:'Poulet aux légumes et quinoa',quantity:'350g',calories:450,carbs:40,protein:35,fat:12},{name:'Omelette aux légumes et pommes de terre',quantity:'300g',calories:400,carbs:30,protein:25,fat:20},{name:'Soupe de légumes et croûtons',quantity:'400ml',calories:250,carbs:30,protein:10,fat:8}],snack:[{name:'Yaourt et fruits',quantity:'150g + 100g',calories:150,carbs:25,protein:8,fat:2},{name:'Poignée de fruits secs et noix',quantity:'30g',calories:180,carbs:15,protein:5,fat:10},{name:'Barre protéinée',quantity:'1 barre',calories:200,carbs:20,protein:15,fat:7},{name:'Smoothie fruits et lait',quantity:'250ml',calories:160,carbs:30,protein:5,fat:2}]};// Adapter la sélection selon les préférences et objectifs\nconst availableFoods=foodDatabase[mealType]||[];let remainingCalories=targetCalories;const selectedItems=[];// Sélectionner des aliments jusqu'à atteindre l'objectif calorique\nwhile(remainingCalories>50&&availableFoods.length>0){// Sélectionner aléatoirement un aliment\nconst randomIndex=Math.floor(Math.random()*availableFoods.length);const selectedFood={...availableFoods[randomIndex]};// Ajuster la quantité si nécessaire pour ne pas dépasser l'objectif calorique\nif(selectedFood.calories>remainingCalories){const ratio=remainingCalories/selectedFood.calories;selectedFood.quantity=`${Math.round(parseInt(selectedFood.quantity)*ratio)}g`;selectedFood.calories=Math.round(selectedFood.calories*ratio);selectedFood.carbs=Math.round(selectedFood.carbs*ratio);selectedFood.protein=Math.round(selectedFood.protein*ratio);selectedFood.fat=Math.round(selectedFood.fat*ratio);}// Ajouter l'aliment à la sélection\nselectedItems.push({id:`item-${Date.now()}-${selectedItems.length}`,...selectedFood});remainingCalories-=selectedFood.calories;// Éviter de sélectionner à nouveau le même aliment\navailableFoods.splice(randomIndex,1);}return selectedItems;};// Rendu de la liste des plans\nconst renderPlans=()=>{return/*#__PURE__*/_jsxs(Grid,{container:true,spacing:2,sx:{mb:4},children:[filteredPlans.map(plan=>{var _plan$meals;return/*#__PURE__*/_jsx(Grid,{item:true,xs:12,sm:6,md:4,children:/*#__PURE__*/_jsxs(Card,{variant:selectedPlan&&selectedPlan.id===plan.id?'elevation':'outlined',elevation:selectedPlan&&selectedPlan.id===plan.id?3:1,sx:{cursor:'pointer',borderColor:selectedPlan&&selectedPlan.id===plan.id?'primary.main':'divider'},onClick:()=>handleSelectPlan(plan),children:[/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",component:\"div\",children:plan.name}),/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',mb:1},children:[/*#__PURE__*/_jsx(DirectionsBike,{fontSize:\"small\",color:\"primary\",sx:{mr:1}}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",children:plan.type==='ride-day'?'Jour d\\'entraînement':'Jour de récupération'})]}),/*#__PURE__*/_jsx(Divider,{sx:{my:1}}),/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[((_plan$meals=plan.meals)===null||_plan$meals===void 0?void 0:_plan$meals.length)||0,\" repas \\u2022 \",calculatePlanTotals(plan.meals).calories,\" kcal\"]})]}),/*#__PURE__*/_jsxs(CardActions,{children:[/*#__PURE__*/_jsx(Button,{size:\"small\",startIcon:/*#__PURE__*/_jsx(Edit,{}),onClick:e=>{e.stopPropagation();// Logique d'édition du plan\n},children:\"Modifier\"}),/*#__PURE__*/_jsx(Button,{size:\"small\",startIcon:plan.favorite?/*#__PURE__*/_jsx(Favorite,{color:\"error\"}):/*#__PURE__*/_jsx(FavoriteBorder,{}),onClick:e=>{e.stopPropagation();// Logique pour marquer comme favori\n},children:plan.favorite?'Favori':'Ajouter aux favoris'})]})]})},plan.id);}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,sm:6,md:4,children:/*#__PURE__*/_jsx(Card,{variant:\"outlined\",sx:{height:'100%',display:'flex',flexDirection:'column',justifyContent:'center',alignItems:'center',cursor:'pointer',borderStyle:'dashed'},onClick:()=>{// Logique pour ajouter un nouveau plan\n},children:/*#__PURE__*/_jsxs(CardContent,{sx:{textAlign:'center'},children:[/*#__PURE__*/_jsx(Add,{fontSize:\"large\",color:\"primary\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body1\",sx:{mt:1},children:\"Cr\\xE9er un nouveau plan\"})]})})})]});};// Rendu du détail d'un plan sélectionné\nconst renderPlanDetails=()=>{var _selectedPlan$meals;if(!selectedPlan)return null;const planTotals=calculatePlanTotals(selectedPlan.meals);return/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsxs(Paper,{elevation:0,sx:{p:2,mb:3,bgcolor:'background.default'},children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',justifyContent:'space-between',alignItems:'center',mb:2},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",children:selectedPlan.name}),/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(IconButton,{size:\"small\",sx:{mr:1},title:\"Imprimer\",children:/*#__PURE__*/_jsx(Print,{})}),/*#__PURE__*/_jsx(IconButton,{size:\"small\",sx:{mr:1},title:\"Partager\",children:/*#__PURE__*/_jsx(Share,{})})]})]}),/*#__PURE__*/_jsxs(Grid,{container:true,spacing:3,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:8,children:/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",paragraph:true,children:[\"Ce plan est con\\xE7u pour les \",selectedPlan.type==='ride-day'?'jours d\\'entraînement avec une consommation adaptée avant, pendant et après l\\'effort.':'jours de récupération pour optimiser la régénération musculaire et le repos.']})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:4,children:/*#__PURE__*/_jsxs(Stack,{direction:\"row\",spacing:2,justifyContent:\"flex-end\",children:[/*#__PURE__*/_jsxs(Box,{textAlign:\"center\",children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:planTotals.calories}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",children:\"kcal\"})]}),/*#__PURE__*/_jsx(Divider,{orientation:\"vertical\",flexItem:true}),/*#__PURE__*/_jsxs(Box,{textAlign:\"center\",children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h6\",children:[planTotals.carbs,\"g\"]}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",children:\"Glucides\"})]}),/*#__PURE__*/_jsx(Divider,{orientation:\"vertical\",flexItem:true}),/*#__PURE__*/_jsxs(Box,{textAlign:\"center\",children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h6\",children:[planTotals.protein,\"g\"]}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",children:\"Prot\\xE9ines\"})]}),/*#__PURE__*/_jsx(Divider,{orientation:\"vertical\",flexItem:true}),/*#__PURE__*/_jsxs(Box,{textAlign:\"center\",children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h6\",children:[planTotals.fat,\"g\"]}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",children:\"Lipides\"})]})]})})]})]}),(_selectedPlan$meals=selectedPlan.meals)===null||_selectedPlan$meals===void 0?void 0:_selectedPlan$meals.map((meal,index)=>{var _meal$items;const mealType=mealTypes.find(type=>type.id===meal.type)||{label:meal.type,icon:/*#__PURE__*/_jsx(Restaurant,{})};const mealTotals=calculateMealTotals(meal.items);return/*#__PURE__*/_jsxs(Paper,{elevation:1,sx:{p:2,mb:2},children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',justifyContent:'space-between',alignItems:'center',mb:2},children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center'},children:[mealType.icon,/*#__PURE__*/_jsx(Typography,{variant:\"h6\",sx:{ml:1},children:mealType.label})]}),/*#__PURE__*/_jsx(Box,{children:/*#__PURE__*/_jsx(Button,{size:\"small\",startIcon:/*#__PURE__*/_jsx(Edit,{}),onClick:()=>handleOpenMealDialog(meal),children:\"Modifier\"})})]}),/*#__PURE__*/_jsx(TableContainer,{children:/*#__PURE__*/_jsxs(Table,{size:\"small\",children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:\"Aliment\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Quantit\\xE9\"}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:\"Calories\"}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:\"G\"}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:\"P\"}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:\"L\"})]})}),/*#__PURE__*/_jsxs(TableBody,{children:[(_meal$items=meal.items)===null||_meal$items===void 0?void 0:_meal$items.map((item,itemIndex)=>/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:item.name}),/*#__PURE__*/_jsx(TableCell,{children:item.quantity}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:item.calories}),/*#__PURE__*/_jsxs(TableCell,{align:\"right\",children:[item.carbs,\"g\"]}),/*#__PURE__*/_jsxs(TableCell,{align:\"right\",children:[item.protein,\"g\"]}),/*#__PURE__*/_jsxs(TableCell,{align:\"right\",children:[item.fat,\"g\"]})]},itemIndex)),/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{colSpan:2,children:/*#__PURE__*/_jsx(\"strong\",{children:\"Total\"})}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:/*#__PURE__*/_jsx(\"strong\",{children:mealTotals.calories})}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:/*#__PURE__*/_jsxs(\"strong\",{children:[mealTotals.carbs,\"g\"]})}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:/*#__PURE__*/_jsxs(\"strong\",{children:[mealTotals.protein,\"g\"]})}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:/*#__PURE__*/_jsxs(\"strong\",{children:[mealTotals.fat,\"g\"]})})]})]})]})})]},index);}),/*#__PURE__*/_jsx(Box,{sx:{display:'flex',justifyContent:'center',mt:3},children:/*#__PURE__*/_jsx(Button,{variant:\"outlined\",startIcon:/*#__PURE__*/_jsx(Add,{}),onClick:()=>handleOpenMealDialog(),children:\"Ajouter un repas\"})})]});};// Rendu du dialogue pour ajouter/modifier un repas\nconst renderMealDialog=()=>{var _currentMeal$items;return/*#__PURE__*/_jsxs(Dialog,{open:openMealDialog,onClose:handleCloseMealDialog,maxWidth:\"md\",fullWidth:true,children:[/*#__PURE__*/_jsx(DialogTitle,{children:currentMeal?'Modifier le repas':'Ajouter un repas'}),/*#__PURE__*/_jsx(DialogContent,{dividers:true,children:/*#__PURE__*/_jsxs(Grid,{container:true,spacing:2,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(InputLabel,{id:\"meal-type-label\",children:\"Type de repas\"}),/*#__PURE__*/_jsx(Select,{labelId:\"meal-type-label\",value:(currentMeal===null||currentMeal===void 0?void 0:currentMeal.type)||'',label:\"Type de repas\"// onChange={...}\n,children:mealTypes.map(type=>/*#__PURE__*/_jsx(MenuItem,{value:type.id,children:/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center'},children:[type.icon,/*#__PURE__*/_jsx(Typography,{sx:{ml:1},children:type.label})]})},type.id))})]})}),/*#__PURE__*/_jsxs(Grid,{item:true,xs:12,children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle1\",gutterBottom:true,children:\"Aliments\"}),currentMeal===null||currentMeal===void 0?void 0:(_currentMeal$items=currentMeal.items)===null||_currentMeal$items===void 0?void 0:_currentMeal$items.map((item,index)=>/*#__PURE__*/_jsx(Paper,{variant:\"outlined\",sx:{p:1,mb:1},children:/*#__PURE__*/_jsxs(Grid,{container:true,spacing:2,alignItems:\"center\",children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:5,children:/*#__PURE__*/_jsx(Typography,{variant:\"body2\",children:item.name})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:3,children:/*#__PURE__*/_jsx(Typography,{variant:\"body2\",children:item.quantity})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:3,children:/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[item.calories,\" kcal\"]})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:1,children:/*#__PURE__*/_jsx(IconButton,{size:\"small\",color:\"error\",children:/*#__PURE__*/_jsx(Delete,{fontSize:\"small\"})})})]})},index)),/*#__PURE__*/_jsxs(Box,{sx:{border:'1px dashed',borderColor:'divider',p:2,mt:2},children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",gutterBottom:true,children:\"Ajouter un aliment\"}),/*#__PURE__*/_jsxs(Grid,{container:true,spacing:2,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,sm:6,children:/*#__PURE__*/_jsx(TextField,{label:\"Nom de l'aliment\",size:\"small\",fullWidth:true// value={...}\n// onChange={...}\n})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,sm:6,children:/*#__PURE__*/_jsx(TextField,{label:\"Quantit\\xE9\",size:\"small\",fullWidth:true// value={...}\n// onChange={...}\n})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,sm:3,children:/*#__PURE__*/_jsx(TextField,{label:\"Calories\",size:\"small\",fullWidth:true,type:\"number\"// value={...}\n// onChange={...}\n})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,sm:3,children:/*#__PURE__*/_jsx(TextField,{label:\"Glucides (g)\",size:\"small\",fullWidth:true,type:\"number\"// value={...}\n// onChange={...}\n})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,sm:3,children:/*#__PURE__*/_jsx(TextField,{label:\"Prot\\xE9ines (g)\",size:\"small\",fullWidth:true,type:\"number\"// value={...}\n// onChange={...}\n})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,sm:3,children:/*#__PURE__*/_jsx(TextField,{label:\"Lipides (g)\",size:\"small\",fullWidth:true,type:\"number\"// value={...}\n// onChange={...}\n})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",startIcon:/*#__PURE__*/_jsx(Add,{}),children:\"Ajouter\"})})]})]})]})]})}),/*#__PURE__*/_jsxs(DialogActions,{children:[/*#__PURE__*/_jsx(Button,{onClick:handleCloseMealDialog,children:\"Annuler\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:handleCloseMealDialog,children:currentMeal?'Enregistrer les modifications':'Ajouter le repas'})]})]});};// Rendu du dialogue de génération automatique\nconst renderAutoGenerateDialog=()=>{return/*#__PURE__*/_jsxs(Dialog,{open:autoGenerateDialog,onClose:handleCloseAutoGenerateDialog,maxWidth:\"md\",fullWidth:true,children:[/*#__PURE__*/_jsx(DialogTitle,{children:\"G\\xE9n\\xE9rer un plan de repas automatiquement\"}),/*#__PURE__*/_jsx(DialogContent,{children:/*#__PURE__*/_jsxs(Grid,{container:true,spacing:3,sx:{mt:1},children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",paragraph:true,children:\"Configurez les options pour g\\xE9n\\xE9rer un plan de repas personnalis\\xE9 qui correspond \\xE0 vos objectifs et pr\\xE9f\\xE9rences.\"})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,sm:6,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Objectif\"}),/*#__PURE__*/_jsxs(Select,{value:generationOptions.goalType,onChange:e=>handleGenerationOptionChange('goalType',e.target.value),label:\"Objectif\",children:[/*#__PURE__*/_jsx(MenuItem,{value:\"performance\",children:\"Performance\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"weight-loss\",children:\"Perte de poids\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"maintenance\",children:\"Maintenance\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"recovery\",children:\"R\\xE9cup\\xE9ration\"})]}),/*#__PURE__*/_jsx(FormHelperText,{children:\"S\\xE9lectionnez votre objectif principal\"})]})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,sm:6,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Nombre de repas\"}),/*#__PURE__*/_jsxs(Select,{value:generationOptions.mealCount,onChange:e=>handleGenerationOptionChange('mealCount',e.target.value),label:\"Nombre de repas\",children:[/*#__PURE__*/_jsx(MenuItem,{value:3,children:\"3 repas par jour\"}),/*#__PURE__*/_jsx(MenuItem,{value:4,children:\"4 repas par jour\"}),/*#__PURE__*/_jsx(MenuItem,{value:5,children:\"5 repas par jour\"}),/*#__PURE__*/_jsx(MenuItem,{value:6,children:\"6 repas par jour\"})]}),/*#__PURE__*/_jsx(FormHelperText,{children:\"Incluant repas principaux et collations\"})]})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Style alimentaire\"}),/*#__PURE__*/_jsxs(Select,{value:generationOptions.preferences,onChange:e=>handleGenerationOptionChange('preferences',e.target.value),label:\"Style alimentaire\",children:[/*#__PURE__*/_jsx(MenuItem,{value:\"balanced\",children:\"\\xC9quilibr\\xE9\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"high-carb\",children:\"Riche en glucides\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"high-protein\",children:\"Riche en prot\\xE9ines\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"vegetarian\",children:\"V\\xE9g\\xE9tarien\"})]}),/*#__PURE__*/_jsx(FormHelperText,{children:\"Adaptez la distribution des macronutriments selon vos pr\\xE9f\\xE9rences\"})]})}),/*#__PURE__*/_jsxs(Grid,{item:true,xs:12,children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",gutterBottom:true,children:\"Allergies ou intol\\xE9rances\"}),/*#__PURE__*/_jsx(Box,{sx:{display:'flex',flexWrap:'wrap',gap:1},children:['Gluten','Lactose','Arachides','Fruits à coque','Soja'].map(allergen=>/*#__PURE__*/_jsx(Chip,{label:allergen,onClick:()=>{const allergies=[...generationOptions.allergies];if(allergies.includes(allergen)){const index=allergies.indexOf(allergen);allergies.splice(index,1);}else{allergies.push(allergen);}handleGenerationOptionChange('allergies',allergies);},color:generationOptions.allergies.includes(allergen)?'primary':'default',variant:generationOptions.allergies.includes(allergen)?'filled':'outlined'},allergen))})]})]})}),/*#__PURE__*/_jsxs(DialogActions,{children:[/*#__PURE__*/_jsx(Button,{onClick:handleCloseAutoGenerateDialog,children:\"Annuler\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:handleGenerateMealPlan,disabled:loading,children:loading?/*#__PURE__*/_jsx(CircularProgress,{size:24}):'Générer mon plan'})]})]});};// Rendu principal du composant\nreturn/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsxs(Paper,{sx:{p:2,mb:4},children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',justifyContent:'space-between',alignItems:'center',mb:2},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",children:\"Planificateur de repas\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",startIcon:/*#__PURE__*/_jsx(Add,{}),onClick:handleOpenAutoGenerateDialog,children:\"G\\xE9n\\xE9rer un plan\"})]}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",paragraph:true,children:\"Cr\\xE9ez et g\\xE9rez vos plans de repas pour optimiser votre alimentation en fonction de vos objectifs et de vos entra\\xEEnements.\"}),/*#__PURE__*/_jsxs(Box,{sx:{mb:2},children:[/*#__PURE__*/_jsx(Button,{variant:planType==='ride-day'?'contained':'outlined',onClick:()=>handlePlanTypeChange('ride-day'),sx:{mr:2},startIcon:/*#__PURE__*/_jsx(DirectionsBike,{}),children:\"Jours d'entra\\xEEnement\"}),/*#__PURE__*/_jsx(Button,{variant:planType==='recovery-day'?'contained':'outlined',onClick:()=>handlePlanTypeChange('recovery-day'),startIcon:/*#__PURE__*/_jsx(Restaurant,{}),children:\"Jours de r\\xE9cup\\xE9ration\"})]})]}),loading?/*#__PURE__*/_jsx(Box,{sx:{display:'flex',justifyContent:'center',my:4},children:/*#__PURE__*/_jsx(CircularProgress,{})}):error?/*#__PURE__*/_jsx(Alert,{severity:\"error\",sx:{mb:3},children:error}):/*#__PURE__*/_jsxs(_Fragment,{children:[!plannerData||!plannerData.mealPlans||plannerData.mealPlans.length===0?/*#__PURE__*/_jsx(Alert,{severity:\"info\",sx:{mb:3},children:\"Aucun plan de repas disponible. Cr\\xE9ez votre premier plan en cliquant sur \\\"G\\xE9n\\xE9rer un plan\\\".\"}):/*#__PURE__*/_jsxs(_Fragment,{children:[renderPlans(),selectedPlan&&renderPlanDetails()]}),renderMealDialog(),renderAutoGenerateDialog()]})]});};export default MealPlanner;","map":{"version":3,"names":["React","useState","useEffect","Grid","Paper","Typography","Box","Button","Card","CardContent","CardActions","Divider","TextField","Select","MenuItem","FormControl","InputLabel","Chip","IconButton","CircularProgress","Alert","Dialog","DialogTitle","DialogContent","DialogActions","List","ListItem","ListItemText","ListItemSecondaryAction","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","Stack","Add","Delete","Edit","Favorite","FavoriteBorder","DirectionsBike","Restaurant","LocalDining","Coffee","FilterList","CheckCircle","Print","Share","nutritionService","useAuth","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","MealPlanner","_ref","_plannerData$mealPlan","nutritionData","userId","user","loading","setLoading","error","setError","plannerData","setPlannerData","selectedPlan","setSelectedPlan","planType","setPlanType","openMealDialog","setOpenMealDialog","currentMeal","setCurrentMeal","searchTerm","setSearchTerm","autoGenerateDialog","setAutoGenerateDialog","generationOptions","setGenerationOptions","goalType","mealCount","allergies","preferences","mealTypes","id","label","icon","fetchMealPlans","data","getUserNutritionData","mealPlans","Error","filteredPlans","filter","plan","type","length","err","console","handlePlanTypeChange","handleSelectPlan","handleOpenMealDialog","meal","arguments","undefined","handleCloseMealDialog","calculateMealTotals","items","calories","carbs","protein","fat","reduce","totals","item","calculatePlanTotals","meals","mealTotals","handleOpenAutoGenerateDialog","handleCloseAutoGenerateDialog","handleGenerationOptionChange","option","value","prev","handleGenerateMealPlan","userData","metrics","goals","nutritionNeeds","calculateNutrition","weight","height","age","gender","activityLevel","planName","Date","toLocaleDateString","newPlan","now","name","totalCalories","macronutrients","mealCalorieDistribution","breakfast","lunch","dinner","snack","push","time","Math","round","grams","generateMealItems","updatedData","log","mealType","targetCalories","options","foodDatabase","quantity","availableFoods","remainingCalories","selectedItems","randomIndex","floor","random","selectedFood","ratio","parseInt","splice","renderPlans","container","spacing","sx","mb","children","map","_plan$meals","xs","sm","md","variant","elevation","cursor","borderColor","onClick","component","display","alignItems","fontSize","color","mr","my","size","startIcon","e","stopPropagation","favorite","flexDirection","justifyContent","borderStyle","textAlign","mt","renderPlanDetails","_selectedPlan$meals","planTotals","p","bgcolor","title","paragraph","direction","orientation","flexItem","index","_meal$items","find","ml","align","itemIndex","colSpan","renderMealDialog","_currentMeal$items","open","onClose","maxWidth","fullWidth","dividers","labelId","gutterBottom","border","renderAutoGenerateDialog","onChange","target","FormHelperText","flexWrap","gap","allergen","includes","indexOf","disabled","severity"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/components/nutrition/MealPlanner.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Grid,\n  Paper,\n  Typography,\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardActions,\n  Divider,\n  TextField,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Chip,\n  IconButton,\n  CircularProgress,\n  Alert,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Stack\n} from '@mui/material';\nimport {\n  Add,\n  Delete,\n  Edit,\n  Favorite,\n  FavoriteBorder,\n  DirectionsBike,\n  Restaurant,\n  LocalDining,\n  Coffee,\n  FilterList,\n  CheckCircle,\n  Print,\n  Share\n} from '@mui/icons-material';\nimport nutritionService from '../../services/nutritionService';\nimport { useAuth } from '../../contexts/AuthContext';\n\n/**\n * Composant de planification des repas pour les cyclistes\n * Permet de créer, modifier et gérer des plans de repas adaptés aux besoins nutritionnels\n */\nconst MealPlanner = ({ nutritionData, userId }) => {\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [plannerData, setPlannerData] = useState(null);\n  const [selectedPlan, setSelectedPlan] = useState(null);\n  const [planType, setPlanType] = useState('ride-day');\n  const [openMealDialog, setOpenMealDialog] = useState(false);\n  const [currentMeal, setCurrentMeal] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [autoGenerateDialog, setAutoGenerateDialog] = useState(false);\n  const [generationOptions, setGenerationOptions] = useState({\n    goalType: 'performance',\n    mealCount: 5,\n    allergies: [],\n    preferences: 'balanced'\n  });\n  const [mealTypes] = useState([\n    { id: 'breakfast', label: 'Petit-déjeuner', icon: <Coffee /> },\n    { id: 'pre-ride', label: 'Avant-effort', icon: <DirectionsBike /> },\n    { id: 'during-ride', label: 'Pendant l\\'effort', icon: <DirectionsBike /> },\n    { id: 'post-ride', label: 'Après-effort', icon: <DirectionsBike /> },\n    { id: 'lunch', label: 'Déjeuner', icon: <Restaurant /> },\n    { id: 'dinner', label: 'Dîner', icon: <LocalDining /> },\n    { id: 'snack', label: 'Collation', icon: <Restaurant /> }\n  ]);\n\n  // Utiliser les données passées en props ou les récupérer si non disponibles\n  useEffect(() => {\n    if (nutritionData) {\n      setPlannerData(nutritionData);\n    } else {\n      fetchMealPlans();\n    }\n  }, [nutritionData, userId]);\n\n  // Récupérer les plans de repas\n  const fetchMealPlans = async () => {\n    if (!userId) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await nutritionService.getUserNutritionData(userId);\n      \n      if (!data || !data.mealPlans) {\n        throw new Error('Données de plans de repas invalides');\n      }\n      \n      setPlannerData(data);\n      \n      // Sélectionner le premier plan par défaut s'il existe et correspond au type sélectionné\n      const filteredPlans = data.mealPlans.filter(plan => plan.type === planType);\n      if (filteredPlans.length > 0) {\n        setSelectedPlan(filteredPlans[0]);\n      }\n    } catch (err) {\n      console.error('Erreur lors de la récupération des plans de repas:', err);\n      setError('Impossible de charger les plans de repas.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Filtrer les plans par type\n  const filteredPlans = plannerData?.mealPlans?.filter(plan => plan.type === planType) || [];\n\n  // Changer le type de plan sélectionné\n  const handlePlanTypeChange = (type) => {\n    setPlanType(type);\n    setSelectedPlan(null);\n  };\n\n  // Sélectionner un plan\n  const handleSelectPlan = (plan) => {\n    setSelectedPlan(plan);\n  };\n\n  // Ouvrir le dialogue pour ajouter/modifier un repas\n  const handleOpenMealDialog = (meal = null) => {\n    setCurrentMeal(meal);\n    setOpenMealDialog(true);\n  };\n\n  // Fermer le dialogue de repas\n  const handleCloseMealDialog = () => {\n    setOpenMealDialog(false);\n    setCurrentMeal(null);\n  };\n\n  // Calculer les totaux nutritionnels pour un repas\n  const calculateMealTotals = (items) => {\n    if (!items || !items.length) return { calories: 0, carbs: 0, protein: 0, fat: 0 };\n    \n    return items.reduce((totals, item) => {\n      return {\n        calories: totals.calories + (item.calories || 0),\n        carbs: totals.carbs + (item.carbs || 0),\n        protein: totals.protein + (item.protein || 0),\n        fat: totals.fat + (item.fat || 0)\n      };\n    }, { calories: 0, carbs: 0, protein: 0, fat: 0 });\n  };\n\n  // Calculer les totaux nutritionnels pour un plan\n  const calculatePlanTotals = (meals) => {\n    if (!meals || !meals.length) return { calories: 0, carbs: 0, protein: 0, fat: 0 };\n    \n    return meals.reduce((totals, meal) => {\n      const mealTotals = calculateMealTotals(meal.items);\n      return {\n        calories: totals.calories + mealTotals.calories,\n        carbs: totals.carbs + mealTotals.carbs,\n        protein: totals.protein + mealTotals.protein,\n        fat: totals.fat + mealTotals.fat\n      };\n    }, { calories: 0, carbs: 0, protein: 0, fat: 0 });\n  };\n\n  // Ouvrir le dialogue pour la génération automatique de plan\n  const handleOpenAutoGenerateDialog = () => {\n    setAutoGenerateDialog(true);\n  };\n\n  // Fermer le dialogue de génération automatique\n  const handleCloseAutoGenerateDialog = () => {\n    setAutoGenerateDialog(false);\n  };\n\n  // Mettre à jour les options de génération\n  const handleGenerationOptionChange = (option, value) => {\n    setGenerationOptions(prev => ({\n      ...prev,\n      [option]: value\n    }));\n  };\n\n  // Générer automatiquement un plan de repas basé sur les objectifs\n  const handleGenerateMealPlan = async () => {\n    try {\n      setLoading(true);\n      \n      // Récupérer les données nutritionnelles de base de l'utilisateur si nécessaire\n      let userData = plannerData;\n      if (!userData || !userData.metrics || !userData.goals) {\n        userData = await nutritionService.getUserNutritionData(userId);\n      }\n      \n      // Vérifier que les données nécessaires sont disponibles\n      if (!userData || !userData.metrics || !userData.goals) {\n        throw new Error('Données du profil incomplètes pour générer un plan');\n      }\n      \n      // Calculer les besoins nutritionnels\n      const nutritionNeeds = await nutritionService.calculateNutrition({\n        weight: userData.metrics.weight,\n        height: userData.metrics.height,\n        age: userData.metrics.age || 30,\n        gender: userData.metrics.gender || 'male',\n        activityLevel: userData.metrics.activityLevel || 'moderate',\n        goals: generationOptions.goalType || userData.goals.type\n      });\n      \n      // Générer un nom de plan unique\n      const planName = `Plan ${generationOptions.goalType} (${new Date().toLocaleDateString()})`;\n      \n      // Créer la structure de plan de base\n      const newPlan = {\n        id: `plan-${Date.now()}`,\n        name: planName,\n        type: planType,\n        totalCalories: nutritionNeeds.calories,\n        macronutrients: nutritionNeeds.macronutrients,\n        meals: []\n      };\n      \n      // Répartition des calories par repas selon le nombre de repas souhaité\n      const mealCalorieDistribution = {\n        breakfast: 0.25,\n        lunch: 0.3,\n        dinner: 0.25,\n        snack: 0.1,\n        'pre-ride': 0.15,\n        'during-ride': 0.1,\n        'post-ride': 0.15\n      };\n      \n      // Adapter la distribution selon le type de jour\n      if (planType === 'ride-day') {\n        // Jour d'entraînement: inclure repas pré/pendant/post-effort\n        const meals = [];\n        \n        // Petit-déjeuner\n        meals.push({\n          id: `meal-${Date.now()}-1`,\n          type: 'breakfast',\n          name: 'Petit-déjeuner',\n          time: '07:00',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.breakfast),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.breakfast),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.breakfast),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.breakfast),\n          items: generateMealItems('breakfast', Math.round(nutritionNeeds.calories * mealCalorieDistribution.breakfast), generationOptions)\n        });\n        \n        // Collation pré-entraînement\n        meals.push({\n          id: `meal-${Date.now()}-2`,\n          type: 'pre-ride',\n          name: 'Collation pré-entraînement',\n          time: '09:30',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution['pre-ride']),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution['pre-ride']),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution['pre-ride']),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution['pre-ride']),\n          items: generateMealItems('pre-ride', Math.round(nutritionNeeds.calories * mealCalorieDistribution['pre-ride']), generationOptions)\n        });\n        \n        // Nutrition pendant l'effort\n        meals.push({\n          id: `meal-${Date.now()}-3`,\n          type: 'during-ride',\n          name: 'Nutrition pendant l\\'effort',\n          time: '11:00',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution['during-ride']),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution['during-ride']),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution['during-ride']),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution['during-ride']),\n          items: generateMealItems('during-ride', Math.round(nutritionNeeds.calories * mealCalorieDistribution['during-ride']), generationOptions)\n        });\n        \n        // Récupération post-entraînement\n        meals.push({\n          id: `meal-${Date.now()}-4`,\n          type: 'post-ride',\n          name: 'Récupération post-entraînement',\n          time: '13:00',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution['post-ride']),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution['post-ride']),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution['post-ride']),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution['post-ride']),\n          items: generateMealItems('post-ride', Math.round(nutritionNeeds.calories * mealCalorieDistribution['post-ride']), generationOptions)\n        });\n        \n        // Déjeuner\n        meals.push({\n          id: `meal-${Date.now()}-5`,\n          type: 'lunch',\n          name: 'Déjeuner',\n          time: '14:00',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.lunch),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.lunch),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.lunch),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.lunch),\n          items: generateMealItems('lunch', Math.round(nutritionNeeds.calories * mealCalorieDistribution.lunch), generationOptions)\n        });\n        \n        // Dîner\n        meals.push({\n          id: `meal-${Date.now()}-6`,\n          type: 'dinner',\n          name: 'Dîner',\n          time: '19:30',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.dinner),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.dinner),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.dinner),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.dinner),\n          items: generateMealItems('dinner', Math.round(nutritionNeeds.calories * mealCalorieDistribution.dinner), generationOptions)\n        });\n        \n        newPlan.meals = meals;\n      } else {\n        // Jour de récupération: repas standards sans collations spécifiques à l'effort\n        const meals = [];\n        \n        // Petit-déjeuner\n        meals.push({\n          id: `meal-${Date.now()}-1`,\n          type: 'breakfast',\n          name: 'Petit-déjeuner',\n          time: '08:00',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.breakfast),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.breakfast),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.breakfast),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.breakfast),\n          items: generateMealItems('breakfast', Math.round(nutritionNeeds.calories * mealCalorieDistribution.breakfast), generationOptions)\n        });\n        \n        // Collation matinale\n        meals.push({\n          id: `meal-${Date.now()}-2`,\n          type: 'snack',\n          name: 'Collation matinale',\n          time: '10:30',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.snack),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.snack),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.snack),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.snack),\n          items: generateMealItems('snack', Math.round(nutritionNeeds.calories * mealCalorieDistribution.snack), generationOptions)\n        });\n        \n        // Déjeuner\n        meals.push({\n          id: `meal-${Date.now()}-3`,\n          type: 'lunch',\n          name: 'Déjeuner',\n          time: '13:00',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.lunch),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.lunch),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.lunch),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.lunch),\n          items: generateMealItems('lunch', Math.round(nutritionNeeds.calories * mealCalorieDistribution.lunch), generationOptions)\n        });\n        \n        // Collation après-midi\n        meals.push({\n          id: `meal-${Date.now()}-4`,\n          type: 'snack',\n          name: 'Collation après-midi',\n          time: '16:30',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.snack),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.snack),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.snack),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.snack),\n          items: generateMealItems('snack', Math.round(nutritionNeeds.calories * mealCalorieDistribution.snack), generationOptions)\n        });\n        \n        // Dîner\n        meals.push({\n          id: `meal-${Date.now()}-5`,\n          type: 'dinner',\n          name: 'Dîner',\n          time: '19:30',\n          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.dinner),\n          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.dinner),\n          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.dinner),\n          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.dinner),\n          items: generateMealItems('dinner', Math.round(nutritionNeeds.calories * mealCalorieDistribution.dinner), generationOptions)\n        });\n        \n        newPlan.meals = meals;\n      }\n      \n      // Mettre à jour les données avec le nouveau plan\n      const updatedData = {\n        ...plannerData,\n        mealPlans: [...(plannerData.mealPlans || []), newPlan]\n      };\n      \n      setPlannerData(updatedData);\n      setSelectedPlan(newPlan);\n      setAutoGenerateDialog(false);\n      \n      // Simuler la sauvegarde en backend (à implémenter avec un vrai service)\n      console.log('Nouveau plan de repas généré:', newPlan);\n      \n    } catch (err) {\n      console.error('Erreur lors de la génération du plan de repas:', err);\n      setError('Impossible de générer le plan de repas. Vérifiez que votre profil est complet.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Générer des éléments de repas en fonction du type et de l'objectif calorique\n  const generateMealItems = (mealType, targetCalories, options) => {\n    // Base de données simplifiée d'aliments par type de repas\n    const foodDatabase = {\n      breakfast: [\n        { name: 'Flocons d\\'avoine', quantity: '60g', calories: 240, carbs: 40, protein: 8, fat: 5 },\n        { name: 'Pain complet', quantity: '2 tranches', calories: 180, carbs: 30, protein: 8, fat: 2 },\n        { name: 'Œufs brouillés', quantity: '2 œufs', calories: 160, carbs: 2, protein: 14, fat: 10 },\n        { name: 'Yaourt grec', quantity: '200g', calories: 150, carbs: 6, protein: 15, fat: 8 },\n        { name: 'Banane', quantity: '1 moyenne', calories: 100, carbs: 25, protein: 1, fat: 0 },\n        { name: 'Lait d\\'amande', quantity: '250ml', calories: 80, carbs: 3, protein: 1, fat: 5 }\n      ],\n      'pre-ride': [\n        { name: 'Banane', quantity: '1 moyenne', calories: 100, carbs: 25, protein: 1, fat: 0 },\n        { name: 'Barre de céréales', quantity: '1 barre', calories: 150, carbs: 25, protein: 5, fat: 3 },\n        { name: 'Pain aux raisins', quantity: '2 tranches', calories: 180, carbs: 35, protein: 6, fat: 2 },\n        { name: 'Compote de pommes', quantity: '1 pot', calories: 80, carbs: 20, protein: 0, fat: 0 }\n      ],\n      'during-ride': [\n        { name: 'Gel énergétique', quantity: '1 sachet', calories: 100, carbs: 25, protein: 0, fat: 0 },\n        { name: 'Boisson isotonique', quantity: '500ml', calories: 120, carbs: 30, protein: 0, fat: 0 },\n        { name: 'Barre énergétique', quantity: '1 barre', calories: 180, carbs: 40, protein: 2, fat: 1 },\n        { name: 'Banane', quantity: '1 moyenne', calories: 100, carbs: 25, protein: 1, fat: 0 },\n        { name: 'Abricots secs', quantity: '30g', calories: 80, carbs: 18, protein: 1, fat: 0 }\n      ],\n      'post-ride': [\n        { name: 'Shake protéiné', quantity: '1 portion', calories: 180, carbs: 15, protein: 25, fat: 2 },\n        { name: 'Yaourt grec avec miel', quantity: '200g + 15g', calories: 200, carbs: 25, protein: 15, fat: 5 },\n        { name: 'Sandwich jambon fromage', quantity: '1 petit', calories: 300, carbs: 30, protein: 20, fat: 10 },\n        { name: 'Lait chocolaté', quantity: '250ml', calories: 180, carbs: 26, protein: 8, fat: 5 }\n      ],\n      lunch: [\n        { name: 'Pâtes au poulet et légumes', quantity: '300g', calories: 450, carbs: 60, protein: 30, fat: 10 },\n        { name: 'Salade de quinoa au saumon', quantity: '250g', calories: 400, carbs: 40, protein: 25, fat: 15 },\n        { name: 'Bowl de riz, légumineuses et légumes', quantity: '350g', calories: 500, carbs: 70, protein: 20, fat: 12 },\n        { name: 'Wrap au poulet et crudités', quantity: '1 grand', calories: 350, carbs: 40, protein: 25, fat: 10 }\n      ],\n      dinner: [\n        { name: 'Poisson et légumes vapeur', quantity: '300g', calories: 350, carbs: 20, protein: 30, fat: 15 },\n        { name: 'Poulet aux légumes et quinoa', quantity: '350g', calories: 450, carbs: 40, protein: 35, fat: 12 },\n        { name: 'Omelette aux légumes et pommes de terre', quantity: '300g', calories: 400, carbs: 30, protein: 25, fat: 20 },\n        { name: 'Soupe de légumes et croûtons', quantity: '400ml', calories: 250, carbs: 30, protein: 10, fat: 8 }\n      ],\n      snack: [\n        { name: 'Yaourt et fruits', quantity: '150g + 100g', calories: 150, carbs: 25, protein: 8, fat: 2 },\n        { name: 'Poignée de fruits secs et noix', quantity: '30g', calories: 180, carbs: 15, protein: 5, fat: 10 },\n        { name: 'Barre protéinée', quantity: '1 barre', calories: 200, carbs: 20, protein: 15, fat: 7 },\n        { name: 'Smoothie fruits et lait', quantity: '250ml', calories: 160, carbs: 30, protein: 5, fat: 2 }\n      ]\n    };\n    \n    // Adapter la sélection selon les préférences et objectifs\n    const availableFoods = foodDatabase[mealType] || [];\n    let remainingCalories = targetCalories;\n    const selectedItems = [];\n    \n    // Sélectionner des aliments jusqu'à atteindre l'objectif calorique\n    while (remainingCalories > 50 && availableFoods.length > 0) {\n      // Sélectionner aléatoirement un aliment\n      const randomIndex = Math.floor(Math.random() * availableFoods.length);\n      const selectedFood = { ...availableFoods[randomIndex] };\n      \n      // Ajuster la quantité si nécessaire pour ne pas dépasser l'objectif calorique\n      if (selectedFood.calories > remainingCalories) {\n        const ratio = remainingCalories / selectedFood.calories;\n        selectedFood.quantity = `${Math.round(parseInt(selectedFood.quantity) * ratio)}g`;\n        selectedFood.calories = Math.round(selectedFood.calories * ratio);\n        selectedFood.carbs = Math.round(selectedFood.carbs * ratio);\n        selectedFood.protein = Math.round(selectedFood.protein * ratio);\n        selectedFood.fat = Math.round(selectedFood.fat * ratio);\n      }\n      \n      // Ajouter l'aliment à la sélection\n      selectedItems.push({\n        id: `item-${Date.now()}-${selectedItems.length}`,\n        ...selectedFood\n      });\n      \n      remainingCalories -= selectedFood.calories;\n      \n      // Éviter de sélectionner à nouveau le même aliment\n      availableFoods.splice(randomIndex, 1);\n    }\n    \n    return selectedItems;\n  };\n\n  // Rendu de la liste des plans\n  const renderPlans = () => {\n    return (\n      <Grid container spacing={2} sx={{ mb: 4 }}>\n        {filteredPlans.map((plan) => (\n          <Grid item xs={12} sm={6} md={4} key={plan.id}>\n            <Card \n              variant={selectedPlan && selectedPlan.id === plan.id ? 'elevation' : 'outlined'} \n              elevation={selectedPlan && selectedPlan.id === plan.id ? 3 : 1}\n              sx={{ \n                cursor: 'pointer',\n                borderColor: selectedPlan && selectedPlan.id === plan.id ? 'primary.main' : 'divider'\n              }}\n              onClick={() => handleSelectPlan(plan)}\n            >\n              <CardContent>\n                <Typography variant=\"h6\" component=\"div\">{plan.name}</Typography>\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                  <DirectionsBike fontSize=\"small\" color=\"primary\" sx={{ mr: 1 }} />\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {plan.type === 'ride-day' \n                      ? 'Jour d\\'entraînement' \n                      : 'Jour de récupération'}\n                  </Typography>\n                </Box>\n                <Divider sx={{ my: 1 }} />\n                <Typography variant=\"body2\">\n                  {plan.meals?.length || 0} repas • {calculatePlanTotals(plan.meals).calories} kcal\n                </Typography>\n              </CardContent>\n              <CardActions>\n                <Button \n                  size=\"small\" \n                  startIcon={<Edit />}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    // Logique d'édition du plan\n                  }}\n                >\n                  Modifier\n                </Button>\n                <Button \n                  size=\"small\" \n                  startIcon={\n                    plan.favorite \n                      ? <Favorite color=\"error\" /> \n                      : <FavoriteBorder />\n                  }\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    // Logique pour marquer comme favori\n                  }}\n                >\n                  {plan.favorite ? 'Favori' : 'Ajouter aux favoris'}\n                </Button>\n              </CardActions>\n            </Card>\n          </Grid>\n        ))}\n        {/* Carte pour ajouter un nouveau plan */}\n        <Grid item xs={12} sm={6} md={4}>\n          <Card\n            variant=\"outlined\"\n            sx={{\n              height: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n              cursor: 'pointer',\n              borderStyle: 'dashed'\n            }}\n            onClick={() => {\n              // Logique pour ajouter un nouveau plan\n            }}\n          >\n            <CardContent sx={{ textAlign: 'center' }}>\n              <Add fontSize=\"large\" color=\"primary\" />\n              <Typography variant=\"body1\" sx={{ mt: 1 }}>\n                Créer un nouveau plan\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  // Rendu du détail d'un plan sélectionné\n  const renderPlanDetails = () => {\n    if (!selectedPlan) return null;\n\n    const planTotals = calculatePlanTotals(selectedPlan.meals);\n\n    return (\n      <Box>\n        <Paper elevation={0} sx={{ p: 2, mb: 3, bgcolor: 'background.default' }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h5\">{selectedPlan.name}</Typography>\n            <Box>\n              <IconButton size=\"small\" sx={{ mr: 1 }} title=\"Imprimer\">\n                <Print />\n              </IconButton>\n              <IconButton size=\"small\" sx={{ mr: 1 }} title=\"Partager\">\n                <Share />\n              </IconButton>\n            </Box>\n          </Box>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={8}>\n              <Typography variant=\"body2\" paragraph>\n                Ce plan est conçu pour les {selectedPlan.type === 'ride-day' \n                  ? 'jours d\\'entraînement avec une consommation adaptée avant, pendant et après l\\'effort.' \n                  : 'jours de récupération pour optimiser la régénération musculaire et le repos.'\n                }\n              </Typography>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <Stack direction=\"row\" spacing={2} justifyContent=\"flex-end\">\n                <Box textAlign=\"center\">\n                  <Typography variant=\"h6\">{planTotals.calories}</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">kcal</Typography>\n                </Box>\n                <Divider orientation=\"vertical\" flexItem />\n                <Box textAlign=\"center\">\n                  <Typography variant=\"h6\">{planTotals.carbs}g</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">Glucides</Typography>\n                </Box>\n                <Divider orientation=\"vertical\" flexItem />\n                <Box textAlign=\"center\">\n                  <Typography variant=\"h6\">{planTotals.protein}g</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">Protéines</Typography>\n                </Box>\n                <Divider orientation=\"vertical\" flexItem />\n                <Box textAlign=\"center\">\n                  <Typography variant=\"h6\">{planTotals.fat}g</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">Lipides</Typography>\n                </Box>\n              </Stack>\n            </Grid>\n          </Grid>\n        </Paper>\n\n        {/* Liste des repas */}\n        {selectedPlan.meals?.map((meal, index) => {\n          const mealType = mealTypes.find(type => type.id === meal.type) || { label: meal.type, icon: <Restaurant /> };\n          const mealTotals = calculateMealTotals(meal.items);\n          \n          return (\n            <Paper key={index} elevation={1} sx={{ p: 2, mb: 2 }}>\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  {mealType.icon}\n                  <Typography variant=\"h6\" sx={{ ml: 1 }}>{mealType.label}</Typography>\n                </Box>\n                <Box>\n                  <Button \n                    size=\"small\" \n                    startIcon={<Edit />}\n                    onClick={() => handleOpenMealDialog(meal)}\n                  >\n                    Modifier\n                  </Button>\n                </Box>\n              </Box>\n              \n              <TableContainer>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Aliment</TableCell>\n                      <TableCell>Quantité</TableCell>\n                      <TableCell align=\"right\">Calories</TableCell>\n                      <TableCell align=\"right\">G</TableCell>\n                      <TableCell align=\"right\">P</TableCell>\n                      <TableCell align=\"right\">L</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {meal.items?.map((item, itemIndex) => (\n                      <TableRow key={itemIndex}>\n                        <TableCell>{item.name}</TableCell>\n                        <TableCell>{item.quantity}</TableCell>\n                        <TableCell align=\"right\">{item.calories}</TableCell>\n                        <TableCell align=\"right\">{item.carbs}g</TableCell>\n                        <TableCell align=\"right\">{item.protein}g</TableCell>\n                        <TableCell align=\"right\">{item.fat}g</TableCell>\n                      </TableRow>\n                    ))}\n                    {/* Ligne des totaux */}\n                    <TableRow>\n                      <TableCell colSpan={2}><strong>Total</strong></TableCell>\n                      <TableCell align=\"right\"><strong>{mealTotals.calories}</strong></TableCell>\n                      <TableCell align=\"right\"><strong>{mealTotals.carbs}g</strong></TableCell>\n                      <TableCell align=\"right\"><strong>{mealTotals.protein}g</strong></TableCell>\n                      <TableCell align=\"right\"><strong>{mealTotals.fat}g</strong></TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Paper>\n          );\n        })}\n\n        {/* Bouton pour ajouter un repas */}\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>\n          <Button\n            variant=\"outlined\"\n            startIcon={<Add />}\n            onClick={() => handleOpenMealDialog()}\n          >\n            Ajouter un repas\n          </Button>\n        </Box>\n      </Box>\n    );\n  };\n\n  // Rendu du dialogue pour ajouter/modifier un repas\n  const renderMealDialog = () => {\n    return (\n      <Dialog open={openMealDialog} onClose={handleCloseMealDialog} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          {currentMeal ? 'Modifier le repas' : 'Ajouter un repas'}\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <FormControl fullWidth>\n                <InputLabel id=\"meal-type-label\">Type de repas</InputLabel>\n                <Select\n                  labelId=\"meal-type-label\"\n                  value={currentMeal?.type || ''}\n                  label=\"Type de repas\"\n                  // onChange={...}\n                >\n                  {mealTypes.map((type) => (\n                    <MenuItem value={type.id} key={type.id}>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        {type.icon}\n                        <Typography sx={{ ml: 1 }}>{type.label}</Typography>\n                      </Box>\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            \n            {/* Liste des aliments du repas */}\n            <Grid item xs={12}>\n              <Typography variant=\"subtitle1\" gutterBottom>Aliments</Typography>\n              {currentMeal?.items?.map((item, index) => (\n                <Paper key={index} variant=\"outlined\" sx={{ p: 1, mb: 1 }}>\n                  <Grid container spacing={2} alignItems=\"center\">\n                    <Grid item xs={5}>\n                      <Typography variant=\"body2\">{item.name}</Typography>\n                    </Grid>\n                    <Grid item xs={3}>\n                      <Typography variant=\"body2\">{item.quantity}</Typography>\n                    </Grid>\n                    <Grid item xs={3}>\n                      <Typography variant=\"body2\">{item.calories} kcal</Typography>\n                    </Grid>\n                    <Grid item xs={1}>\n                      <IconButton size=\"small\" color=\"error\">\n                        <Delete fontSize=\"small\" />\n                      </IconButton>\n                    </Grid>\n                  </Grid>\n                </Paper>\n              ))}\n              \n              {/* Formulaire d'ajout d'aliment */}\n              <Box sx={{ border: '1px dashed', borderColor: 'divider', p: 2, mt: 2 }}>\n                <Typography variant=\"subtitle2\" gutterBottom>Ajouter un aliment</Typography>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      label=\"Nom de l'aliment\"\n                      size=\"small\"\n                      fullWidth\n                      // value={...}\n                      // onChange={...}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      label=\"Quantité\"\n                      size=\"small\"\n                      fullWidth\n                      // value={...}\n                      // onChange={...}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={3}>\n                    <TextField\n                      label=\"Calories\"\n                      size=\"small\"\n                      fullWidth\n                      type=\"number\"\n                      // value={...}\n                      // onChange={...}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={3}>\n                    <TextField\n                      label=\"Glucides (g)\"\n                      size=\"small\"\n                      fullWidth\n                      type=\"number\"\n                      // value={...}\n                      // onChange={...}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={3}>\n                    <TextField\n                      label=\"Protéines (g)\"\n                      size=\"small\"\n                      fullWidth\n                      type=\"number\"\n                      // value={...}\n                      // onChange={...}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={3}>\n                    <TextField\n                      label=\"Lipides (g)\"\n                      size=\"small\"\n                      fullWidth\n                      type=\"number\"\n                      // value={...}\n                      // onChange={...}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Button variant=\"contained\" startIcon={<Add />}>\n                      Ajouter\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Box>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseMealDialog}>Annuler</Button>\n          <Button variant=\"contained\" onClick={handleCloseMealDialog}>\n            {currentMeal ? 'Enregistrer les modifications' : 'Ajouter le repas'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  };\n\n  // Rendu du dialogue de génération automatique\n  const renderAutoGenerateDialog = () => {\n    return (\n      <Dialog\n        open={autoGenerateDialog}\n        onClose={handleCloseAutoGenerateDialog}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Générer un plan de repas automatiquement</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={3} sx={{ mt: 1 }}>\n            <Grid item xs={12}>\n              <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                Configurez les options pour générer un plan de repas personnalisé qui correspond à vos objectifs et préférences.\n              </Typography>\n            </Grid>\n            \n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Objectif</InputLabel>\n                <Select\n                  value={generationOptions.goalType}\n                  onChange={(e) => handleGenerationOptionChange('goalType', e.target.value)}\n                  label=\"Objectif\"\n                >\n                  <MenuItem value=\"performance\">Performance</MenuItem>\n                  <MenuItem value=\"weight-loss\">Perte de poids</MenuItem>\n                  <MenuItem value=\"maintenance\">Maintenance</MenuItem>\n                  <MenuItem value=\"recovery\">Récupération</MenuItem>\n                </Select>\n                <FormHelperText>Sélectionnez votre objectif principal</FormHelperText>\n              </FormControl>\n            </Grid>\n            \n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Nombre de repas</InputLabel>\n                <Select\n                  value={generationOptions.mealCount}\n                  onChange={(e) => handleGenerationOptionChange('mealCount', e.target.value)}\n                  label=\"Nombre de repas\"\n                >\n                  <MenuItem value={3}>3 repas par jour</MenuItem>\n                  <MenuItem value={4}>4 repas par jour</MenuItem>\n                  <MenuItem value={5}>5 repas par jour</MenuItem>\n                  <MenuItem value={6}>6 repas par jour</MenuItem>\n                </Select>\n                <FormHelperText>Incluant repas principaux et collations</FormHelperText>\n              </FormControl>\n            </Grid>\n            \n            <Grid item xs={12}>\n              <FormControl fullWidth>\n                <InputLabel>Style alimentaire</InputLabel>\n                <Select\n                  value={generationOptions.preferences}\n                  onChange={(e) => handleGenerationOptionChange('preferences', e.target.value)}\n                  label=\"Style alimentaire\"\n                >\n                  <MenuItem value=\"balanced\">Équilibré</MenuItem>\n                  <MenuItem value=\"high-carb\">Riche en glucides</MenuItem>\n                  <MenuItem value=\"high-protein\">Riche en protéines</MenuItem>\n                  <MenuItem value=\"vegetarian\">Végétarien</MenuItem>\n                </Select>\n                <FormHelperText>Adaptez la distribution des macronutriments selon vos préférences</FormHelperText>\n              </FormControl>\n            </Grid>\n            \n            <Grid item xs={12}>\n              <Typography variant=\"subtitle2\" gutterBottom>Allergies ou intolérances</Typography>\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n                {['Gluten', 'Lactose', 'Arachides', 'Fruits à coque', 'Soja'].map((allergen) => (\n                  <Chip\n                    key={allergen}\n                    label={allergen}\n                    onClick={() => {\n                      const allergies = [...generationOptions.allergies];\n                      if (allergies.includes(allergen)) {\n                        const index = allergies.indexOf(allergen);\n                        allergies.splice(index, 1);\n                      } else {\n                        allergies.push(allergen);\n                      }\n                      handleGenerationOptionChange('allergies', allergies);\n                    }}\n                    color={generationOptions.allergies.includes(allergen) ? 'primary' : 'default'}\n                    variant={generationOptions.allergies.includes(allergen) ? 'filled' : 'outlined'}\n                  />\n                ))}\n              </Box>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseAutoGenerateDialog}>Annuler</Button>\n          <Button \n            variant=\"contained\" \n            onClick={handleGenerateMealPlan}\n            disabled={loading}\n          >\n            {loading ? <CircularProgress size={24} /> : 'Générer mon plan'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  };\n\n  // Rendu principal du composant\n  return (\n    <Box>\n      <Paper sx={{ p: 2, mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\">Planificateur de repas</Typography>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<Add />}\n            onClick={handleOpenAutoGenerateDialog}\n          >\n            Générer un plan\n          </Button>\n        </Box>\n        <Typography variant=\"body2\" paragraph>\n          Créez et gérez vos plans de repas pour optimiser votre alimentation en fonction de vos objectifs et de vos entraînements.\n        </Typography>\n        \n        <Box sx={{ mb: 2 }}>\n          <Button\n            variant={planType === 'ride-day' ? 'contained' : 'outlined'}\n            onClick={() => handlePlanTypeChange('ride-day')}\n            sx={{ mr: 2 }}\n            startIcon={<DirectionsBike />}\n          >\n            Jours d'entraînement\n          </Button>\n          <Button\n            variant={planType === 'recovery-day' ? 'contained' : 'outlined'}\n            onClick={() => handlePlanTypeChange('recovery-day')}\n            startIcon={<Restaurant />}\n          >\n            Jours de récupération\n          </Button>\n        </Box>\n      </Paper>\n\n      {loading ? (\n        <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n          <CircularProgress />\n        </Box>\n      ) : error ? (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      ) : (\n        <>\n          {(!plannerData || !plannerData.mealPlans || plannerData.mealPlans.length === 0) ? (\n            <Alert severity=\"info\" sx={{ mb: 3 }}>\n              Aucun plan de repas disponible. Créez votre premier plan en cliquant sur \"Générer un plan\".\n            </Alert>\n          ) : (\n            <>\n              {renderPlans()}\n              {selectedPlan && renderPlanDetails()}\n            </>\n          )}\n          {renderMealDialog()}\n          {renderAutoGenerateDialog()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default MealPlanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}