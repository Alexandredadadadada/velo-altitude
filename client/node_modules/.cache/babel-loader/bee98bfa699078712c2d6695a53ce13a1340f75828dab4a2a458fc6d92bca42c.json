{"ast":null,"code":"/**\n * mobileOptimizer.js\n * Optimisations spécifiques pour les appareils mobiles\n * \n * Ce module fournit des fonctions d'optimisation pour améliorer\n * les performances sur les appareils mobiles et à faible puissance.\n */import deviceCapabilityDetector from'./deviceCapabilityDetector';class MobileOptimizer{constructor(){// État initial\nthis.isMobile=this.detectMobile();this.isTablet=this.detectTablet();this.initialized=false;// Options d'optimisation par défaut\nthis.optimizations={reducedResolution:true,// Réduire la résolution de rendu\nsimplifiedEffects:true,// Simplifier ou désactiver certains effets\nbatterySaveMode:false,// Mode économie de batterie\noptimizedControls:true,// Contrôles optimisés pour tactile\nprogressiveLoading:true,// Chargement progressif des ressources\noptimizedInteraction:true,// Interactions optimisées\nreducedAnimations:false,// Réduire les animations\nadaptiveQuality:true// Ajuster la qualité dynamiquement\n};this.originalPixelRatio=window.devicePixelRatio||1;this.currentPixelRatio=this.originalPixelRatio;// Performance monitoring\nthis.performanceMetrics={frameRate:60,frameHistory:[],dropCount:0,lastPerformanceCheck:Date.now()};this.adaptiveQualityMetrics={targetFPS:45,// FPS cible pour l'ajustement qualité/performance\nminFPS:30,// FPS minimum acceptable\nadjustmentCooldown:5000,// Cooldown en ms entre les ajustements\nlastAdjustment:0,// Timestamp du dernier ajustement\ncurrentQualityMultiplier:1.0// Multiplicateur actuel de qualité\n};// Initialiser une fois que le DOM est prêt\nthis.initialize();}/**\n   * Initialise l'optimiseur mobile\n   */initialize(){if(document.readyState==='complete'){this.setupEventListeners();}else{window.addEventListener('load',()=>this.setupEventListeners());}}/**\n   * Configure les écouteurs d'événements\n   * @private\n   */setupEventListeners(){// Écouter les changements d'orientation\nwindow.addEventListener('orientationchange',()=>{this.handleOrientationChange();});// Écouter les changements de visibilité de page\ndocument.addEventListener('visibilitychange',()=>{this.handleVisibilityChange();});// Batterie\nif(navigator.getBattery){navigator.getBattery().then(battery=>{battery.addEventListener('levelchange',()=>{this.checkBatteryStatus(battery);});battery.addEventListener('chargingchange',()=>{this.checkBatteryStatus(battery);});// Vérification initiale\nthis.checkBatteryStatus(battery);});}// Écouter les événements de ralentissement\nthis.setupPerformanceMonitoring();this.initialized=true;}/**\n   * Détecte si l'appareil est un mobile\n   * @returns {boolean} true si l'appareil est un mobile\n   */detectMobile(){const mobileRegex=/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i;return mobileRegex.test(navigator.userAgent||navigator.vendor||window.opera);}/**\n   * Détecte si l'appareil est une tablette\n   * @returns {boolean} true si l'appareil est une tablette\n   */detectTablet(){const tabletRegex=/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(ad|hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i;const isTablet=tabletRegex.test(navigator.userAgent||navigator.vendor||window.opera)&&!this.detectMobile();return isTablet;}/**\n   * Vérifie si les optimisations mobiles sont nécessaires\n   * @returns {boolean} true si les optimisations mobiles sont nécessaires\n   */needsMobileOptimizations(){const capabilities=deviceCapabilityDetector.getCapabilities();return this.isMobile||this.isTablet||capabilities.flags.isLowEndDevice||capabilities.performanceLevel<=2;}/**\n   * Optimise un renderer THREE.js pour mobile\n   * @param {THREE.WebGLRenderer} renderer Renderer à optimiser\n   * @returns {THREE.WebGLRenderer} Renderer optimisé\n   */optimizeRenderer(renderer){if(!this.needsMobileOptimizations())return renderer;// Réduire la résolution de rendu\nif(this.optimizations.reducedResolution){// Calculer un ratio de pixel optimisé en fonction de la résolution de l'écran\nconst capabilities=deviceCapabilityDetector.getCapabilities();// Plus la résolution est élevée, plus on peut réduire\nlet reductionFactor=1;const{width,height}=capabilities.screen.effectiveResolution;const pixelCount=width*height;if(pixelCount>4000000)reductionFactor=0.5;// 4M pixels+ (2K, 4K)\nelse if(pixelCount>2000000)reductionFactor=0.65;// 2M-4M pixels (1080p+)\nelse if(pixelCount>1000000)reductionFactor=0.75;// 1M-2M pixels\nelse reductionFactor=0.85;// moins de 1M pixels\n// Réduire si mode économie de batterie\nif(this.optimizations.batterySaveMode){reductionFactor*=0.7;}// Appliquer la réduction\nthis.currentPixelRatio=this.originalPixelRatio*reductionFactor;renderer.setPixelRatio(this.currentPixelRatio);console.log(`MobileOptimizer: pixel ratio réduit de ${this.originalPixelRatio} à ${this.currentPixelRatio}`);}// Simplifier les effets\nif(this.optimizations.simplifiedEffects){// Désactiver l'antialiasing si ce n'est pas déjà fait\nif(renderer.antialias){console.warn('MobileOptimizer: impossible de désactiver l\\'antialiasing après la création du renderer');}// Réduire la précision des shaders\nif(renderer.capabilities&&renderer.capabilities.precision==='highp'){renderer.capabilities.precision='mediump';}// Désactiver les shadow maps si possible\nif(renderer.shadowMap&&renderer.shadowMap.enabled){renderer.shadowMap.enabled=false;}}return renderer;}/**\n   * Optimise les contrôles tactiles pour un meilleur usage sur mobile\n   * @param {Object} controls Contrôles à optimiser (OrbitControls, etc.)\n   * @returns {Object} Contrôles optimisés\n   */setupOptimizedTouchControls(controls){if(!this.needsMobileOptimizations()||!this.optimizations.optimizedControls){return controls;}// Paramètres génériques qui fonctionnent pour la plupart des contrôles THREE.js\nif(controls.domElement){// Augmenter la zone de toucher\nif(controls.domElement.style){controls.domElement.style.touchAction='none';}}// Ajuster la sensibilité pour le tactile\n// OrbitControls\nif(controls.rotateSpeed!==undefined){controls.rotateSpeed=0.8;// Plus lent pour plus de précision\n}if(controls.zoomSpeed!==undefined){controls.zoomSpeed=1.2;// Plus rapide pour le zoom\n}if(controls.panSpeed!==undefined){controls.panSpeed=0.8;// Plus lent pour plus de précision\n}// Désactiver l'inertie sur mobile (peut causer des problèmes de performance)\nif(controls.enableDamping!==undefined){controls.enableDamping=false;}// Augmenter les distances min/max de zoom pour éviter des problèmes\nif(controls.minDistance!==undefined){controls.minDistance*=1.2;// Éviter de zoomer trop près\n}// TrackballControls\nif(controls.noRotate!==undefined){controls.rotateSpeed=2.0;// TrackballControls nécessite plus de rapidité\n}// FlyControls ou équivalent\nif(controls.movementSpeed!==undefined){controls.movementSpeed*=0.7;// Ralentir les mouvements\n}return controls;}/**\n   * Active le mode économie de batterie\n   * @param {THREE.WebGLRenderer} renderer Renderer à optimiser\n   * @param {Function} animate Fonction d'animation originale\n   * @returns {Function} Nouvelle fonction d'animation optimisée\n   */enableBatterySaveMode(renderer,animate){if(!this.needsMobileOptimizations())return animate;this.optimizations.batterySaveMode=true;// Réduire davantage la résolution\nconst batterySavePixelRatio=this.currentPixelRatio*0.7;renderer.setPixelRatio(batterySavePixelRatio);// Limiter le framerate\nlet lastTime=0;const targetFPS=30;// 30 FPS en mode économie de batterie\nconst frameTime=1000/targetFPS;const throttledAnimate=time=>{const currentTime=time||performance.now();const elapsed=currentTime-lastTime;if(elapsed>frameTime){lastTime=currentTime-elapsed%frameTime;animate(currentTime);}if(this.optimizations.batterySaveMode){setTimeout(()=>requestAnimationFrame(throttledAnimate),5);}else{requestAnimationFrame(throttledAnimate);}};console.log('MobileOptimizer: mode économie de batterie activé');return throttledAnimate;}/**\n   * Gère les changements d'orientation sur mobile\n   * @private\n   */handleOrientationChange(){// Attendre que l'orientation soit terminée\nsetTimeout(()=>{// Mettre à jour les optimisations si nécessaire\nthis.adjustForCurrentContext();// Déclencher un événement personnalisé pour informer l'application\nconst event=new CustomEvent('optimized-orientation-change',{detail:{orientation:window.orientation,aspectRatio:window.innerWidth/window.innerHeight}});window.dispatchEvent(event);},300);}/**\n   * Gère les changements de visibilité de page\n   * @private\n   */handleVisibilityChange(){if(document.hidden){// La page est cachée, réduire les ressources utilisées\nthis.pauseNonEssentialProcesses();}else{// La page est visible à nouveau\nthis.resumeNonEssentialProcesses();}}/**\n   * Vérifie l'état de la batterie et ajuste les optimisations\n   * @param {BatteryManager} battery Objet batterie\n   * @private\n   */checkBatteryStatus(battery){const lowBattery=!battery.charging&&battery.level<0.3;if(lowBattery!==this.optimizations.batterySaveMode){this.optimizations.batterySaveMode=lowBattery;if(lowBattery){console.log('MobileOptimizer: niveau de batterie bas, optimisations accrues activées');}else{console.log('MobileOptimizer: niveau de batterie normal, optimisations standard');}// Déclencher un événement pour informer l'application\nwindow.dispatchEvent(new CustomEvent('battery-status-change',{detail:{low:lowBattery,level:battery.level,charging:battery.charging}}));}}/**\n   * Met en pause les processus non essentiels quand la page est en arrière-plan\n   * @private\n   */pauseNonEssentialProcesses(){// Stocker l'état actuel pour le restaurer plus tard\nthis._pausedState={adaptiveQuality:this.optimizations.adaptiveQuality,reducedResolution:this.optimizations.reducedResolution};// Optimisation maximale en arrière-plan\nthis.optimizations.adaptiveQuality=false;this.optimizations.reducedResolution=true;console.log('MobileOptimizer: pause des processus non essentiels');// Déclencher un événement\nwindow.dispatchEvent(new CustomEvent('optimization-state-change',{detail:{state:'paused',optimizations:this.optimizations}}));}/**\n   * Reprend les processus non essentiels quand la page revient au premier plan\n   * @private\n   */resumeNonEssentialProcesses(){if(this._pausedState){// Restaurer l'état précédent\nthis.optimizations.adaptiveQuality=this._pausedState.adaptiveQuality;this.optimizations.reducedResolution=this._pausedState.reducedResolution;console.log('MobileOptimizer: reprise des processus non essentiels');// Déclencher un événement\nwindow.dispatchEvent(new CustomEvent('optimization-state-change',{detail:{state:'resumed',optimizations:this.optimizations}}));}}/**\n   * Configure le monitoring de performance\n   * @private\n   */setupPerformanceMonitoring(){if(!this.optimizations.adaptiveQuality)return;let lastTime=performance.now();let frames=0;const checkPerformance=()=>{const now=performance.now();frames++;// Calculer le FPS toutes les secondes\nif(now-lastTime>=1000){const currentFPS=Math.round(frames*1000/(now-lastTime));// Mettre à jour l'historique\nthis.performanceMetrics.frameHistory.push(currentFPS);if(this.performanceMetrics.frameHistory.length>60){this.performanceMetrics.frameHistory.shift();}// Calculer la moyenne\nconst averageFPS=this.performanceMetrics.frameHistory.reduce((a,b)=>a+b,0)/this.performanceMetrics.frameHistory.length;this.performanceMetrics.frameRate=Math.round(averageFPS);// Détecter les chutes de frames\nif(currentFPS<this.adaptiveQualityMetrics.minFPS){this.performanceMetrics.dropCount++;// Si on a plusieurs chutes consécutives, ajuster la qualité\nif(this.performanceMetrics.dropCount>=3){this.adjustQualityBasedOnPerformance();this.performanceMetrics.dropCount=0;}}else{this.performanceMetrics.dropCount=Math.max(0,this.performanceMetrics.dropCount-1);}// Vérifier si on peut augmenter la qualité\nconst timeSinceLastAdjustment=now-this.adaptiveQualityMetrics.lastAdjustment;if(timeSinceLastAdjustment>this.adaptiveQualityMetrics.adjustmentCooldown&&this.performanceMetrics.frameRate>this.adaptiveQualityMetrics.targetFPS+10){this.increaseQuality();}// Reset compteurs\nlastTime=now;frames=0;}// Continuer la vérification\nrequestAnimationFrame(checkPerformance);};// Démarrer le monitoring\ncheckPerformance();}/**\n   * Ajuste la qualité visuelle en fonction des performances\n   * @private\n   */adjustQualityBasedOnPerformance(){const now=performance.now();// Vérifier le cooldown\nif(now-this.adaptiveQualityMetrics.lastAdjustment<this.adaptiveQualityMetrics.adjustmentCooldown){return;}// Réduire la qualité\nthis.adaptiveQualityMetrics.currentQualityMultiplier*=0.8;this.adaptiveQualityMetrics.currentQualityMultiplier=Math.max(0.4,this.adaptiveQualityMetrics.currentQualityMultiplier);this.adaptiveQualityMetrics.lastAdjustment=now;console.log(`MobileOptimizer: réduction de la qualité à ${Math.round(this.adaptiveQualityMetrics.currentQualityMultiplier*100)}% pour maintenir les performances`);// Déclencher un événement pour informer l'application\nwindow.dispatchEvent(new CustomEvent('quality-adjustment',{detail:{qualityMultiplier:this.adaptiveQualityMetrics.currentQualityMultiplier,reason:'performance-drop',frameRate:this.performanceMetrics.frameRate}}));}/**\n   * Augmente la qualité si les performances le permettent\n   * @private\n   */increaseQuality(){const now=performance.now();// Vérifier le cooldown\nif(now-this.adaptiveQualityMetrics.lastAdjustment<this.adaptiveQualityMetrics.adjustmentCooldown){return;}// Augmenter la qualité\nthis.adaptiveQualityMetrics.currentQualityMultiplier*=1.1;this.adaptiveQualityMetrics.currentQualityMultiplier=Math.min(1.0,this.adaptiveQualityMetrics.currentQualityMultiplier);this.adaptiveQualityMetrics.lastAdjustment=now;console.log(`MobileOptimizer: augmentation de la qualité à ${Math.round(this.adaptiveQualityMetrics.currentQualityMultiplier*100)}% grâce aux bonnes performances`);// Déclencher un événement pour informer l'application\nwindow.dispatchEvent(new CustomEvent('quality-adjustment',{detail:{qualityMultiplier:this.adaptiveQualityMetrics.currentQualityMultiplier,reason:'performance-good',frameRate:this.performanceMetrics.frameRate}}));}/**\n   * Ajuste les optimisations en fonction du contexte actuel\n   */adjustForCurrentContext(){const capabilities=deviceCapabilityDetector.getCapabilities();// Ajuster les optimisations en fonction de l'orientation\nconst isLandscape=window.innerWidth>window.innerHeight;if(isLandscape){// En mode paysage, on peut être un peu plus généreux\nthis.optimizations.reducedResolution=this.isMobile;}else{// En mode portrait, optimiser davantage\nthis.optimizations.reducedResolution=true;}// Ajuster en fonction du réseau\nif(capabilities.network.effectiveType==='2g'||capabilities.network.effectiveType==='slow-2g'){this.optimizations.progressiveLoading=true;this.optimizations.reducedAnimations=true;}console.log('MobileOptimizer: ajustement des optimisations au contexte actuel');}/**\n   * Retourne la configuration d'optimisation actuelle pour les shaders\n   * @returns {Object} Configuration pour les shaders\n   */getShaderOptimizationConfig(){const config={precision:'mediump',optimizeLoops:this.needsMobileOptimizations(),simplifyLighting:this.needsMobileOptimizations(),maxLights:this.optimizations.batterySaveMode?2:4};if(this.optimizations.batterySaveMode){config.precision='lowp';}return config;}/**\n   * Configure un chargeur de textures pour le chargement progressif\n   * @param {THREE.TextureLoader} textureLoader Chargeur de textures THREE.js\n   * @returns {Object} API pour le chargement progressif\n   */setupProgressiveTextureLoading(textureLoader){if(!textureLoader)return null;const capabilities=deviceCapabilityDetector.getCapabilities();const isLowEnd=capabilities.flags.isLowEndDevice||capabilities.performanceLevel<=2;// Créer une API pour le chargement progressif\nreturn{/**\n       * Charge une texture de manière progressive\n       * @param {string} url URL de la texture\n       * @param {Function} onProgress Callback de progression\n       * @returns {Promise<Object>} Promise avec les textures chargées progressivement\n       */loadTexture:(url,onProgress)=>{return new Promise(resolve=>{// Déterminer les résolutions à charger\nlet resolutions=['low','high'];if(isLowEnd||this.optimizations.batterySaveMode){// Pour les appareils faibles, on charge uniquement la version basse résolution\nresolutions=['low'];}// Générer les URLs pour les différentes résolutions\nconst urls=resolutions.map(res=>{const urlObj=new URL(url,window.location.href);const urlParts=urlObj.pathname.split('.');const ext=urlParts.pop();if(res==='low'){return`${urlParts.join('.')}_low.${ext}`;}return url;});// Charger la version basse résolution d'abord\ntextureLoader.load(urls[0],lowTexture=>{if(resolutions.length===1||!this.optimizations.progressiveLoading){// Si on ne charge qu'une résolution ou que le chargement progressif est désactivé\nresolve({texture:lowTexture,quality:'low'});}else{// Sinon, on charge aussi la haute résolution\ntextureLoader.load(urls[1],highTexture=>{resolve({texture:highTexture,quality:'high',lowQualityTexture:lowTexture});},onProgress);// Mais on retourne déjà la basse résolution pour l'afficher pendant le chargement\nresolve({texture:lowTexture,quality:'low',pendingHighQuality:true});}},onProgress);});}};}}// Exporter une instance singleton\nconst mobileOptimizer=new MobileOptimizer();export default mobileOptimizer;","map":{"version":3,"names":["deviceCapabilityDetector","MobileOptimizer","constructor","isMobile","detectMobile","isTablet","detectTablet","initialized","optimizations","reducedResolution","simplifiedEffects","batterySaveMode","optimizedControls","progressiveLoading","optimizedInteraction","reducedAnimations","adaptiveQuality","originalPixelRatio","window","devicePixelRatio","currentPixelRatio","performanceMetrics","frameRate","frameHistory","dropCount","lastPerformanceCheck","Date","now","adaptiveQualityMetrics","targetFPS","minFPS","adjustmentCooldown","lastAdjustment","currentQualityMultiplier","initialize","document","readyState","setupEventListeners","addEventListener","handleOrientationChange","handleVisibilityChange","navigator","getBattery","then","battery","checkBatteryStatus","setupPerformanceMonitoring","mobileRegex","test","userAgent","vendor","opera","tabletRegex","needsMobileOptimizations","capabilities","getCapabilities","flags","isLowEndDevice","performanceLevel","optimizeRenderer","renderer","reductionFactor","width","height","screen","effectiveResolution","pixelCount","setPixelRatio","console","log","antialias","warn","precision","shadowMap","enabled","setupOptimizedTouchControls","controls","domElement","style","touchAction","rotateSpeed","undefined","zoomSpeed","panSpeed","enableDamping","minDistance","noRotate","movementSpeed","enableBatterySaveMode","animate","batterySavePixelRatio","lastTime","frameTime","throttledAnimate","time","currentTime","performance","elapsed","setTimeout","requestAnimationFrame","adjustForCurrentContext","event","CustomEvent","detail","orientation","aspectRatio","innerWidth","innerHeight","dispatchEvent","hidden","pauseNonEssentialProcesses","resumeNonEssentialProcesses","lowBattery","charging","level","low","_pausedState","state","frames","checkPerformance","currentFPS","Math","round","push","length","shift","averageFPS","reduce","a","b","adjustQualityBasedOnPerformance","max","timeSinceLastAdjustment","increaseQuality","qualityMultiplier","reason","min","isLandscape","network","effectiveType","getShaderOptimizationConfig","config","optimizeLoops","simplifyLighting","maxLights","setupProgressiveTextureLoading","textureLoader","isLowEnd","loadTexture","url","onProgress","Promise","resolve","resolutions","urls","map","res","urlObj","URL","location","href","urlParts","pathname","split","ext","pop","join","load","lowTexture","texture","quality","highTexture","lowQualityTexture","pendingHighQuality","mobileOptimizer"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/utils/mobileOptimizer.js"],"sourcesContent":["/**\n * mobileOptimizer.js\n * Optimisations spécifiques pour les appareils mobiles\n * \n * Ce module fournit des fonctions d'optimisation pour améliorer\n * les performances sur les appareils mobiles et à faible puissance.\n */\n\nimport deviceCapabilityDetector from './deviceCapabilityDetector';\n\nclass MobileOptimizer {\n  constructor() {\n    // État initial\n    this.isMobile = this.detectMobile();\n    this.isTablet = this.detectTablet();\n    this.initialized = false;\n    \n    // Options d'optimisation par défaut\n    this.optimizations = {\n      reducedResolution: true,      // Réduire la résolution de rendu\n      simplifiedEffects: true,      // Simplifier ou désactiver certains effets\n      batterySaveMode: false,       // Mode économie de batterie\n      optimizedControls: true,      // Contrôles optimisés pour tactile\n      progressiveLoading: true,     // Chargement progressif des ressources\n      optimizedInteraction: true,   // Interactions optimisées\n      reducedAnimations: false,     // Réduire les animations\n      adaptiveQuality: true         // Ajuster la qualité dynamiquement\n    };\n    \n    this.originalPixelRatio = window.devicePixelRatio || 1;\n    this.currentPixelRatio = this.originalPixelRatio;\n    \n    // Performance monitoring\n    this.performanceMetrics = {\n      frameRate: 60,\n      frameHistory: [],\n      dropCount: 0,\n      lastPerformanceCheck: Date.now()\n    };\n    \n    this.adaptiveQualityMetrics = {\n      targetFPS: 45,               // FPS cible pour l'ajustement qualité/performance\n      minFPS: 30,                  // FPS minimum acceptable\n      adjustmentCooldown: 5000,    // Cooldown en ms entre les ajustements\n      lastAdjustment: 0,           // Timestamp du dernier ajustement\n      currentQualityMultiplier: 1.0 // Multiplicateur actuel de qualité\n    };\n    \n    // Initialiser une fois que le DOM est prêt\n    this.initialize();\n  }\n  \n  /**\n   * Initialise l'optimiseur mobile\n   */\n  initialize() {\n    if (document.readyState === 'complete') {\n      this.setupEventListeners();\n    } else {\n      window.addEventListener('load', () => this.setupEventListeners());\n    }\n  }\n  \n  /**\n   * Configure les écouteurs d'événements\n   * @private\n   */\n  setupEventListeners() {\n    // Écouter les changements d'orientation\n    window.addEventListener('orientationchange', () => {\n      this.handleOrientationChange();\n    });\n    \n    // Écouter les changements de visibilité de page\n    document.addEventListener('visibilitychange', () => {\n      this.handleVisibilityChange();\n    });\n    \n    // Batterie\n    if (navigator.getBattery) {\n      navigator.getBattery().then(battery => {\n        battery.addEventListener('levelchange', () => {\n          this.checkBatteryStatus(battery);\n        });\n        \n        battery.addEventListener('chargingchange', () => {\n          this.checkBatteryStatus(battery);\n        });\n        \n        // Vérification initiale\n        this.checkBatteryStatus(battery);\n      });\n    }\n    \n    // Écouter les événements de ralentissement\n    this.setupPerformanceMonitoring();\n    \n    this.initialized = true;\n  }\n  \n  /**\n   * Détecte si l'appareil est un mobile\n   * @returns {boolean} true si l'appareil est un mobile\n   */\n  detectMobile() {\n    const mobileRegex = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i;\n    return mobileRegex.test(navigator.userAgent || navigator.vendor || window.opera);\n  }\n  \n  /**\n   * Détecte si l'appareil est une tablette\n   * @returns {boolean} true si l'appareil est une tablette\n   */\n  detectTablet() {\n    const tabletRegex = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(ad|hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i;\n    const isTablet = tabletRegex.test(navigator.userAgent || navigator.vendor || window.opera) &&\n      !this.detectMobile();\n      \n    return isTablet;\n  }\n  \n  /**\n   * Vérifie si les optimisations mobiles sont nécessaires\n   * @returns {boolean} true si les optimisations mobiles sont nécessaires\n   */\n  needsMobileOptimizations() {\n    const capabilities = deviceCapabilityDetector.getCapabilities();\n    return this.isMobile || \n           this.isTablet || \n           capabilities.flags.isLowEndDevice || \n           capabilities.performanceLevel <= 2;\n  }\n  \n  /**\n   * Optimise un renderer THREE.js pour mobile\n   * @param {THREE.WebGLRenderer} renderer Renderer à optimiser\n   * @returns {THREE.WebGLRenderer} Renderer optimisé\n   */\n  optimizeRenderer(renderer) {\n    if (!this.needsMobileOptimizations()) return renderer;\n    \n    // Réduire la résolution de rendu\n    if (this.optimizations.reducedResolution) {\n      // Calculer un ratio de pixel optimisé en fonction de la résolution de l'écran\n      const capabilities = deviceCapabilityDetector.getCapabilities();\n      \n      // Plus la résolution est élevée, plus on peut réduire\n      let reductionFactor = 1;\n      const { width, height } = capabilities.screen.effectiveResolution;\n      const pixelCount = width * height;\n      \n      if (pixelCount > 4000000) reductionFactor = 0.5;  // 4M pixels+ (2K, 4K)\n      else if (pixelCount > 2000000) reductionFactor = 0.65; // 2M-4M pixels (1080p+)\n      else if (pixelCount > 1000000) reductionFactor = 0.75; // 1M-2M pixels\n      else reductionFactor = 0.85; // moins de 1M pixels\n      \n      // Réduire si mode économie de batterie\n      if (this.optimizations.batterySaveMode) {\n        reductionFactor *= 0.7;\n      }\n      \n      // Appliquer la réduction\n      this.currentPixelRatio = this.originalPixelRatio * reductionFactor;\n      renderer.setPixelRatio(this.currentPixelRatio);\n      \n      console.log(`MobileOptimizer: pixel ratio réduit de ${this.originalPixelRatio} à ${this.currentPixelRatio}`);\n    }\n    \n    // Simplifier les effets\n    if (this.optimizations.simplifiedEffects) {\n      // Désactiver l'antialiasing si ce n'est pas déjà fait\n      if (renderer.antialias) {\n        console.warn('MobileOptimizer: impossible de désactiver l\\'antialiasing après la création du renderer');\n      }\n      \n      // Réduire la précision des shaders\n      if (renderer.capabilities && renderer.capabilities.precision === 'highp') {\n        renderer.capabilities.precision = 'mediump';\n      }\n      \n      // Désactiver les shadow maps si possible\n      if (renderer.shadowMap && renderer.shadowMap.enabled) {\n        renderer.shadowMap.enabled = false;\n      }\n    }\n    \n    return renderer;\n  }\n  \n  /**\n   * Optimise les contrôles tactiles pour un meilleur usage sur mobile\n   * @param {Object} controls Contrôles à optimiser (OrbitControls, etc.)\n   * @returns {Object} Contrôles optimisés\n   */\n  setupOptimizedTouchControls(controls) {\n    if (!this.needsMobileOptimizations() || !this.optimizations.optimizedControls) {\n      return controls;\n    }\n    \n    // Paramètres génériques qui fonctionnent pour la plupart des contrôles THREE.js\n    if (controls.domElement) {\n      // Augmenter la zone de toucher\n      if (controls.domElement.style) {\n        controls.domElement.style.touchAction = 'none';\n      }\n    }\n    \n    // Ajuster la sensibilité pour le tactile\n    // OrbitControls\n    if (controls.rotateSpeed !== undefined) {\n      controls.rotateSpeed = 0.8; // Plus lent pour plus de précision\n    }\n    \n    if (controls.zoomSpeed !== undefined) {\n      controls.zoomSpeed = 1.2; // Plus rapide pour le zoom\n    }\n    \n    if (controls.panSpeed !== undefined) {\n      controls.panSpeed = 0.8; // Plus lent pour plus de précision\n    }\n    \n    // Désactiver l'inertie sur mobile (peut causer des problèmes de performance)\n    if (controls.enableDamping !== undefined) {\n      controls.enableDamping = false;\n    }\n    \n    // Augmenter les distances min/max de zoom pour éviter des problèmes\n    if (controls.minDistance !== undefined) {\n      controls.minDistance *= 1.2; // Éviter de zoomer trop près\n    }\n    \n    // TrackballControls\n    if (controls.noRotate !== undefined) {\n      controls.rotateSpeed = 2.0; // TrackballControls nécessite plus de rapidité\n    }\n    \n    // FlyControls ou équivalent\n    if (controls.movementSpeed !== undefined) {\n      controls.movementSpeed *= 0.7; // Ralentir les mouvements\n    }\n    \n    return controls;\n  }\n  \n  /**\n   * Active le mode économie de batterie\n   * @param {THREE.WebGLRenderer} renderer Renderer à optimiser\n   * @param {Function} animate Fonction d'animation originale\n   * @returns {Function} Nouvelle fonction d'animation optimisée\n   */\n  enableBatterySaveMode(renderer, animate) {\n    if (!this.needsMobileOptimizations()) return animate;\n    \n    this.optimizations.batterySaveMode = true;\n    \n    // Réduire davantage la résolution\n    const batterySavePixelRatio = this.currentPixelRatio * 0.7;\n    renderer.setPixelRatio(batterySavePixelRatio);\n    \n    // Limiter le framerate\n    let lastTime = 0;\n    const targetFPS = 30; // 30 FPS en mode économie de batterie\n    const frameTime = 1000 / targetFPS;\n    \n    const throttledAnimate = (time) => {\n      const currentTime = time || performance.now();\n      const elapsed = currentTime - lastTime;\n      \n      if (elapsed > frameTime) {\n        lastTime = currentTime - (elapsed % frameTime);\n        animate(currentTime);\n      }\n      \n      if (this.optimizations.batterySaveMode) {\n        setTimeout(() => requestAnimationFrame(throttledAnimate), 5);\n      } else {\n        requestAnimationFrame(throttledAnimate);\n      }\n    };\n    \n    console.log('MobileOptimizer: mode économie de batterie activé');\n    return throttledAnimate;\n  }\n  \n  /**\n   * Gère les changements d'orientation sur mobile\n   * @private\n   */\n  handleOrientationChange() {\n    // Attendre que l'orientation soit terminée\n    setTimeout(() => {\n      // Mettre à jour les optimisations si nécessaire\n      this.adjustForCurrentContext();\n      \n      // Déclencher un événement personnalisé pour informer l'application\n      const event = new CustomEvent('optimized-orientation-change', {\n        detail: {\n          orientation: window.orientation,\n          aspectRatio: window.innerWidth / window.innerHeight\n        }\n      });\n      \n      window.dispatchEvent(event);\n    }, 300);\n  }\n  \n  /**\n   * Gère les changements de visibilité de page\n   * @private\n   */\n  handleVisibilityChange() {\n    if (document.hidden) {\n      // La page est cachée, réduire les ressources utilisées\n      this.pauseNonEssentialProcesses();\n    } else {\n      // La page est visible à nouveau\n      this.resumeNonEssentialProcesses();\n    }\n  }\n  \n  /**\n   * Vérifie l'état de la batterie et ajuste les optimisations\n   * @param {BatteryManager} battery Objet batterie\n   * @private\n   */\n  checkBatteryStatus(battery) {\n    const lowBattery = !battery.charging && battery.level < 0.3;\n    \n    if (lowBattery !== this.optimizations.batterySaveMode) {\n      this.optimizations.batterySaveMode = lowBattery;\n      \n      if (lowBattery) {\n        console.log('MobileOptimizer: niveau de batterie bas, optimisations accrues activées');\n      } else {\n        console.log('MobileOptimizer: niveau de batterie normal, optimisations standard');\n      }\n      \n      // Déclencher un événement pour informer l'application\n      window.dispatchEvent(new CustomEvent('battery-status-change', {\n        detail: {\n          low: lowBattery,\n          level: battery.level,\n          charging: battery.charging\n        }\n      }));\n    }\n  }\n  \n  /**\n   * Met en pause les processus non essentiels quand la page est en arrière-plan\n   * @private\n   */\n  pauseNonEssentialProcesses() {\n    // Stocker l'état actuel pour le restaurer plus tard\n    this._pausedState = {\n      adaptiveQuality: this.optimizations.adaptiveQuality,\n      reducedResolution: this.optimizations.reducedResolution\n    };\n    \n    // Optimisation maximale en arrière-plan\n    this.optimizations.adaptiveQuality = false;\n    this.optimizations.reducedResolution = true;\n    \n    console.log('MobileOptimizer: pause des processus non essentiels');\n    \n    // Déclencher un événement\n    window.dispatchEvent(new CustomEvent('optimization-state-change', {\n      detail: {\n        state: 'paused',\n        optimizations: this.optimizations\n      }\n    }));\n  }\n  \n  /**\n   * Reprend les processus non essentiels quand la page revient au premier plan\n   * @private\n   */\n  resumeNonEssentialProcesses() {\n    if (this._pausedState) {\n      // Restaurer l'état précédent\n      this.optimizations.adaptiveQuality = this._pausedState.adaptiveQuality;\n      this.optimizations.reducedResolution = this._pausedState.reducedResolution;\n      \n      console.log('MobileOptimizer: reprise des processus non essentiels');\n      \n      // Déclencher un événement\n      window.dispatchEvent(new CustomEvent('optimization-state-change', {\n        detail: {\n          state: 'resumed',\n          optimizations: this.optimizations\n        }\n      }));\n    }\n  }\n  \n  /**\n   * Configure le monitoring de performance\n   * @private\n   */\n  setupPerformanceMonitoring() {\n    if (!this.optimizations.adaptiveQuality) return;\n    \n    let lastTime = performance.now();\n    let frames = 0;\n    \n    const checkPerformance = () => {\n      const now = performance.now();\n      frames++;\n      \n      // Calculer le FPS toutes les secondes\n      if (now - lastTime >= 1000) {\n        const currentFPS = Math.round(frames * 1000 / (now - lastTime));\n        \n        // Mettre à jour l'historique\n        this.performanceMetrics.frameHistory.push(currentFPS);\n        if (this.performanceMetrics.frameHistory.length > 60) {\n          this.performanceMetrics.frameHistory.shift();\n        }\n        \n        // Calculer la moyenne\n        const averageFPS = this.performanceMetrics.frameHistory.reduce((a, b) => a + b, 0) / \n                          this.performanceMetrics.frameHistory.length;\n                         \n        this.performanceMetrics.frameRate = Math.round(averageFPS);\n        \n        // Détecter les chutes de frames\n        if (currentFPS < this.adaptiveQualityMetrics.minFPS) {\n          this.performanceMetrics.dropCount++;\n          \n          // Si on a plusieurs chutes consécutives, ajuster la qualité\n          if (this.performanceMetrics.dropCount >= 3) {\n            this.adjustQualityBasedOnPerformance();\n            this.performanceMetrics.dropCount = 0;\n          }\n        } else {\n          this.performanceMetrics.dropCount = Math.max(0, this.performanceMetrics.dropCount - 1);\n        }\n        \n        // Vérifier si on peut augmenter la qualité\n        const timeSinceLastAdjustment = now - this.adaptiveQualityMetrics.lastAdjustment;\n        if (timeSinceLastAdjustment > this.adaptiveQualityMetrics.adjustmentCooldown && \n            this.performanceMetrics.frameRate > this.adaptiveQualityMetrics.targetFPS + 10) {\n          this.increaseQuality();\n        }\n        \n        // Reset compteurs\n        lastTime = now;\n        frames = 0;\n      }\n      \n      // Continuer la vérification\n      requestAnimationFrame(checkPerformance);\n    };\n    \n    // Démarrer le monitoring\n    checkPerformance();\n  }\n  \n  /**\n   * Ajuste la qualité visuelle en fonction des performances\n   * @private\n   */\n  adjustQualityBasedOnPerformance() {\n    const now = performance.now();\n    \n    // Vérifier le cooldown\n    if (now - this.adaptiveQualityMetrics.lastAdjustment < this.adaptiveQualityMetrics.adjustmentCooldown) {\n      return;\n    }\n    \n    // Réduire la qualité\n    this.adaptiveQualityMetrics.currentQualityMultiplier *= 0.8;\n    this.adaptiveQualityMetrics.currentQualityMultiplier = Math.max(0.4, this.adaptiveQualityMetrics.currentQualityMultiplier);\n    this.adaptiveQualityMetrics.lastAdjustment = now;\n    \n    console.log(`MobileOptimizer: réduction de la qualité à ${Math.round(this.adaptiveQualityMetrics.currentQualityMultiplier * 100)}% pour maintenir les performances`);\n    \n    // Déclencher un événement pour informer l'application\n    window.dispatchEvent(new CustomEvent('quality-adjustment', {\n      detail: {\n        qualityMultiplier: this.adaptiveQualityMetrics.currentQualityMultiplier,\n        reason: 'performance-drop',\n        frameRate: this.performanceMetrics.frameRate\n      }\n    }));\n  }\n  \n  /**\n   * Augmente la qualité si les performances le permettent\n   * @private\n   */\n  increaseQuality() {\n    const now = performance.now();\n    \n    // Vérifier le cooldown\n    if (now - this.adaptiveQualityMetrics.lastAdjustment < this.adaptiveQualityMetrics.adjustmentCooldown) {\n      return;\n    }\n    \n    // Augmenter la qualité\n    this.adaptiveQualityMetrics.currentQualityMultiplier *= 1.1;\n    this.adaptiveQualityMetrics.currentQualityMultiplier = Math.min(1.0, this.adaptiveQualityMetrics.currentQualityMultiplier);\n    this.adaptiveQualityMetrics.lastAdjustment = now;\n    \n    console.log(`MobileOptimizer: augmentation de la qualité à ${Math.round(this.adaptiveQualityMetrics.currentQualityMultiplier * 100)}% grâce aux bonnes performances`);\n    \n    // Déclencher un événement pour informer l'application\n    window.dispatchEvent(new CustomEvent('quality-adjustment', {\n      detail: {\n        qualityMultiplier: this.adaptiveQualityMetrics.currentQualityMultiplier,\n        reason: 'performance-good',\n        frameRate: this.performanceMetrics.frameRate\n      }\n    }));\n  }\n  \n  /**\n   * Ajuste les optimisations en fonction du contexte actuel\n   */\n  adjustForCurrentContext() {\n    const capabilities = deviceCapabilityDetector.getCapabilities();\n    \n    // Ajuster les optimisations en fonction de l'orientation\n    const isLandscape = window.innerWidth > window.innerHeight;\n    \n    if (isLandscape) {\n      // En mode paysage, on peut être un peu plus généreux\n      this.optimizations.reducedResolution = this.isMobile;\n    } else {\n      // En mode portrait, optimiser davantage\n      this.optimizations.reducedResolution = true;\n    }\n    \n    // Ajuster en fonction du réseau\n    if (capabilities.network.effectiveType === '2g' || \n        capabilities.network.effectiveType === 'slow-2g') {\n      this.optimizations.progressiveLoading = true;\n      this.optimizations.reducedAnimations = true;\n    }\n    \n    console.log('MobileOptimizer: ajustement des optimisations au contexte actuel');\n  }\n  \n  /**\n   * Retourne la configuration d'optimisation actuelle pour les shaders\n   * @returns {Object} Configuration pour les shaders\n   */\n  getShaderOptimizationConfig() {\n    const config = {\n      precision: 'mediump',\n      optimizeLoops: this.needsMobileOptimizations(),\n      simplifyLighting: this.needsMobileOptimizations(),\n      maxLights: this.optimizations.batterySaveMode ? 2 : 4\n    };\n    \n    if (this.optimizations.batterySaveMode) {\n      config.precision = 'lowp';\n    }\n    \n    return config;\n  }\n  \n  /**\n   * Configure un chargeur de textures pour le chargement progressif\n   * @param {THREE.TextureLoader} textureLoader Chargeur de textures THREE.js\n   * @returns {Object} API pour le chargement progressif\n   */\n  setupProgressiveTextureLoading(textureLoader) {\n    if (!textureLoader) return null;\n    \n    const capabilities = deviceCapabilityDetector.getCapabilities();\n    const isLowEnd = capabilities.flags.isLowEndDevice || capabilities.performanceLevel <= 2;\n    \n    // Créer une API pour le chargement progressif\n    return {\n      /**\n       * Charge une texture de manière progressive\n       * @param {string} url URL de la texture\n       * @param {Function} onProgress Callback de progression\n       * @returns {Promise<Object>} Promise avec les textures chargées progressivement\n       */\n      loadTexture: (url, onProgress) => {\n        return new Promise((resolve) => {\n          // Déterminer les résolutions à charger\n          let resolutions = ['low', 'high'];\n          \n          if (isLowEnd || this.optimizations.batterySaveMode) {\n            // Pour les appareils faibles, on charge uniquement la version basse résolution\n            resolutions = ['low'];\n          }\n          \n          // Générer les URLs pour les différentes résolutions\n          const urls = resolutions.map(res => {\n            const urlObj = new URL(url, window.location.href);\n            const urlParts = urlObj.pathname.split('.');\n            const ext = urlParts.pop();\n            \n            if (res === 'low') {\n              return `${urlParts.join('.')}_low.${ext}`;\n            }\n            return url;\n          });\n          \n          // Charger la version basse résolution d'abord\n          textureLoader.load(urls[0], (lowTexture) => {\n            if (resolutions.length === 1 || !this.optimizations.progressiveLoading) {\n              // Si on ne charge qu'une résolution ou que le chargement progressif est désactivé\n              resolve({ texture: lowTexture, quality: 'low' });\n            } else {\n              // Sinon, on charge aussi la haute résolution\n              textureLoader.load(urls[1], (highTexture) => {\n                resolve({ \n                  texture: highTexture, \n                  quality: 'high',\n                  lowQualityTexture: lowTexture \n                });\n              }, onProgress);\n              \n              // Mais on retourne déjà la basse résolution pour l'afficher pendant le chargement\n              resolve({ \n                texture: lowTexture, \n                quality: 'low',\n                pendingHighQuality: true\n              });\n            }\n          }, onProgress);\n        });\n      }\n    };\n  }\n}\n\n// Exporter une instance singleton\nconst mobileOptimizer = new MobileOptimizer();\nexport default mobileOptimizer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}