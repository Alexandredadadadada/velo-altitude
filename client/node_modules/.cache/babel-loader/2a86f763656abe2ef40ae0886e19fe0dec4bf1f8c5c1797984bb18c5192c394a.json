{"ast":null,"code":"/**\n * Service de calcul et d'estimation de la FTP (Functional Threshold Power)\n * Offre diverses méthodes pour estimer la FTP d'un cycliste basées sur\n * différents paramètres physiologiques et tests de performance\n * \n * Références scientifiques:\n * - Allen, H., & Coggan, A. (2019). Training and Racing with a Power Meter. VeloPress.\n * - Coggan, A. R. (2018). Power Profiling. TrainingPeaks Blog.\n * - Pinot, J., & Grappe, F. (2011). The record power profile to assess performance in elite cyclists.\n *//**\n * Estime la FTP basée sur le poids et le niveau du cycliste\n * @param {number} weight - Poids en kg\n * @param {string} level - Niveau du cycliste (beginner, intermediate, advanced, elite)\n * @returns {number} FTP estimée en watts\n */export const estimateFTPFromWeight=function(weight){let level=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'intermediate';if(!weight||typeof weight!=='number'||weight<=0||isNaN(weight)){console.warn('Poids invalide pour l\\'estimation FTP',{weight});return null;}// Coefficients watts/kg basés sur les données de Coggan & Allen (2019)\n// Ces valeurs sont des moyennes empiriques observées chez des cyclistes de différents niveaux\nconst ftpMultipliers={beginner:{min:1.5,avg:2.0,max:2.5},// Débutant (< 1 an d'entraînement structuré)\nintermediate:{min:2.5,avg:3.0,max:3.5},// Intermédiaire (1-3 ans d'entraînement)\nadvanced:{min:3.5,avg:4.0,max:4.5},// Avancé (> 3 ans d'entraînement régulier)\nelite:{min:4.5,avg:5.2,max:6.0}// Élite (niveau national/international)\n};// Utiliser le niveau demandé ou par défaut intermediate\nconst multiplier=ftpMultipliers[level]||ftpMultipliers.intermediate;// Utiliser la valeur moyenne pour le calcul\nreturn Math.round(weight*multiplier.avg);};/**\n * Estime la FTP à partir d'un test de 20 minutes\n * @param {number} power20min - Puissance moyenne sur un test de 20 minutes (watts)\n * @returns {number} FTP estimée en watts\n * \n * Référence: La FTP est généralement environ 95% de la puissance maximale sur 20 minutes\n * (Allen & Coggan, 2019)\n */export const estimateFTPFrom20MinTest=power20min=>{if(!power20min||typeof power20min!=='number'||power20min<=0||isNaN(power20min)){console.warn('Puissance 20min invalide pour l\\'estimation FTP',{power20min});return null;}// Facteur généralement accepté: 95% de la puissance moyenne sur 20min\nreturn Math.round(power20min*0.95);};/**\n * Estime la FTP à partir d'un test de 8 minutes (avec facteur ajustable)\n * @param {number} power8min - Puissance moyenne sur un test de 8 minutes (watts)\n * @param {number} factor - Facteur d'ajustement (par défaut 0.9)\n * @returns {number} FTP estimée en watts\n * \n * Référence: La FTP est généralement environ 90% de la puissance maximale sur 8 minutes\n * (Allen & Coggan, 2019)\n */export const estimateFTPFrom8MinTest=function(power8min){let factor=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.9;if(!power8min||typeof power8min!=='number'||power8min<=0||isNaN(power8min)){console.warn('Puissance 8min invalide pour l\\'estimation FTP',{power8min});return null;}// Validation du facteur\nif(typeof factor!=='number'||factor<=0||factor>=1||isNaN(factor)){console.warn('Facteur invalide pour l\\'estimation FTP',{factor});factor=0.9;// Valeur par défaut de sécurité\n}return Math.round(power8min*factor);};/**\n * Estime la FTP à partir d'un test de 5 minutes (avec facteur ajustable)\n * @param {number} power5min - Puissance moyenne sur un test de 5 minutes (watts)\n * @param {number} factor - Facteur d'ajustement (par défaut 0.85)\n * @returns {number} FTP estimée en watts\n * \n * Référence: La FTP est généralement environ 85% de la puissance maximale sur 5 minutes\n * (Adaptation des recherches d'Allen & Coggan)\n */export const estimateFTPFrom5MinTest=function(power5min){let factor=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.85;if(!power5min||typeof power5min!=='number'||power5min<=0||isNaN(power5min)){console.warn('Puissance 5min invalide pour l\\'estimation FTP',{power5min});return null;}// Validation du facteur\nif(typeof factor!=='number'||factor<=0||factor>=1||isNaN(factor)){console.warn('Facteur invalide pour l\\'estimation FTP',{factor});factor=0.85;// Valeur par défaut de sécurité\n}return Math.round(power5min*factor);};/**\n * Calcule la puissance critique (CP) à partir des tests de 5min et 1min\n * @param {number} power5min - Puissance moyenne sur 5 minutes (watts)\n * @param {number} power1min - Puissance moyenne sur 1 minute (watts)\n * @returns {Object} CP et AWC (Anaerobic Work Capacity)\n * \n * Référence: Modèle à 2 paramètres de Monod & Scherrer (1965)\n * P = AWC/t + CP\n * où P est la puissance maintenue pendant un temps t,\n * AWC est la capacité de travail anaérobie, et CP est la puissance critique\n */export const calculateCP=(power5min,power1min)=>{if(!power5min||!power1min||typeof power5min!=='number'||typeof power1min!=='number'||power5min<=0||power1min<=0||isNaN(power5min)||isNaN(power1min)){console.warn('Puissances invalides pour le calcul CP',{power5min,power1min});return null;}const t5=5*60;// 5 minutes en secondes\nconst t1=60;// 1 minute en secondes\n// Résoudre pour CP (puissance critique)\nconst cp=(power5min*t5-power1min*t1)/(t5-t1);// Calculer AWC (capacité de travail anaérobie)\nconst awc=(power1min-cp)*t1;return{cp:Math.round(cp),awc:Math.round(awc)};};/**\n * Estime la FTP à partir d'un test de 1 minute (facteur direct)\n * @param {number} power1min - Puissance moyenne sur un test de 1 minute (watts)\n * @param {number} factor - Facteur d'ajustement (par défaut 0.75)\n * @returns {number} FTP estimée en watts\n * \n * Note: Cette méthode est moins précise que les autres et devrait être utilisée\n * uniquement quand d'autres données ne sont pas disponibles\n */export const estimateFTPFrom1MinTest=function(power1min){let factor=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.75;if(!power1min||typeof power1min!=='number'||power1min<=0||isNaN(power1min)){console.warn('Puissance 1min invalide pour l\\'estimation FTP',{power1min});return null;}// Validation du facteur\nif(typeof factor!=='number'||factor<=0||factor>=1||isNaN(factor)){console.warn('Facteur invalide pour l\\'estimation FTP',{factor});factor=0.75;// Valeur par défaut de sécurité\n}return Math.round(power1min*factor);};/**\n * Estime la FTP à partir de la puissance critique (modèle à 2 paramètres)\n * @param {number} cp - Puissance critique (W)\n * @returns {number} FTP estimée en watts\n * \n * Référence: La FTP est généralement environ 97% de la CP (Moritani et al., 1981)\n */export const estimateFTPFromCP=cp=>{if(!cp||typeof cp!=='number'||cp<=0||isNaN(cp)){console.warn('Puissance critique invalide pour l\\'estimation FTP',{cp});return null;}// FTP est typiquement légèrement inférieure à CP\nreturn Math.round(cp*0.97);};/**\n * Estime la FTP à partir d'un test Ramp\n * @param {number} maxPower - Puissance maximale atteinte dans le test Ramp (watts)\n * @param {number} factor - Facteur d'ajustement (par défaut 0.75)\n * @returns {number} FTP estimée en watts\n * \n * Référence: Protocole utilisé par Zwift et TrainerRoad\n */export const estimateFTPFromRampTest=function(maxPower){let factor=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.75;if(!maxPower||typeof maxPower!=='number'||maxPower<=0||isNaN(maxPower)){console.warn('Puissance maximale du test Ramp invalide',{maxPower});return null;}// Validation du facteur\nif(typeof factor!=='number'||factor<=0||factor>=1||isNaN(factor)){console.warn('Facteur invalide pour l\\'estimation FTP',{factor});factor=0.75;// Valeur par défaut de sécurité\n}// La FTP est généralement environ 75% de la puissance maximale du test Ramp\nreturn Math.round(maxPower*factor);};/**\n * Estime la FTP à partir de données de fréquence cardiaque\n * @param {Object} params - Paramètres cardiaques et physiologiques\n * @returns {number} FTP estimée en watts\n * \n * Référence: Adaptation des recherches de Lamberts et al. (2011)\n */export const estimateFTPFromHR=params=>{const{maxHR,restingHR,ltHR,weight,vo2max}=params;// Vérifier si nous avons les données minimales requises\nif(!maxHR||!restingHR||!weight||typeof maxHR!=='number'||typeof restingHR!=='number'||typeof weight!=='number'||maxHR<=restingHR||weight<=0){console.warn('Paramètres cardiaques invalides',params);return null;}let estimatedFTP=null;// Si nous avons la FC au seuil lactique\nif(ltHR&&typeof ltHR==='number'&&ltHR>restingHR&&ltHR<maxHR){// Calcul du % de FC max\nconst percentOfMax=ltHR/maxHR;// Estimation watts/kg basée sur le niveau de forme (lié au % FC max au seuil)\nlet ftpPerKg;if(percentOfMax>0.92)ftpPerKg=4.5;// Très entraîné\nelse if(percentOfMax>0.89)ftpPerKg=4.0;// Bien entraîné\nelse if(percentOfMax>0.85)ftpPerKg=3.5;// Entraîné\nelse if(percentOfMax>0.82)ftpPerKg=3.0;// Modérément entraîné\nelse ftpPerKg=2.5;// Moins entraîné\nestimatedFTP=Math.round(ftpPerKg*weight);}// Si nous avons une estimation du VO2max\nelse if(vo2max&&typeof vo2max==='number'&&vo2max>20){// Conversion VO2max en watts/kg (d'après Hawley & Noakes, 1992)\n// FTP correspond généralement à ~70-75% du VO2max\nestimatedFTP=Math.round(vo2max*0.75*weight*0.0123);}// Sinon, utiliser la réserve cardiaque (approche de Karvonen)\nelse{const hrReserve=maxHR-restingHR;// Estimer LTHR à 85-89% de la réserve cardiaque\nconst estimatedLTHR=restingHR+hrReserve*0.87;const percentOfMax=estimatedLTHR/maxHR;// Même logique que ci-dessus pour estimer watts/kg\nlet ftpPerKg;if(percentOfMax>0.92)ftpPerKg=4.5;// Très entraîné\nelse if(percentOfMax>0.89)ftpPerKg=4.0;// Bien entraîné\nelse if(percentOfMax>0.85)ftpPerKg=3.5;// Entraîné\nelse if(percentOfMax>0.82)ftpPerKg=3.0;// Modérément entraîné\nelse ftpPerKg=2.5;// Moins entraîné\nestimatedFTP=Math.round(ftpPerKg*weight);}return estimatedFTP;};/**\n * Valide et normalise une valeur FTP\n * @param {number} ftp - La valeur FTP à valider\n * @param {Object} profile - Le profil utilisateur pour l'estimation en cas de valeur invalide\n * @returns {number} FTP validée ou estimée\n */export const validateFTP=function(ftp){let profile=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(ftp&&typeof ftp==='number'&&ftp>0&&!isNaN(ftp)){// FTP valide, vérifier si elle est dans une plage raisonnable\nif(ftp<50){console.warn('FTP anormalement basse:',ftp);// Si le profil a un poids, essayer d'estimer une valeur plus réaliste\nif(profile.weight){return estimateFTPFromWeight(profile.weight,profile.level);}return 100;// Valeur minimale par défaut\n}if(ftp>500){console.warn('FTP potentiellement très élevée:',ftp);// Ne pas corriger automatiquement les valeurs élevées, certains cyclistes peuvent avoir des FTP élevées\n}return ftp;// Valeur valide\n}// FTP invalide, essayer d'estimer à partir du profil\nconsole.warn('FTP invalide, tentative d\\'estimation à partir du profil',{ftp});if(profile.weight&&typeof profile.weight==='number'&&profile.weight>0){const estimatedFTP=estimateFTPFromWeight(profile.weight,profile.level);console.info(`FTP estimée à partir du poids (${profile.weight}kg): ${estimatedFTP}W`);return estimatedFTP;}// Valeurs par défaut basées sur le niveau\nconst defaultFTP={beginner:150,intermediate:200,advanced:250,elite:300}[profile.level]||200;console.info(`FTP par défaut utilisée: ${defaultFTP}W`);return defaultFTP;};/**\n * Calcule les zones de puissance basées sur la FTP\n * @param {number} ftp - Valeur FTP en watts\n * @returns {Object} Zones de puissance\n * \n * Référence: Zones d'entraînement définies par Allen & Coggan (2019)\n */export const calculatePowerZones=ftp=>{if(!ftp||typeof ftp!=='number'||ftp<=0||isNaN(ftp)){console.warn('FTP invalide pour le calcul des zones',{ftp});ftp=200;// Valeur par défaut sécurisée\n}return{zone1:{name:'Récupération Active',description:'Très facile, récupération active',min:Math.round(ftp*0.0),max:Math.round(ftp*0.55),percentFtp:'0-55%'},zone2:{name:'Endurance',description:'Effort soutenu longue durée, conversation possible',min:Math.round(ftp*0.56),max:Math.round(ftp*0.75),percentFtp:'56-75%'},zone3:{name:'Tempo',description:'Rythme soutenu mais confortable, respiration plus intense',min:Math.round(ftp*0.76),max:Math.round(ftp*0.9),percentFtp:'76-90%'},zone4:{name:'Seuil',description:'Effort intense au niveau du seuil lactique, 20-30min max',min:Math.round(ftp*0.91),max:Math.round(ftp*1.05),percentFtp:'91-105%'},zone5:{name:'VO2max',description:'Effort très intense, 3-8min par intervalle',min:Math.round(ftp*1.06),max:Math.round(ftp*1.2),percentFtp:'106-120%'},zone6:{name:'Capacité Anaérobie',description:'Effort anaérobie maximal, 30s-3min par intervalle',min:Math.round(ftp*1.21),max:Math.round(ftp*1.5),percentFtp:'121-150%'},zone7:{name:'Sprint/Neuromuscular',description:'Puissance maximale, efforts <30s',min:Math.round(ftp*1.51),max:Infinity,percentFtp:'>150%'}};};/**\n * Calculer les zones cardiaques basées sur la fréquence cardiaque maximale\n * @param {number} maxHR - Fréquence cardiaque maximale (bpm)\n * @param {number} restingHR - Fréquence cardiaque au repos (bpm)\n * @returns {Object} Zones cardiaques\n * \n * Référence: Zones de Karvonen basées sur la réserve cardiaque (FCmax-FCrepos)\n */export const calculateHeartRateZones=(maxHR,restingHR)=>{if(!maxHR||!restingHR||typeof maxHR!=='number'||typeof restingHR!=='number'||maxHR<=restingHR||isNaN(maxHR)||isNaN(restingHR)){console.warn('Fréquences cardiaques invalides',{maxHR,restingHR});return null;}const hrReserve=maxHR-restingHR;return{zone1:{name:'Récupération',min:Math.round(restingHR+hrReserve*0.5),max:Math.round(restingHR+hrReserve*0.6),percentHRR:'50-60%'},zone2:{name:'Endurance de base',min:Math.round(restingHR+hrReserve*0.6+1),max:Math.round(restingHR+hrReserve*0.7),percentHRR:'60-70%'},zone3:{name:'Endurance avancée',min:Math.round(restingHR+hrReserve*0.7+1),max:Math.round(restingHR+hrReserve*0.8),percentHRR:'70-80%'},zone4:{name:'Seuil',min:Math.round(restingHR+hrReserve*0.8+1),max:Math.round(restingHR+hrReserve*0.9),percentHRR:'80-90%'},zone5:{name:'VO2max',min:Math.round(restingHR+hrReserve*0.9+1),max:maxHR,percentHRR:'90-100%'}};};export default{estimateFTPFromWeight,estimateFTPFrom20MinTest,estimateFTPFrom8MinTest,estimateFTPFrom5MinTest,estimateFTPFrom1MinTest,calculateCP,estimateFTPFromCP,estimateFTPFromRampTest,estimateFTPFromHR,validateFTP,calculatePowerZones,calculateHeartRateZones};","map":{"version":3,"names":["estimateFTPFromWeight","weight","level","arguments","length","undefined","isNaN","console","warn","ftpMultipliers","beginner","min","avg","max","intermediate","advanced","elite","multiplier","Math","round","estimateFTPFrom20MinTest","power20min","estimateFTPFrom8MinTest","power8min","factor","estimateFTPFrom5MinTest","power5min","calculateCP","power1min","t5","t1","cp","awc","estimateFTPFrom1MinTest","estimateFTPFromCP","estimateFTPFromRampTest","maxPower","estimateFTPFromHR","params","maxHR","restingHR","ltHR","vo2max","estimatedFTP","percentOfMax","ftpPerKg","hrReserve","estimatedLTHR","validateFTP","ftp","profile","info","defaultFTP","calculatePowerZones","zone1","name","description","percentFtp","zone2","zone3","zone4","zone5","zone6","zone7","Infinity","calculateHeartRateZones","percentHRR"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/services/FTPEstimationService.js"],"sourcesContent":["/**\n * Service de calcul et d'estimation de la FTP (Functional Threshold Power)\n * Offre diverses méthodes pour estimer la FTP d'un cycliste basées sur\n * différents paramètres physiologiques et tests de performance\n * \n * Références scientifiques:\n * - Allen, H., & Coggan, A. (2019). Training and Racing with a Power Meter. VeloPress.\n * - Coggan, A. R. (2018). Power Profiling. TrainingPeaks Blog.\n * - Pinot, J., & Grappe, F. (2011). The record power profile to assess performance in elite cyclists.\n */\n\n/**\n * Estime la FTP basée sur le poids et le niveau du cycliste\n * @param {number} weight - Poids en kg\n * @param {string} level - Niveau du cycliste (beginner, intermediate, advanced, elite)\n * @returns {number} FTP estimée en watts\n */\nexport const estimateFTPFromWeight = (weight, level = 'intermediate') => {\n  if (!weight || typeof weight !== 'number' || weight <= 0 || isNaN(weight)) {\n    console.warn('Poids invalide pour l\\'estimation FTP', { weight });\n    return null;\n  }\n\n  // Coefficients watts/kg basés sur les données de Coggan & Allen (2019)\n  // Ces valeurs sont des moyennes empiriques observées chez des cyclistes de différents niveaux\n  const ftpMultipliers = {\n    beginner: { min: 1.5, avg: 2.0, max: 2.5 },       // Débutant (< 1 an d'entraînement structuré)\n    intermediate: { min: 2.5, avg: 3.0, max: 3.5 },   // Intermédiaire (1-3 ans d'entraînement)\n    advanced: { min: 3.5, avg: 4.0, max: 4.5 },       // Avancé (> 3 ans d'entraînement régulier)\n    elite: { min: 4.5, avg: 5.2, max: 6.0 }           // Élite (niveau national/international)\n  };\n\n  // Utiliser le niveau demandé ou par défaut intermediate\n  const multiplier = ftpMultipliers[level] || ftpMultipliers.intermediate;\n  \n  // Utiliser la valeur moyenne pour le calcul\n  return Math.round(weight * multiplier.avg);\n};\n\n/**\n * Estime la FTP à partir d'un test de 20 minutes\n * @param {number} power20min - Puissance moyenne sur un test de 20 minutes (watts)\n * @returns {number} FTP estimée en watts\n * \n * Référence: La FTP est généralement environ 95% de la puissance maximale sur 20 minutes\n * (Allen & Coggan, 2019)\n */\nexport const estimateFTPFrom20MinTest = (power20min) => {\n  if (!power20min || typeof power20min !== 'number' || power20min <= 0 || isNaN(power20min)) {\n    console.warn('Puissance 20min invalide pour l\\'estimation FTP', { power20min });\n    return null;\n  }\n  \n  // Facteur généralement accepté: 95% de la puissance moyenne sur 20min\n  return Math.round(power20min * 0.95);\n};\n\n/**\n * Estime la FTP à partir d'un test de 8 minutes (avec facteur ajustable)\n * @param {number} power8min - Puissance moyenne sur un test de 8 minutes (watts)\n * @param {number} factor - Facteur d'ajustement (par défaut 0.9)\n * @returns {number} FTP estimée en watts\n * \n * Référence: La FTP est généralement environ 90% de la puissance maximale sur 8 minutes\n * (Allen & Coggan, 2019)\n */\nexport const estimateFTPFrom8MinTest = (power8min, factor = 0.9) => {\n  if (!power8min || typeof power8min !== 'number' || power8min <= 0 || isNaN(power8min)) {\n    console.warn('Puissance 8min invalide pour l\\'estimation FTP', { power8min });\n    return null;\n  }\n  \n  // Validation du facteur\n  if (typeof factor !== 'number' || factor <= 0 || factor >= 1 || isNaN(factor)) {\n    console.warn('Facteur invalide pour l\\'estimation FTP', { factor });\n    factor = 0.9; // Valeur par défaut de sécurité\n  }\n  \n  return Math.round(power8min * factor);\n};\n\n/**\n * Estime la FTP à partir d'un test de 5 minutes (avec facteur ajustable)\n * @param {number} power5min - Puissance moyenne sur un test de 5 minutes (watts)\n * @param {number} factor - Facteur d'ajustement (par défaut 0.85)\n * @returns {number} FTP estimée en watts\n * \n * Référence: La FTP est généralement environ 85% de la puissance maximale sur 5 minutes\n * (Adaptation des recherches d'Allen & Coggan)\n */\nexport const estimateFTPFrom5MinTest = (power5min, factor = 0.85) => {\n  if (!power5min || typeof power5min !== 'number' || power5min <= 0 || isNaN(power5min)) {\n    console.warn('Puissance 5min invalide pour l\\'estimation FTP', { power5min });\n    return null;\n  }\n  \n  // Validation du facteur\n  if (typeof factor !== 'number' || factor <= 0 || factor >= 1 || isNaN(factor)) {\n    console.warn('Facteur invalide pour l\\'estimation FTP', { factor });\n    factor = 0.85; // Valeur par défaut de sécurité\n  }\n  \n  return Math.round(power5min * factor);\n};\n\n/**\n * Calcule la puissance critique (CP) à partir des tests de 5min et 1min\n * @param {number} power5min - Puissance moyenne sur 5 minutes (watts)\n * @param {number} power1min - Puissance moyenne sur 1 minute (watts)\n * @returns {Object} CP et AWC (Anaerobic Work Capacity)\n * \n * Référence: Modèle à 2 paramètres de Monod & Scherrer (1965)\n * P = AWC/t + CP\n * où P est la puissance maintenue pendant un temps t,\n * AWC est la capacité de travail anaérobie, et CP est la puissance critique\n */\nexport const calculateCP = (power5min, power1min) => {\n  if (!power5min || !power1min || \n      typeof power5min !== 'number' || typeof power1min !== 'number' || \n      power5min <= 0 || power1min <= 0 || \n      isNaN(power5min) || isNaN(power1min)) {\n    console.warn('Puissances invalides pour le calcul CP', { power5min, power1min });\n    return null;\n  }\n  \n  const t5 = 5 * 60; // 5 minutes en secondes\n  const t1 = 60;     // 1 minute en secondes\n  \n  // Résoudre pour CP (puissance critique)\n  const cp = (power5min * t5 - power1min * t1) / (t5 - t1);\n  \n  // Calculer AWC (capacité de travail anaérobie)\n  const awc = (power1min - cp) * t1;\n  \n  return {\n    cp: Math.round(cp),\n    awc: Math.round(awc)\n  };\n};\n\n/**\n * Estime la FTP à partir d'un test de 1 minute (facteur direct)\n * @param {number} power1min - Puissance moyenne sur un test de 1 minute (watts)\n * @param {number} factor - Facteur d'ajustement (par défaut 0.75)\n * @returns {number} FTP estimée en watts\n * \n * Note: Cette méthode est moins précise que les autres et devrait être utilisée\n * uniquement quand d'autres données ne sont pas disponibles\n */\nexport const estimateFTPFrom1MinTest = (power1min, factor = 0.75) => {\n  if (!power1min || typeof power1min !== 'number' || power1min <= 0 || isNaN(power1min)) {\n    console.warn('Puissance 1min invalide pour l\\'estimation FTP', { power1min });\n    return null;\n  }\n  \n  // Validation du facteur\n  if (typeof factor !== 'number' || factor <= 0 || factor >= 1 || isNaN(factor)) {\n    console.warn('Facteur invalide pour l\\'estimation FTP', { factor });\n    factor = 0.75; // Valeur par défaut de sécurité\n  }\n  \n  return Math.round(power1min * factor);\n};\n\n/**\n * Estime la FTP à partir de la puissance critique (modèle à 2 paramètres)\n * @param {number} cp - Puissance critique (W)\n * @returns {number} FTP estimée en watts\n * \n * Référence: La FTP est généralement environ 97% de la CP (Moritani et al., 1981)\n */\nexport const estimateFTPFromCP = (cp) => {\n  if (!cp || typeof cp !== 'number' || cp <= 0 || isNaN(cp)) {\n    console.warn('Puissance critique invalide pour l\\'estimation FTP', { cp });\n    return null;\n  }\n  \n  // FTP est typiquement légèrement inférieure à CP\n  return Math.round(cp * 0.97);\n};\n\n/**\n * Estime la FTP à partir d'un test Ramp\n * @param {number} maxPower - Puissance maximale atteinte dans le test Ramp (watts)\n * @param {number} factor - Facteur d'ajustement (par défaut 0.75)\n * @returns {number} FTP estimée en watts\n * \n * Référence: Protocole utilisé par Zwift et TrainerRoad\n */\nexport const estimateFTPFromRampTest = (maxPower, factor = 0.75) => {\n  if (!maxPower || typeof maxPower !== 'number' || maxPower <= 0 || isNaN(maxPower)) {\n    console.warn('Puissance maximale du test Ramp invalide', { maxPower });\n    return null;\n  }\n  \n  // Validation du facteur\n  if (typeof factor !== 'number' || factor <= 0 || factor >= 1 || isNaN(factor)) {\n    console.warn('Facteur invalide pour l\\'estimation FTP', { factor });\n    factor = 0.75; // Valeur par défaut de sécurité\n  }\n  \n  // La FTP est généralement environ 75% de la puissance maximale du test Ramp\n  return Math.round(maxPower * factor);\n};\n\n/**\n * Estime la FTP à partir de données de fréquence cardiaque\n * @param {Object} params - Paramètres cardiaques et physiologiques\n * @returns {number} FTP estimée en watts\n * \n * Référence: Adaptation des recherches de Lamberts et al. (2011)\n */\nexport const estimateFTPFromHR = (params) => {\n  const { maxHR, restingHR, ltHR, weight, vo2max } = params;\n  \n  // Vérifier si nous avons les données minimales requises\n  if (!maxHR || !restingHR || !weight || \n      typeof maxHR !== 'number' || typeof restingHR !== 'number' || typeof weight !== 'number' ||\n      maxHR <= restingHR || weight <= 0) {\n    console.warn('Paramètres cardiaques invalides', params);\n    return null;\n  }\n  \n  let estimatedFTP = null;\n  \n  // Si nous avons la FC au seuil lactique\n  if (ltHR && typeof ltHR === 'number' && ltHR > restingHR && ltHR < maxHR) {\n    // Calcul du % de FC max\n    const percentOfMax = ltHR / maxHR;\n    \n    // Estimation watts/kg basée sur le niveau de forme (lié au % FC max au seuil)\n    let ftpPerKg;\n    \n    if (percentOfMax > 0.92) ftpPerKg = 4.5;      // Très entraîné\n    else if (percentOfMax > 0.89) ftpPerKg = 4.0; // Bien entraîné\n    else if (percentOfMax > 0.85) ftpPerKg = 3.5; // Entraîné\n    else if (percentOfMax > 0.82) ftpPerKg = 3.0; // Modérément entraîné\n    else ftpPerKg = 2.5;                          // Moins entraîné\n    \n    estimatedFTP = Math.round(ftpPerKg * weight);\n  }\n  // Si nous avons une estimation du VO2max\n  else if (vo2max && typeof vo2max === 'number' && vo2max > 20) {\n    // Conversion VO2max en watts/kg (d'après Hawley & Noakes, 1992)\n    // FTP correspond généralement à ~70-75% du VO2max\n    estimatedFTP = Math.round((vo2max * 0.75) * weight * 0.0123);\n  }\n  // Sinon, utiliser la réserve cardiaque (approche de Karvonen)\n  else {\n    const hrReserve = maxHR - restingHR;\n    // Estimer LTHR à 85-89% de la réserve cardiaque\n    const estimatedLTHR = restingHR + (hrReserve * 0.87);\n    const percentOfMax = estimatedLTHR / maxHR;\n    \n    // Même logique que ci-dessus pour estimer watts/kg\n    let ftpPerKg;\n    \n    if (percentOfMax > 0.92) ftpPerKg = 4.5;      // Très entraîné\n    else if (percentOfMax > 0.89) ftpPerKg = 4.0; // Bien entraîné\n    else if (percentOfMax > 0.85) ftpPerKg = 3.5; // Entraîné\n    else if (percentOfMax > 0.82) ftpPerKg = 3.0; // Modérément entraîné\n    else ftpPerKg = 2.5;                          // Moins entraîné\n    \n    estimatedFTP = Math.round(ftpPerKg * weight);\n  }\n  \n  return estimatedFTP;\n};\n\n/**\n * Valide et normalise une valeur FTP\n * @param {number} ftp - La valeur FTP à valider\n * @param {Object} profile - Le profil utilisateur pour l'estimation en cas de valeur invalide\n * @returns {number} FTP validée ou estimée\n */\nexport const validateFTP = (ftp, profile = {}) => {\n  if (ftp && typeof ftp === 'number' && ftp > 0 && !isNaN(ftp)) {\n    // FTP valide, vérifier si elle est dans une plage raisonnable\n    if (ftp < 50) {\n      console.warn('FTP anormalement basse:', ftp);\n      // Si le profil a un poids, essayer d'estimer une valeur plus réaliste\n      if (profile.weight) {\n        return estimateFTPFromWeight(profile.weight, profile.level);\n      }\n      return 100; // Valeur minimale par défaut\n    }\n    \n    if (ftp > 500) {\n      console.warn('FTP potentiellement très élevée:', ftp);\n      // Ne pas corriger automatiquement les valeurs élevées, certains cyclistes peuvent avoir des FTP élevées\n    }\n    \n    return ftp; // Valeur valide\n  }\n  \n  // FTP invalide, essayer d'estimer à partir du profil\n  console.warn('FTP invalide, tentative d\\'estimation à partir du profil', { ftp });\n  \n  if (profile.weight && typeof profile.weight === 'number' && profile.weight > 0) {\n    const estimatedFTP = estimateFTPFromWeight(profile.weight, profile.level);\n    console.info(`FTP estimée à partir du poids (${profile.weight}kg): ${estimatedFTP}W`);\n    return estimatedFTP;\n  }\n  \n  // Valeurs par défaut basées sur le niveau\n  const defaultFTP = {\n    beginner: 150,\n    intermediate: 200,\n    advanced: 250,\n    elite: 300\n  }[profile.level] || 200;\n  \n  console.info(`FTP par défaut utilisée: ${defaultFTP}W`);\n  return defaultFTP;\n};\n\n/**\n * Calcule les zones de puissance basées sur la FTP\n * @param {number} ftp - Valeur FTP en watts\n * @returns {Object} Zones de puissance\n * \n * Référence: Zones d'entraînement définies par Allen & Coggan (2019)\n */\nexport const calculatePowerZones = (ftp) => {\n  if (!ftp || typeof ftp !== 'number' || ftp <= 0 || isNaN(ftp)) {\n    console.warn('FTP invalide pour le calcul des zones', { ftp });\n    ftp = 200; // Valeur par défaut sécurisée\n  }\n  \n  return {\n    zone1: {\n      name: 'Récupération Active',\n      description: 'Très facile, récupération active',\n      min: Math.round(ftp * 0.0),\n      max: Math.round(ftp * 0.55),\n      percentFtp: '0-55%'\n    },\n    zone2: {\n      name: 'Endurance',\n      description: 'Effort soutenu longue durée, conversation possible',\n      min: Math.round(ftp * 0.56),\n      max: Math.round(ftp * 0.75),\n      percentFtp: '56-75%'\n    },\n    zone3: {\n      name: 'Tempo',\n      description: 'Rythme soutenu mais confortable, respiration plus intense',\n      min: Math.round(ftp * 0.76),\n      max: Math.round(ftp * 0.9),\n      percentFtp: '76-90%'\n    },\n    zone4: {\n      name: 'Seuil',\n      description: 'Effort intense au niveau du seuil lactique, 20-30min max',\n      min: Math.round(ftp * 0.91),\n      max: Math.round(ftp * 1.05),\n      percentFtp: '91-105%'\n    },\n    zone5: {\n      name: 'VO2max',\n      description: 'Effort très intense, 3-8min par intervalle',\n      min: Math.round(ftp * 1.06),\n      max: Math.round(ftp * 1.2),\n      percentFtp: '106-120%'\n    },\n    zone6: {\n      name: 'Capacité Anaérobie',\n      description: 'Effort anaérobie maximal, 30s-3min par intervalle',\n      min: Math.round(ftp * 1.21),\n      max: Math.round(ftp * 1.5),\n      percentFtp: '121-150%'\n    },\n    zone7: {\n      name: 'Sprint/Neuromuscular',\n      description: 'Puissance maximale, efforts <30s',\n      min: Math.round(ftp * 1.51),\n      max: Infinity,\n      percentFtp: '>150%'\n    }\n  };\n};\n\n/**\n * Calculer les zones cardiaques basées sur la fréquence cardiaque maximale\n * @param {number} maxHR - Fréquence cardiaque maximale (bpm)\n * @param {number} restingHR - Fréquence cardiaque au repos (bpm)\n * @returns {Object} Zones cardiaques\n * \n * Référence: Zones de Karvonen basées sur la réserve cardiaque (FCmax-FCrepos)\n */\nexport const calculateHeartRateZones = (maxHR, restingHR) => {\n  if (!maxHR || !restingHR || \n      typeof maxHR !== 'number' || typeof restingHR !== 'number' || \n      maxHR <= restingHR || \n      isNaN(maxHR) || isNaN(restingHR)) {\n    console.warn('Fréquences cardiaques invalides', { maxHR, restingHR });\n    return null;\n  }\n  \n  const hrReserve = maxHR - restingHR;\n  \n  return {\n    zone1: {\n      name: 'Récupération',\n      min: Math.round(restingHR + (hrReserve * 0.5)),\n      max: Math.round(restingHR + (hrReserve * 0.6)),\n      percentHRR: '50-60%'\n    },\n    zone2: {\n      name: 'Endurance de base',\n      min: Math.round(restingHR + (hrReserve * 0.6) + 1),\n      max: Math.round(restingHR + (hrReserve * 0.7)),\n      percentHRR: '60-70%'\n    },\n    zone3: {\n      name: 'Endurance avancée',\n      min: Math.round(restingHR + (hrReserve * 0.7) + 1),\n      max: Math.round(restingHR + (hrReserve * 0.8)),\n      percentHRR: '70-80%'\n    },\n    zone4: {\n      name: 'Seuil',\n      min: Math.round(restingHR + (hrReserve * 0.8) + 1),\n      max: Math.round(restingHR + (hrReserve * 0.9)),\n      percentHRR: '80-90%'\n    },\n    zone5: {\n      name: 'VO2max',\n      min: Math.round(restingHR + (hrReserve * 0.9) + 1),\n      max: maxHR,\n      percentHRR: '90-100%'\n    }\n  };\n};\n\nexport default {\n  estimateFTPFromWeight,\n  estimateFTPFrom20MinTest,\n  estimateFTPFrom8MinTest,\n  estimateFTPFrom5MinTest,\n  estimateFTPFrom1MinTest,\n  calculateCP,\n  estimateFTPFromCP,\n  estimateFTPFromRampTest,\n  estimateFTPFromHR,\n  validateFTP,\n  calculatePowerZones,\n  calculateHeartRateZones\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,qBAAqB,CAAG,QAAAA,CAACC,MAAM,CAA6B,IAA3B,CAAAC,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,cAAc,CAClE,GAAI,CAACF,MAAM,EAAI,MAAO,CAAAA,MAAM,GAAK,QAAQ,EAAIA,MAAM,EAAI,CAAC,EAAIK,KAAK,CAACL,MAAM,CAAC,CAAE,CACzEM,OAAO,CAACC,IAAI,CAAC,uCAAuC,CAAE,CAAEP,MAAO,CAAC,CAAC,CACjE,MAAO,KAAI,CACb,CAEA;AACA;AACA,KAAM,CAAAQ,cAAc,CAAG,CACrBC,QAAQ,CAAE,CAAEC,GAAG,CAAE,GAAG,CAAEC,GAAG,CAAE,GAAG,CAAEC,GAAG,CAAE,GAAI,CAAC,CAAQ;AAClDC,YAAY,CAAE,CAAEH,GAAG,CAAE,GAAG,CAAEC,GAAG,CAAE,GAAG,CAAEC,GAAG,CAAE,GAAI,CAAC,CAAI;AAClDE,QAAQ,CAAE,CAAEJ,GAAG,CAAE,GAAG,CAAEC,GAAG,CAAE,GAAG,CAAEC,GAAG,CAAE,GAAI,CAAC,CAAQ;AAClDG,KAAK,CAAE,CAAEL,GAAG,CAAE,GAAG,CAAEC,GAAG,CAAE,GAAG,CAAEC,GAAG,CAAE,GAAI,CAAY;AACpD,CAAC,CAED;AACA,KAAM,CAAAI,UAAU,CAAGR,cAAc,CAACP,KAAK,CAAC,EAAIO,cAAc,CAACK,YAAY,CAEvE;AACA,MAAO,CAAAI,IAAI,CAACC,KAAK,CAAClB,MAAM,CAAGgB,UAAU,CAACL,GAAG,CAAC,CAC5C,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAQ,wBAAwB,CAAIC,UAAU,EAAK,CACtD,GAAI,CAACA,UAAU,EAAI,MAAO,CAAAA,UAAU,GAAK,QAAQ,EAAIA,UAAU,EAAI,CAAC,EAAIf,KAAK,CAACe,UAAU,CAAC,CAAE,CACzFd,OAAO,CAACC,IAAI,CAAC,iDAAiD,CAAE,CAAEa,UAAW,CAAC,CAAC,CAC/E,MAAO,KAAI,CACb,CAEA;AACA,MAAO,CAAAH,IAAI,CAACC,KAAK,CAACE,UAAU,CAAG,IAAI,CAAC,CACtC,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,uBAAuB,CAAG,QAAAA,CAACC,SAAS,CAAmB,IAAjB,CAAAC,MAAM,CAAArB,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,GAAG,CAC7D,GAAI,CAACoB,SAAS,EAAI,MAAO,CAAAA,SAAS,GAAK,QAAQ,EAAIA,SAAS,EAAI,CAAC,EAAIjB,KAAK,CAACiB,SAAS,CAAC,CAAE,CACrFhB,OAAO,CAACC,IAAI,CAAC,gDAAgD,CAAE,CAAEe,SAAU,CAAC,CAAC,CAC7E,MAAO,KAAI,CACb,CAEA;AACA,GAAI,MAAO,CAAAC,MAAM,GAAK,QAAQ,EAAIA,MAAM,EAAI,CAAC,EAAIA,MAAM,EAAI,CAAC,EAAIlB,KAAK,CAACkB,MAAM,CAAC,CAAE,CAC7EjB,OAAO,CAACC,IAAI,CAAC,yCAAyC,CAAE,CAAEgB,MAAO,CAAC,CAAC,CACnEA,MAAM,CAAG,GAAG,CAAE;AAChB,CAEA,MAAO,CAAAN,IAAI,CAACC,KAAK,CAACI,SAAS,CAAGC,MAAM,CAAC,CACvC,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,uBAAuB,CAAG,QAAAA,CAACC,SAAS,CAAoB,IAAlB,CAAAF,MAAM,CAAArB,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAC9D,GAAI,CAACuB,SAAS,EAAI,MAAO,CAAAA,SAAS,GAAK,QAAQ,EAAIA,SAAS,EAAI,CAAC,EAAIpB,KAAK,CAACoB,SAAS,CAAC,CAAE,CACrFnB,OAAO,CAACC,IAAI,CAAC,gDAAgD,CAAE,CAAEkB,SAAU,CAAC,CAAC,CAC7E,MAAO,KAAI,CACb,CAEA;AACA,GAAI,MAAO,CAAAF,MAAM,GAAK,QAAQ,EAAIA,MAAM,EAAI,CAAC,EAAIA,MAAM,EAAI,CAAC,EAAIlB,KAAK,CAACkB,MAAM,CAAC,CAAE,CAC7EjB,OAAO,CAACC,IAAI,CAAC,yCAAyC,CAAE,CAAEgB,MAAO,CAAC,CAAC,CACnEA,MAAM,CAAG,IAAI,CAAE;AACjB,CAEA,MAAO,CAAAN,IAAI,CAACC,KAAK,CAACO,SAAS,CAAGF,MAAM,CAAC,CACvC,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAG,WAAW,CAAGA,CAACD,SAAS,CAAEE,SAAS,GAAK,CACnD,GAAI,CAACF,SAAS,EAAI,CAACE,SAAS,EACxB,MAAO,CAAAF,SAAS,GAAK,QAAQ,EAAI,MAAO,CAAAE,SAAS,GAAK,QAAQ,EAC9DF,SAAS,EAAI,CAAC,EAAIE,SAAS,EAAI,CAAC,EAChCtB,KAAK,CAACoB,SAAS,CAAC,EAAIpB,KAAK,CAACsB,SAAS,CAAC,CAAE,CACxCrB,OAAO,CAACC,IAAI,CAAC,wCAAwC,CAAE,CAAEkB,SAAS,CAAEE,SAAU,CAAC,CAAC,CAChF,MAAO,KAAI,CACb,CAEA,KAAM,CAAAC,EAAE,CAAG,CAAC,CAAG,EAAE,CAAE;AACnB,KAAM,CAAAC,EAAE,CAAG,EAAE,CAAM;AAEnB;AACA,KAAM,CAAAC,EAAE,CAAG,CAACL,SAAS,CAAGG,EAAE,CAAGD,SAAS,CAAGE,EAAE,GAAKD,EAAE,CAAGC,EAAE,CAAC,CAExD;AACA,KAAM,CAAAE,GAAG,CAAG,CAACJ,SAAS,CAAGG,EAAE,EAAID,EAAE,CAEjC,MAAO,CACLC,EAAE,CAAEb,IAAI,CAACC,KAAK,CAACY,EAAE,CAAC,CAClBC,GAAG,CAAEd,IAAI,CAACC,KAAK,CAACa,GAAG,CACrB,CAAC,CACH,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,uBAAuB,CAAG,QAAAA,CAACL,SAAS,CAAoB,IAAlB,CAAAJ,MAAM,CAAArB,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAC9D,GAAI,CAACyB,SAAS,EAAI,MAAO,CAAAA,SAAS,GAAK,QAAQ,EAAIA,SAAS,EAAI,CAAC,EAAItB,KAAK,CAACsB,SAAS,CAAC,CAAE,CACrFrB,OAAO,CAACC,IAAI,CAAC,gDAAgD,CAAE,CAAEoB,SAAU,CAAC,CAAC,CAC7E,MAAO,KAAI,CACb,CAEA;AACA,GAAI,MAAO,CAAAJ,MAAM,GAAK,QAAQ,EAAIA,MAAM,EAAI,CAAC,EAAIA,MAAM,EAAI,CAAC,EAAIlB,KAAK,CAACkB,MAAM,CAAC,CAAE,CAC7EjB,OAAO,CAACC,IAAI,CAAC,yCAAyC,CAAE,CAAEgB,MAAO,CAAC,CAAC,CACnEA,MAAM,CAAG,IAAI,CAAE;AACjB,CAEA,MAAO,CAAAN,IAAI,CAACC,KAAK,CAACS,SAAS,CAAGJ,MAAM,CAAC,CACvC,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAU,iBAAiB,CAAIH,EAAE,EAAK,CACvC,GAAI,CAACA,EAAE,EAAI,MAAO,CAAAA,EAAE,GAAK,QAAQ,EAAIA,EAAE,EAAI,CAAC,EAAIzB,KAAK,CAACyB,EAAE,CAAC,CAAE,CACzDxB,OAAO,CAACC,IAAI,CAAC,oDAAoD,CAAE,CAAEuB,EAAG,CAAC,CAAC,CAC1E,MAAO,KAAI,CACb,CAEA;AACA,MAAO,CAAAb,IAAI,CAACC,KAAK,CAACY,EAAE,CAAG,IAAI,CAAC,CAC9B,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAI,uBAAuB,CAAG,QAAAA,CAACC,QAAQ,CAAoB,IAAlB,CAAAZ,MAAM,CAAArB,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAC7D,GAAI,CAACiC,QAAQ,EAAI,MAAO,CAAAA,QAAQ,GAAK,QAAQ,EAAIA,QAAQ,EAAI,CAAC,EAAI9B,KAAK,CAAC8B,QAAQ,CAAC,CAAE,CACjF7B,OAAO,CAACC,IAAI,CAAC,0CAA0C,CAAE,CAAE4B,QAAS,CAAC,CAAC,CACtE,MAAO,KAAI,CACb,CAEA;AACA,GAAI,MAAO,CAAAZ,MAAM,GAAK,QAAQ,EAAIA,MAAM,EAAI,CAAC,EAAIA,MAAM,EAAI,CAAC,EAAIlB,KAAK,CAACkB,MAAM,CAAC,CAAE,CAC7EjB,OAAO,CAACC,IAAI,CAAC,yCAAyC,CAAE,CAAEgB,MAAO,CAAC,CAAC,CACnEA,MAAM,CAAG,IAAI,CAAE;AACjB,CAEA;AACA,MAAO,CAAAN,IAAI,CAACC,KAAK,CAACiB,QAAQ,CAAGZ,MAAM,CAAC,CACtC,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAa,iBAAiB,CAAIC,MAAM,EAAK,CAC3C,KAAM,CAAEC,KAAK,CAAEC,SAAS,CAAEC,IAAI,CAAExC,MAAM,CAAEyC,MAAO,CAAC,CAAGJ,MAAM,CAEzD;AACA,GAAI,CAACC,KAAK,EAAI,CAACC,SAAS,EAAI,CAACvC,MAAM,EAC/B,MAAO,CAAAsC,KAAK,GAAK,QAAQ,EAAI,MAAO,CAAAC,SAAS,GAAK,QAAQ,EAAI,MAAO,CAAAvC,MAAM,GAAK,QAAQ,EACxFsC,KAAK,EAAIC,SAAS,EAAIvC,MAAM,EAAI,CAAC,CAAE,CACrCM,OAAO,CAACC,IAAI,CAAC,iCAAiC,CAAE8B,MAAM,CAAC,CACvD,MAAO,KAAI,CACb,CAEA,GAAI,CAAAK,YAAY,CAAG,IAAI,CAEvB;AACA,GAAIF,IAAI,EAAI,MAAO,CAAAA,IAAI,GAAK,QAAQ,EAAIA,IAAI,CAAGD,SAAS,EAAIC,IAAI,CAAGF,KAAK,CAAE,CACxE;AACA,KAAM,CAAAK,YAAY,CAAGH,IAAI,CAAGF,KAAK,CAEjC;AACA,GAAI,CAAAM,QAAQ,CAEZ,GAAID,YAAY,CAAG,IAAI,CAAEC,QAAQ,CAAG,GAAG,CAAO;AAAA,IACzC,IAAID,YAAY,CAAG,IAAI,CAAEC,QAAQ,CAAG,GAAG,CAAE;AAAA,IACzC,IAAID,YAAY,CAAG,IAAI,CAAEC,QAAQ,CAAG,GAAG,CAAE;AAAA,IACzC,IAAID,YAAY,CAAG,IAAI,CAAEC,QAAQ,CAAG,GAAG,CAAE;AAAA,IACzC,CAAAA,QAAQ,CAAG,GAAG,CAA2B;AAE9CF,YAAY,CAAGzB,IAAI,CAACC,KAAK,CAAC0B,QAAQ,CAAG5C,MAAM,CAAC,CAC9C,CACA;AAAA,IACK,IAAIyC,MAAM,EAAI,MAAO,CAAAA,MAAM,GAAK,QAAQ,EAAIA,MAAM,CAAG,EAAE,CAAE,CAC5D;AACA;AACAC,YAAY,CAAGzB,IAAI,CAACC,KAAK,CAAEuB,MAAM,CAAG,IAAI,CAAIzC,MAAM,CAAG,MAAM,CAAC,CAC9D,CACA;AAAA,IACK,CACH,KAAM,CAAA6C,SAAS,CAAGP,KAAK,CAAGC,SAAS,CACnC;AACA,KAAM,CAAAO,aAAa,CAAGP,SAAS,CAAIM,SAAS,CAAG,IAAK,CACpD,KAAM,CAAAF,YAAY,CAAGG,aAAa,CAAGR,KAAK,CAE1C;AACA,GAAI,CAAAM,QAAQ,CAEZ,GAAID,YAAY,CAAG,IAAI,CAAEC,QAAQ,CAAG,GAAG,CAAO;AAAA,IACzC,IAAID,YAAY,CAAG,IAAI,CAAEC,QAAQ,CAAG,GAAG,CAAE;AAAA,IACzC,IAAID,YAAY,CAAG,IAAI,CAAEC,QAAQ,CAAG,GAAG,CAAE;AAAA,IACzC,IAAID,YAAY,CAAG,IAAI,CAAEC,QAAQ,CAAG,GAAG,CAAE;AAAA,IACzC,CAAAA,QAAQ,CAAG,GAAG,CAA2B;AAE9CF,YAAY,CAAGzB,IAAI,CAACC,KAAK,CAAC0B,QAAQ,CAAG5C,MAAM,CAAC,CAC9C,CAEA,MAAO,CAAA0C,YAAY,CACrB,CAAC,CAED;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAK,WAAW,CAAG,QAAAA,CAACC,GAAG,CAAmB,IAAjB,CAAAC,OAAO,CAAA/C,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CAC3C,GAAI8C,GAAG,EAAI,MAAO,CAAAA,GAAG,GAAK,QAAQ,EAAIA,GAAG,CAAG,CAAC,EAAI,CAAC3C,KAAK,CAAC2C,GAAG,CAAC,CAAE,CAC5D;AACA,GAAIA,GAAG,CAAG,EAAE,CAAE,CACZ1C,OAAO,CAACC,IAAI,CAAC,yBAAyB,CAAEyC,GAAG,CAAC,CAC5C;AACA,GAAIC,OAAO,CAACjD,MAAM,CAAE,CAClB,MAAO,CAAAD,qBAAqB,CAACkD,OAAO,CAACjD,MAAM,CAAEiD,OAAO,CAAChD,KAAK,CAAC,CAC7D,CACA,MAAO,IAAG,CAAE;AACd,CAEA,GAAI+C,GAAG,CAAG,GAAG,CAAE,CACb1C,OAAO,CAACC,IAAI,CAAC,kCAAkC,CAAEyC,GAAG,CAAC,CACrD;AACF,CAEA,MAAO,CAAAA,GAAG,CAAE;AACd,CAEA;AACA1C,OAAO,CAACC,IAAI,CAAC,0DAA0D,CAAE,CAAEyC,GAAI,CAAC,CAAC,CAEjF,GAAIC,OAAO,CAACjD,MAAM,EAAI,MAAO,CAAAiD,OAAO,CAACjD,MAAM,GAAK,QAAQ,EAAIiD,OAAO,CAACjD,MAAM,CAAG,CAAC,CAAE,CAC9E,KAAM,CAAA0C,YAAY,CAAG3C,qBAAqB,CAACkD,OAAO,CAACjD,MAAM,CAAEiD,OAAO,CAAChD,KAAK,CAAC,CACzEK,OAAO,CAAC4C,IAAI,CAAC,kCAAkCD,OAAO,CAACjD,MAAM,QAAQ0C,YAAY,GAAG,CAAC,CACrF,MAAO,CAAAA,YAAY,CACrB,CAEA;AACA,KAAM,CAAAS,UAAU,CAAG,CACjB1C,QAAQ,CAAE,GAAG,CACbI,YAAY,CAAE,GAAG,CACjBC,QAAQ,CAAE,GAAG,CACbC,KAAK,CAAE,GACT,CAAC,CAACkC,OAAO,CAAChD,KAAK,CAAC,EAAI,GAAG,CAEvBK,OAAO,CAAC4C,IAAI,CAAC,4BAA4BC,UAAU,GAAG,CAAC,CACvD,MAAO,CAAAA,UAAU,CACnB,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,mBAAmB,CAAIJ,GAAG,EAAK,CAC1C,GAAI,CAACA,GAAG,EAAI,MAAO,CAAAA,GAAG,GAAK,QAAQ,EAAIA,GAAG,EAAI,CAAC,EAAI3C,KAAK,CAAC2C,GAAG,CAAC,CAAE,CAC7D1C,OAAO,CAACC,IAAI,CAAC,uCAAuC,CAAE,CAAEyC,GAAI,CAAC,CAAC,CAC9DA,GAAG,CAAG,GAAG,CAAE;AACb,CAEA,MAAO,CACLK,KAAK,CAAE,CACLC,IAAI,CAAE,qBAAqB,CAC3BC,WAAW,CAAE,kCAAkC,CAC/C7C,GAAG,CAAEO,IAAI,CAACC,KAAK,CAAC8B,GAAG,CAAG,GAAG,CAAC,CAC1BpC,GAAG,CAAEK,IAAI,CAACC,KAAK,CAAC8B,GAAG,CAAG,IAAI,CAAC,CAC3BQ,UAAU,CAAE,OACd,CAAC,CACDC,KAAK,CAAE,CACLH,IAAI,CAAE,WAAW,CACjBC,WAAW,CAAE,oDAAoD,CACjE7C,GAAG,CAAEO,IAAI,CAACC,KAAK,CAAC8B,GAAG,CAAG,IAAI,CAAC,CAC3BpC,GAAG,CAAEK,IAAI,CAACC,KAAK,CAAC8B,GAAG,CAAG,IAAI,CAAC,CAC3BQ,UAAU,CAAE,QACd,CAAC,CACDE,KAAK,CAAE,CACLJ,IAAI,CAAE,OAAO,CACbC,WAAW,CAAE,2DAA2D,CACxE7C,GAAG,CAAEO,IAAI,CAACC,KAAK,CAAC8B,GAAG,CAAG,IAAI,CAAC,CAC3BpC,GAAG,CAAEK,IAAI,CAACC,KAAK,CAAC8B,GAAG,CAAG,GAAG,CAAC,CAC1BQ,UAAU,CAAE,QACd,CAAC,CACDG,KAAK,CAAE,CACLL,IAAI,CAAE,OAAO,CACbC,WAAW,CAAE,0DAA0D,CACvE7C,GAAG,CAAEO,IAAI,CAACC,KAAK,CAAC8B,GAAG,CAAG,IAAI,CAAC,CAC3BpC,GAAG,CAAEK,IAAI,CAACC,KAAK,CAAC8B,GAAG,CAAG,IAAI,CAAC,CAC3BQ,UAAU,CAAE,SACd,CAAC,CACDI,KAAK,CAAE,CACLN,IAAI,CAAE,QAAQ,CACdC,WAAW,CAAE,4CAA4C,CACzD7C,GAAG,CAAEO,IAAI,CAACC,KAAK,CAAC8B,GAAG,CAAG,IAAI,CAAC,CAC3BpC,GAAG,CAAEK,IAAI,CAACC,KAAK,CAAC8B,GAAG,CAAG,GAAG,CAAC,CAC1BQ,UAAU,CAAE,UACd,CAAC,CACDK,KAAK,CAAE,CACLP,IAAI,CAAE,oBAAoB,CAC1BC,WAAW,CAAE,mDAAmD,CAChE7C,GAAG,CAAEO,IAAI,CAACC,KAAK,CAAC8B,GAAG,CAAG,IAAI,CAAC,CAC3BpC,GAAG,CAAEK,IAAI,CAACC,KAAK,CAAC8B,GAAG,CAAG,GAAG,CAAC,CAC1BQ,UAAU,CAAE,UACd,CAAC,CACDM,KAAK,CAAE,CACLR,IAAI,CAAE,sBAAsB,CAC5BC,WAAW,CAAE,kCAAkC,CAC/C7C,GAAG,CAAEO,IAAI,CAACC,KAAK,CAAC8B,GAAG,CAAG,IAAI,CAAC,CAC3BpC,GAAG,CAAEmD,QAAQ,CACbP,UAAU,CAAE,OACd,CACF,CAAC,CACH,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAQ,uBAAuB,CAAGA,CAAC1B,KAAK,CAAEC,SAAS,GAAK,CAC3D,GAAI,CAACD,KAAK,EAAI,CAACC,SAAS,EACpB,MAAO,CAAAD,KAAK,GAAK,QAAQ,EAAI,MAAO,CAAAC,SAAS,GAAK,QAAQ,EAC1DD,KAAK,EAAIC,SAAS,EAClBlC,KAAK,CAACiC,KAAK,CAAC,EAAIjC,KAAK,CAACkC,SAAS,CAAC,CAAE,CACpCjC,OAAO,CAACC,IAAI,CAAC,iCAAiC,CAAE,CAAE+B,KAAK,CAAEC,SAAU,CAAC,CAAC,CACrE,MAAO,KAAI,CACb,CAEA,KAAM,CAAAM,SAAS,CAAGP,KAAK,CAAGC,SAAS,CAEnC,MAAO,CACLc,KAAK,CAAE,CACLC,IAAI,CAAE,cAAc,CACpB5C,GAAG,CAAEO,IAAI,CAACC,KAAK,CAACqB,SAAS,CAAIM,SAAS,CAAG,GAAI,CAAC,CAC9CjC,GAAG,CAAEK,IAAI,CAACC,KAAK,CAACqB,SAAS,CAAIM,SAAS,CAAG,GAAI,CAAC,CAC9CoB,UAAU,CAAE,QACd,CAAC,CACDR,KAAK,CAAE,CACLH,IAAI,CAAE,mBAAmB,CACzB5C,GAAG,CAAEO,IAAI,CAACC,KAAK,CAACqB,SAAS,CAAIM,SAAS,CAAG,GAAI,CAAG,CAAC,CAAC,CAClDjC,GAAG,CAAEK,IAAI,CAACC,KAAK,CAACqB,SAAS,CAAIM,SAAS,CAAG,GAAI,CAAC,CAC9CoB,UAAU,CAAE,QACd,CAAC,CACDP,KAAK,CAAE,CACLJ,IAAI,CAAE,mBAAmB,CACzB5C,GAAG,CAAEO,IAAI,CAACC,KAAK,CAACqB,SAAS,CAAIM,SAAS,CAAG,GAAI,CAAG,CAAC,CAAC,CAClDjC,GAAG,CAAEK,IAAI,CAACC,KAAK,CAACqB,SAAS,CAAIM,SAAS,CAAG,GAAI,CAAC,CAC9CoB,UAAU,CAAE,QACd,CAAC,CACDN,KAAK,CAAE,CACLL,IAAI,CAAE,OAAO,CACb5C,GAAG,CAAEO,IAAI,CAACC,KAAK,CAACqB,SAAS,CAAIM,SAAS,CAAG,GAAI,CAAG,CAAC,CAAC,CAClDjC,GAAG,CAAEK,IAAI,CAACC,KAAK,CAACqB,SAAS,CAAIM,SAAS,CAAG,GAAI,CAAC,CAC9CoB,UAAU,CAAE,QACd,CAAC,CACDL,KAAK,CAAE,CACLN,IAAI,CAAE,QAAQ,CACd5C,GAAG,CAAEO,IAAI,CAACC,KAAK,CAACqB,SAAS,CAAIM,SAAS,CAAG,GAAI,CAAG,CAAC,CAAC,CAClDjC,GAAG,CAAE0B,KAAK,CACV2B,UAAU,CAAE,SACd,CACF,CAAC,CACH,CAAC,CAED,cAAe,CACblE,qBAAqB,CACrBoB,wBAAwB,CACxBE,uBAAuB,CACvBG,uBAAuB,CACvBQ,uBAAuB,CACvBN,WAAW,CACXO,iBAAiB,CACjBC,uBAAuB,CACvBE,iBAAiB,CACjBW,WAAW,CACXK,mBAAmB,CACnBY,uBACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}