{"ast":null,"code":"/**\n * Service de chargement progressif pour visualisations 3D\n * Optimise les performances en adaptant la qualité du rendu aux capacités de l'appareil\n * et en utilisant un chargement progressif des détails\n */import*as THREE from'three';import{mergeVertices}from'three/examples/jsm/utils/BufferGeometryUtils.js';import featureFlagsService from'./featureFlags';import apiCacheService,{CACHE_STRATEGIES}from'./apiCache';// Niveaux de détail (LOD) pour le chargement progressif\nconst DETAIL_LEVELS={ULTRA_LOW:'ultra-low',// Pour appareils très limités ou chargement initial\nLOW:'low',// Pour appareils mobiles bas de gamme\nMEDIUM:'medium',// Pour la plupart des mobiles et tablettes\nHIGH:'high',// Pour ordinateurs de bureau standard\nULTRA:'ultra'// Pour ordinateurs puissants\n};// Paramètres pour chaque niveau de détail\nconst DETAIL_PARAMS={[DETAIL_LEVELS.ULTRA_LOW]:{segmentCount:10,// Nombre de segments pour les courbes\ntextureSize:128,// Taille des textures en pixels\nshadowsEnabled:false,// Désactiver les ombres\nlightCount:1,// Nombre de sources lumineuses\nterrainResolution:8,// Résolution du terrain (1 = pleine résolution)\nmaxVisibleElements:20// Nombre maximum d'éléments visibles\n},[DETAIL_LEVELS.LOW]:{segmentCount:20,textureSize:256,shadowsEnabled:false,lightCount:2,terrainResolution:4,maxVisibleElements:50},[DETAIL_LEVELS.MEDIUM]:{segmentCount:32,textureSize:512,shadowsEnabled:true,lightCount:2,terrainResolution:2,maxVisibleElements:100},[DETAIL_LEVELS.HIGH]:{segmentCount:64,textureSize:1024,shadowsEnabled:true,lightCount:3,terrainResolution:1,maxVisibleElements:200},[DETAIL_LEVELS.ULTRA]:{segmentCount:128,textureSize:2048,shadowsEnabled:true,lightCount:4,terrainResolution:1,maxVisibleElements:500}};// Tailles des textures optimisées pour mobile\nconst MOBILE_TEXTURE_SIZES={thumbnail:128,small:256,medium:512,large:1024};// Seuils de mémoire pour les appareils mobiles (en Mo)\nconst MEMORY_THRESHOLDS={critical:150,// Seuil critique - libération immédiate des ressources\nwarning:300,// Seuil d'avertissement - réduire la qualité\noptimal:500// Seuil optimal - fonctionnement normal\n};// Géométries simplifiées pour remplacer les modèles complexes à distance\nconst SIMPLE_GEOMETRIES={tree:new THREE.BoxGeometry(1,2,1),rock:new THREE.SphereGeometry(1,4,4),building:new THREE.BoxGeometry(1,1,1)};/**\n * Class principale pour le chargement progressif des visualisations 3D\n */class Progressive3DLoader{constructor(){this.progressiveModeEnabled=true;this.currentDetailLevel=DETAIL_LEVELS.MEDIUM;this.deviceCapabilities=null;this.loadedModels=new Map();this.loadingProgress={};this.worker=null;this.frustumCullingEnabled=true;this.lastRenderTime=0;this.targetFrameRate=30;this.renderTimeHistory=[];this.adaptiveQualityEnabled=true;this.isInitialized=false;this.texturePool=new Map();// Pool de textures réutilisables\nthis.activeRenderers=new Set();// Ensemble des renderers actifs\nthis.memoryMonitorInterval=null;this.contextLossHandled=false;this.lowMemoryMode=false;this.deviceMemory=null;this.isIOS=false;this.estimatedMemoryUsage=0;}/**\n   * Initialise le service de chargement progressif\n   */async initialize(){if(this.isInitialized)return;try{// Vérifier si le feature flag est activé\nconst progressiveLoadingEnabled=featureFlagsService.isEnabled('enableProgressiveLoading3D');if(!progressiveLoadingEnabled){console.info('Chargement progressif 3D désactivé via feature flags');this.progressiveModeEnabled=false;this.isInitialized=true;return;}// Détecter les capacités du dispositif\nawait this.detectDeviceCapabilities();// Initialiser le Web Worker si supporté\nif(this.deviceCapabilities.webWorkerSupport){this.initializeWebWorker();}// Initialiser les gestionnaires d'événements pour la perte de contexte WebGL\nthis.setupContextLossHandlers();// Configurer la surveillance de la mémoire pour les appareils mobiles\nif(this.deviceCapabilities.isMobile){this.setupMemoryMonitoring();}console.info('Service de chargement progressif 3D initialisé',{detailLevel:this.currentDetailLevel,adaptiveQuality:this.adaptiveQualityEnabled,webWorker:this.worker!==null,deviceMemory:this.deviceMemory,isMobile:this.deviceCapabilities.isMobile,isIOS:this.isIOS});this.isInitialized=true;}catch(error){console.error('Erreur lors de l\\'initialisation du chargement progressif 3D:',error);// Fallback au mode standard en cas d'erreur\nthis.progressiveModeEnabled=false;this.isInitialized=true;}}/**\n   * Détecte les capacités du dispositif utilisé\n   */async detectDeviceCapabilities(){this.deviceCapabilities={webWorkerSupport:typeof Worker!=='undefined',webGLVersion:1,maxTextureSize:2048,anisotropySupport:false,maxAnisotropy:1,isMobile:false,devicePixelRatio:window.devicePixelRatio||1};// Détection des plateformes mobiles\nthis.deviceCapabilities.isMobile=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);this.isIOS=/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream;// Détection de la mémoire disponible (si supportée)\nif(navigator.deviceMemory){this.deviceMemory=navigator.deviceMemory;}else{// Estimation basée sur l'agent utilisateur\nthis.deviceMemory=this.deviceCapabilities.isMobile?2:8;}try{// Créer un canvas temporaire pour tester les capacités WebGL\nconst canvas=document.createElement('canvas');let gl=canvas.getContext('webgl2');if(gl){this.deviceCapabilities.webGLVersion=2;}else{gl=canvas.getContext('webgl')||canvas.getContext('experimental-webgl');this.deviceCapabilities.webGLVersion=gl?1:0;}if(gl){// Détecter la taille maximale de texture\nthis.deviceCapabilities.maxTextureSize=gl.getParameter(gl.MAX_TEXTURE_SIZE);// Détecter le support d'anisotropie\nconst ext=gl.getExtension('EXT_texture_filter_anisotropic')||gl.getExtension('MOZ_EXT_texture_filter_anisotropic')||gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');if(ext){this.deviceCapabilities.anisotropySupport=true;this.deviceCapabilities.maxAnisotropy=gl.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT);}// Libérer les ressources du contexte temporaire\nconst loseContext=gl.getExtension('WEBGL_lose_context');if(loseContext){loseContext.loseContext();}}// Définir le niveau de détail approprié en fonction des capacités détectées\nif(this.deviceCapabilities.isMobile){if(this.deviceMemory<=2){this.currentDetailLevel=DETAIL_LEVELS.LOW;}else{this.currentDetailLevel=DETAIL_LEVELS.MEDIUM;}// Activer automatiquement le frustum culling sur mobile\nthis.frustumCullingEnabled=true;}else{if(this.deviceCapabilities.webGLVersion>=2){this.currentDetailLevel=DETAIL_LEVELS.HIGH;}else{this.currentDetailLevel=DETAIL_LEVELS.MEDIUM;}}}catch(error){console.error('Erreur lors de la détection des capacités WebGL:',error);this.currentDetailLevel=DETAIL_LEVELS.LOW;}return this.deviceCapabilities;}/**\n   * Unload d'un modèle et libération des ressources WebGL associées\n   * @param {string} modelId Identifiant du modèle\n   */unloadModel(modelId){const model=this.loadedModels.get(modelId);if(model){// Libération améliorée des ressources Three.js\nif(model.geometry){model.geometry.dispose();}// Libérer les textures et matériaux\nif(model.material){if(Array.isArray(model.material)){model.material.forEach(material=>this.disposeMaterial(material));}else{this.disposeMaterial(model.material);}}// Libérer les animations et mixers s'ils existent\nif(model.animations&&model.mixer){model.mixer.stopAllAction();model.mixer.uncacheRoot(model);}// Libérer les enfants récursivement\nif(model.children){model.children.forEach(child=>{this.disposeObject3D(child);});}// Supprimer de la scène si ajouté\nif(model.parent){model.parent.remove(model);}this.loadedModels.delete(modelId);// Mettre à jour l'estimation de la mémoire\nthis.updateMemoryUsage();console.info(`Modèle ${modelId} déchargé et ressources libérées`);}}/**\n   * Libère les ressources d'un matériau\n   * @param {THREE.Material} material Le matériau à libérer\n   */disposeMaterial(material){if(!material)return;// Libérer les textures\nfor(const propertyName in material){const property=material[propertyName];if(property&&property.isTexture){// Si la texture est dans le pool, la marquer comme disponible\nif(this.texturePool.has(property.uuid)){const poolEntry=this.texturePool.get(property.uuid);poolEntry.inUse=false;}else{// Sinon, libérer complètement\nproperty.dispose();}}}// Libérer le matériau lui-même\nmaterial.dispose();}/**\n   * Dispose récursivement un Object3D et toutes ses ressources\n   * @param {THREE.Object3D} object L'objet à libérer\n   */disposeObject3D(object){if(!object)return;// Traiter les enfants de manière récursive\nif(object.children&&object.children.length>0){// Créer une copie du tableau pour éviter les problèmes de modification pendant l'itération\nconst children=[...object.children];children.forEach(child=>{this.disposeObject3D(child);object.remove(child);});}// Libérer la géométrie\nif(object.geometry){object.geometry.dispose();}// Libérer le matériau\nif(object.material){if(Array.isArray(object.material)){object.material.forEach(material=>this.disposeMaterial(material));}else{this.disposeMaterial(object.material);}}}/**\n   * Mise en place des gestionnaires pour la perte de contexte WebGL\n   */setupContextLossHandlers(){// Enregistrer une fonction pour traiter la perte de contexte WebGL\nwindow.addEventListener('webglcontextlost',event=>{event.preventDefault();this.contextLossHandled=true;console.warn('Contexte WebGL perdu, tentative de récupération...');// Arrêter tous les rendus 3D en cours\nthis.activeRenderers.forEach(renderer=>{renderer.forceContextLoss();});// Passer en mode basse mémoire\nthis.lowMemoryMode=true;this.currentDetailLevel=DETAIL_LEVELS.ULTRA_LOW;// Notifier l'application de la perte de contexte\ndocument.dispatchEvent(new CustomEvent('webgl-context-lost'));},false);// Gestionnaire pour la restauration du contexte\nwindow.addEventListener('webglcontextrestored',()=>{console.info('Contexte WebGL restauré');this.contextLossHandled=false;// Réinitialiser les renderers\nthis.activeRenderers.forEach(renderer=>{renderer.resetState();});// Réinitialiser les textures et matériaux si nécessaire\nthis.rebuildTextures();// Notifier l'application de la restauration du contexte\ndocument.dispatchEvent(new CustomEvent('webgl-context-restored'));},false);}/**\n   * Surveille l'utilisation de la mémoire sur les appareils mobiles\n   */setupMemoryMonitoring(){// Nettoyer l'ancien interval si existant\nif(this.memoryMonitorInterval){clearInterval(this.memoryMonitorInterval);}// Établir un intervalle pour vérifier la mémoire\nthis.memoryMonitorInterval=setInterval(()=>{this.checkMemoryUsage();},30000);// Vérifier toutes les 30 secondes\n// Ajouter des gestionnaires pour les événements de visibilité de page\ndocument.addEventListener('visibilitychange',()=>{if(document.hidden){// L'utilisateur a quitté la page, libérer les ressources non essentielles\nthis.releaseNonEssentialResources();}else{// L'utilisateur est revenu, vérifier la mémoire\nthis.checkMemoryUsage();}});}/**\n   * Vérifier l'utilisation de la mémoire et prendre des mesures si nécessaire\n   */checkMemoryUsage(){// Estimation de l'utilisation de la mémoire\nthis.updateMemoryUsage();// Vérifier les performances du système\nconst performanceNow=performance.now();const memoryUsageMB=this.estimatedMemoryUsage/(1024*1024);console.debug(`Utilisation estimée de la mémoire 3D: ${memoryUsageMB.toFixed(2)} MB`);// Mesures basées sur l'utilisation de la mémoire\nif(memoryUsageMB>MEMORY_THRESHOLDS.critical){console.warn(`Utilisation critique de la mémoire: ${memoryUsageMB.toFixed(2)} MB`);this.handleCriticalMemory();}else if(memoryUsageMB>MEMORY_THRESHOLDS.warning){console.warn(`Avertissement mémoire: ${memoryUsageMB.toFixed(2)} MB`);this.decreaseQuality();this.releaseNonEssentialResources();}else if(memoryUsageMB<MEMORY_THRESHOLDS.optimal&&this.lowMemoryMode){// Si nous sommes en dessous du seuil optimal et en mode basse mémoire,\n// nous pouvons revenir à un mode normal\nthis.lowMemoryMode=false;if(this.adaptiveQualityEnabled){this.increaseQuality();}}}/**\n   * Gestion du cas critique de mémoire - libérer immédiatement les ressources\n   */handleCriticalMemory(){this.lowMemoryMode=true;// Réduire drastiquement la qualité\nthis.currentDetailLevel=DETAIL_LEVELS.ULTRA_LOW;// Libérer les modèles non essentiels\nthis.unloadNonVisibleModels();// Vider le pool de textures\nthis.clearTexturePool();// Forcer la libération de la mémoire si supporté\nif(window.gc)window.gc();// Notifier l'application pour qu'elle prenne des mesures supplémentaires\ndocument.dispatchEvent(new CustomEvent('webgl-memory-critical'));}/**\n   * Libération des ressources non essentielles\n   */releaseNonEssentialResources(){// Libérer les textures non utilisées\nthis.cleanupTexturePool();// Libérer les modèles en cache mais non visibles\nthis.unloadNonVisibleModels();}/**\n   * Décharger les modèles qui ne sont pas actuellement visibles\n   */unloadNonVisibleModels(){const visibleModelIds=new Set();// Obtenir les IDs des modèles actuellement visibles (ceci est une simulation, \n// l'implémentation réelle dépendrait de comment la visibilité est gérée)\ndocument.querySelectorAll('[data-model-visible=\"true\"]').forEach(el=>{const modelId=el.dataset.modelId;if(modelId)visibleModelIds.add(modelId);});// Décharger les modèles non visibles\nthis.loadedModels.forEach((model,modelId)=>{if(!visibleModelIds.has(modelId)){this.unloadModel(modelId);}});}/**\n   * Mise à jour de l'estimation de l'utilisation de la mémoire\n   */updateMemoryUsage(){let totalMemoryUsage=0;// Calculer la mémoire utilisée par les géométries\nthis.loadedModels.forEach(model=>{if(model.geometry){// Estimation de la taille de la géométrie\nif(model.geometry.attributes){for(const name in model.geometry.attributes){const attribute=model.geometry.attributes[name];if(attribute.array){totalMemoryUsage+=attribute.array.byteLength||0;}}}}// Estimation de la taille des textures\nif(model.material){const materials=Array.isArray(model.material)?model.material:[model.material];materials.forEach(material=>{for(const prop in material){const texture=material[prop];if(texture&&texture.isTexture&&texture.image){const width=texture.image.width||0;const height=texture.image.height||0;// Estimation de 4 octets par pixel (RGBA)\ntotalMemoryUsage+=width*height*4;}}});}});// Ajouter la mémoire utilisée par le pool de textures\nthis.texturePool.forEach(entry=>{const texture=entry.texture;if(texture&&texture.image){const width=texture.image.width||0;const height=texture.image.height||0;totalMemoryUsage+=width*height*4;}});this.estimatedMemoryUsage=totalMemoryUsage;return totalMemoryUsage;}/**\n   * Gestion d'un pool de textures pour la réutilisation\n   * @param {string} url URL de la texture\n   * @param {object} options Options de la texture\n   * @returns {THREE.Texture} Texture du pool ou nouvelle texture\n   */getTextureFromPool(url){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};// Rechercher une texture disponible dans le pool\nfor(const[uuid,entry]of this.texturePool.entries()){if(!entry.inUse&&entry.url===url){entry.inUse=true;return entry.texture;}}// Si aucune texture n'est disponible, en créer une nouvelle\nconst texture=new THREE.TextureLoader().load(url);// Appliquer les options\nif(options.anisotropy&&this.deviceCapabilities.anisotropySupport){texture.anisotropy=Math.min(options.anisotropy,this.deviceCapabilities.maxAnisotropy);}// Ajouter au pool\nthis.texturePool.set(texture.uuid,{texture,url,inUse:true,lastUsed:Date.now()});return texture;}/**\n   * Nettoyage des textures non utilisées dans le pool\n   */cleanupTexturePool(){const now=Date.now();const unusedTimeout=60000;// 1 minute\nfor(const[uuid,entry]of this.texturePool.entries()){if(!entry.inUse&&now-entry.lastUsed>unusedTimeout){entry.texture.dispose();this.texturePool.delete(uuid);}}}/**\n   * Vider complètement le pool de textures\n   */clearTexturePool(){for(const[uuid,entry]of this.texturePool.entries()){entry.texture.dispose();}this.texturePool.clear();}/**\n   * Reconstruire les textures après une perte de contexte\n   */rebuildTextures(){// Recréer les textures qui étaient en utilisation\nconst texturesToRebuild=new Map();// Collecter les textures qui doivent être reconstruites\nthis.texturePool.forEach((entry,uuid)=>{if(entry.inUse){texturesToRebuild.set(uuid,{url:entry.url,options:entry.options});}});// Vider le pool actuel\nthis.clearTexturePool();// Reconstruire les textures nécessaires\ntexturesToRebuild.forEach((info,uuid)=>{const texture=this.getTextureFromPool(info.url,info.options);// Mettre à jour les références dans les matériaux si nécessaire\nthis.loadedModels.forEach(model=>{if(model.material){const materials=Array.isArray(model.material)?model.material:[model.material];materials.forEach(material=>{for(const prop in material){if(material[prop]&&material[prop].isTexture&&material[prop].uuid===uuid){material[prop]=texture;}}});}});});}/**\n   * Enregistre un renderer pour surveillance\n   * @param {THREE.WebGLRenderer} renderer Le renderer à surveiller\n   */registerRenderer(renderer){if(renderer&&!this.activeRenderers.has(renderer)){this.activeRenderers.add(renderer);// Configurer le renderer pour optimiser les performances mobiles\nif(this.deviceCapabilities.isMobile){renderer.setPixelRatio(Math.min(this.deviceCapabilities.devicePixelRatio,2));renderer.shadowMap.enabled=this.currentDetailLevel!==DETAIL_LEVELS.ULTRA_LOW&&this.currentDetailLevel!==DETAIL_LEVELS.LOW;renderer.shadowMap.autoUpdate=false;// Mettre à jour manuellement pour économiser des ressources\n}}}/**\n   * Désenregistre un renderer\n   * @param {THREE.WebGLRenderer} renderer Le renderer à désenregistrer\n   */unregisterRenderer(renderer){if(renderer&&this.activeRenderers.has(renderer)){this.activeRenderers.delete(renderer);}}/**\n   * Optimise les géométries pour les appareils mobiles\n   * @param {THREE.BufferGeometry} geometry La géométrie à optimiser\n   * @returns {THREE.BufferGeometry} La géométrie optimisée\n   */optimizeGeometryForMobile(geometry){if(!geometry||!this.deviceCapabilities.isMobile)return geometry;// Créer une copie de la géométrie\nconst optimized=geometry.clone();// Réduire la complexité pour les appareils mobiles\nif(this.currentDetailLevel===DETAIL_LEVELS.ULTRA_LOW||this.currentDetailLevel===DETAIL_LEVELS.LOW){// Utiliser Three.js BufferGeometryUtils pour simplifier la géométrie\nif(mergeVertices){return mergeVertices(optimized,0.01);}}return optimized;}/**\n   * Libère toutes les ressources\n   */dispose(){// Arrêter le Web Worker\nif(this.worker){this.worker.terminate();this.worker=null;}// Arrêter la surveillance de la mémoire\nif(this.memoryMonitorInterval){clearInterval(this.memoryMonitorInterval);this.memoryMonitorInterval=null;}// Libérer tous les modèles et leurs ressources\nthis.loadedModels.forEach((model,modelId)=>{this.unloadModel(modelId);});// Libérer les géométries simplifiées\nfor(const key in SIMPLE_GEOMETRIES){if(SIMPLE_GEOMETRIES[key]){SIMPLE_GEOMETRIES[key].dispose();}}// Vider le pool de textures\nthis.clearTexturePool();// Désenregistrer tous les renderers\nthis.activeRenderers.clear();// Vider le cache en mémoire\nthis.loadedModels.clear();// Réinitialiser l'état\nthis.loadingProgress={};this.renderTimeHistory=[];this.isInitialized=false;this.contextLossHandled=false;this.lowMemoryMode=false;// Forcer la collecte des déchets (suggestion pour le navigateur)\nif(window.gc){window.gc();}console.info('Service de chargement progressif 3D libéré et ressources WebGL nettoyées');}}// Créer une instance singleton du service\nconst progressive3DLoader=new Progressive3DLoader();export{DETAIL_LEVELS,MOBILE_TEXTURE_SIZES};export default progressive3DLoader;","map":{"version":3,"names":["THREE","mergeVertices","featureFlagsService","apiCacheService","CACHE_STRATEGIES","DETAIL_LEVELS","ULTRA_LOW","LOW","MEDIUM","HIGH","ULTRA","DETAIL_PARAMS","segmentCount","textureSize","shadowsEnabled","lightCount","terrainResolution","maxVisibleElements","MOBILE_TEXTURE_SIZES","thumbnail","small","medium","large","MEMORY_THRESHOLDS","critical","warning","optimal","SIMPLE_GEOMETRIES","tree","BoxGeometry","rock","SphereGeometry","building","Progressive3DLoader","constructor","progressiveModeEnabled","currentDetailLevel","deviceCapabilities","loadedModels","Map","loadingProgress","worker","frustumCullingEnabled","lastRenderTime","targetFrameRate","renderTimeHistory","adaptiveQualityEnabled","isInitialized","texturePool","activeRenderers","Set","memoryMonitorInterval","contextLossHandled","lowMemoryMode","deviceMemory","isIOS","estimatedMemoryUsage","initialize","progressiveLoadingEnabled","isEnabled","console","info","detectDeviceCapabilities","webWorkerSupport","initializeWebWorker","setupContextLossHandlers","isMobile","setupMemoryMonitoring","detailLevel","adaptiveQuality","webWorker","error","Worker","webGLVersion","maxTextureSize","anisotropySupport","maxAnisotropy","devicePixelRatio","window","test","navigator","userAgent","MSStream","canvas","document","createElement","gl","getContext","getParameter","MAX_TEXTURE_SIZE","ext","getExtension","MAX_TEXTURE_MAX_ANISOTROPY_EXT","loseContext","unloadModel","modelId","model","get","geometry","dispose","material","Array","isArray","forEach","disposeMaterial","animations","mixer","stopAllAction","uncacheRoot","children","child","disposeObject3D","parent","remove","delete","updateMemoryUsage","propertyName","property","isTexture","has","uuid","poolEntry","inUse","object","length","addEventListener","event","preventDefault","warn","renderer","forceContextLoss","dispatchEvent","CustomEvent","resetState","rebuildTextures","clearInterval","setInterval","checkMemoryUsage","hidden","releaseNonEssentialResources","performanceNow","performance","now","memoryUsageMB","debug","toFixed","handleCriticalMemory","decreaseQuality","increaseQuality","unloadNonVisibleModels","clearTexturePool","gc","cleanupTexturePool","visibleModelIds","querySelectorAll","el","dataset","add","totalMemoryUsage","attributes","name","attribute","array","byteLength","materials","prop","texture","image","width","height","entry","getTextureFromPool","url","options","arguments","undefined","entries","TextureLoader","load","anisotropy","Math","min","set","lastUsed","Date","unusedTimeout","clear","texturesToRebuild","registerRenderer","setPixelRatio","shadowMap","enabled","autoUpdate","unregisterRenderer","optimizeGeometryForMobile","optimized","clone","terminate","key","progressive3DLoader"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/services/progressive3DLoader.js"],"sourcesContent":["/**\n * Service de chargement progressif pour visualisations 3D\n * Optimise les performances en adaptant la qualité du rendu aux capacités de l'appareil\n * et en utilisant un chargement progressif des détails\n */\nimport * as THREE from 'three';\nimport { mergeVertices } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport featureFlagsService from './featureFlags';\nimport apiCacheService, { CACHE_STRATEGIES } from './apiCache';\n\n// Niveaux de détail (LOD) pour le chargement progressif\nconst DETAIL_LEVELS = {\n  ULTRA_LOW: 'ultra-low',   // Pour appareils très limités ou chargement initial\n  LOW: 'low',               // Pour appareils mobiles bas de gamme\n  MEDIUM: 'medium',         // Pour la plupart des mobiles et tablettes\n  HIGH: 'high',             // Pour ordinateurs de bureau standard\n  ULTRA: 'ultra'            // Pour ordinateurs puissants\n};\n\n// Paramètres pour chaque niveau de détail\nconst DETAIL_PARAMS = {\n  [DETAIL_LEVELS.ULTRA_LOW]: {\n    segmentCount: 10,       // Nombre de segments pour les courbes\n    textureSize: 128,       // Taille des textures en pixels\n    shadowsEnabled: false,  // Désactiver les ombres\n    lightCount: 1,          // Nombre de sources lumineuses\n    terrainResolution: 8,   // Résolution du terrain (1 = pleine résolution)\n    maxVisibleElements: 20  // Nombre maximum d'éléments visibles\n  },\n  [DETAIL_LEVELS.LOW]: {\n    segmentCount: 20,\n    textureSize: 256,\n    shadowsEnabled: false,\n    lightCount: 2,\n    terrainResolution: 4,\n    maxVisibleElements: 50\n  },\n  [DETAIL_LEVELS.MEDIUM]: {\n    segmentCount: 32,\n    textureSize: 512,\n    shadowsEnabled: true,\n    lightCount: 2,\n    terrainResolution: 2,\n    maxVisibleElements: 100\n  },\n  [DETAIL_LEVELS.HIGH]: {\n    segmentCount: 64,\n    textureSize: 1024,\n    shadowsEnabled: true,\n    lightCount: 3,\n    terrainResolution: 1,\n    maxVisibleElements: 200\n  },\n  [DETAIL_LEVELS.ULTRA]: {\n    segmentCount: 128,\n    textureSize: 2048,\n    shadowsEnabled: true,\n    lightCount: 4,\n    terrainResolution: 1,\n    maxVisibleElements: 500\n  }\n};\n\n// Tailles des textures optimisées pour mobile\nconst MOBILE_TEXTURE_SIZES = {\n  thumbnail: 128,\n  small: 256,\n  medium: 512,\n  large: 1024\n};\n\n// Seuils de mémoire pour les appareils mobiles (en Mo)\nconst MEMORY_THRESHOLDS = {\n  critical: 150,  // Seuil critique - libération immédiate des ressources\n  warning: 300,   // Seuil d'avertissement - réduire la qualité\n  optimal: 500    // Seuil optimal - fonctionnement normal\n};\n\n// Géométries simplifiées pour remplacer les modèles complexes à distance\nconst SIMPLE_GEOMETRIES = {\n  tree: new THREE.BoxGeometry(1, 2, 1),\n  rock: new THREE.SphereGeometry(1, 4, 4),\n  building: new THREE.BoxGeometry(1, 1, 1)\n};\n\n/**\n * Class principale pour le chargement progressif des visualisations 3D\n */\nclass Progressive3DLoader {\n  constructor() {\n    this.progressiveModeEnabled = true;\n    this.currentDetailLevel = DETAIL_LEVELS.MEDIUM;\n    this.deviceCapabilities = null;\n    this.loadedModels = new Map();\n    this.loadingProgress = {};\n    this.worker = null;\n    this.frustumCullingEnabled = true;\n    this.lastRenderTime = 0;\n    this.targetFrameRate = 30;\n    this.renderTimeHistory = [];\n    this.adaptiveQualityEnabled = true;\n    this.isInitialized = false;\n    this.texturePool = new Map(); // Pool de textures réutilisables\n    this.activeRenderers = new Set(); // Ensemble des renderers actifs\n    this.memoryMonitorInterval = null;\n    this.contextLossHandled = false;\n    this.lowMemoryMode = false;\n    this.deviceMemory = null;\n    this.isIOS = false;\n    this.estimatedMemoryUsage = 0;\n  }\n\n  /**\n   * Initialise le service de chargement progressif\n   */\n  async initialize() {\n    if (this.isInitialized) return;\n    \n    try {\n      // Vérifier si le feature flag est activé\n      const progressiveLoadingEnabled = featureFlagsService.isEnabled('enableProgressiveLoading3D');\n      \n      if (!progressiveLoadingEnabled) {\n        console.info('Chargement progressif 3D désactivé via feature flags');\n        this.progressiveModeEnabled = false;\n        this.isInitialized = true;\n        return;\n      }\n      \n      // Détecter les capacités du dispositif\n      await this.detectDeviceCapabilities();\n      \n      // Initialiser le Web Worker si supporté\n      if (this.deviceCapabilities.webWorkerSupport) {\n        this.initializeWebWorker();\n      }\n      \n      // Initialiser les gestionnaires d'événements pour la perte de contexte WebGL\n      this.setupContextLossHandlers();\n      \n      // Configurer la surveillance de la mémoire pour les appareils mobiles\n      if (this.deviceCapabilities.isMobile) {\n        this.setupMemoryMonitoring();\n      }\n      \n      console.info('Service de chargement progressif 3D initialisé', {\n        detailLevel: this.currentDetailLevel,\n        adaptiveQuality: this.adaptiveQualityEnabled,\n        webWorker: this.worker !== null,\n        deviceMemory: this.deviceMemory,\n        isMobile: this.deviceCapabilities.isMobile,\n        isIOS: this.isIOS\n      });\n      \n      this.isInitialized = true;\n    } catch (error) {\n      console.error('Erreur lors de l\\'initialisation du chargement progressif 3D:', error);\n      // Fallback au mode standard en cas d'erreur\n      this.progressiveModeEnabled = false;\n      this.isInitialized = true;\n    }\n  }\n\n  /**\n   * Détecte les capacités du dispositif utilisé\n   */\n  async detectDeviceCapabilities() {\n    this.deviceCapabilities = {\n      webWorkerSupport: typeof Worker !== 'undefined',\n      webGLVersion: 1,\n      maxTextureSize: 2048,\n      anisotropySupport: false,\n      maxAnisotropy: 1,\n      isMobile: false,\n      devicePixelRatio: window.devicePixelRatio || 1\n    };\n    \n    // Détection des plateformes mobiles\n    this.deviceCapabilities.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    this.isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n    \n    // Détection de la mémoire disponible (si supportée)\n    if (navigator.deviceMemory) {\n      this.deviceMemory = navigator.deviceMemory;\n    } else {\n      // Estimation basée sur l'agent utilisateur\n      this.deviceMemory = this.deviceCapabilities.isMobile ? 2 : 8;\n    }\n    \n    try {\n      // Créer un canvas temporaire pour tester les capacités WebGL\n      const canvas = document.createElement('canvas');\n      let gl = canvas.getContext('webgl2');\n      \n      if (gl) {\n        this.deviceCapabilities.webGLVersion = 2;\n      } else {\n        gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n        this.deviceCapabilities.webGLVersion = gl ? 1 : 0;\n      }\n      \n      if (gl) {\n        // Détecter la taille maximale de texture\n        this.deviceCapabilities.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n        \n        // Détecter le support d'anisotropie\n        const ext = gl.getExtension('EXT_texture_filter_anisotropic') || \n                    gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || \n                    gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n        \n        if (ext) {\n          this.deviceCapabilities.anisotropySupport = true;\n          this.deviceCapabilities.maxAnisotropy = gl.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n        }\n        \n        // Libérer les ressources du contexte temporaire\n        const loseContext = gl.getExtension('WEBGL_lose_context');\n        if (loseContext) {\n          loseContext.loseContext();\n        }\n      }\n      \n      // Définir le niveau de détail approprié en fonction des capacités détectées\n      if (this.deviceCapabilities.isMobile) {\n        if (this.deviceMemory <= 2) {\n          this.currentDetailLevel = DETAIL_LEVELS.LOW;\n        } else {\n          this.currentDetailLevel = DETAIL_LEVELS.MEDIUM;\n        }\n        \n        // Activer automatiquement le frustum culling sur mobile\n        this.frustumCullingEnabled = true;\n      } else {\n        if (this.deviceCapabilities.webGLVersion >= 2) {\n          this.currentDetailLevel = DETAIL_LEVELS.HIGH;\n        } else {\n          this.currentDetailLevel = DETAIL_LEVELS.MEDIUM;\n        }\n      }\n      \n    } catch (error) {\n      console.error('Erreur lors de la détection des capacités WebGL:', error);\n      this.currentDetailLevel = DETAIL_LEVELS.LOW;\n    }\n    \n    return this.deviceCapabilities;\n  }\n\n  /**\n   * Unload d'un modèle et libération des ressources WebGL associées\n   * @param {string} modelId Identifiant du modèle\n   */\n  unloadModel(modelId) {\n    const model = this.loadedModels.get(modelId);\n    \n    if (model) {\n      // Libération améliorée des ressources Three.js\n      if (model.geometry) {\n        model.geometry.dispose();\n      }\n      \n      // Libérer les textures et matériaux\n      if (model.material) {\n        if (Array.isArray(model.material)) {\n          model.material.forEach(material => this.disposeMaterial(material));\n        } else {\n          this.disposeMaterial(model.material);\n        }\n      }\n      \n      // Libérer les animations et mixers s'ils existent\n      if (model.animations && model.mixer) {\n        model.mixer.stopAllAction();\n        model.mixer.uncacheRoot(model);\n      }\n      \n      // Libérer les enfants récursivement\n      if (model.children) {\n        model.children.forEach(child => {\n          this.disposeObject3D(child);\n        });\n      }\n      \n      // Supprimer de la scène si ajouté\n      if (model.parent) {\n        model.parent.remove(model);\n      }\n      \n      this.loadedModels.delete(modelId);\n      \n      // Mettre à jour l'estimation de la mémoire\n      this.updateMemoryUsage();\n      \n      console.info(`Modèle ${modelId} déchargé et ressources libérées`);\n    }\n  }\n\n  /**\n   * Libère les ressources d'un matériau\n   * @param {THREE.Material} material Le matériau à libérer\n   */\n  disposeMaterial(material) {\n    if (!material) return;\n    \n    // Libérer les textures\n    for (const propertyName in material) {\n      const property = material[propertyName];\n      if (property && property.isTexture) {\n        // Si la texture est dans le pool, la marquer comme disponible\n        if (this.texturePool.has(property.uuid)) {\n          const poolEntry = this.texturePool.get(property.uuid);\n          poolEntry.inUse = false;\n        } else {\n          // Sinon, libérer complètement\n          property.dispose();\n        }\n      }\n    }\n    \n    // Libérer le matériau lui-même\n    material.dispose();\n  }\n\n  /**\n   * Dispose récursivement un Object3D et toutes ses ressources\n   * @param {THREE.Object3D} object L'objet à libérer\n   */\n  disposeObject3D(object) {\n    if (!object) return;\n    \n    // Traiter les enfants de manière récursive\n    if (object.children && object.children.length > 0) {\n      // Créer une copie du tableau pour éviter les problèmes de modification pendant l'itération\n      const children = [...object.children];\n      children.forEach(child => {\n        this.disposeObject3D(child);\n        object.remove(child);\n      });\n    }\n    \n    // Libérer la géométrie\n    if (object.geometry) {\n      object.geometry.dispose();\n    }\n    \n    // Libérer le matériau\n    if (object.material) {\n      if (Array.isArray(object.material)) {\n        object.material.forEach(material => this.disposeMaterial(material));\n      } else {\n        this.disposeMaterial(object.material);\n      }\n    }\n  }\n\n  /**\n   * Mise en place des gestionnaires pour la perte de contexte WebGL\n   */\n  setupContextLossHandlers() {\n    // Enregistrer une fonction pour traiter la perte de contexte WebGL\n    window.addEventListener('webglcontextlost', (event) => {\n      event.preventDefault();\n      this.contextLossHandled = true;\n      console.warn('Contexte WebGL perdu, tentative de récupération...');\n      \n      // Arrêter tous les rendus 3D en cours\n      this.activeRenderers.forEach(renderer => {\n        renderer.forceContextLoss();\n      });\n      \n      // Passer en mode basse mémoire\n      this.lowMemoryMode = true;\n      this.currentDetailLevel = DETAIL_LEVELS.ULTRA_LOW;\n      \n      // Notifier l'application de la perte de contexte\n      document.dispatchEvent(new CustomEvent('webgl-context-lost'));\n    }, false);\n    \n    // Gestionnaire pour la restauration du contexte\n    window.addEventListener('webglcontextrestored', () => {\n      console.info('Contexte WebGL restauré');\n      this.contextLossHandled = false;\n      \n      // Réinitialiser les renderers\n      this.activeRenderers.forEach(renderer => {\n        renderer.resetState();\n      });\n      \n      // Réinitialiser les textures et matériaux si nécessaire\n      this.rebuildTextures();\n      \n      // Notifier l'application de la restauration du contexte\n      document.dispatchEvent(new CustomEvent('webgl-context-restored'));\n    }, false);\n  }\n\n  /**\n   * Surveille l'utilisation de la mémoire sur les appareils mobiles\n   */\n  setupMemoryMonitoring() {\n    // Nettoyer l'ancien interval si existant\n    if (this.memoryMonitorInterval) {\n      clearInterval(this.memoryMonitorInterval);\n    }\n    \n    // Établir un intervalle pour vérifier la mémoire\n    this.memoryMonitorInterval = setInterval(() => {\n      this.checkMemoryUsage();\n    }, 30000); // Vérifier toutes les 30 secondes\n    \n    // Ajouter des gestionnaires pour les événements de visibilité de page\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden) {\n        // L'utilisateur a quitté la page, libérer les ressources non essentielles\n        this.releaseNonEssentialResources();\n      } else {\n        // L'utilisateur est revenu, vérifier la mémoire\n        this.checkMemoryUsage();\n      }\n    });\n  }\n\n  /**\n   * Vérifier l'utilisation de la mémoire et prendre des mesures si nécessaire\n   */\n  checkMemoryUsage() {\n    // Estimation de l'utilisation de la mémoire\n    this.updateMemoryUsage();\n    \n    // Vérifier les performances du système\n    const performanceNow = performance.now();\n    const memoryUsageMB = this.estimatedMemoryUsage / (1024 * 1024);\n    \n    console.debug(`Utilisation estimée de la mémoire 3D: ${memoryUsageMB.toFixed(2)} MB`);\n    \n    // Mesures basées sur l'utilisation de la mémoire\n    if (memoryUsageMB > MEMORY_THRESHOLDS.critical) {\n      console.warn(`Utilisation critique de la mémoire: ${memoryUsageMB.toFixed(2)} MB`);\n      this.handleCriticalMemory();\n    } else if (memoryUsageMB > MEMORY_THRESHOLDS.warning) {\n      console.warn(`Avertissement mémoire: ${memoryUsageMB.toFixed(2)} MB`);\n      this.decreaseQuality();\n      this.releaseNonEssentialResources();\n    } else if (memoryUsageMB < MEMORY_THRESHOLDS.optimal && this.lowMemoryMode) {\n      // Si nous sommes en dessous du seuil optimal et en mode basse mémoire,\n      // nous pouvons revenir à un mode normal\n      this.lowMemoryMode = false;\n      if (this.adaptiveQualityEnabled) {\n        this.increaseQuality();\n      }\n    }\n  }\n\n  /**\n   * Gestion du cas critique de mémoire - libérer immédiatement les ressources\n   */\n  handleCriticalMemory() {\n    this.lowMemoryMode = true;\n    \n    // Réduire drastiquement la qualité\n    this.currentDetailLevel = DETAIL_LEVELS.ULTRA_LOW;\n    \n    // Libérer les modèles non essentiels\n    this.unloadNonVisibleModels();\n    \n    // Vider le pool de textures\n    this.clearTexturePool();\n    \n    // Forcer la libération de la mémoire si supporté\n    if (window.gc) window.gc();\n    \n    // Notifier l'application pour qu'elle prenne des mesures supplémentaires\n    document.dispatchEvent(new CustomEvent('webgl-memory-critical'));\n  }\n\n  /**\n   * Libération des ressources non essentielles\n   */\n  releaseNonEssentialResources() {\n    // Libérer les textures non utilisées\n    this.cleanupTexturePool();\n    \n    // Libérer les modèles en cache mais non visibles\n    this.unloadNonVisibleModels();\n  }\n\n  /**\n   * Décharger les modèles qui ne sont pas actuellement visibles\n   */\n  unloadNonVisibleModels() {\n    const visibleModelIds = new Set();\n    \n    // Obtenir les IDs des modèles actuellement visibles (ceci est une simulation, \n    // l'implémentation réelle dépendrait de comment la visibilité est gérée)\n    document.querySelectorAll('[data-model-visible=\"true\"]').forEach(el => {\n      const modelId = el.dataset.modelId;\n      if (modelId) visibleModelIds.add(modelId);\n    });\n    \n    // Décharger les modèles non visibles\n    this.loadedModels.forEach((model, modelId) => {\n      if (!visibleModelIds.has(modelId)) {\n        this.unloadModel(modelId);\n      }\n    });\n  }\n\n  /**\n   * Mise à jour de l'estimation de l'utilisation de la mémoire\n   */\n  updateMemoryUsage() {\n    let totalMemoryUsage = 0;\n    \n    // Calculer la mémoire utilisée par les géométries\n    this.loadedModels.forEach(model => {\n      if (model.geometry) {\n        // Estimation de la taille de la géométrie\n        if (model.geometry.attributes) {\n          for (const name in model.geometry.attributes) {\n            const attribute = model.geometry.attributes[name];\n            if (attribute.array) {\n              totalMemoryUsage += attribute.array.byteLength || 0;\n            }\n          }\n        }\n      }\n      \n      // Estimation de la taille des textures\n      if (model.material) {\n        const materials = Array.isArray(model.material) ? model.material : [model.material];\n        materials.forEach(material => {\n          for (const prop in material) {\n            const texture = material[prop];\n            if (texture && texture.isTexture && texture.image) {\n              const width = texture.image.width || 0;\n              const height = texture.image.height || 0;\n              // Estimation de 4 octets par pixel (RGBA)\n              totalMemoryUsage += width * height * 4;\n            }\n          }\n        });\n      }\n    });\n    \n    // Ajouter la mémoire utilisée par le pool de textures\n    this.texturePool.forEach(entry => {\n      const texture = entry.texture;\n      if (texture && texture.image) {\n        const width = texture.image.width || 0;\n        const height = texture.image.height || 0;\n        totalMemoryUsage += width * height * 4;\n      }\n    });\n    \n    this.estimatedMemoryUsage = totalMemoryUsage;\n    return totalMemoryUsage;\n  }\n\n  /**\n   * Gestion d'un pool de textures pour la réutilisation\n   * @param {string} url URL de la texture\n   * @param {object} options Options de la texture\n   * @returns {THREE.Texture} Texture du pool ou nouvelle texture\n   */\n  getTextureFromPool(url, options = {}) {\n    // Rechercher une texture disponible dans le pool\n    for (const [uuid, entry] of this.texturePool.entries()) {\n      if (!entry.inUse && entry.url === url) {\n        entry.inUse = true;\n        return entry.texture;\n      }\n    }\n    \n    // Si aucune texture n'est disponible, en créer une nouvelle\n    const texture = new THREE.TextureLoader().load(url);\n    \n    // Appliquer les options\n    if (options.anisotropy && this.deviceCapabilities.anisotropySupport) {\n      texture.anisotropy = Math.min(\n        options.anisotropy,\n        this.deviceCapabilities.maxAnisotropy\n      );\n    }\n    \n    // Ajouter au pool\n    this.texturePool.set(texture.uuid, {\n      texture,\n      url,\n      inUse: true,\n      lastUsed: Date.now()\n    });\n    \n    return texture;\n  }\n\n  /**\n   * Nettoyage des textures non utilisées dans le pool\n   */\n  cleanupTexturePool() {\n    const now = Date.now();\n    const unusedTimeout = 60000; // 1 minute\n    \n    for (const [uuid, entry] of this.texturePool.entries()) {\n      if (!entry.inUse && (now - entry.lastUsed > unusedTimeout)) {\n        entry.texture.dispose();\n        this.texturePool.delete(uuid);\n      }\n    }\n  }\n\n  /**\n   * Vider complètement le pool de textures\n   */\n  clearTexturePool() {\n    for (const [uuid, entry] of this.texturePool.entries()) {\n      entry.texture.dispose();\n    }\n    this.texturePool.clear();\n  }\n\n  /**\n   * Reconstruire les textures après une perte de contexte\n   */\n  rebuildTextures() {\n    // Recréer les textures qui étaient en utilisation\n    const texturesToRebuild = new Map();\n    \n    // Collecter les textures qui doivent être reconstruites\n    this.texturePool.forEach((entry, uuid) => {\n      if (entry.inUse) {\n        texturesToRebuild.set(uuid, {\n          url: entry.url,\n          options: entry.options\n        });\n      }\n    });\n    \n    // Vider le pool actuel\n    this.clearTexturePool();\n    \n    // Reconstruire les textures nécessaires\n    texturesToRebuild.forEach((info, uuid) => {\n      const texture = this.getTextureFromPool(info.url, info.options);\n      \n      // Mettre à jour les références dans les matériaux si nécessaire\n      this.loadedModels.forEach(model => {\n        if (model.material) {\n          const materials = Array.isArray(model.material) ? model.material : [model.material];\n          materials.forEach(material => {\n            for (const prop in material) {\n              if (material[prop] && material[prop].isTexture && material[prop].uuid === uuid) {\n                material[prop] = texture;\n              }\n            }\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Enregistre un renderer pour surveillance\n   * @param {THREE.WebGLRenderer} renderer Le renderer à surveiller\n   */\n  registerRenderer(renderer) {\n    if (renderer && !this.activeRenderers.has(renderer)) {\n      this.activeRenderers.add(renderer);\n      \n      // Configurer le renderer pour optimiser les performances mobiles\n      if (this.deviceCapabilities.isMobile) {\n        renderer.setPixelRatio(Math.min(this.deviceCapabilities.devicePixelRatio, 2));\n        renderer.shadowMap.enabled = this.currentDetailLevel !== DETAIL_LEVELS.ULTRA_LOW && \n                                     this.currentDetailLevel !== DETAIL_LEVELS.LOW;\n        renderer.shadowMap.autoUpdate = false; // Mettre à jour manuellement pour économiser des ressources\n      }\n    }\n  }\n\n  /**\n   * Désenregistre un renderer\n   * @param {THREE.WebGLRenderer} renderer Le renderer à désenregistrer\n   */\n  unregisterRenderer(renderer) {\n    if (renderer && this.activeRenderers.has(renderer)) {\n      this.activeRenderers.delete(renderer);\n    }\n  }\n\n  /**\n   * Optimise les géométries pour les appareils mobiles\n   * @param {THREE.BufferGeometry} geometry La géométrie à optimiser\n   * @returns {THREE.BufferGeometry} La géométrie optimisée\n   */\n  optimizeGeometryForMobile(geometry) {\n    if (!geometry || !this.deviceCapabilities.isMobile) return geometry;\n    \n    // Créer une copie de la géométrie\n    const optimized = geometry.clone();\n    \n    // Réduire la complexité pour les appareils mobiles\n    if (this.currentDetailLevel === DETAIL_LEVELS.ULTRA_LOW || this.currentDetailLevel === DETAIL_LEVELS.LOW) {\n      // Utiliser Three.js BufferGeometryUtils pour simplifier la géométrie\n      if (mergeVertices) {\n        return mergeVertices(optimized, 0.01);\n      }\n    }\n    \n    return optimized;\n  }\n\n  /**\n   * Libère toutes les ressources\n   */\n  dispose() {\n    // Arrêter le Web Worker\n    if (this.worker) {\n      this.worker.terminate();\n      this.worker = null;\n    }\n    \n    // Arrêter la surveillance de la mémoire\n    if (this.memoryMonitorInterval) {\n      clearInterval(this.memoryMonitorInterval);\n      this.memoryMonitorInterval = null;\n    }\n    \n    // Libérer tous les modèles et leurs ressources\n    this.loadedModels.forEach((model, modelId) => {\n      this.unloadModel(modelId);\n    });\n    \n    // Libérer les géométries simplifiées\n    for (const key in SIMPLE_GEOMETRIES) {\n      if (SIMPLE_GEOMETRIES[key]) {\n        SIMPLE_GEOMETRIES[key].dispose();\n      }\n    }\n    \n    // Vider le pool de textures\n    this.clearTexturePool();\n    \n    // Désenregistrer tous les renderers\n    this.activeRenderers.clear();\n    \n    // Vider le cache en mémoire\n    this.loadedModels.clear();\n    \n    // Réinitialiser l'état\n    this.loadingProgress = {};\n    this.renderTimeHistory = [];\n    this.isInitialized = false;\n    this.contextLossHandled = false;\n    this.lowMemoryMode = false;\n    \n    // Forcer la collecte des déchets (suggestion pour le navigateur)\n    if (window.gc) {\n      window.gc();\n    }\n    \n    console.info('Service de chargement progressif 3D libéré et ressources WebGL nettoyées');\n  }\n}\n\n// Créer une instance singleton du service\nconst progressive3DLoader = new Progressive3DLoader();\n\nexport { DETAIL_LEVELS, MOBILE_TEXTURE_SIZES };\nexport default progressive3DLoader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}