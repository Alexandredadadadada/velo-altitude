{"ast":null,"code":"/**\n * Service d'optimisation pour la gestion de la batterie dans les applications 3D\n * Ce service surveille l'état de la batterie et fournit des configurations\n * optimisées pour réduire la consommation sur les appareils mobiles.\n */class BatteryOptimizer{constructor(){this.batteryData={isSupported:false,level:1.0,charging:true,dischargingTime:Infinity};this.listeners=[];this.batteryModeActive=false;this.initialized=false;// Configurations d'optimisation pour le mode batterie\nthis.batterySavingConfig={maxPixelRatio:1.0,shadowsEnabled:false,useSimplifiedGeometry:true,minimizeObjects:true,maxDistanceMarkers:5,antialias:false,maxLights:1,useLowResTextures:true,disablePostProcessing:true,throttleFPS:true,targetFPS:30,enableFrustumCulling:true};// Seuils pour le mode batterie\nthis.thresholds={lowBatteryLevel:0.3,// Niveau sous lequel activer automatiquement le mode batterie\ncriticalBatteryLevel:0.15,// Niveau critique pour des optimisations maximales\ndischargingTimeWarning:30*60// 30 minutes en secondes\n};this.autoEnableBatteryMode=true;// Option à configurer par l'utilisateur\n}/**\n   * Initialise le service et tente d'accéder à l'API Battery\n   * @returns {Promise<boolean>} - True si l'API est supportée\n   */async initialize(){if(this.initialized)return this.batteryData.isSupported;// Vérifier si l'API Battery est disponible\nif('getBattery'in navigator){try{const battery=await navigator.getBattery();this.batteryData.isSupported=true;this.updateBatteryInfo(battery);// Ajouter les event listeners\nbattery.addEventListener('levelchange',()=>this.updateBatteryInfo(battery));battery.addEventListener('chargingchange',()=>this.updateBatteryInfo(battery));battery.addEventListener('dischargingtimechange',()=>this.updateBatteryInfo(battery));// Vérifier si nous devons activer le mode d'économie\nthis.checkBatteryStatus();console.log('BatteryOptimizer: API Battery initialisée avec succès');}catch(error){console.error('BatteryOptimizer: Erreur lors de l\\'initialisation de l\\'API Battery',error);this.batteryData.isSupported=false;}}else{console.log('BatteryOptimizer: API Battery non supportée par ce navigateur');this.batteryData.isSupported=false;}this.initialized=true;return this.batteryData.isSupported;}/**\n   * Met à jour les informations de la batterie\n   * @param {BatteryManager} battery - L'objet BatteryManager\n   */updateBatteryInfo(battery){const previousLevel=this.batteryData.level;const previousCharging=this.batteryData.charging;this.batteryData.level=battery.level;this.batteryData.charging=battery.charging;this.batteryData.dischargingTime=battery.dischargingTime;// Notifier les listeners seulement si des changements importants sont détectés\nconst significantChange=Math.abs(previousLevel-battery.level)>0.05||// Changement de 5% ou plus\npreviousCharging!==battery.charging;// Changement d'état de chargement\nif(significantChange){this.notifyListeners();this.checkBatteryStatus();}}/**\n   * Vérifie l'état de la batterie et active le mode économie si nécessaire\n   */checkBatteryStatus(){if(!this.batteryData.isSupported||!this.autoEnableBatteryMode)return;// Si en charge, on peut désactiver le mode économie\nif(this.batteryData.charging&&this.batteryModeActive){this.setBatteryMode(false);console.log('BatteryOptimizer: Appareil en charge, désactivation du mode économie de batterie');return;}// Si le niveau est bas et pas en charge, on active le mode économie\nif(!this.batteryData.charging){if(this.batteryData.level<=this.thresholds.lowBatteryLevel&&!this.batteryModeActive){this.setBatteryMode(true);console.log(`BatteryOptimizer: Batterie faible (${Math.round(this.batteryData.level*100)}%), activation du mode économie`);}// Si le niveau est critique, on peut ajouter des optimisations supplémentaires\nif(this.batteryData.level<=this.thresholds.criticalBatteryLevel){console.log(`BatteryOptimizer: Niveau de batterie critique (${Math.round(this.batteryData.level*100)}%), optimisations maximales`);// Ici on pourrait notifier l'utilisateur ou ajouter des optimisations plus agressives\n}}}/**\n   * Active ou désactive le mode économie de batterie\n   * @param {boolean} active - True pour activer, false pour désactiver\n   */setBatteryMode(active){if(this.batteryModeActive===active)return;this.batteryModeActive=active;// Notification à tous les composants écoutant ce service\nthis.notifyListeners();// Stocker la préférence utilisateur dans localStorage\nif(typeof localStorage!=='undefined'){localStorage.setItem('batteryModeEnabled',active?'true':'false');}console.log(`BatteryOptimizer: Mode économie de batterie ${active?'activé':'désactivé'}`);}/**\n   * Obtient la configuration optimisée pour la visualisation 3D\n   * @returns {Object} Configuration d'optimisation\n   */getBatterySavingConfig(){if(!this.batteryModeActive)return null;// Pour le niveau critique, on peut renforcer les optimisations\nif(this.batteryData.level<=this.thresholds.criticalBatteryLevel){return{...this.batterySavingConfig,maxPixelRatio:0.75,// Encore plus faible\ntargetFPS:20,// FPS encore plus bas\nminimizeObjects:true// Réduire au maximum les objets\n};}return this.batterySavingConfig;}/**\n   * Indique si le mode économie de batterie est actif\n   * @returns {boolean}\n   */isBatteryModeActive(){return this.batteryModeActive;}/**\n   * Récupère les données actuelles de la batterie\n   * @returns {Object} Données de la batterie\n   */getBatteryData(){return{...this.batteryData};}/**\n   * Ajoute un écouteur pour les changements d'état de la batterie\n   * @param {Function} listener - Fonction callback à appeler lors des changements\n   */addListener(listener){if(typeof listener==='function'&&!this.listeners.includes(listener)){this.listeners.push(listener);}}/**\n   * Supprime un écouteur\n   * @param {Function} listener - Écouteur à supprimer\n   */removeListener(listener){this.listeners=this.listeners.filter(l=>l!==listener);}/**\n   * Notifie tous les écouteurs d'un changement\n   */notifyListeners(){this.listeners.forEach(listener=>{try{listener({batteryData:this.getBatteryData(),batteryModeActive:this.batteryModeActive,config:this.getBatterySavingConfig()});}catch(error){console.error('BatteryOptimizer: Erreur lors de la notification d\\'un écouteur',error);}});}/**\n   * Configure l'activation automatique du mode batterie\n   * @param {boolean} enabled - True pour activer, false pour désactiver\n   */setAutoMode(enabled){this.autoEnableBatteryMode=enabled;// Si on active le mode auto, on vérifie immédiatement l'état\nif(enabled){this.checkBatteryStatus();}// Stocker la préférence utilisateur\nif(typeof localStorage!=='undefined'){localStorage.setItem('batteryAutoMode',enabled?'true':'false');}}/**\n   * Charge les préférences utilisateur du localStorage\n   */loadUserPreferences(){if(typeof localStorage!=='undefined'){// Charger le mode batterie\nconst savedBatteryMode=localStorage.getItem('batteryModeEnabled');if(savedBatteryMode==='true'){this.setBatteryMode(true);}// Charger le mode auto\nconst savedAutoMode=localStorage.getItem('batteryAutoMode');if(savedAutoMode!==null){this.setAutoMode(savedAutoMode==='true');}}}}// Créer et exporter l'instance unique\nconst batteryOptimizer=new BatteryOptimizer();// Initialiser automatiquement\nif(typeof window!=='undefined'){// Initialiser au chargement pour les navigateurs\nwindow.addEventListener('load',()=>{batteryOptimizer.initialize().then(()=>{batteryOptimizer.loadUserPreferences();});});}export default batteryOptimizer;","map":{"version":3,"names":["BatteryOptimizer","constructor","batteryData","isSupported","level","charging","dischargingTime","Infinity","listeners","batteryModeActive","initialized","batterySavingConfig","maxPixelRatio","shadowsEnabled","useSimplifiedGeometry","minimizeObjects","maxDistanceMarkers","antialias","maxLights","useLowResTextures","disablePostProcessing","throttleFPS","targetFPS","enableFrustumCulling","thresholds","lowBatteryLevel","criticalBatteryLevel","dischargingTimeWarning","autoEnableBatteryMode","initialize","navigator","battery","getBattery","updateBatteryInfo","addEventListener","checkBatteryStatus","console","log","error","previousLevel","previousCharging","significantChange","Math","abs","notifyListeners","setBatteryMode","round","active","localStorage","setItem","getBatterySavingConfig","isBatteryModeActive","getBatteryData","addListener","listener","includes","push","removeListener","filter","l","forEach","config","setAutoMode","enabled","loadUserPreferences","savedBatteryMode","getItem","savedAutoMode","batteryOptimizer","window","then"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/utils/batteryOptimizer.js"],"sourcesContent":["/**\n * Service d'optimisation pour la gestion de la batterie dans les applications 3D\n * Ce service surveille l'état de la batterie et fournit des configurations\n * optimisées pour réduire la consommation sur les appareils mobiles.\n */\n\nclass BatteryOptimizer {\n  constructor() {\n    this.batteryData = {\n      isSupported: false,\n      level: 1.0,\n      charging: true,\n      dischargingTime: Infinity\n    };\n    this.listeners = [];\n    this.batteryModeActive = false;\n    this.initialized = false;\n\n    // Configurations d'optimisation pour le mode batterie\n    this.batterySavingConfig = {\n      maxPixelRatio: 1.0,\n      shadowsEnabled: false,\n      useSimplifiedGeometry: true,\n      minimizeObjects: true,\n      maxDistanceMarkers: 5,\n      antialias: false,\n      maxLights: 1,\n      useLowResTextures: true,\n      disablePostProcessing: true,\n      throttleFPS: true,\n      targetFPS: 30,\n      enableFrustumCulling: true\n    };\n\n    // Seuils pour le mode batterie\n    this.thresholds = {\n      lowBatteryLevel: 0.3,      // Niveau sous lequel activer automatiquement le mode batterie\n      criticalBatteryLevel: 0.15, // Niveau critique pour des optimisations maximales\n      dischargingTimeWarning: 30 * 60, // 30 minutes en secondes\n    };\n\n    this.autoEnableBatteryMode = true; // Option à configurer par l'utilisateur\n  }\n\n  /**\n   * Initialise le service et tente d'accéder à l'API Battery\n   * @returns {Promise<boolean>} - True si l'API est supportée\n   */\n  async initialize() {\n    if (this.initialized) return this.batteryData.isSupported;\n\n    // Vérifier si l'API Battery est disponible\n    if ('getBattery' in navigator) {\n      try {\n        const battery = await navigator.getBattery();\n        this.batteryData.isSupported = true;\n        this.updateBatteryInfo(battery);\n        \n        // Ajouter les event listeners\n        battery.addEventListener('levelchange', () => this.updateBatteryInfo(battery));\n        battery.addEventListener('chargingchange', () => this.updateBatteryInfo(battery));\n        battery.addEventListener('dischargingtimechange', () => this.updateBatteryInfo(battery));\n        \n        // Vérifier si nous devons activer le mode d'économie\n        this.checkBatteryStatus();\n        \n        console.log('BatteryOptimizer: API Battery initialisée avec succès');\n      } catch (error) {\n        console.error('BatteryOptimizer: Erreur lors de l\\'initialisation de l\\'API Battery', error);\n        this.batteryData.isSupported = false;\n      }\n    } else {\n      console.log('BatteryOptimizer: API Battery non supportée par ce navigateur');\n      this.batteryData.isSupported = false;\n    }\n    \n    this.initialized = true;\n    return this.batteryData.isSupported;\n  }\n\n  /**\n   * Met à jour les informations de la batterie\n   * @param {BatteryManager} battery - L'objet BatteryManager\n   */\n  updateBatteryInfo(battery) {\n    const previousLevel = this.batteryData.level;\n    const previousCharging = this.batteryData.charging;\n    \n    this.batteryData.level = battery.level;\n    this.batteryData.charging = battery.charging;\n    this.batteryData.dischargingTime = battery.dischargingTime;\n    \n    // Notifier les listeners seulement si des changements importants sont détectés\n    const significantChange = \n      Math.abs(previousLevel - battery.level) > 0.05 || // Changement de 5% ou plus\n      previousCharging !== battery.charging; // Changement d'état de chargement\n      \n    if (significantChange) {\n      this.notifyListeners();\n      this.checkBatteryStatus();\n    }\n  }\n\n  /**\n   * Vérifie l'état de la batterie et active le mode économie si nécessaire\n   */\n  checkBatteryStatus() {\n    if (!this.batteryData.isSupported || !this.autoEnableBatteryMode) return;\n    \n    // Si en charge, on peut désactiver le mode économie\n    if (this.batteryData.charging && this.batteryModeActive) {\n      this.setBatteryMode(false);\n      console.log('BatteryOptimizer: Appareil en charge, désactivation du mode économie de batterie');\n      return;\n    }\n    \n    // Si le niveau est bas et pas en charge, on active le mode économie\n    if (!this.batteryData.charging) {\n      if (this.batteryData.level <= this.thresholds.lowBatteryLevel && !this.batteryModeActive) {\n        this.setBatteryMode(true);\n        console.log(`BatteryOptimizer: Batterie faible (${Math.round(this.batteryData.level * 100)}%), activation du mode économie`);\n      }\n      \n      // Si le niveau est critique, on peut ajouter des optimisations supplémentaires\n      if (this.batteryData.level <= this.thresholds.criticalBatteryLevel) {\n        console.log(`BatteryOptimizer: Niveau de batterie critique (${Math.round(this.batteryData.level * 100)}%), optimisations maximales`);\n        // Ici on pourrait notifier l'utilisateur ou ajouter des optimisations plus agressives\n      }\n    }\n  }\n\n  /**\n   * Active ou désactive le mode économie de batterie\n   * @param {boolean} active - True pour activer, false pour désactiver\n   */\n  setBatteryMode(active) {\n    if (this.batteryModeActive === active) return;\n    \n    this.batteryModeActive = active;\n    \n    // Notification à tous les composants écoutant ce service\n    this.notifyListeners();\n    \n    // Stocker la préférence utilisateur dans localStorage\n    if (typeof localStorage !== 'undefined') {\n      localStorage.setItem('batteryModeEnabled', active ? 'true' : 'false');\n    }\n    \n    console.log(`BatteryOptimizer: Mode économie de batterie ${active ? 'activé' : 'désactivé'}`);\n  }\n\n  /**\n   * Obtient la configuration optimisée pour la visualisation 3D\n   * @returns {Object} Configuration d'optimisation\n   */\n  getBatterySavingConfig() {\n    if (!this.batteryModeActive) return null;\n    \n    // Pour le niveau critique, on peut renforcer les optimisations\n    if (this.batteryData.level <= this.thresholds.criticalBatteryLevel) {\n      return {\n        ...this.batterySavingConfig,\n        maxPixelRatio: 0.75,  // Encore plus faible\n        targetFPS: 20,        // FPS encore plus bas\n        minimizeObjects: true  // Réduire au maximum les objets\n      };\n    }\n    \n    return this.batterySavingConfig;\n  }\n\n  /**\n   * Indique si le mode économie de batterie est actif\n   * @returns {boolean}\n   */\n  isBatteryModeActive() {\n    return this.batteryModeActive;\n  }\n\n  /**\n   * Récupère les données actuelles de la batterie\n   * @returns {Object} Données de la batterie\n   */\n  getBatteryData() {\n    return { ...this.batteryData };\n  }\n\n  /**\n   * Ajoute un écouteur pour les changements d'état de la batterie\n   * @param {Function} listener - Fonction callback à appeler lors des changements\n   */\n  addListener(listener) {\n    if (typeof listener === 'function' && !this.listeners.includes(listener)) {\n      this.listeners.push(listener);\n    }\n  }\n\n  /**\n   * Supprime un écouteur\n   * @param {Function} listener - Écouteur à supprimer\n   */\n  removeListener(listener) {\n    this.listeners = this.listeners.filter(l => l !== listener);\n  }\n\n  /**\n   * Notifie tous les écouteurs d'un changement\n   */\n  notifyListeners() {\n    this.listeners.forEach(listener => {\n      try {\n        listener({\n          batteryData: this.getBatteryData(),\n          batteryModeActive: this.batteryModeActive,\n          config: this.getBatterySavingConfig()\n        });\n      } catch (error) {\n        console.error('BatteryOptimizer: Erreur lors de la notification d\\'un écouteur', error);\n      }\n    });\n  }\n  \n  /**\n   * Configure l'activation automatique du mode batterie\n   * @param {boolean} enabled - True pour activer, false pour désactiver\n   */\n  setAutoMode(enabled) {\n    this.autoEnableBatteryMode = enabled;\n    \n    // Si on active le mode auto, on vérifie immédiatement l'état\n    if (enabled) {\n      this.checkBatteryStatus();\n    }\n    \n    // Stocker la préférence utilisateur\n    if (typeof localStorage !== 'undefined') {\n      localStorage.setItem('batteryAutoMode', enabled ? 'true' : 'false');\n    }\n  }\n  \n  /**\n   * Charge les préférences utilisateur du localStorage\n   */\n  loadUserPreferences() {\n    if (typeof localStorage !== 'undefined') {\n      // Charger le mode batterie\n      const savedBatteryMode = localStorage.getItem('batteryModeEnabled');\n      if (savedBatteryMode === 'true') {\n        this.setBatteryMode(true);\n      }\n      \n      // Charger le mode auto\n      const savedAutoMode = localStorage.getItem('batteryAutoMode');\n      if (savedAutoMode !== null) {\n        this.setAutoMode(savedAutoMode === 'true');\n      }\n    }\n  }\n}\n\n// Créer et exporter l'instance unique\nconst batteryOptimizer = new BatteryOptimizer();\n\n// Initialiser automatiquement\nif (typeof window !== 'undefined') {\n  // Initialiser au chargement pour les navigateurs\n  window.addEventListener('load', () => {\n    batteryOptimizer.initialize().then(() => {\n      batteryOptimizer.loadUserPreferences();\n    });\n  });\n}\n\nexport default batteryOptimizer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}