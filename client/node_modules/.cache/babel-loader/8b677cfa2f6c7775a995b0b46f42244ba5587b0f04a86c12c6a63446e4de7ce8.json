{"ast":null,"code":"import axios from'axios';import{formatDate}from'../utils/formatters';// URL de base pour les requêtes API liées à l'entraînement\nconst API_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';/**\n * Service de gestion des données d'entraînement\n */class TrainingService{/**\n   * Récupère les activités d'un utilisateur pour une période donnée\n   * @param {string} userId - Identifiant de l'utilisateur\n   * @param {string} timeframe - Période (week, month, year, all)\n   * @returns {Promise<Object>} - Données des activités et résumé\n   */async getActivities(userId){let timeframe=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'month';try{const response=await axios.get(`${API_URL}/training/activities`,{params:{userId,timeframe},headers:{Authorization:`Bearer ${localStorage.getItem('token')}`}});return response.data;}catch(error){console.error('Erreur lors de la récupération des activités:',error);throw error;}}/**\n   * Récupère une activité spécifique\n   * @param {string} activityId - Identifiant de l'activité\n   * @returns {Promise<Object>} - Données détaillées de l'activité\n   */async getActivityById(activityId){try{const response=await axios.get(`${API_URL}/training/activities/${activityId}`,{headers:{Authorization:`Bearer ${localStorage.getItem('token')}`}});return response.data;}catch(error){console.error(`Erreur lors de la récupération de l'activité ${activityId}:`,error);throw error;}}/**\n   * Crée une nouvelle activité\n   * @param {Object} activityData - Données de l'activité\n   * @returns {Promise<Object>} - Activité créée\n   */async createActivity(activityData){try{const response=await axios.post(`${API_URL}/training/activities`,activityData,{headers:{Authorization:`Bearer ${localStorage.getItem('token')}`}});return response.data;}catch(error){console.error('Erreur lors de la création de l\\'activité:',error);throw error;}}/**\n   * Met à jour une activité existante\n   * @param {string} activityId - Identifiant de l'activité\n   * @param {Object} activityData - Nouvelles données\n   * @returns {Promise<Object>} - Activité mise à jour\n   */async updateActivity(activityId,activityData){try{const response=await axios.put(`${API_URL}/training/activities/${activityId}`,activityData,{headers:{Authorization:`Bearer ${localStorage.getItem('token')}`}});return response.data;}catch(error){console.error(`Erreur lors de la mise à jour de l'activité ${activityId}:`,error);throw error;}}/**\n   * Supprime une activité\n   * @param {string} activityId - Identifiant de l'activité à supprimer\n   * @returns {Promise<Object>} - Confirmation de suppression\n   */async deleteActivity(activityId){try{const response=await axios.delete(`${API_URL}/training/activities/${activityId}`,{headers:{Authorization:`Bearer ${localStorage.getItem('token')}`}});return response.data;}catch(error){console.error(`Erreur lors de la suppression de l'activité ${activityId}:`,error);throw error;}}/**\n   * Importe une activité depuis un fichier GPX\n   * @param {File} file - Fichier GPX\n   * @param {Object} metadata - Métadonnées de l'activité\n   * @returns {Promise<Object>} - Activité importée\n   */async importFromGpx(file){let metadata=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const formData=new FormData();formData.append('gpxFile',file);// Ajouter les métadonnées au formulaire\nObject.keys(metadata).forEach(key=>{formData.append(key,metadata[key]);});const response=await axios.post(`${API_URL}/training/import-gpx`,formData,{headers:{Authorization:`Bearer ${localStorage.getItem('token')}`,'Content-Type':'multipart/form-data'}});return response.data;}catch(error){console.error('Erreur lors de l\\'importation du fichier GPX:',error);throw error;}}/**\n   * Récupère les statistiques d'entraînement\n   * @param {string} userId - Identifiant de l'utilisateur\n   * @param {string} timeframe - Période (week, month, year, all)\n   * @returns {Promise<Object>} - Statistiques d'entraînement\n   */async getTrainingStats(userId){let timeframe=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'month';try{const response=await axios.get(`${API_URL}/training/stats`,{params:{userId,timeframe},headers:{Authorization:`Bearer ${localStorage.getItem('token')}`}});return response.data;}catch(error){console.error('Erreur lors de la récupération des statistiques:',error);throw error;}}/**\n   * Récupère les objectifs d'entraînement\n   * @param {string} userId - Identifiant de l'utilisateur\n   * @returns {Promise<Array>} - Liste des objectifs\n   */async getTrainingGoals(userId){try{const response=await axios.get(`${API_URL}/training/goals`,{params:{userId},headers:{Authorization:`Bearer ${localStorage.getItem('token')}`}});return response.data;}catch(error){console.error('Erreur lors de la récupération des objectifs:',error);throw error;}}/**\n   * Crée un nouvel objectif d'entraînement\n   * @param {Object} goalData - Données de l'objectif\n   * @returns {Promise<Object>} - Objectif créé\n   */async createTrainingGoal(goalData){try{const response=await axios.post(`${API_URL}/training/goals`,goalData,{headers:{Authorization:`Bearer ${localStorage.getItem('token')}`}});return response.data;}catch(error){console.error('Erreur lors de la création de l\\'objectif:',error);throw error;}}}// Exporter une instance du service\nconst trainingService=new TrainingService();export default trainingService;","map":{"version":3,"names":["axios","formatDate","API_URL","process","env","REACT_APP_API_URL","TrainingService","getActivities","userId","timeframe","arguments","length","undefined","response","get","params","headers","Authorization","localStorage","getItem","data","error","console","getActivityById","activityId","createActivity","activityData","post","updateActivity","put","deleteActivity","delete","importFromGpx","file","metadata","formData","FormData","append","Object","keys","forEach","key","getTrainingStats","getTrainingGoals","createTrainingGoal","goalData","trainingService"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/services/trainingService.js"],"sourcesContent":["import axios from 'axios';\nimport { formatDate } from '../utils/formatters';\n\n// URL de base pour les requêtes API liées à l'entraînement\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n/**\n * Service de gestion des données d'entraînement\n */\nclass TrainingService {\n  /**\n   * Récupère les activités d'un utilisateur pour une période donnée\n   * @param {string} userId - Identifiant de l'utilisateur\n   * @param {string} timeframe - Période (week, month, year, all)\n   * @returns {Promise<Object>} - Données des activités et résumé\n   */\n  async getActivities(userId, timeframe = 'month') {\n    try {\n      const response = await axios.get(`${API_URL}/training/activities`, {\n        params: { userId, timeframe },\n        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des activités:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Récupère une activité spécifique\n   * @param {string} activityId - Identifiant de l'activité\n   * @returns {Promise<Object>} - Données détaillées de l'activité\n   */\n  async getActivityById(activityId) {\n    try {\n      const response = await axios.get(`${API_URL}/training/activities/${activityId}`, {\n        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération de l'activité ${activityId}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Crée une nouvelle activité\n   * @param {Object} activityData - Données de l'activité\n   * @returns {Promise<Object>} - Activité créée\n   */\n  async createActivity(activityData) {\n    try {\n      const response = await axios.post(`${API_URL}/training/activities`, activityData, {\n        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la création de l\\'activité:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Met à jour une activité existante\n   * @param {string} activityId - Identifiant de l'activité\n   * @param {Object} activityData - Nouvelles données\n   * @returns {Promise<Object>} - Activité mise à jour\n   */\n  async updateActivity(activityId, activityData) {\n    try {\n      const response = await axios.put(`${API_URL}/training/activities/${activityId}`, activityData, {\n        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la mise à jour de l'activité ${activityId}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Supprime une activité\n   * @param {string} activityId - Identifiant de l'activité à supprimer\n   * @returns {Promise<Object>} - Confirmation de suppression\n   */\n  async deleteActivity(activityId) {\n    try {\n      const response = await axios.delete(`${API_URL}/training/activities/${activityId}`, {\n        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la suppression de l'activité ${activityId}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Importe une activité depuis un fichier GPX\n   * @param {File} file - Fichier GPX\n   * @param {Object} metadata - Métadonnées de l'activité\n   * @returns {Promise<Object>} - Activité importée\n   */\n  async importFromGpx(file, metadata = {}) {\n    try {\n      const formData = new FormData();\n      formData.append('gpxFile', file);\n      \n      // Ajouter les métadonnées au formulaire\n      Object.keys(metadata).forEach(key => {\n        formData.append(key, metadata[key]);\n      });\n      \n      const response = await axios.post(`${API_URL}/training/import-gpx`, formData, {\n        headers: { \n          Authorization: `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de l\\'importation du fichier GPX:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Récupère les statistiques d'entraînement\n   * @param {string} userId - Identifiant de l'utilisateur\n   * @param {string} timeframe - Période (week, month, year, all)\n   * @returns {Promise<Object>} - Statistiques d'entraînement\n   */\n  async getTrainingStats(userId, timeframe = 'month') {\n    try {\n      const response = await axios.get(`${API_URL}/training/stats`, {\n        params: { userId, timeframe },\n        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des statistiques:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Récupère les objectifs d'entraînement\n   * @param {string} userId - Identifiant de l'utilisateur\n   * @returns {Promise<Array>} - Liste des objectifs\n   */\n  async getTrainingGoals(userId) {\n    try {\n      const response = await axios.get(`${API_URL}/training/goals`, {\n        params: { userId },\n        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des objectifs:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Crée un nouvel objectif d'entraînement\n   * @param {Object} goalData - Données de l'objectif\n   * @returns {Promise<Object>} - Objectif créé\n   */\n  async createTrainingGoal(goalData) {\n    try {\n      const response = await axios.post(`${API_URL}/training/goals`, goalData, {\n        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la création de l\\'objectif:', error);\n      throw error;\n    }\n  }\n}\n\n// Exporter une instance du service\nconst trainingService = new TrainingService();\nexport default trainingService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}