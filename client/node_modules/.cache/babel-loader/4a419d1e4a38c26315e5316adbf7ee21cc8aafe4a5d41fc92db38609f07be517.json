{"ast":null,"code":"import axios from'axios';import{API_BASE_URL}from'../config/constants';/**\n * Service pour gérer les appels API du module Montagne\n * Gère les demandes liées aux cols, plans d'entraînement et nutrition\n */const mountainService={/**\n   * Récupère tous les cols disponibles\n   * @param {Object} filters - Filtres pour les cols (région, difficulté, etc.)\n   * @returns {Promise} - Promesse contenant les données des cols\n   */async getCols(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await axios.get(`${API_BASE_URL}/api/cols`,{params:filters});return response.data;}catch(error){console.error('Erreur lors de la récupération des cols:',error);throw error;}},/**\n   * Récupère les détails d'un col spécifique\n   * @param {string} colId - Identifiant du col\n   * @returns {Promise} - Promesse contenant les données du col\n   */async getColDetails(colId){try{const response=await axios.get(`${API_BASE_URL}/api/cols/${colId}`);return response.data;}catch(error){console.error(`Erreur lors de la récupération des détails du col ${colId}:`,error);throw error;}},/**\n   * Génère un plan d'entraînement spécifique pour un col\n   * @param {string} colId - Identifiant du col\n   * @param {Object} userMetrics - Métriques de l'utilisateur (FTP, poids, etc.)\n   * @returns {Promise} - Promesse contenant le plan d'entraînement\n   */async generateTrainingPlan(colId,userMetrics){try{const response=await axios.post(`${API_BASE_URL}/api/mountain/training-plan`,{colId,userMetrics});return response.data;}catch(error){console.error('Erreur lors de la génération du plan d\\'entraînement:',error);throw error;}},/**\n   * Génère un plan nutritionnel spécifique pour un col\n   * @param {string} colId - Identifiant du col\n   * @param {Object} userMetrics - Métriques de l'utilisateur (poids, préférences alimentaires, etc.)\n   * @returns {Promise} - Promesse contenant le plan nutritionnel\n   */async generateNutritionPlan(colId,userMetrics){try{const response=await axios.post(`${API_BASE_URL}/api/mountain/nutrition-plan`,{colId,userMetrics});return response.data;}catch(error){console.error('Erreur lors de la génération du plan nutritionnel:',error);throw error;}},/**\n   * Récupère les plans d'entraînement régionaux\n   * @param {string} region - Région (alpes, pyrenees, dolomites, ardennes)\n   * @returns {Promise} - Promesse contenant les plans d'entraînement régionaux\n   */async getRegionalTrainingPlans(region){try{const response=await axios.get(`${API_BASE_URL}/api/mountain/regional-plans/${region}`);return response.data;}catch(error){console.error(`Erreur lors de la récupération des plans régionaux pour ${region}:`,error);throw error;}},/**\n   * Récupère les données de visualisation 3D pour un col\n   * @param {string} colId - Identifiant du col\n   * @returns {Promise} - Promesse contenant les données de visualisation 3D\n   */async getCol3DVisualizationData(colId){try{const response=await axios.get(`${API_BASE_URL}/api/cols/${colId}/3d-data`);return response.data;}catch(error){console.error(`Erreur lors de la récupération des données 3D pour le col ${colId}:`,error);throw error;}}};export default mountainService;","map":{"version":3,"names":["axios","API_BASE_URL","mountainService","getCols","filters","arguments","length","undefined","response","get","params","data","error","console","getColDetails","colId","generateTrainingPlan","userMetrics","post","generateNutritionPlan","getRegionalTrainingPlans","region","getCol3DVisualizationData"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/services/mountainService.js"],"sourcesContent":["import axios from 'axios';\nimport { API_BASE_URL } from '../config/constants';\n\n/**\n * Service pour gérer les appels API du module Montagne\n * Gère les demandes liées aux cols, plans d'entraînement et nutrition\n */\nconst mountainService = {\n  /**\n   * Récupère tous les cols disponibles\n   * @param {Object} filters - Filtres pour les cols (région, difficulté, etc.)\n   * @returns {Promise} - Promesse contenant les données des cols\n   */\n  async getCols(filters = {}) {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/cols`, { params: filters });\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des cols:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Récupère les détails d'un col spécifique\n   * @param {string} colId - Identifiant du col\n   * @returns {Promise} - Promesse contenant les données du col\n   */\n  async getColDetails(colId) {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/cols/${colId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération des détails du col ${colId}:`, error);\n      throw error;\n    }\n  },\n\n  /**\n   * Génère un plan d'entraînement spécifique pour un col\n   * @param {string} colId - Identifiant du col\n   * @param {Object} userMetrics - Métriques de l'utilisateur (FTP, poids, etc.)\n   * @returns {Promise} - Promesse contenant le plan d'entraînement\n   */\n  async generateTrainingPlan(colId, userMetrics) {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/mountain/training-plan`, {\n        colId,\n        userMetrics\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la génération du plan d\\'entraînement:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Génère un plan nutritionnel spécifique pour un col\n   * @param {string} colId - Identifiant du col\n   * @param {Object} userMetrics - Métriques de l'utilisateur (poids, préférences alimentaires, etc.)\n   * @returns {Promise} - Promesse contenant le plan nutritionnel\n   */\n  async generateNutritionPlan(colId, userMetrics) {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/mountain/nutrition-plan`, {\n        colId,\n        userMetrics\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la génération du plan nutritionnel:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Récupère les plans d'entraînement régionaux\n   * @param {string} region - Région (alpes, pyrenees, dolomites, ardennes)\n   * @returns {Promise} - Promesse contenant les plans d'entraînement régionaux\n   */\n  async getRegionalTrainingPlans(region) {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/mountain/regional-plans/${region}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération des plans régionaux pour ${region}:`, error);\n      throw error;\n    }\n  },\n\n  /**\n   * Récupère les données de visualisation 3D pour un col\n   * @param {string} colId - Identifiant du col\n   * @returns {Promise} - Promesse contenant les données de visualisation 3D\n   */\n  async getCol3DVisualizationData(colId) {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/cols/${colId}/3d-data`);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération des données 3D pour le col ${colId}:`, error);\n      throw error;\n    }\n  }\n};\n\nexport default mountainService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}