{"ast":null,"code":"import{useState,useEffect}from'react';/**\n * Hook personnalisé pour persister des données dans le localStorage\n * @param {string} key - Clé pour stocker les données dans localStorage\n * @param {any} initialValue - Valeur initiale si aucune donnée n'existe en localStorage\n * @returns {Array} - [storedValue, setValue] - valeur stockée et fonction pour la mettre à jour\n */export const useLocalStorage=(key,initialValue)=>{// État pour stocker la valeur\n// Passer la fonction d'initialisation à useState pour que la logique ne s'exécute qu'une fois\nconst[storedValue,setStoredValue]=useState(()=>{try{// Récupérer depuis localStorage par clé\nconst item=window.localStorage.getItem(key);// Parser le JSON stocké ou retourner initialValue\nreturn item?JSON.parse(item):initialValue;}catch(error){// En cas d'erreur, utiliser la valeur initiale\nconsole.error(`Erreur lors de la récupération de ${key} du localStorage:`,error);return initialValue;}});// Retourner une fonction wrapped pour mettre à jour localStorage\nconst setValue=value=>{try{// Permettre à value d'être une fonction pour la même API que useState\nconst valueToStore=value instanceof Function?value(storedValue):value;// Sauvegarder l'état\nsetStoredValue(valueToStore);// Sauvegarder dans localStorage\nwindow.localStorage.setItem(key,JSON.stringify(valueToStore));// Déclencher un événement personnalisé pour la synchronisation entre onglets (optionnel)\nwindow.dispatchEvent(new Event('local-storage-update'));}catch(error){console.error(`Erreur lors de la sauvegarde de ${key} dans localStorage:`,error);}};// Écouter les changements dans d'autres onglets/fenêtres (optionnel)\nuseEffect(()=>{const handleStorageChange=event=>{if(event.key===key){try{const newValue=JSON.parse(event.newValue);if(JSON.stringify(newValue)!==JSON.stringify(storedValue)){setStoredValue(newValue);}}catch(e){console.error(\"Erreur lors de la synchronisation du localStorage:\",e);}}};// Écouter les changements\nwindow.addEventListener('storage',handleStorageChange);// Nettoyer\nreturn()=>{window.removeEventListener('storage',handleStorageChange);};},[key,storedValue]);return[storedValue,setValue];};","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","setValue","value","valueToStore","Function","setItem","stringify","dispatchEvent","Event","handleStorageChange","event","newValue","e","addEventListener","removeEventListener"],"sources":["C:/Users/busin/CascadeProjects/grand-est-cyclisme-website-final (1) VERSION FINAL/client/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n/**\n * Hook personnalisé pour persister des données dans le localStorage\n * @param {string} key - Clé pour stocker les données dans localStorage\n * @param {any} initialValue - Valeur initiale si aucune donnée n'existe en localStorage\n * @returns {Array} - [storedValue, setValue] - valeur stockée et fonction pour la mettre à jour\n */\nexport const useLocalStorage = (key, initialValue) => {\n  // État pour stocker la valeur\n  // Passer la fonction d'initialisation à useState pour que la logique ne s'exécute qu'une fois\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Récupérer depuis localStorage par clé\n      const item = window.localStorage.getItem(key);\n      // Parser le JSON stocké ou retourner initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // En cas d'erreur, utiliser la valeur initiale\n      console.error(`Erreur lors de la récupération de ${key} du localStorage:`, error);\n      return initialValue;\n    }\n  });\n\n  // Retourner une fonction wrapped pour mettre à jour localStorage\n  const setValue = (value) => {\n    try {\n      // Permettre à value d'être une fonction pour la même API que useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      \n      // Sauvegarder l'état\n      setStoredValue(valueToStore);\n      \n      // Sauvegarder dans localStorage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      \n      // Déclencher un événement personnalisé pour la synchronisation entre onglets (optionnel)\n      window.dispatchEvent(new Event('local-storage-update'));\n    } catch (error) {\n      console.error(`Erreur lors de la sauvegarde de ${key} dans localStorage:`, error);\n    }\n  };\n\n  // Écouter les changements dans d'autres onglets/fenêtres (optionnel)\n  useEffect(() => {\n    const handleStorageChange = (event) => {\n      if (event.key === key) {\n        try {\n          const newValue = JSON.parse(event.newValue);\n          if (JSON.stringify(newValue) !== JSON.stringify(storedValue)) {\n            setStoredValue(newValue);\n          }\n        } catch (e) {\n          console.error(\"Erreur lors de la synchronisation du localStorage:\", e);\n        }\n      }\n    };\n\n    // Écouter les changements\n    window.addEventListener('storage', handleStorageChange);\n    \n    // Nettoyer\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, [key, storedValue]);\n\n  return [storedValue, setValue];\n};\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE3C;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,eAAe,CAAGA,CAACC,GAAG,CAAEC,YAAY,GAAK,CACpD;AACA;AACA,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGN,QAAQ,CAAC,IAAM,CACnD,GAAI,CACF;AACA,KAAM,CAAAO,IAAI,CAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACP,GAAG,CAAC,CAC7C;AACA,MAAO,CAAAI,IAAI,CAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,CAAGH,YAAY,CAC/C,CAAE,MAAOS,KAAK,CAAE,CACd;AACAC,OAAO,CAACD,KAAK,CAAC,qCAAqCV,GAAG,mBAAmB,CAAEU,KAAK,CAAC,CACjF,MAAO,CAAAT,YAAY,CACrB,CACF,CAAC,CAAC,CAEF;AACA,KAAM,CAAAW,QAAQ,CAAIC,KAAK,EAAK,CAC1B,GAAI,CACF;AACA,KAAM,CAAAC,YAAY,CAChBD,KAAK,WAAY,CAAAE,QAAQ,CAAGF,KAAK,CAACX,WAAW,CAAC,CAAGW,KAAK,CAExD;AACAV,cAAc,CAACW,YAAY,CAAC,CAE5B;AACAT,MAAM,CAACC,YAAY,CAACU,OAAO,CAAChB,GAAG,CAAEQ,IAAI,CAACS,SAAS,CAACH,YAAY,CAAC,CAAC,CAE9D;AACAT,MAAM,CAACa,aAAa,CAAC,GAAI,CAAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC,CACzD,CAAE,MAAOT,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCV,GAAG,qBAAqB,CAAEU,KAAK,CAAC,CACnF,CACF,CAAC,CAED;AACAZ,SAAS,CAAC,IAAM,CACd,KAAM,CAAAsB,mBAAmB,CAAIC,KAAK,EAAK,CACrC,GAAIA,KAAK,CAACrB,GAAG,GAAKA,GAAG,CAAE,CACrB,GAAI,CACF,KAAM,CAAAsB,QAAQ,CAAGd,IAAI,CAACC,KAAK,CAACY,KAAK,CAACC,QAAQ,CAAC,CAC3C,GAAId,IAAI,CAACS,SAAS,CAACK,QAAQ,CAAC,GAAKd,IAAI,CAACS,SAAS,CAACf,WAAW,CAAC,CAAE,CAC5DC,cAAc,CAACmB,QAAQ,CAAC,CAC1B,CACF,CAAE,MAAOC,CAAC,CAAE,CACVZ,OAAO,CAACD,KAAK,CAAC,oDAAoD,CAAEa,CAAC,CAAC,CACxE,CACF,CACF,CAAC,CAED;AACAlB,MAAM,CAACmB,gBAAgB,CAAC,SAAS,CAAEJ,mBAAmB,CAAC,CAEvD;AACA,MAAO,IAAM,CACXf,MAAM,CAACoB,mBAAmB,CAAC,SAAS,CAAEL,mBAAmB,CAAC,CAC5D,CAAC,CACH,CAAC,CAAE,CAACpB,GAAG,CAAEE,WAAW,CAAC,CAAC,CAEtB,MAAO,CAACA,WAAW,CAAEU,QAAQ,CAAC,CAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}