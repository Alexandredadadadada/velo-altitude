import React, { useState, useEffect } from 'react';
import {
  Grid,
  Paper,
  Typography,
  Box,
  Button,
  Card,
  CardContent,
  CardActions,
  Divider,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Chip,
  IconButton,
  CircularProgress,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Stack
} from '@mui/material';
import {
  Add,
  Delete,
  Edit,
  Favorite,
  FavoriteBorder,
  DirectionsBike,
  Restaurant,
  LocalDining,
  Coffee,
  FilterList,
  CheckCircle,
  Print,
  Share
} from '@mui/icons-material';
import nutritionService from '../../services/nutritionService';
import { useAuth } from '../../contexts/AuthContext';
import EnhancedMetaTags from '../common/EnhancedMetaTags';

/**
 * Composant de planification des repas pour les cyclistes
 * Permet de créer, modifier et gérer des plans de repas adaptés aux besoins nutritionnels
 */
const MealPlanner = ({ nutritionData, userId }) => {
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [plannerData, setPlannerData] = useState(null);
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [planType, setPlanType] = useState('ride-day');
  const [openMealDialog, setOpenMealDialog] = useState(false);
  const [currentMeal, setCurrentMeal] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [autoGenerateDialog, setAutoGenerateDialog] = useState(false);
  const [generationOptions, setGenerationOptions] = useState({
    goalType: 'performance',
    mealCount: 5,
    allergies: [],
    preferences: 'balanced'
  });
  const [mealTypes] = useState([
    { id: 'breakfast', label: 'Petit-déjeuner', icon: <Coffee /> },
    { id: 'pre-ride', label: 'Avant-effort', icon: <DirectionsBike /> },
    { id: 'during-ride', label: 'Pendant l\'effort', icon: <DirectionsBike /> },
    { id: 'post-ride', label: 'Après-effort', icon: <DirectionsBike /> },
    { id: 'lunch', label: 'Déjeuner', icon: <Restaurant /> },
    { id: 'dinner', label: 'Dîner', icon: <LocalDining /> },
    { id: 'snack', label: 'Collation', icon: <Restaurant /> }
  ]);

  // Utiliser les données passées en props ou les récupérer si non disponibles
  useEffect(() => {
    if (nutritionData) {
      setPlannerData(nutritionData);
    } else {
      fetchMealPlans();
    }
  }, [nutritionData, userId]);

  // Récupérer les plans de repas
  const fetchMealPlans = async () => {
    if (!userId) return;

    try {
      setLoading(true);
      setError(null);
      const data = await nutritionService.getUserNutritionData(userId);
      
      if (!data || !data.mealPlans) {
        throw new Error('Données de plans de repas invalides');
      }
      
      setPlannerData(data);
      
      // Sélectionner le premier plan par défaut s'il existe et correspond au type sélectionné
      const filteredPlans = data.mealPlans.filter(plan => plan.type === planType);
      if (filteredPlans.length > 0) {
        setSelectedPlan(filteredPlans[0]);
      }
    } catch (err) {
      console.error('Erreur lors de la récupération des plans de repas:', err);
      setError('Impossible de charger les plans de repas.');
    } finally {
      setLoading(false);
    }
  };

  // Filtrer les plans par type
  const filteredPlans = plannerData?.mealPlans?.filter(plan => plan.type === planType) || [];

  // Changer le type de plan sélectionné
  const handlePlanTypeChange = (type) => {
    setPlanType(type);
    setSelectedPlan(null);
  };

  // Sélectionner un plan
  const handleSelectPlan = (plan) => {
    setSelectedPlan(plan);
  };

  // Ouvrir le dialogue pour ajouter/modifier un repas
  const handleOpenMealDialog = (meal = null) => {
    setCurrentMeal(meal);
    setOpenMealDialog(true);
  };

  // Fermer le dialogue de repas
  const handleCloseMealDialog = () => {
    setOpenMealDialog(false);
    setCurrentMeal(null);
  };

  // Calculer les totaux nutritionnels pour un repas
  const calculateMealTotals = (items) => {
    if (!items || !items.length) return { calories: 0, carbs: 0, protein: 0, fat: 0 };
    
    return items.reduce((totals, item) => {
      return {
        calories: totals.calories + (item.calories || 0),
        carbs: totals.carbs + (item.carbs || 0),
        protein: totals.protein + (item.protein || 0),
        fat: totals.fat + (item.fat || 0)
      };
    }, { calories: 0, carbs: 0, protein: 0, fat: 0 });
  };

  // Calculer les totaux nutritionnels pour un plan
  const calculatePlanTotals = (meals) => {
    if (!meals || !meals.length) return { calories: 0, carbs: 0, protein: 0, fat: 0 };
    
    return meals.reduce((totals, meal) => {
      const mealTotals = calculateMealTotals(meal.items);
      return {
        calories: totals.calories + mealTotals.calories,
        carbs: totals.carbs + mealTotals.carbs,
        protein: totals.protein + mealTotals.protein,
        fat: totals.fat + mealTotals.fat
      };
    }, { calories: 0, carbs: 0, protein: 0, fat: 0 });
  };

  // Ouvrir le dialogue pour la génération automatique de plan
  const handleOpenAutoGenerateDialog = () => {
    setAutoGenerateDialog(true);
  };

  // Fermer le dialogue de génération automatique
  const handleCloseAutoGenerateDialog = () => {
    setAutoGenerateDialog(false);
  };

  // Mettre à jour les options de génération
  const handleGenerationOptionChange = (option, value) => {
    setGenerationOptions(prev => ({
      ...prev,
      [option]: value
    }));
  };

  // Générer automatiquement un plan de repas basé sur les objectifs
  const handleGenerateMealPlan = async () => {
    try {
      setLoading(true);
      
      // Récupérer les données nutritionnelles de base de l'utilisateur si nécessaire
      let userData = plannerData;
      if (!userData || !userData.metrics || !userData.goals) {
        userData = await nutritionService.getUserNutritionData(userId);
      }
      
      // Vérifier que les données nécessaires sont disponibles
      if (!userData || !userData.metrics || !userData.goals) {
        throw new Error('Données du profil incomplètes pour générer un plan');
      }
      
      // Calculer les besoins nutritionnels
      const nutritionNeeds = await nutritionService.calculateNutrition({
        weight: userData.metrics.weight,
        height: userData.metrics.height,
        age: userData.metrics.age || 30,
        gender: userData.metrics.gender || 'male',
        activityLevel: userData.metrics.activityLevel || 'moderate',
        goals: generationOptions.goalType || userData.goals.type
      });
      
      // Générer un nom de plan unique
      const planName = `Plan ${generationOptions.goalType} (${new Date().toLocaleDateString()})`;
      
      // Créer la structure de plan de base
      const newPlan = {
        id: `plan-${Date.now()}`,
        name: planName,
        type: planType,
        totalCalories: nutritionNeeds.calories,
        macronutrients: nutritionNeeds.macronutrients,
        meals: []
      };
      
      // Répartition des calories par repas selon le nombre de repas souhaité
      const mealCalorieDistribution = {
        breakfast: 0.25,
        lunch: 0.3,
        dinner: 0.25,
        snack: 0.1,
        'pre-ride': 0.15,
        'during-ride': 0.1,
        'post-ride': 0.15
      };
      
      // Adapter la distribution selon le type de jour
      if (planType === 'ride-day') {
        // Jour d'entraînement: inclure repas pré/pendant/post-effort
        const meals = [];
        
        // Petit-déjeuner
        meals.push({
          id: `meal-${Date.now()}-1`,
          type: 'breakfast',
          name: 'Petit-déjeuner',
          time: '07:00',
          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.breakfast),
          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.breakfast),
          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.breakfast),
          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.breakfast),
          items: generateMealItems('breakfast', Math.round(nutritionNeeds.calories * mealCalorieDistribution.breakfast), generationOptions)
        });
        
        // Collation pré-entraînement
        meals.push({
          id: `meal-${Date.now()}-2`,
          type: 'pre-ride',
          name: 'Collation pré-entraînement',
          time: '09:30',
          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution['pre-ride']),
          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution['pre-ride']),
          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution['pre-ride']),
          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution['pre-ride']),
          items: generateMealItems('pre-ride', Math.round(nutritionNeeds.calories * mealCalorieDistribution['pre-ride']), generationOptions)
        });
        
        // Nutrition pendant l'effort
        meals.push({
          id: `meal-${Date.now()}-3`,
          type: 'during-ride',
          name: 'Nutrition pendant l\'effort',
          time: '11:00',
          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution['during-ride']),
          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution['during-ride']),
          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution['during-ride']),
          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution['during-ride']),
          items: generateMealItems('during-ride', Math.round(nutritionNeeds.calories * mealCalorieDistribution['during-ride']), generationOptions)
        });
        
        // Récupération post-entraînement
        meals.push({
          id: `meal-${Date.now()}-4`,
          type: 'post-ride',
          name: 'Récupération post-entraînement',
          time: '13:00',
          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution['post-ride']),
          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution['post-ride']),
          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution['post-ride']),
          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution['post-ride']),
          items: generateMealItems('post-ride', Math.round(nutritionNeeds.calories * mealCalorieDistribution['post-ride']), generationOptions)
        });
        
        // Déjeuner
        meals.push({
          id: `meal-${Date.now()}-5`,
          type: 'lunch',
          name: 'Déjeuner',
          time: '14:00',
          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.lunch),
          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.lunch),
          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.lunch),
          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.lunch),
          items: generateMealItems('lunch', Math.round(nutritionNeeds.calories * mealCalorieDistribution.lunch), generationOptions)
        });
        
        // Dîner
        meals.push({
          id: `meal-${Date.now()}-6`,
          type: 'dinner',
          name: 'Dîner',
          time: '19:30',
          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.dinner),
          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.dinner),
          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.dinner),
          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.dinner),
          items: generateMealItems('dinner', Math.round(nutritionNeeds.calories * mealCalorieDistribution.dinner), generationOptions)
        });
        
        newPlan.meals = meals;
      } else {
        // Jour de récupération: repas standards sans collations spécifiques à l'effort
        const meals = [];
        
        // Petit-déjeuner
        meals.push({
          id: `meal-${Date.now()}-1`,
          type: 'breakfast',
          name: 'Petit-déjeuner',
          time: '08:00',
          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.breakfast),
          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.breakfast),
          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.breakfast),
          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.breakfast),
          items: generateMealItems('breakfast', Math.round(nutritionNeeds.calories * mealCalorieDistribution.breakfast), generationOptions)
        });
        
        // Collation matinale
        meals.push({
          id: `meal-${Date.now()}-2`,
          type: 'snack',
          name: 'Collation matinale',
          time: '10:30',
          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.snack),
          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.snack),
          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.snack),
          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.snack),
          items: generateMealItems('snack', Math.round(nutritionNeeds.calories * mealCalorieDistribution.snack), generationOptions)
        });
        
        // Déjeuner
        meals.push({
          id: `meal-${Date.now()}-3`,
          type: 'lunch',
          name: 'Déjeuner',
          time: '13:00',
          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.lunch),
          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.lunch),
          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.lunch),
          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.lunch),
          items: generateMealItems('lunch', Math.round(nutritionNeeds.calories * mealCalorieDistribution.lunch), generationOptions)
        });
        
        // Collation après-midi
        meals.push({
          id: `meal-${Date.now()}-4`,
          type: 'snack',
          name: 'Collation après-midi',
          time: '16:30',
          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.snack),
          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.snack),
          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.snack),
          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.snack),
          items: generateMealItems('snack', Math.round(nutritionNeeds.calories * mealCalorieDistribution.snack), generationOptions)
        });
        
        // Dîner
        meals.push({
          id: `meal-${Date.now()}-5`,
          type: 'dinner',
          name: 'Dîner',
          time: '19:30',
          calories: Math.round(nutritionNeeds.calories * mealCalorieDistribution.dinner),
          carbs: Math.round(nutritionNeeds.macronutrients.carbs.grams * mealCalorieDistribution.dinner),
          protein: Math.round(nutritionNeeds.macronutrients.protein.grams * mealCalorieDistribution.dinner),
          fat: Math.round(nutritionNeeds.macronutrients.fat.grams * mealCalorieDistribution.dinner),
          items: generateMealItems('dinner', Math.round(nutritionNeeds.calories * mealCalorieDistribution.dinner), generationOptions)
        });
        
        newPlan.meals = meals;
      }
      
      // Mettre à jour les données avec le nouveau plan
      const updatedData = {
        ...plannerData,
        mealPlans: [...(plannerData.mealPlans || []), newPlan]
      };
      
      setPlannerData(updatedData);
      setSelectedPlan(newPlan);
      setAutoGenerateDialog(false);
      
      // Simuler la sauvegarde en backend (à implémenter avec un vrai service)
      console.log('Nouveau plan de repas généré:', newPlan);
      
    } catch (err) {
      console.error('Erreur lors de la génération du plan de repas:', err);
      setError('Impossible de générer le plan de repas. Vérifiez que votre profil est complet.');
    } finally {
      setLoading(false);
    }
  };

  // Générer des éléments de repas en fonction du type et de l'objectif calorique
  const generateMealItems = (mealType, targetCalories, options) => {
    // Base de données simplifiée d'aliments par type de repas
    const foodDatabase = {
      breakfast: [
        { name: 'Flocons d\'avoine', quantity: '60g', calories: 240, carbs: 40, protein: 8, fat: 5 },
        { name: 'Pain complet', quantity: '2 tranches', calories: 180, carbs: 30, protein: 8, fat: 2 },
        { name: 'Œufs brouillés', quantity: '2 œufs', calories: 160, carbs: 2, protein: 14, fat: 10 },
        { name: 'Yaourt grec', quantity: '200g', calories: 150, carbs: 6, protein: 15, fat: 8 },
        { name: 'Banane', quantity: '1 moyenne', calories: 100, carbs: 25, protein: 1, fat: 0 },
        { name: 'Lait d\'amande', quantity: '250ml', calories: 80, carbs: 3, protein: 1, fat: 5 }
      ],
      'pre-ride': [
        { name: 'Banane', quantity: '1 moyenne', calories: 100, carbs: 25, protein: 1, fat: 0 },
        { name: 'Barre de céréales', quantity: '1 barre', calories: 150, carbs: 25, protein: 5, fat: 3 },
        { name: 'Pain aux raisins', quantity: '2 tranches', calories: 180, carbs: 35, protein: 6, fat: 2 },
        { name: 'Compote de pommes', quantity: '1 pot', calories: 80, carbs: 20, protein: 0, fat: 0 }
      ],
      'during-ride': [
        { name: 'Gel énergétique', quantity: '1 sachet', calories: 100, carbs: 25, protein: 0, fat: 0 },
        { name: 'Boisson isotonique', quantity: '500ml', calories: 120, carbs: 30, protein: 0, fat: 0 },
        { name: 'Barre énergétique', quantity: '1 barre', calories: 180, carbs: 40, protein: 2, fat: 1 },
        { name: 'Banane', quantity: '1 moyenne', calories: 100, carbs: 25, protein: 1, fat: 0 },
        { name: 'Abricots secs', quantity: '30g', calories: 80, carbs: 18, protein: 1, fat: 0 }
      ],
      'post-ride': [
        { name: 'Shake protéiné', quantity: '1 portion', calories: 180, carbs: 15, protein: 25, fat: 2 },
        { name: 'Yaourt grec avec miel', quantity: '200g + 15g', calories: 200, carbs: 25, protein: 15, fat: 5 },
        { name: 'Sandwich jambon fromage', quantity: '1 petit', calories: 300, carbs: 30, protein: 20, fat: 10 },
        { name: 'Lait chocolaté', quantity: '250ml', calories: 180, carbs: 26, protein: 8, fat: 5 }
      ],
      lunch: [
        { name: 'Pâtes au poulet et légumes', quantity: '300g', calories: 450, carbs: 60, protein: 30, fat: 10 },
        { name: 'Salade de quinoa au saumon', quantity: '250g', calories: 400, carbs: 40, protein: 25, fat: 15 },
        { name: 'Bowl de riz, légumineuses et légumes', quantity: '350g', calories: 500, carbs: 70, protein: 20, fat: 12 },
        { name: 'Wrap au poulet et crudités', quantity: '1 grand', calories: 350, carbs: 40, protein: 25, fat: 10 }
      ],
      dinner: [
        { name: 'Poisson et légumes vapeur', quantity: '300g', calories: 350, carbs: 20, protein: 30, fat: 15 },
        { name: 'Poulet aux légumes et quinoa', quantity: '350g', calories: 450, carbs: 40, protein: 35, fat: 12 },
        { name: 'Omelette aux légumes et pommes de terre', quantity: '300g', calories: 400, carbs: 30, protein: 25, fat: 20 },
        { name: 'Soupe de légumes et croûtons', quantity: '400ml', calories: 250, carbs: 30, protein: 10, fat: 8 }
      ],
      snack: [
        { name: 'Yaourt et fruits', quantity: '150g + 100g', calories: 150, carbs: 25, protein: 8, fat: 2 },
        { name: 'Poignée de fruits secs et noix', quantity: '30g', calories: 180, carbs: 15, protein: 5, fat: 10 },
        { name: 'Barre protéinée', quantity: '1 barre', calories: 200, carbs: 20, protein: 15, fat: 7 },
        { name: 'Smoothie fruits et lait', quantity: '250ml', calories: 160, carbs: 30, protein: 5, fat: 2 }
      ]
    };
    
    // Adapter la sélection selon les préférences et objectifs
    const availableFoods = foodDatabase[mealType] || [];
    let remainingCalories = targetCalories;
    const selectedItems = [];
    
    // Sélectionner des aliments jusqu'à atteindre l'objectif calorique
    while (remainingCalories > 50 && availableFoods.length > 0) {
      // Sélectionner aléatoirement un aliment
      const randomIndex = Math.floor(Math.random() * availableFoods.length);
      const selectedFood = { ...availableFoods[randomIndex] };
      
      // Ajuster la quantité si nécessaire pour ne pas dépasser l'objectif calorique
      if (selectedFood.calories > remainingCalories) {
        const ratio = remainingCalories / selectedFood.calories;
        selectedFood.quantity = `${Math.round(parseInt(selectedFood.quantity) * ratio)}g`;
        selectedFood.calories = Math.round(selectedFood.calories * ratio);
        selectedFood.carbs = Math.round(selectedFood.carbs * ratio);
        selectedFood.protein = Math.round(selectedFood.protein * ratio);
        selectedFood.fat = Math.round(selectedFood.fat * ratio);
      }
      
      // Ajouter l'aliment à la sélection
      selectedItems.push({
        id: `item-${Date.now()}-${selectedItems.length}`,
        ...selectedFood
      });
      
      remainingCalories -= selectedFood.calories;
      
      // Éviter de sélectionner à nouveau le même aliment
      availableFoods.splice(randomIndex, 1);
    }
    
    return selectedItems;
  };

  // Rendu de la liste des plans
  const renderPlans = () => {
    return (
      <script type="application/ld+json">
        {
          "@context": "https://schema.org",
          "@type": "WebSite",
          "name": "Velo-Altitude",
          "description": "La plateforme complète pour les cyclistes passionnés de cols et de montagne.",
          "url": "https://velo-altitude.com/mealplanner"
        }
      </script>
      <EnhancedMetaTags
        title=""
        description="Découvrez les meilleurs cols cyclistes d'Europe, avec des informations détaillées, des visualisations 3D et des programmes d'entraînement adaptés."
        type="website"
        imageUrl="/images/og-image.jpg"
      />
      <Grid container spacing={2} sx={{ mb: 4 }}>
        {filteredPlans.map((plan) => (
          <Grid item xs={12} sm={6} md={4} key={plan.id}>
            <Card 
              variant={selectedPlan && selectedPlan.id === plan.id ? 'elevation' : 'outlined'} 
              elevation={selectedPlan && selectedPlan.id === plan.id ? 3 : 1}
              sx={{ 
                cursor: 'pointer',
                borderColor: selectedPlan && selectedPlan.id === plan.id ? 'primary.main' : 'divider'
              }}
              onClick={() => handleSelectPlan(plan)}
            >
              <CardContent>
                <Typography variant="h6" component="div">{plan.name}</Typography>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <DirectionsBike fontSize="small" color="primary" sx={{ mr: 1 }} />
                  <Typography variant="body2" color="text.secondary">
                    {plan.type === 'ride-day' 
                      ? 'Jour d\'entraînement' 
                      : 'Jour de récupération'}
                  </Typography>
                </Box>
                <Divider sx={{ my: 1 }} />
                <Typography variant="body2">
                  {plan.meals?.length || 0} repas • {calculatePlanTotals(plan.meals).calories} kcal
                </Typography>
              </CardContent>
              <CardActions>
                <Button 
                  size="small" 
                  startIcon={<Edit />}
                  onClick={(e) => {
                    e.stopPropagation();
                    // Logique d'édition du plan
                  }}
                >
                  Modifier
                </Button>
                <Button 
                  size="small" 
                  startIcon={
                    plan.favorite 
                      ? <Favorite color="error" /> 
                      : <FavoriteBorder />
                  }
                  onClick={(e) => {
                    e.stopPropagation();
                    // Logique pour marquer comme favori
                  }}
                >
                  {plan.favorite ? 'Favori' : 'Ajouter aux favoris'}
                </Button>
              </CardActions>
            </Card>
          </Grid>
        ))}
        {/* Carte pour ajouter un nouveau plan */}
        <Grid item xs={12} sm={6} md={4}>
          <Card
            variant="outlined"
            sx={{
              height: '100%',
              display: 'flex',
              flexDirection: 'column',
              justifyContent: 'center',
              alignItems: 'center',
              cursor: 'pointer',
              borderStyle: 'dashed'
            }}
            onClick={() => {
              // Logique pour ajouter un nouveau plan
            }}
          >
            <CardContent sx={{ textAlign: 'center' }}>
              <Add fontSize="large" color="primary" />
              <Typography variant="body1" sx={{ mt: 1 }}>
                Créer un nouveau plan
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    );
  };

  // Rendu du détail d'un plan sélectionné
  const renderPlanDetails = () => {
    if (!selectedPlan) return null;

    const planTotals = calculatePlanTotals(selectedPlan.meals);

    return (
      <Box>
        <Paper elevation={0} sx={{ p: 2, mb: 3, bgcolor: 'background.default' }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
            <Typography variant="h5">{selectedPlan.name}</Typography>
            <Box>
              <IconButton size="small" sx={{ mr: 1 }} title="Imprimer">
                <Print />
              </IconButton>
              <IconButton size="small" sx={{ mr: 1 }} title="Partager">
                <Share />
              </IconButton>
            </Box>
          </Box>
          <Grid container spacing={3}>
            <Grid item xs={12} md={8}>
              <Typography variant="body2" paragraph>
                Ce plan est conçu pour les {selectedPlan.type === 'ride-day' 
                  ? 'jours d\'entraînement avec une consommation adaptée avant, pendant et après l\'effort.' 
                  : 'jours de récupération pour optimiser la régénération musculaire et le repos.'
                }
              </Typography>
            </Grid>
            <Grid item xs={12} md={4}>
              <Stack direction="row" spacing={2} justifyContent="flex-end">
                <Box textAlign="center">
                  <Typography variant="h6">{planTotals.calories}</Typography>
                  <Typography variant="body2" color="text.secondary">kcal</Typography>
                </Box>
                <Divider orientation="vertical" flexItem />
                <Box textAlign="center">
                  <Typography variant="h6">{planTotals.carbs}g</Typography>
                  <Typography variant="body2" color="text.secondary">Glucides</Typography>
                </Box>
                <Divider orientation="vertical" flexItem />
                <Box textAlign="center">
                  <Typography variant="h6">{planTotals.protein}g</Typography>
                  <Typography variant="body2" color="text.secondary">Protéines</Typography>
                </Box>
                <Divider orientation="vertical" flexItem />
                <Box textAlign="center">
                  <Typography variant="h6">{planTotals.fat}g</Typography>
                  <Typography variant="body2" color="text.secondary">Lipides</Typography>
                </Box>
              </Stack>
            </Grid>
          </Grid>
        </Paper>

        {/* Liste des repas */}
        {selectedPlan.meals?.map((meal, index) => {
          const mealType = mealTypes.find(type => type.id === meal.type) || { label: meal.type, icon: <Restaurant /> };
          const mealTotals = calculateMealTotals(meal.items);
          
          return (
            <Paper key={index} elevation={1} sx={{ p: 2, mb: 2 }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                  {mealType.icon}
                  <Typography variant="h6" sx={{ ml: 1 }}>{mealType.label}</Typography>
                </Box>
                <Box>
                  <Button 
                    size="small" 
                    startIcon={<Edit />}
                    onClick={() => handleOpenMealDialog(meal)}
                  >
                    Modifier
                  </Button>
                </Box>
              </Box>
              
              <TableContainer>
                <Table size="small">
                  <TableHead>
                    <TableRow>
                      <TableCell>Aliment</TableCell>
                      <TableCell>Quantité</TableCell>
                      <TableCell align="right">Calories</TableCell>
                      <TableCell align="right">G</TableCell>
                      <TableCell align="right">P</TableCell>
                      <TableCell align="right">L</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {meal.items?.map((item, itemIndex) => (
                      <TableRow key={itemIndex}>
                        <TableCell>{item.name}</TableCell>
                        <TableCell>{item.quantity}</TableCell>
                        <TableCell align="right">{item.calories}</TableCell>
                        <TableCell align="right">{item.carbs}g</TableCell>
                        <TableCell align="right">{item.protein}g</TableCell>
                        <TableCell align="right">{item.fat}g</TableCell>
                      </TableRow>
                    ))}
                    {/* Ligne des totaux */}
                    <TableRow>
                      <TableCell colSpan={2}><strong>Total</strong></TableCell>
                      <TableCell align="right"><strong>{mealTotals.calories}</strong></TableCell>
                      <TableCell align="right"><strong>{mealTotals.carbs}g</strong></TableCell>
                      <TableCell align="right"><strong>{mealTotals.protein}g</strong></TableCell>
                      <TableCell align="right"><strong>{mealTotals.fat}g</strong></TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </TableContainer>
            </Paper>
          );
        })}

        {/* Bouton pour ajouter un repas */}
        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>
          <Button
            variant="outlined"
            startIcon={<Add />}
            onClick={() => handleOpenMealDialog()}
          >
            Ajouter un repas
          </Button>
        </Box>
      </Box>
    );
  };

  // Rendu du dialogue pour ajouter/modifier un repas
  const renderMealDialog = () => {
    return (
      <Dialog open={openMealDialog} onClose={handleCloseMealDialog} maxWidth="md" fullWidth>
        <DialogTitle>
          {currentMeal ? 'Modifier le repas' : 'Ajouter un repas'}
        </DialogTitle>
        <DialogContent dividers>
          <Grid container spacing={2}>
            <Grid item xs={12}>
              <FormControl fullWidth>
                <InputLabel id="meal-type-label">Type de repas</InputLabel>
                <Select
                  labelId="meal-type-label"
                  value={currentMeal?.type || ''}
                  label="Type de repas"
                  // onChange={...}
                >
                  {mealTypes.map((type) => (
                    <MenuItem value={type.id} key={type.id}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        {type.icon}
                        <Typography sx={{ ml: 1 }}>{type.label}</Typography>
                      </Box>
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            
            {/* Liste des aliments du repas */}
            <Grid item xs={12}>
              <Typography variant="subtitle1" gutterBottom>Aliments</Typography>
              {currentMeal?.items?.map((item, index) => (
                <Paper key={index} variant="outlined" sx={{ p: 1, mb: 1 }}>
                  <Grid container spacing={2} alignItems="center">
                    <Grid item xs={5}>
                      <Typography variant="body2">{item.name}</Typography>
                    </Grid>
                    <Grid item xs={3}>
                      <Typography variant="body2">{item.quantity}</Typography>
                    </Grid>
                    <Grid item xs={3}>
                      <Typography variant="body2">{item.calories} kcal</Typography>
                    </Grid>
                    <Grid item xs={1}>
                      <IconButton size="small" color="error">
                        <Delete fontSize="small" />
                      </IconButton>
                    </Grid>
                  </Grid>
                </Paper>
              ))}
              
              {/* Formulaire d'ajout d'aliment */}
              <Box sx={{ border: '1px dashed', borderColor: 'divider', p: 2, mt: 2 }}>
                <Typography variant="subtitle2" gutterBottom>Ajouter un aliment</Typography>
                <Grid container spacing={2}>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      label="Nom de l'aliment"
                      size="small"
                      fullWidth
                      // value={...}
                      // onChange={...}
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      label="Quantité"
                      size="small"
                      fullWidth
                      // value={...}
                      // onChange={...}
                    />
                  </Grid>
                  <Grid item xs={12} sm={3}>
                    <TextField
                      label="Calories"
                      size="small"
                      fullWidth
                      type="number"
                      // value={...}
                      // onChange={...}
                    />
                  </Grid>
                  <Grid item xs={12} sm={3}>
                    <TextField
                      label="Glucides (g)"
                      size="small"
                      fullWidth
                      type="number"
                      // value={...}
                      // onChange={...}
                    />
                  </Grid>
                  <Grid item xs={12} sm={3}>
                    <TextField
                      label="Protéines (g)"
                      size="small"
                      fullWidth
                      type="number"
                      // value={...}
                      // onChange={...}
                    />
                  </Grid>
                  <Grid item xs={12} sm={3}>
                    <TextField
                      label="Lipides (g)"
                      size="small"
                      fullWidth
                      type="number"
                      // value={...}
                      // onChange={...}
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <Button variant="contained" startIcon={<Add />}>
                      Ajouter
                    </Button>
                  </Grid>
                </Grid>
              </Box>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseMealDialog}>Annuler</Button>
          <Button variant="contained" onClick={handleCloseMealDialog}>
            {currentMeal ? 'Enregistrer les modifications' : 'Ajouter le repas'}
          </Button>
        </DialogActions>
      </Dialog>
    );
  };

  // Rendu du dialogue de génération automatique
  const renderAutoGenerateDialog = () => {
    return (
      <Dialog
        open={autoGenerateDialog}
        onClose={handleCloseAutoGenerateDialog}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>Générer un plan de repas automatiquement</DialogTitle>
        <DialogContent>
          <Grid container spacing={3} sx={{ mt: 1 }}>
            <Grid item xs={12}>
              <Typography variant="body2" color="text.secondary" paragraph>
                Configurez les options pour générer un plan de repas personnalisé qui correspond à vos objectifs et préférences.
              </Typography>
            </Grid>
            
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth>
                <InputLabel>Objectif</InputLabel>
                <Select
                  value={generationOptions.goalType}
                  onChange={(e) => handleGenerationOptionChange('goalType', e.target.value)}
                  label="Objectif"
                >
                  <MenuItem value="performance">Performance</MenuItem>
                  <MenuItem value="weight-loss">Perte de poids</MenuItem>
                  <MenuItem value="maintenance">Maintenance</MenuItem>
                  <MenuItem value="recovery">Récupération</MenuItem>
                </Select>
                <FormHelperText>Sélectionnez votre objectif principal</FormHelperText>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth>
                <InputLabel>Nombre de repas</InputLabel>
                <Select
                  value={generationOptions.mealCount}
                  onChange={(e) => handleGenerationOptionChange('mealCount', e.target.value)}
                  label="Nombre de repas"
                >
                  <MenuItem value={3}>3 repas par jour</MenuItem>
                  <MenuItem value={4}>4 repas par jour</MenuItem>
                  <MenuItem value={5}>5 repas par jour</MenuItem>
                  <MenuItem value={6}>6 repas par jour</MenuItem>
                </Select>
                <FormHelperText>Incluant repas principaux et collations</FormHelperText>
              </FormControl>
            </Grid>
            
            <Grid item xs={12}>
              <FormControl fullWidth>
                <InputLabel>Style alimentaire</InputLabel>
                <Select
                  value={generationOptions.preferences}
                  onChange={(e) => handleGenerationOptionChange('preferences', e.target.value)}
                  label="Style alimentaire"
                >
                  <MenuItem value="balanced">Équilibré</MenuItem>
                  <MenuItem value="high-carb">Riche en glucides</MenuItem>
                  <MenuItem value="high-protein">Riche en protéines</MenuItem>
                  <MenuItem value="vegetarian">Végétarien</MenuItem>
                </Select>
                <FormHelperText>Adaptez la distribution des macronutriments selon vos préférences</FormHelperText>
              </FormControl>
            </Grid>
            
            <Grid item xs={12}>
              <Typography variant="subtitle2" gutterBottom>Allergies ou intolérances</Typography>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {['Gluten', 'Lactose', 'Arachides', 'Fruits à coque', 'Soja'].map((allergen) => (
                  <Chip
                    key={allergen}
                    label={allergen}
                    onClick={() => {
                      const allergies = [...generationOptions.allergies];
                      if (allergies.includes(allergen)) {
                        const index = allergies.indexOf(allergen);
                        allergies.splice(index, 1);
                      } else {
                        allergies.push(allergen);
                      }
                      handleGenerationOptionChange('allergies', allergies);
                    }}
                    color={generationOptions.allergies.includes(allergen) ? 'primary' : 'default'}
                    variant={generationOptions.allergies.includes(allergen) ? 'filled' : 'outlined'}
                  />
                ))}
              </Box>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseAutoGenerateDialog}>Annuler</Button>
          <Button 
            variant="contained" 
            onClick={handleGenerateMealPlan}
            disabled={loading}
          >
            {loading ? <CircularProgress size={24} /> : 'Générer mon plan'}
          </Button>
        </DialogActions>
      </Dialog>
    );
  };

  // Rendu principal du composant
  return (
    <Box>
      <Paper sx={{ p: 2, mb: 4 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h5">Planificateur de repas</Typography>
          <Button
            variant="contained"
            color="primary"
            startIcon={<Add />}
            onClick={handleOpenAutoGenerateDialog}
          >
            Générer un plan
          </Button>
        </Box>
        <Typography variant="body2" paragraph>
          Créez et gérez vos plans de repas pour optimiser votre alimentation en fonction de vos objectifs et de vos entraînements.
        </Typography>
        
        <Box sx={{ mb: 2 }}>
          <Button
            variant={planType === 'ride-day' ? 'contained' : 'outlined'}
            onClick={() => handlePlanTypeChange('ride-day')}
            sx={{ mr: 2 }}
            startIcon={<DirectionsBike />}
          >
            Jours d'entraînement
          </Button>
          <Button
            variant={planType === 'recovery-day' ? 'contained' : 'outlined'}
            onClick={() => handlePlanTypeChange('recovery-day')}
            startIcon={<Restaurant />}
          >
            Jours de récupération
          </Button>
        </Box>
      </Paper>

      {loading ? (
        <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>
          <CircularProgress />
        </Box>
      ) : error ? (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      ) : (
        <>
          {(!plannerData || !plannerData.mealPlans || plannerData.mealPlans.length === 0) ? (
            <Alert severity="info" sx={{ mb: 3 }}>
              Aucun plan de repas disponible. Créez votre premier plan en cliquant sur "Générer un plan".
            </Alert>
          ) : (
            <>
              {renderPlans()}
              {selectedPlan && renderPlanDetails()}
            </>
          )}
          {renderMealDialog()}
          {renderAutoGenerateDialog()}
        </>
      )}
    </Box>
  );
};

export default MealPlanner;
