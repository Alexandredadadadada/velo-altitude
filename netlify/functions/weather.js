/**
 * Fonction Netlify pour le service m√©t√©o
 * Utilise les services existants de m√©t√©o impl√©ment√©s dans le projet
 * (client/src/services/weather.service.js, server/services/weather.service.js, etc.)
 */

const { MongoClient } = require('mongodb');
const { RealApiOrchestrator } = require('../../src/api/orchestration/RealApiOrchestrator');
const { UnifiedWeatherService } = require('../../src/services/weather');

// Cl√© API OpenWeather
const OPENWEATHER_API_KEY = process.env.REACT_APP_OPENWEATHER_API_KEY;

// Configuration de la connexion MongoDB
const uri = process.env.MONGODB_URI;
const dbName = process.env.MONGODB_DBNAME || 'velo-altitude';

// Cache d'instances
let mongoClient = null;
let apiOrchestrator = null;
let weatherService = null;

// Fonction d'initialisation des services
async function initServices() {
  if (!mongoClient) {
    mongoClient = new MongoClient(uri, { 
      useNewUrlParser: true, 
      useUnifiedTopology: true 
    });
    await mongoClient.connect();
    console.log('üì¶ Connexion MongoDB √©tablie pour le service m√©t√©o');
  }
  
  const db = mongoClient.db(dbName);
  
  if (!apiOrchestrator) {
    apiOrchestrator = new RealApiOrchestrator({
      db,
      collections: {
        cols: db.collection('cols'),
        weather: db.collection('weather')
      }
    });
    console.log('üîå API Orchestrator initialis√© pour la m√©t√©o');
  }
  
  if (!weatherService) {
    weatherService = new UnifiedWeatherService({
      apiKey: OPENWEATHER_API_KEY,
      cacheEnabled: true,
      cacheDuration: 3600, // 1 heure
      db: db,
      apiOrchestrator
    });
    console.log('‚òÅÔ∏è Service m√©t√©o unifi√© initialis√©');
  }
  
  return { db, apiOrchestrator, weatherService };
}

// Fonction principale pour le traitement des requ√™tes
exports.handler = async (event, context) => {
  // Optimisation: rendre la fonction persistante entre les invocations
  context.callbackWaitsForEmptyEventLoop = false;
  
  try {
    // Extraire le chemin et la m√©thode de la requ√™te
    const path = event.path.replace('/api/weather', '').replace(/^\/+/, '');
    const method = event.httpMethod;
    
    // Initialiser les services
    const { weatherService } = await initServices();
    
    // Traiter la requ√™te en fonction du chemin et de la m√©thode
    let result;
    
    if (method === 'GET') {
      if (path === '/current') {
        // Obtenir les conditions m√©t√©o actuelles pour une localisation
        const { lat, lon } = event.queryStringParameters || {};
        result = await weatherService.getCurrentWeather(lat, lon);
      } else if (path === '/forecast') {
        // Obtenir les pr√©visions m√©t√©o pour une localisation
        const { lat, lon, days } = event.queryStringParameters || {};
        result = await weatherService.getWeatherForecast(lat, lon, days || 5);
      } else if (path === '/col') {
        // Obtenir la m√©t√©o pour un col sp√©cifique
        const { colId } = event.queryStringParameters || {};
        result = await weatherService.getWeatherForCol(colId);
      } else if (path === '/recommendations') {
        // Obtenir des recommandations pour le cyclisme bas√©es sur la m√©t√©o
        const { lat, lon } = event.queryStringParameters || {};
        result = await weatherService.getCyclingRecommendations(lat, lon);
      } else if (path === '/alerts') {
        // Obtenir les alertes m√©t√©o pour une r√©gion
        const { region } = event.queryStringParameters || {};
        result = await weatherService.getWeatherAlerts(region);
      }
    }
    
    // Si aucune route ne correspond, retourner une erreur 404
    if (!result) {
      return {
        statusCode: 404,
        body: JSON.stringify({ error: 'Route m√©t√©o non trouv√©e' })
      };
    }
    
    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS'
      },
      body: JSON.stringify(result)
    };
  } catch (error) {
    console.error('‚ùå Erreur API M√©t√©o:', error);
    
    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      },
      body: JSON.stringify({ 
        error: 'Erreur interne du service m√©t√©o',
        message: process.env.NODE_ENV === 'development' ? error.message : 'Une erreur est survenue'
      })
    };
  }
};
