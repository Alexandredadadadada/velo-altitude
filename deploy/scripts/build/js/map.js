let mapboxToken="",mapInstance=null,currentRouteLayer=null;const cyclingPoints={grandBallon:[7.0997,47.9017],colDonon:[7.151,48.5103],colSchlucht:[7.0057,48.0559],colGrossePierre:[6.9583,48.0372],plancheBellesFilles:[6.7662,47.7644]};function initMap(e,t,n=[6.877,48.1]){return mapboxToken=t,mapboxgl.accessToken=t,mapInstance=new mapboxgl.Map({container:e,style:"mapbox://styles/mapbox/outdoors-v12",center:n,zoom:9,pitch:40,bearing:0}),mapInstance.addControl(new mapboxgl.NavigationControl,"top-right"),mapInstance.addControl(new mapboxgl.ScaleControl,"bottom-left"),mapInstance.addControl(new mapboxgl.GeolocateControl({positionOptions:{enableHighAccuracy:!0},trackUserLocation:!0}),"top-right"),mapInstance.addControl(new mapboxgl.StyleSwitcherControl({styles:[{title:"Outdoor",uri:"mapbox://styles/mapbox/outdoors-v12"},{title:"Satellite",uri:"mapbox://styles/mapbox/satellite-streets-v12"},{title:"Light",uri:"mapbox://styles/mapbox/light-v11"}]}),"top-right"),mapInstance.on("load",(()=>{addCyclingMarkers(),setupTerrainControls(),document.dispatchEvent(new CustomEvent("mapReady"))})),window.mapInstance=mapInstance,mapInstance}function addCyclingMarkers(){Object.entries(cyclingPoints).forEach((([e,t])=>{const n=document.createElement("div");n.className="cycling-marker",n.style.backgroundImage=`url(/images/summits/${e}.jpg)`,n.style.width="30px",n.style.height="30px",n.style.backgroundSize="cover",n.style.borderRadius="50%",n.style.border="2px solid #1F497D",n.style.cursor="pointer";const a=e.replace(/([A-Z])/g," $1").replace(/^./,(e=>e.toUpperCase())).replace(/([a-z])([A-Z])/g,"$1 $2"),o=new mapboxgl.Marker(n).setLngLat(t).setPopup(new mapboxgl.Popup({offset:25}).setHTML(`<h3>${a}</h3><p>Altitude: ??? m</p>`)).addTo(mapInstance);getElevation(t).then((n=>{if(n&&n.data&&n.data.geometry&&n.data.geometry.coordinates){const i=Math.round(n.data.geometry.coordinates[0][2]);o.setPopup(new mapboxgl.Popup({offset:25}).setHTML(`\n            <h3>${a}</h3>\n            <p>Altitude: ${i} m</p>\n            <button class="btn btn-sm btn-primary show-col-detail" data-col="${e}">D\xe9tails</button>\n          `)),o.getElement().addEventListener("click",(()=>{setTimeout((()=>{const n=document.querySelector(`.show-col-detail[data-col="${e}"]`);n&&n.addEventListener("click",(()=>showColDetails(e,t,i)))}),100)}))}}))}))}function showColDetails(e,t,n){window.weatherModule?window.weatherModule.fetchCurrentWeather(t[1],t[0]).then((a=>{createColModal(e,t,n,a)})).catch((a=>{createColModal(e,t,n)})):createColModal(e,t,n)}function createColModal(e,t,n,a=null){const o=e.replace(/([A-Z])/g," $1").replace(/^./,(e=>e.toUpperCase())).replace(/([a-z])([A-Z])/g,"$1 $2"),i=document.createElement("div");i.className="col-detail-modal";let s="";if(a){const e=Math.round(a.main.temp),t=a.weather[0].description,n=Math.round(3.6*a.wind.speed),o=getWindDirection(a.wind.deg);s=`\n      <div class="col-weather">\n        <h4>Conditions actuelles</h4>\n        <div class="weather-details">\n          <div class="weather-icon">\n            <img src="https://openweathermap.org/img/wn/${a.weather[0].icon}@2x.png" alt="${t}">\n          </div>\n          <div class="weather-data">\n            <div class="temp">${e}\xb0C</div>\n            <div class="description">${t}</div>\n            <div class="wind">Vent: ${n} km/h ${o}</div>\n          </div>\n        </div>\n      </div>\n    `}let r="";window.stravaIntegration&&window.stravaIntegration.fetchSegmentsNearby&&(r='\n      <div class="col-strava">\n        <h4>Segments Strava</h4>\n        <div id="col-strava-segments">\n          <p>Chargement des segments...</p>\n        </div>\n      </div>\n    ');const l=`https://www.google.com/maps/dir/?api=1&destination=${t[1]},${t[0]}&travelmode=driving`;i.innerHTML=`\n    <div class="col-detail-content">\n      <div class="col-detail-header">\n        <h3>${o}</h3>\n        <button class="close-modal">&times;</button>\n      </div>\n      <div class="col-detail-body">\n        <div class="col-image">\n          <img src="/images/summits/${e}.jpg" alt="${o}" onerror="this.src='/images/default-col.jpg'">\n        </div>\n        <div class="col-info">\n          <p><strong>Altitude:</strong> ${n} m</p>\n          <p><strong>Coordonn\xe9es:</strong> ${t[1].toFixed(4)}, ${t[0].toFixed(4)}</p>\n          <div class="col-actions">\n            <a href="${l}" target="_blank" class="btn btn-sm btn-outline-primary">\n              <i class="fas fa-directions"></i> S'y rendre\n            </a>\n            <button class="btn btn-sm btn-outline-primary show-elevation-profile" data-col="${e}">\n              <i class="fas fa-mountain"></i> Profil d'\xe9l\xe9vation\n            </button>\n          </div>\n        </div>\n        ${s}\n        ${r}\n      </div>\n    </div>\n  `,document.body.appendChild(i);const d=i.querySelector(".close-modal");d&&d.addEventListener("click",(()=>{document.body.removeChild(i)}));const c=i.querySelector(".show-elevation-profile");c&&c.addEventListener("click",(()=>{showElevationProfile(e,t)})),window.stravaIntegration&&window.stravaIntegration.fetchSegmentsNearby&&window.stravaIntegration.fetchSegmentsNearby(t[1],t[0],1e3).then((e=>{const t=i.querySelector("#col-strava-segments");if(t&&e&&e.length>0){t.innerHTML="";const n=document.createElement("ul");n.className="segments-list",e.slice(0,5).forEach((e=>{const t=document.createElement("li");t.className="segment-item",t.innerHTML=`\n              <div class="segment-name">${e.name}</div>\n              <div class="segment-stats">\n                <span><i class="fas fa-ruler-horizontal"></i> ${(e.distance/1e3).toFixed(1)} km</span>\n                <span><i class="fas fa-mountain"></i> ${Math.round(e.total_elevation_gain)} m</span>\n                <span><i class="fas fa-trophy"></i> KOM: ${formatDuration(e.xoms.kom)}</span>\n              </div>\n            `,n.appendChild(t)})),t.appendChild(n)}else t&&(t.innerHTML="<p>Aucun segment trouv\xe9 \xe0 proximit\xe9.</p>")})).catch((e=>{const t=i.querySelector("#col-strava-segments");t&&(t.innerHTML="<p>Impossible de charger les segments Strava.</p>")}))}function showElevationProfile(e,t){const n=document.createElement("div");n.className="elevation-profile-modal",n.innerHTML=`\n    <div class="elevation-profile-content">\n      <div class="elevation-profile-header">\n        <h3>Profil d'\xe9l\xe9vation - ${e.replace(/([A-Z])/g," $1").replace(/^./,(e=>e.toUpperCase()))}</h3>\n        <button class="close-modal">&times;</button>\n      </div>\n      <div class="elevation-profile-body">\n        <div class="elevation-options">\n          <select id="elevation-route-select">\n            <option value="north">Versant Nord</option>\n            <option value="south">Versant Sud</option>\n            <option value="east">Versant Est</option>\n            <option value="west">Versant Ouest</option>\n          </select>\n          <div class="elevation-stats" id="elevation-stats"></div>\n        </div>\n        <div id="elevation-chart" style="width: 100%; height: 300px;"></div>\n      </div>\n    </div>\n  `,document.body.appendChild(n);const a=n.querySelector(".close-modal");a&&a.addEventListener("click",(()=>{document.body.removeChild(n)}));const o=n.querySelector("#elevation-route-select");if(o){const e=e=>{const t=n.querySelector("#elevation-stats"),a=n.querySelector("#elevation-chart");t&&(t.innerHTML='<div class="loading-spinner"></div>'),setTimeout((()=>{const e=8+4*Math.random(),n=500+300*Math.random(),o=6+3*Math.random(),i=o+3+4*Math.random();t&&(t.innerHTML=`\n            <div class="stat-item">\n              <div class="stat-value">${e.toFixed(1)} km</div>\n              <div class="stat-label">Distance</div>\n            </div>\n            <div class="stat-item">\n              <div class="stat-value">${Math.round(n)} m</div>\n              <div class="stat-label">D\xe9nivel\xe9</div>\n            </div>\n            <div class="stat-item">\n              <div class="stat-value">${o.toFixed(1)}%</div>\n              <div class="stat-label">Pente moyenne</div>\n            </div>\n            <div class="stat-item">\n              <div class="stat-value">${i.toFixed(1)}%</div>\n              <div class="stat-label">Pente max</div>\n            </div>\n          `);const s=Math.ceil(10*e),r=[];let l=altitude-n;for(let t=0;t<=s;t++){const a=t/s*e,o=t/s,i=l+o*n+20*Math.sin(o*Math.PI*3);r.push({distance:a,elevation:i})}a&&window.d3?drawElevationChart(a,r):a&&(a.innerHTML=`\n            <div class="elevation-chart-placeholder">\n              <div style="width: 100%; height: 100%; background: linear-gradient(to top right, #ddd, #fff); position: relative;">\n                <svg width="100%" height="100%" viewBox="0 0 100 100" preserveAspectRatio="none">\n                  <path d="M0,100 L10,80 L20,85 L30,70 L40,75 L50,60 L60,50 L70,40 L80,30 L90,25 L100,10" stroke="#1F497D" stroke-width="3" fill="none"></path>\n                </svg>\n                <div style="position: absolute; bottom: 10px; left: 10px;">0 km</div>\n                <div style="position: absolute; bottom: 10px; right: 10px;">${e.toFixed(1)} km</div>\n                <div style="position: absolute; top: 10px; left: 10px;">${Math.round(altitude)} m</div>\n                <div style="position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%);">Distance (km)</div>\n                <div style="position: absolute; top: 50%; left: 10px; transform: translateY(-50%); writing-mode: vertical-rl; text-orientation: mixed;">Altitude (m)</div>\n              </div>\n            </div>\n          `)}),1e3)};e(o.value),o.addEventListener("change",(()=>{e(o.value)}))}}function getWindDirection(e){return["N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSO","SO","OSO","O","ONO","NO","NNO"][Math.round(e/22.5)%16]}function formatDuration(e){const t=Math.floor(e/3600),n=Math.floor(e%3600/60);return t>0?`${t}h ${n}m`:`${n}m`}function drawElevationChart(e,t){e.innerHTML="";const n=20,a=30,o=30,i=40,s=e.clientWidth-i-a,r=e.clientHeight-n-o,l=d3.select(e).append("svg").attr("width",s+i+a).attr("height",r+n+o).append("g").attr("transform",`translate(${i},${n})`),d=d3.scaleLinear().domain([0,d3.max(t,(e=>e.distance))]).range([0,s]),c=d3.scaleLinear().domain([.9*d3.min(t,(e=>e.elevation)),1.1*d3.max(t,(e=>e.elevation))]).range([r,0]),p=d3.line().x((e=>d(e.distance))).y((e=>c(e.elevation))).curve(d3.curveMonotoneX);l.append("g").attr("transform",`translate(0,${r})`).call(d3.axisBottom(d).ticks(5).tickFormat((e=>`${e} km`))),l.append("g").call(d3.axisLeft(c).ticks(5).tickFormat((e=>`${Math.round(e)} m`))),l.append("path").datum(t).attr("fill","none").attr("stroke","#1F497D").attr("stroke-width",3).attr("d",p),l.append("path").datum(t).attr("fill","rgba(31, 73, 125, 0.2)").attr("d",d3.area().x((e=>d(e.distance))).y0(r).y1((e=>c(e.elevation))).curve(d3.curveMonotoneX));const m=findMaxGradientPoints(t);l.selectAll(".max-gradient-point").data(m).enter().append("circle").attr("class","max-gradient-point").attr("cx",(e=>d(e.distance))).attr("cy",(e=>c(e.elevation))).attr("r",4).attr("fill","#E63946"),m.forEach((e=>{l.append("g").attr("class","max-gradient-label").attr("transform",`translate(${d(e.distance)},${c(e.elevation)-15})`).append("text").attr("text-anchor","middle").attr("font-size","10px").attr("font-weight","bold").text(`${e.gradient.toFixed(1)}%`)}))}function findMaxGradientPoints(e){const t=[];for(let n=1;n<e.length;n++){const a=1e3*(e[n].distance-e[n-1].distance),o=(e[n].elevation-e[n-1].elevation)/a*100;t.push({index:n,gradient:o,distance:e[n].distance,elevation:e[n].elevation})}return t.sort(((e,t)=>t.gradient-e.gradient)),t.slice(0,3)}function setupTerrainControls(){mapInstance.getSource("mapbox-dem")||(mapInstance.addSource("mapbox-dem",{type:"raster-dem",url:"mapbox://mapbox.mapbox-terrain-dem-v1",tileSize:512,maxzoom:14}),mapInstance.setTerrain({source:"mapbox-dem",exaggeration:1.5}),mapInstance.addLayer({id:"sky",type:"sky",paint:{"sky-type":"atmosphere","sky-atmosphere-sun":[0,0],"sky-atmosphere-sun-intensity":15}}))}function calculateRoute(e,t,n=[]){const a={start:e,end:t,waypoints:n};return fetch("/api/routes/calculate",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}).then((e=>{if(!e.ok)throw new Error("Erreur lors du calcul de l'itin\xe9raire");return e.json()})).then((e=>{if(e.success&&e.data)return displayRoute(e.data),e.data;throw new Error("Donn\xe9es d'itin\xe9raire invalides")}))}function displayRoute(e){if(currentRouteLayer&&mapInstance.getLayer("route")&&(mapInstance.removeLayer("route"),mapInstance.removeSource("route")),mapInstance.addSource("route",{type:"geojson",data:e}),mapInstance.addLayer({id:"route",type:"line",source:"route",layout:{"line-join":"round","line-cap":"round"},paint:{"line-color":"#FF6B35","line-width":5,"line-opacity":.8}}),currentRouteLayer="route",e.features&&e.features.length>0){const t=e.features[0].geometry.coordinates,n=t.reduce(((e,t)=>e.extend(t)),new mapboxgl.LngLatBounds(t[0],t[0]));mapInstance.fitBounds(n,{padding:40,bearing:0,maxZoom:14})}if(e.features&&e.features[0].properties){const t=e.features[0].properties,n=(t.summary.distance/1e3).toFixed(2),a=Math.round(t.summary.duration/60),o=t.summary.ascent||0,i=t.summary.descent||0,s=`\n      <div class="route-info">\n        <h3>D\xe9tails de l'itin\xe9raire</h3>\n        <ul>\n          <li><strong>Distance:</strong> ${n} km</li>\n          <li><strong>Dur\xe9e estim\xe9e:</strong> ${a} min</li>\n          <li><strong>D\xe9nivel\xe9 positif:</strong> ${Math.round(o)} m</li>\n          <li><strong>D\xe9nivel\xe9 n\xe9gatif:</strong> ${Math.round(i)} m</li>\n        </ul>\n      </div>\n    `,r=document.getElementById("route-info");r&&(r.innerHTML=s)}}function getElevation(e){return fetch("/api/routes/elevation",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({points:[e]})}).then((e=>{if(!e.ok)throw new Error("Erreur lors de la r\xe9cup\xe9ration de l'\xe9l\xe9vation");return e.json()})).then((e=>{if(e.success)return e;throw new Error("Donn\xe9es d'\xe9l\xe9vation invalides")}))}function calculateIsochrone(e,t,n="time"){const a={center:e,range:t,rangeType:n};return fetch("/api/routes/isochrone",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}).then((e=>{if(!e.ok)throw new Error("Erreur lors du calcul de la zone accessible");return e.json()})).then((e=>{if(e.success&&e.data)return displayIsochrone(e.data,t),e.data;throw new Error("Donn\xe9es d'isochrone invalides")}))}function displayIsochrone(e,t){if(mapInstance.getLayer("isochrone")&&(mapInstance.removeLayer("isochrone"),mapInstance.removeSource("isochrone")),mapInstance.addSource("isochrone",{type:"geojson",data:e}),mapInstance.addLayer({id:"isochrone",type:"fill",source:"isochrone",layout:{},paint:{"fill-color":"#3A6EA5","fill-opacity":.3,"fill-outline-color":"#1F497D"}}),e.features&&e.features.length>0){const n=e.features[0].geometry.coordinates[0],a=n.reduce(((e,t)=>e.extend(t)),new mapboxgl.LngLatBounds(n[0],n[0]));mapInstance.fitBounds(a,{padding:40});const o=e.features[0].properties.center;(new mapboxgl.Popup).setLngLat(o).setHTML(`<h3>Zone accessible</h3><p>\xc0 ${t} minutes de v\xe9lo</p>`).addTo(mapInstance)}}window.cyclingMap={initMap:initMap,calculateRoute:calculateRoute,displayRoute:displayRoute,calculateIsochrone:calculateIsochrone,cyclingPoints:cyclingPoints};